import {
  __require
} from "./chunk-7D4SUZUM.js";

// node_modules/@vladmandic/face-api/dist/face-api.esm.js
var vR = Object.defineProperty;
var wR = ((e17) => typeof __require != "undefined" ? __require : typeof Proxy != "undefined" ? new Proxy(e17, { get: (t, n) => (typeof __require != "undefined" ? __require : t)[n] }) : e17)(function(e17) {
  if (typeof __require != "undefined") return __require.apply(this, arguments);
  throw Error('Dynamic require of "' + e17 + '" is not supported');
});
var ax = (e17, t) => {
  for (var n in t) vR(e17, n, { get: t[n], enumerable: true });
};
var Pe = {};
ax(Pe, { Abs: () => Yl, Acos: () => Ni, Acosh: () => Ti, AdadeltaOptimizer: () => Vw, AdagradOptimizer: () => Uw, AdamOptimizer: () => Gw, AdamaxOptimizer: () => Hw, Add: () => vs, AddN: () => Ci, All: () => Zl, Any: () => Jl, ArgMax: () => Ql, ArgMin: () => eu, Asin: () => Ei, Asinh: () => _i, Atan: () => Ai, Atan2: () => $i, Atanh: () => Fi, AvgPool: () => Di, AvgPool3D: () => tu, AvgPool3DGrad: () => Rc, AvgPoolGrad: () => Dc, BackendWasm: () => L$, BatchMatMul: () => Ri, BatchToSpaceND: () => nu, Bincount: () => au, BitwiseAnd: () => ru, BroadcastArgs: () => Mc, BroadcastTo: () => HS, Callback: () => PC, CallbackList: () => A2, Cast: () => Mi, Ceil: () => Oi, ClipByValue: () => ws, Complex: () => wm, ComplexAbs: () => Oc, Concat: () => su, Conv2D: () => Pi, Conv2DBackpropFilter: () => km, Conv2DBackpropInput: () => Li, Conv3D: () => zi, Conv3DBackpropFilterV2: () => iu, Conv3DBackpropInputV2: () => ou, Cos: () => Wi, Cosh: () => Bi, CropAndResize: () => uu, Cumprod: () => lu, Cumsum: () => Vi, CustomCallback: () => $2, DataStorage: () => ym, DenseBincount: () => Pc, DepthToSpace: () => pu, DepthwiseConv2dNative: () => Ui, DepthwiseConv2dNativeBackpropFilter: () => Im, DepthwiseConv2dNativeBackpropInput: () => Sm, Diag: () => Lc, Dilation2D: () => Gi, Dilation2DBackpropFilter: () => Rl, Dilation2DBackpropInput: () => Dl, Draw: () => Nm, ENV: () => Tv, EarlyStopping: () => LC, Einsum: () => Tm, Elu: () => ji, EluGrad: () => cu, Environment: () => US, Equal: () => du, Erf: () => qi, Exp: () => Ki, ExpandDims: () => hu, Expm1: () => Xi, FFT: () => Cm, Fill: () => zc, FlipLeftRight: () => mu, Floor: () => Yi, FloorDiv: () => Zi, FromPixels: () => Hh, FusedBatchNorm: () => Ji, FusedConv2D: () => oi, FusedDepthwiseConv2D: () => li, GPGPUContext: () => Wh, GatherNd: () => gu, GatherV2: () => fu, GraphModel: () => F1, Greater: () => bu, GreaterEqual: () => Qi, History: () => F2, IFFT: () => Em, Identity: () => eo, Imag: () => _m, InputSpec: () => zt, IsFinite: () => to, IsInf: () => no, IsNan: () => ao, KernelBackend: () => Fc, LRN: () => oo, LRNGrad: () => Su, LayerVariable: () => k2, LayersModel: () => Er, LeakyRelu: () => ro, Less: () => yu, LessEqual: () => xu, LinSpace: () => vu, Log: () => so, Log1p: () => io, LogSoftmax: () => qS, LogicalAnd: () => wu, LogicalNot: () => ku, LogicalOr: () => Iu, LogicalXor: () => jS, LowerBound: () => dM, MathBackendCPU: () => R1, MathBackendWebGL: () => lk, MatrixBandPart: () => hM, Max: () => lo, MaxPool: () => po, MaxPool3D: () => Nu, MaxPool3DGrad: () => Bc, MaxPoolGrad: () => Wc, MaxPoolWithArgmax: () => Vc, Maximum: () => uo, Mean: () => co, Min: () => ho, Minimum: () => mo, MirrorPad: () => fo, Mod: () => go, MomentumOptimizer: () => jw, Multinomial: () => Tu, Multiply: () => bo, Neg: () => Cu, NonMaxSuppressionV3: () => _u, NonMaxSuppressionV4: () => Au, NonMaxSuppressionV5: () => Fu, NotEqual: () => Eu, OP_SCOPE_SUFFIX: () => Fv, OneHot: () => yo, OnesLike: () => $u, Optimizer: () => Rr, OptimizerConstructors: () => t2, Pack: () => Du, PadV2: () => xo, Pool: () => mM, Pow: () => vo, Prelu: () => wo, Prod: () => ko, RMSPropOptimizer: () => qw, RNN: () => Mr, RaggedGather: () => Am, RaggedRange: () => Fm, RaggedTensorToTensor: () => $m, Range: () => Uc, Rank: () => kx, Real: () => Dm, RealDiv: () => Hi, Reciprocal: () => Io, Reduction: () => kn, Relu: () => So, Relu6: () => Co, Reshape: () => Ru, ResizeBilinear: () => To, ResizeBilinearGrad: () => Ou, ResizeNearestNeighbor: () => No, ResizeNearestNeighborGrad: () => Mu, Reverse: () => Eo, RotateWithOffset: () => Zu, Round: () => _o, Rsqrt: () => Ao, SGDOptimizer: () => ff, ScatterNd: () => Pu, SearchSorted: () => zu, Select: () => Wu, Selu: () => Fo, Sequential: () => Ef, Sigmoid: () => Mo, Sign: () => Ro, Sin: () => $o, Sinh: () => Do, Slice: () => Bu, Softmax: () => zo, Softplus: () => Oo, SpaceToBatchND: () => Vu, SparseFillEmptyRows: () => Gc, SparseReshape: () => Gu, SparseSegmentMean: () => Hc, SparseSegmentSum: () => jc, SparseToDense: () => Hu, SplitV: () => Uu, Sqrt: () => Po, Square: () => qc, SquaredDifference: () => Wo, StaticRegexReplace: () => Kc, Step: () => Is, StridedSlice: () => ju, StringNGrams: () => Xc, StringSplit: () => Yc, StringToHashBucketFast: () => Zc, Sub: () => Bo, Sum: () => Lo, SymbolicTensor: () => Ha, Tan: () => Vo, Tanh: () => Uo, Tensor: () => Ce, TensorBuffer: () => Wt, TensorScatterUpdate: () => Lu, Tile: () => ks, TopK: () => qu, Transform: () => Ku, Transpose: () => Cr, Unique: () => Jc, Unpack: () => Xu, UnsortedSegmentSum: () => Qc, UpperBound: () => fM, Variable: () => os, ZerosLike: () => Yu, _FusedMatMul: () => ii, abs: () => Lt, acos: () => Pv, acosh: () => Lv, add: () => X, addN: () => vN, all: () => Lm, any: () => yc, argMax: () => di, argMin: () => zv, asin: () => Wv, asinh: () => Bv, atan: () => Vv, atan2: () => Uv, atanh: () => Gv, avgPool: () => ya, avgPool3d: () => jv, backend: () => Dv, backend_util: () => T, basicLSTMCell: () => SN, batchNorm: () => Ns, batchNorm2d: () => qv, batchNorm3d: () => Kv, batchNorm4d: () => Xv, batchToSpaceND: () => id, bincount: () => Yv, bitwiseAnd: () => NN, booleanMaskAsync: () => mT, broadcastArgs: () => TN, broadcastTo: () => ai, broadcast_util: () => Ju, browser: () => qo, buffer: () => Oe, callbacks: () => dq, cast: () => re, ceil: () => Zv, clipByValue: () => an, clone: () => sr, complex: () => _r, concat: () => et, concat1d: () => Jv, concat2d: () => Qv, concat3d: () => ew, concat4d: () => tw, constraints: () => T2, conv1d: () => zm, conv2d: () => $t, conv2dTranspose: () => Wm, conv3d: () => aw, conv3dTranspose: () => rw, copyRegisteredKernels: () => xM, cos: () => od, cosh: () => Bm, cosineWindow: () => pf, cumprod: () => wc, cumsum: () => Vm, customGrad: () => pr, data: () => lE, denseBincount: () => Xh, deprecationWarn: () => $v, depthToSpace: () => sw, depthwiseConv2d: () => Ts, deregisterOp: () => fq, device_util: () => ad, diag: () => EN, dilation2d: () => iw, disableDeprecationWarnings: () => ZM, dispose: () => Ee, disposeVariables: () => JM, div: () => he, divNoNan: () => ow, dot: () => lw, dropout: () => Pw, einsum: () => Zs, elu: () => Qu, enableDebugMode: () => YM, enableProdMode: () => XM, enclosingPowerOfTwo: () => Lw, engine: () => Ta, ensureShape: () => AN, env: () => G, equal: () => Jn, erf: () => Um, euclideanNorm: () => cw, exp: () => dn, expandDims: () => Gt, expm1: () => dw, eye: () => Gm, fft: () => bd, fill: () => yn, findBackend: () => rO, findBackendFactory: () => sO, floor: () => tp, floorDiv: () => Pm, forceHalfFloat: () => $A, fused: () => Vl, gather: () => np, gatherND: () => yT, gather_util: () => Yw, getBackend: () => oN, getGradient: () => vx, getKernel: () => fc, getKernelsForBackend: () => jh, getThreadsCount: () => _fe, gpgpu_util: () => uA, grad: () => P3, grads: () => L3, greater: () => Cn, greaterEqual: () => $r, ifft: () => Bl, imag: () => ld, image: () => Zn, inTopKAsync: () => xT, initializers: () => C2, input: () => j2, io: () => jt, irfft: () => af, isFinite: () => hw, isInf: () => mw, isNaN: () => fw, keep: () => Ht, kernel_impls: () => mr, layers: () => E2, leakyRelu: () => ud, less: () => Pl, lessEqual: () => Cs, linalg: () => Bw, linspace: () => MN, loadGraphModel: () => w5, loadGraphModelSync: () => k5, loadLayersModel: () => oj, localResponseNormalization: () => gw, log: () => Qn, log1p: () => pd, logSigmoid: () => bw, logSoftmax: () => jm, logSumExp: () => cd, logicalAnd: () => _a, logicalNot: () => dd, logicalOr: () => qm, logicalXor: () => yw, losses: () => FT, lowerBound: () => PN, matMul: () => $e, math: () => VT, max: () => ma, maxPool: () => Dt, maxPool3d: () => xw, maxPoolWithArgmax: () => LN, maximum: () => hr, mean: () => Ct, memory: () => Kh, meshgrid: () => zN, metrics: () => RC, min: () => Ol, minimum: () => ds, mirrorPad: () => vw, mod: () => ww, model: () => pj, models: () => MC, moments: () => hd, movingAverage: () => fT, mul: () => z, multiRNNCell: () => WN, multinomial: () => BN, neg: () => yt, nextFrame: () => Zw, norm: () => ep, notEqual: () => fi, oneHot: () => Ll, ones: () => Pn, onesLike: () => ea, op: () => L, outerProduct: () => VN, pad: () => xa, pad1d: () => UN, pad2d: () => GN, pad3d: () => HN, pad4d: () => jN, pool: () => kw, pow: () => ur, prelu: () => fd, print: () => Ov, prod: () => Iw, profile: () => QM, raggedGather: () => qN, raggedRange: () => KN, raggedTensorToTensor: () => XN, rand: () => YN, randomGamma: () => eT, randomNormal: () => Xm, randomStandardNormal: () => tT, randomUniform: () => Es, randomUniformInt: () => nT, range: () => gi, ready: () => nO, real: () => zl, reciprocal: () => Ew, registerBackend: () => Om, registerCallbackConstructor: () => dj, registerGradient: () => KS, registerKernel: () => ed, registerOp: () => mq, regularizers: () => OC, relu: () => Ke, relu6: () => Ym, removeBackend: () => aO, reshape: () => W, reverse: () => ba, reverse1d: () => aT, reverse2d: () => rT, reverse3d: () => sT, reverse4d: () => iT, rfft: () => yd, round: () => Zm, rsqrt: () => Jm, scalar: () => xe, scatterND: () => gT, scatter_util: () => sf, searchSorted: () => Km, selu: () => Qm, separableConv2d: () => _s, sequential: () => cj, serialization: () => ne, setBackend: () => tO, setPlatform: () => iO, setThreadsCount: () => Efe, setWasmPath: () => Tfe, setWasmPaths: () => Cfe, setWebGLContext: () => D_, setdiff1dAsync: () => oT, shared: () => M1, sigmoid: () => ha, sign: () => _w, signal: () => AT, sin: () => ef, sinh: () => tf, slice: () => Ve, slice1d: () => gd, slice2d: () => nf, slice3d: () => Ho, slice4d: () => Wl, slice_util: () => Kt, softmax: () => qa, softplus: () => Go, spaceToBatchND: () => md, sparse: () => $T, sparseToDense: () => bT, spectral: () => _T, split: () => Ln, sqrt: () => rn, square: () => pt, squaredDifference: () => rf, squeeze: () => As, stack: () => At, step: () => jo, stridedSlice: () => Aw, string: () => DT, sub: () => pe, sum: () => fe, sumOutType: () => Mm, tan: () => Fw, tanh: () => cs, tensor: () => bn, tensor1d: () => je, tensor2d: () => Ea, tensor3d: () => xd, tensor4d: () => Fa, tensor5d: () => lT, tensor6d: () => uT, tensorScatterUpdate: () => cT, tensor_util: () => Wa, test_util: () => ZN, tidy: () => O, tile: () => On, time: () => eO, topk: () => Dw, train: () => Xs, transpose: () => De, truncatedNormal: () => lf, unique: () => Rw, unregisterGradient: () => yM, unregisterKernel: () => bM, unsortedSegmentSum: () => uf, unstack: () => dt, upcastType: () => fa, upperBound: () => dT, util: () => w, valueAndGrad: () => z3, valueAndGrads: () => W3, variable: () => Mw, variableGrads: () => ON, version: () => Ofe, version_converter: () => S5, version_core: () => p4, version_cpu: () => NK, version_layers: () => v0, version_wasm: () => Afe, version_webgl: () => mee, webgl: () => fee, webgl_util: () => $_, where: () => nn, whereAsync: () => Ow, zeros: () => It, zerosLike: () => qe });
var kR = Object.create;
var kv = Object.defineProperty;
var IR = Object.getOwnPropertyDescriptor;
var SR = Object.getOwnPropertyNames;
var NR = Object.getPrototypeOf;
var TR = Object.prototype.hasOwnProperty;
var Vt = (e17, t) => () => (t || e17((t = { exports: {} }).exports, t), t.exports);
var _e = (e17, t) => {
  for (var n in t) kv(e17, n, { get: t[n], enumerable: true });
};
var CR = (e17, t, n, a) => {
  if (t && typeof t == "object" || typeof t == "function") for (let r of SR(t)) !TR.call(e17, r) && r !== n && kv(e17, r, { get: () => t[r], enumerable: !(a = IR(t, r)) || a.enumerable });
  return e17;
};
var xs = (e17, t, n) => (n = e17 != null ? kR(NR(e17)) : {}, CR(t || !e17 || !e17.__esModule ? kv(n, "default", { value: e17, enumerable: true }) : n, e17));
var ER = Vt((e17, t) => {
  t.exports = a;
  var n = null;
  try {
    n = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])), {}).exports;
  } catch (S) {
  }
  function a(S, M, B) {
    this.low = S | 0, this.high = M | 0, this.unsigned = !!B;
  }
  a.prototype.__isLong__, Object.defineProperty(a.prototype, "__isLong__", { value: true });
  function r(S) {
    return (S && S.__isLong__) === true;
  }
  a.isLong = r;
  var s = {}, i = {};
  function o(S, M) {
    var B, U, H;
    return M ? (S >>>= 0, (H = 0 <= S && S < 256) && (U = i[S], U) ? U : (B = u(S, (S | 0) < 0 ? -1 : 0, true), H && (i[S] = B), B)) : (S |= 0, (H = -128 <= S && S < 128) && (U = s[S], U) ? U : (B = u(S, S < 0 ? -1 : 0, false), H && (s[S] = B), B));
  }
  a.fromInt = o;
  function l(S, M) {
    if (isNaN(S)) return M ? v : x;
    if (M) {
      if (S < 0) return v;
      if (S >= g) return F;
    } else {
      if (S <= -b) return D;
      if (S + 1 >= b) return _;
    }
    return S < 0 ? l(-S, M).neg() : u(S % f | 0, S / f | 0, M);
  }
  a.fromNumber = l;
  function u(S, M, B) {
    return new a(S, M, B);
  }
  a.fromBits = u;
  var p = Math.pow;
  function d(S, M, B) {
    if (S.length === 0) throw Error("empty string");
    if (S === "NaN" || S === "Infinity" || S === "+Infinity" || S === "-Infinity") return x;
    if (typeof M == "number" ? (B = M, M = false) : M = !!M, B = B || 10, B < 2 || 36 < B) throw RangeError("radix");
    var U;
    if ((U = S.indexOf("-")) > 0) throw Error("interior hyphen");
    if (U === 0) return d(S.substring(1), M, B).neg();
    for (var H = l(p(B, 8)), q = x, K = 0; K < S.length; K += 8) {
      var Z = Math.min(8, S.length - K), J = parseInt(S.substring(K, K + Z), B);
      if (Z < 8) {
        var ee = l(p(B, Z));
        q = q.mul(ee).add(l(J));
      } else q = q.mul(H), q = q.add(l(J));
    }
    return q.unsigned = M, q;
  }
  a.fromString = d;
  function c(S, M) {
    return typeof S == "number" ? l(S, M) : typeof S == "string" ? d(S, M) : u(S.low, S.high, typeof M == "boolean" ? M : S.unsigned);
  }
  a.fromValue = c;
  var h = 65536, m = 1 << 24, f = h * h, g = f * f, b = g / 2, y = o(m), x = o(0);
  a.ZERO = x;
  var v = o(0, true);
  a.UZERO = v;
  var I = o(1);
  a.ONE = I;
  var N = o(1, true);
  a.UONE = N;
  var C = o(-1);
  a.NEG_ONE = C;
  var _ = u(-1, 2147483647, false);
  a.MAX_VALUE = _;
  var F = u(-1, -1, true);
  a.MAX_UNSIGNED_VALUE = F;
  var D = u(0, -2147483648, false);
  a.MIN_VALUE = D;
  var $ = a.prototype;
  $.toInt = function() {
    return this.unsigned ? this.low >>> 0 : this.low;
  }, $.toNumber = function() {
    return this.unsigned ? (this.high >>> 0) * f + (this.low >>> 0) : this.high * f + (this.low >>> 0);
  }, $.toString = function(S) {
    if (S = S || 10, S < 2 || 36 < S) throw RangeError("radix");
    if (this.isZero()) return "0";
    if (this.isNegative()) if (this.eq(D)) {
      var M = l(S), B = this.div(M), U = B.mul(M).sub(this);
      return B.toString(S) + U.toInt().toString(S);
    } else return "-" + this.neg().toString(S);
    for (var H = l(p(S, 6), this.unsigned), q = this, K = ""; ; ) {
      var Z = q.div(H), J = q.sub(Z.mul(H)).toInt() >>> 0, ee = J.toString(S);
      if (q = Z, q.isZero()) return ee + K;
      for (; ee.length < 6; ) ee = "0" + ee;
      K = "" + ee + K;
    }
  }, $.getHighBits = function() {
    return this.high;
  }, $.getHighBitsUnsigned = function() {
    return this.high >>> 0;
  }, $.getLowBits = function() {
    return this.low;
  }, $.getLowBitsUnsigned = function() {
    return this.low >>> 0;
  }, $.getNumBitsAbs = function() {
    if (this.isNegative()) return this.eq(D) ? 64 : this.neg().getNumBitsAbs();
    for (var S = this.high != 0 ? this.high : this.low, M = 31; M > 0 && !(S & 1 << M); M--) ;
    return this.high != 0 ? M + 33 : M + 1;
  }, $.isZero = function() {
    return this.high === 0 && this.low === 0;
  }, $.eqz = $.isZero, $.isNegative = function() {
    return !this.unsigned && this.high < 0;
  }, $.isPositive = function() {
    return this.unsigned || this.high >= 0;
  }, $.isOdd = function() {
    return (this.low & 1) === 1;
  }, $.isEven = function() {
    return (this.low & 1) === 0;
  }, $.equals = function(S) {
    return r(S) || (S = c(S)), this.unsigned !== S.unsigned && this.high >>> 31 === 1 && S.high >>> 31 === 1 ? false : this.high === S.high && this.low === S.low;
  }, $.eq = $.equals, $.notEquals = function(S) {
    return !this.eq(S);
  }, $.neq = $.notEquals, $.ne = $.notEquals, $.lessThan = function(S) {
    return this.comp(S) < 0;
  }, $.lt = $.lessThan, $.lessThanOrEqual = function(S) {
    return this.comp(S) <= 0;
  }, $.lte = $.lessThanOrEqual, $.le = $.lessThanOrEqual, $.greaterThan = function(S) {
    return this.comp(S) > 0;
  }, $.gt = $.greaterThan, $.greaterThanOrEqual = function(S) {
    return this.comp(S) >= 0;
  }, $.gte = $.greaterThanOrEqual, $.ge = $.greaterThanOrEqual, $.compare = function(S) {
    if (r(S) || (S = c(S)), this.eq(S)) return 0;
    var M = this.isNegative(), B = S.isNegative();
    return M && !B ? -1 : !M && B ? 1 : this.unsigned ? S.high >>> 0 > this.high >>> 0 || S.high === this.high && S.low >>> 0 > this.low >>> 0 ? -1 : 1 : this.sub(S).isNegative() ? -1 : 1;
  }, $.comp = $.compare, $.negate = function() {
    return !this.unsigned && this.eq(D) ? D : this.not().add(I);
  }, $.neg = $.negate, $.add = function(S) {
    r(S) || (S = c(S));
    var M = this.high >>> 16, B = this.high & 65535, U = this.low >>> 16, H = this.low & 65535, q = S.high >>> 16, K = S.high & 65535, Z = S.low >>> 16, J = S.low & 65535, ee = 0, ae = 0, te = 0, se = 0;
    return se += H + J, te += se >>> 16, se &= 65535, te += U + Z, ae += te >>> 16, te &= 65535, ae += B + K, ee += ae >>> 16, ae &= 65535, ee += M + q, ee &= 65535, u(te << 16 | se, ee << 16 | ae, this.unsigned);
  }, $.subtract = function(S) {
    return r(S) || (S = c(S)), this.add(S.neg());
  }, $.sub = $.subtract, $.multiply = function(S) {
    if (this.isZero()) return x;
    if (r(S) || (S = c(S)), n) {
      var M = n.mul(this.low, this.high, S.low, S.high);
      return u(M, n.get_high(), this.unsigned);
    }
    if (S.isZero()) return x;
    if (this.eq(D)) return S.isOdd() ? D : x;
    if (S.eq(D)) return this.isOdd() ? D : x;
    if (this.isNegative()) return S.isNegative() ? this.neg().mul(S.neg()) : this.neg().mul(S).neg();
    if (S.isNegative()) return this.mul(S.neg()).neg();
    if (this.lt(y) && S.lt(y)) return l(this.toNumber() * S.toNumber(), this.unsigned);
    var B = this.high >>> 16, U = this.high & 65535, H = this.low >>> 16, q = this.low & 65535, K = S.high >>> 16, Z = S.high & 65535, J = S.low >>> 16, ee = S.low & 65535, ae = 0, te = 0, se = 0, ie = 0;
    return ie += q * ee, se += ie >>> 16, ie &= 65535, se += H * ee, te += se >>> 16, se &= 65535, se += q * J, te += se >>> 16, se &= 65535, te += U * ee, ae += te >>> 16, te &= 65535, te += H * J, ae += te >>> 16, te &= 65535, te += q * Z, ae += te >>> 16, te &= 65535, ae += B * ee + U * J + H * Z + q * K, ae &= 65535, u(se << 16 | ie, ae << 16 | te, this.unsigned);
  }, $.mul = $.multiply, $.divide = function(S) {
    if (r(S) || (S = c(S)), S.isZero()) throw Error("division by zero");
    if (n) {
      if (!this.unsigned && this.high === -2147483648 && S.low === -1 && S.high === -1) return this;
      var M = (this.unsigned ? n.div_u : n.div_s)(this.low, this.high, S.low, S.high);
      return u(M, n.get_high(), this.unsigned);
    }
    if (this.isZero()) return this.unsigned ? v : x;
    var B, U, H;
    if (this.unsigned) {
      if (S.unsigned || (S = S.toUnsigned()), S.gt(this)) return v;
      if (S.gt(this.shru(1))) return N;
      H = v;
    } else {
      if (this.eq(D)) {
        if (S.eq(I) || S.eq(C)) return D;
        if (S.eq(D)) return I;
        var q = this.shr(1);
        return B = q.div(S).shl(1), B.eq(x) ? S.isNegative() ? I : C : (U = this.sub(S.mul(B)), H = B.add(U.div(S)), H);
      } else if (S.eq(D)) return this.unsigned ? v : x;
      if (this.isNegative()) return S.isNegative() ? this.neg().div(S.neg()) : this.neg().div(S).neg();
      if (S.isNegative()) return this.div(S.neg()).neg();
      H = x;
    }
    for (U = this; U.gte(S); ) {
      B = Math.max(1, Math.floor(U.toNumber() / S.toNumber()));
      for (var K = Math.ceil(Math.log(B) / Math.LN2), Z = K <= 48 ? 1 : p(2, K - 48), J = l(B), ee = J.mul(S); ee.isNegative() || ee.gt(U); ) B -= Z, J = l(B, this.unsigned), ee = J.mul(S);
      J.isZero() && (J = I), H = H.add(J), U = U.sub(ee);
    }
    return H;
  }, $.div = $.divide, $.modulo = function(S) {
    if (r(S) || (S = c(S)), n) {
      var M = (this.unsigned ? n.rem_u : n.rem_s)(this.low, this.high, S.low, S.high);
      return u(M, n.get_high(), this.unsigned);
    }
    return this.sub(this.div(S).mul(S));
  }, $.mod = $.modulo, $.rem = $.modulo, $.not = function() {
    return u(~this.low, ~this.high, this.unsigned);
  }, $.and = function(S) {
    return r(S) || (S = c(S)), u(this.low & S.low, this.high & S.high, this.unsigned);
  }, $.or = function(S) {
    return r(S) || (S = c(S)), u(this.low | S.low, this.high | S.high, this.unsigned);
  }, $.xor = function(S) {
    return r(S) || (S = c(S)), u(this.low ^ S.low, this.high ^ S.high, this.unsigned);
  }, $.shiftLeft = function(S) {
    return r(S) && (S = S.toInt()), (S &= 63) === 0 ? this : S < 32 ? u(this.low << S, this.high << S | this.low >>> 32 - S, this.unsigned) : u(0, this.low << S - 32, this.unsigned);
  }, $.shl = $.shiftLeft, $.shiftRight = function(S) {
    return r(S) && (S = S.toInt()), (S &= 63) === 0 ? this : S < 32 ? u(this.low >>> S | this.high << 32 - S, this.high >> S, this.unsigned) : u(this.high >> S - 32, this.high >= 0 ? 0 : -1, this.unsigned);
  }, $.shr = $.shiftRight, $.shiftRightUnsigned = function(S) {
    if (r(S) && (S = S.toInt()), S &= 63, S === 0) return this;
    var M = this.high;
    if (S < 32) {
      var B = this.low;
      return u(B >>> S | M << 32 - S, M >>> S, this.unsigned);
    } else return S === 32 ? u(M, 0, this.unsigned) : u(M >>> S - 32, 0, this.unsigned);
  }, $.shru = $.shiftRightUnsigned, $.shr_u = $.shiftRightUnsigned, $.toSigned = function() {
    return this.unsigned ? u(this.low, this.high, false) : this;
  }, $.toUnsigned = function() {
    return this.unsigned ? this : u(this.low, this.high, true);
  }, $.toBytes = function(S) {
    return S ? this.toBytesLE() : this.toBytesBE();
  }, $.toBytesLE = function() {
    var S = this.high, M = this.low;
    return [M & 255, M >>> 8 & 255, M >>> 16 & 255, M >>> 24, S & 255, S >>> 8 & 255, S >>> 16 & 255, S >>> 24];
  }, $.toBytesBE = function() {
    var S = this.high, M = this.low;
    return [S >>> 24, S >>> 16 & 255, S >>> 8 & 255, S & 255, M >>> 24, M >>> 16 & 255, M >>> 8 & 255, M & 255];
  }, a.fromBytes = function(S, M, B) {
    return B ? a.fromBytesLE(S, M) : a.fromBytesBE(S, M);
  }, a.fromBytesLE = function(S, M) {
    return new a(S[0] | S[1] << 8 | S[2] << 16 | S[3] << 24, S[4] | S[5] << 8 | S[6] << 16 | S[7] << 24, M);
  }, a.fromBytesBE = function(S, M) {
    return new a(S[4] << 24 | S[5] << 16 | S[6] << 8 | S[7], S[0] << 24 | S[1] << 16 | S[2] << 8 | S[3], M);
  };
});
var _R = Vt(() => {
});
var AR = Vt(() => {
});
var FR = Vt((e17, t) => {
  (function(n, a, r) {
    function s(u) {
      var p = this, d = l();
      p.next = function() {
        var c = 2091639 * p.s0 + p.c * 23283064365386963e-26;
        return p.s0 = p.s1, p.s1 = p.s2, p.s2 = c - (p.c = c | 0);
      }, p.c = 1, p.s0 = d(" "), p.s1 = d(" "), p.s2 = d(" "), p.s0 -= d(u), p.s0 < 0 && (p.s0 += 1), p.s1 -= d(u), p.s1 < 0 && (p.s1 += 1), p.s2 -= d(u), p.s2 < 0 && (p.s2 += 1), d = null;
    }
    function i(u, p) {
      return p.c = u.c, p.s0 = u.s0, p.s1 = u.s1, p.s2 = u.s2, p;
    }
    function o(u, p) {
      var d = new s(u), c = p && p.state, h = d.next;
      return h.int32 = function() {
        return d.next() * 4294967296 | 0;
      }, h.double = function() {
        return h() + (h() * 2097152 | 0) * 11102230246251565e-32;
      }, h.quick = h, c && (typeof c == "object" && i(c, d), h.state = function() {
        return i(d, {});
      }), h;
    }
    function l() {
      var u = 4022871197, p = function(d) {
        d = String(d);
        for (var c = 0; c < d.length; c++) {
          u += d.charCodeAt(c);
          var h = 0.02519603282416938 * u;
          u = h >>> 0, h -= u, h *= u, u = h >>> 0, h -= u, u += h * 4294967296;
        }
        return (u >>> 0) * 23283064365386963e-26;
      };
      return p;
    }
    a && a.exports ? a.exports = o : r && r.amd ? r(function() {
      return o;
    }) : this.alea = o;
  })(e17, typeof t == "object" && t, typeof define == "function" && define);
});
var $R = Vt((e17, t) => {
  (function(n, a, r) {
    function s(l) {
      var u = this, p = "";
      u.x = 0, u.y = 0, u.z = 0, u.w = 0, u.next = function() {
        var c = u.x ^ u.x << 11;
        return u.x = u.y, u.y = u.z, u.z = u.w, u.w ^= u.w >>> 19 ^ c ^ c >>> 8;
      }, l === (l | 0) ? u.x = l : p += l;
      for (var d = 0; d < p.length + 64; d++) u.x ^= p.charCodeAt(d) | 0, u.next();
    }
    function i(l, u) {
      return u.x = l.x, u.y = l.y, u.z = l.z, u.w = l.w, u;
    }
    function o(l, u) {
      var p = new s(l), d = u && u.state, c = function() {
        return (p.next() >>> 0) / 4294967296;
      };
      return c.double = function() {
        do
          var h = p.next() >>> 11, m = (p.next() >>> 0) / 4294967296, f = (h + m) / (1 << 21);
        while (f === 0);
        return f;
      }, c.int32 = p.next, c.quick = c, d && (typeof d == "object" && i(d, p), c.state = function() {
        return i(p, {});
      }), c;
    }
    a && a.exports ? a.exports = o : r && r.amd ? r(function() {
      return o;
    }) : this.xor128 = o;
  })(e17, typeof t == "object" && t, typeof define == "function" && define);
});
var DR = Vt((e17, t) => {
  (function(n, a, r) {
    function s(l) {
      var u = this, p = "";
      u.next = function() {
        var c = u.x ^ u.x >>> 2;
        return u.x = u.y, u.y = u.z, u.z = u.w, u.w = u.v, (u.d = u.d + 362437 | 0) + (u.v = u.v ^ u.v << 4 ^ (c ^ c << 1)) | 0;
      }, u.x = 0, u.y = 0, u.z = 0, u.w = 0, u.v = 0, l === (l | 0) ? u.x = l : p += l;
      for (var d = 0; d < p.length + 64; d++) u.x ^= p.charCodeAt(d) | 0, d == p.length && (u.d = u.x << 10 ^ u.x >>> 4), u.next();
    }
    function i(l, u) {
      return u.x = l.x, u.y = l.y, u.z = l.z, u.w = l.w, u.v = l.v, u.d = l.d, u;
    }
    function o(l, u) {
      var p = new s(l), d = u && u.state, c = function() {
        return (p.next() >>> 0) / 4294967296;
      };
      return c.double = function() {
        do
          var h = p.next() >>> 11, m = (p.next() >>> 0) / 4294967296, f = (h + m) / (1 << 21);
        while (f === 0);
        return f;
      }, c.int32 = p.next, c.quick = c, d && (typeof d == "object" && i(d, p), c.state = function() {
        return i(p, {});
      }), c;
    }
    a && a.exports ? a.exports = o : r && r.amd ? r(function() {
      return o;
    }) : this.xorwow = o;
  })(e17, typeof t == "object" && t, typeof define == "function" && define);
});
var RR = Vt((e17, t) => {
  (function(n, a, r) {
    function s(l) {
      var u = this;
      u.next = function() {
        var d = u.x, c = u.i, h, m, f;
        return h = d[c], h ^= h >>> 7, m = h ^ h << 24, h = d[c + 1 & 7], m ^= h ^ h >>> 10, h = d[c + 3 & 7], m ^= h ^ h >>> 3, h = d[c + 4 & 7], m ^= h ^ h << 7, h = d[c + 7 & 7], h = h ^ h << 13, m ^= h ^ h << 9, d[c] = m, u.i = c + 1 & 7, m;
      };
      function p(d, c) {
        var h, m, f = [];
        if (c === (c | 0)) m = f[0] = c;
        else for (c = "" + c, h = 0; h < c.length; ++h) f[h & 7] = f[h & 7] << 15 ^ c.charCodeAt(h) + f[h + 1 & 7] << 13;
        for (; f.length < 8; ) f.push(0);
        for (h = 0; h < 8 && f[h] === 0; ++h) ;
        for (h == 8 ? m = f[7] = -1 : m = f[h], d.x = f, d.i = 0, h = 256; h > 0; --h) d.next();
      }
      p(u, l);
    }
    function i(l, u) {
      return u.x = l.x.slice(), u.i = l.i, u;
    }
    function o(l, u) {
      l == null && (l = +/* @__PURE__ */ new Date());
      var p = new s(l), d = u && u.state, c = function() {
        return (p.next() >>> 0) / 4294967296;
      };
      return c.double = function() {
        do
          var h = p.next() >>> 11, m = (p.next() >>> 0) / 4294967296, f = (h + m) / (1 << 21);
        while (f === 0);
        return f;
      }, c.int32 = p.next, c.quick = c, d && (d.x && i(d, p), c.state = function() {
        return i(p, {});
      }), c;
    }
    a && a.exports ? a.exports = o : r && r.amd ? r(function() {
      return o;
    }) : this.xorshift7 = o;
  })(e17, typeof t == "object" && t, typeof define == "function" && define);
});
var MR = Vt((e17, t) => {
  (function(n, a, r) {
    function s(l) {
      var u = this;
      u.next = function() {
        var d = u.w, c = u.X, h = u.i, m, f;
        return u.w = d = d + 1640531527 | 0, f = c[h + 34 & 127], m = c[h = h + 1 & 127], f ^= f << 13, m ^= m << 17, f ^= f >>> 15, m ^= m >>> 12, f = c[h] = f ^ m, u.i = h, f + (d ^ d >>> 16) | 0;
      };
      function p(d, c) {
        var h, m, f, g, b, y = [], x = 128;
        for (c === (c | 0) ? (m = c, c = null) : (c = c + "\0", m = 0, x = Math.max(x, c.length)), f = 0, g = -32; g < x; ++g) c && (m ^= c.charCodeAt((g + 32) % c.length)), g === 0 && (b = m), m ^= m << 10, m ^= m >>> 15, m ^= m << 4, m ^= m >>> 13, g >= 0 && (b = b + 1640531527 | 0, h = y[g & 127] ^= m + b, f = h == 0 ? f + 1 : 0);
        for (f >= 128 && (y[(c && c.length || 0) & 127] = -1), f = 127, g = 4 * 128; g > 0; --g) m = y[f + 34 & 127], h = y[f = f + 1 & 127], m ^= m << 13, h ^= h << 17, m ^= m >>> 15, h ^= h >>> 12, y[f] = m ^ h;
        d.w = b, d.X = y, d.i = f;
      }
      p(u, l);
    }
    function i(l, u) {
      return u.i = l.i, u.w = l.w, u.X = l.X.slice(), u;
    }
    function o(l, u) {
      l == null && (l = +/* @__PURE__ */ new Date());
      var p = new s(l), d = u && u.state, c = function() {
        return (p.next() >>> 0) / 4294967296;
      };
      return c.double = function() {
        do
          var h = p.next() >>> 11, m = (p.next() >>> 0) / 4294967296, f = (h + m) / (1 << 21);
        while (f === 0);
        return f;
      }, c.int32 = p.next, c.quick = c, d && (d.X && i(d, p), c.state = function() {
        return i(p, {});
      }), c;
    }
    a && a.exports ? a.exports = o : r && r.amd ? r(function() {
      return o;
    }) : this.xor4096 = o;
  })(e17, typeof t == "object" && t, typeof define == "function" && define);
});
var OR = Vt((e17, t) => {
  (function(n, a, r) {
    function s(l) {
      var u = this, p = "";
      u.next = function() {
        var c = u.b, h = u.c, m = u.d, f = u.a;
        return c = c << 25 ^ c >>> 7 ^ h, h = h - m | 0, m = m << 24 ^ m >>> 8 ^ f, f = f - c | 0, u.b = c = c << 20 ^ c >>> 12 ^ h, u.c = h = h - m | 0, u.d = m << 16 ^ h >>> 16 ^ f, u.a = f - c | 0;
      }, u.a = 0, u.b = 0, u.c = -1640531527, u.d = 1367130551, l === Math.floor(l) ? (u.a = l / 4294967296 | 0, u.b = l | 0) : p += l;
      for (var d = 0; d < p.length + 20; d++) u.b ^= p.charCodeAt(d) | 0, u.next();
    }
    function i(l, u) {
      return u.a = l.a, u.b = l.b, u.c = l.c, u.d = l.d, u;
    }
    function o(l, u) {
      var p = new s(l), d = u && u.state, c = function() {
        return (p.next() >>> 0) / 4294967296;
      };
      return c.double = function() {
        do
          var h = p.next() >>> 11, m = (p.next() >>> 0) / 4294967296, f = (h + m) / (1 << 21);
        while (f === 0);
        return f;
      }, c.int32 = p.next, c.quick = c, d && (typeof d == "object" && i(d, p), c.state = function() {
        return i(p, {});
      }), c;
    }
    a && a.exports ? a.exports = o : r && r.amd ? r(function() {
      return o;
    }) : this.tychei = o;
  })(e17, typeof t == "object" && t, typeof define == "function" && define);
});
var PR = Vt(() => {
});
var LR = Vt((e17, t) => {
  (function(n, a, r) {
    var s = 256, i = 6, o = 52, l = "random", u = r.pow(s, i), p = r.pow(2, o), d = p * 2, c = s - 1, h;
    function m(I, N, C) {
      var _ = [];
      N = N == true ? { entropy: true } : N || {};
      var F = y(b(N.entropy ? [I, v(a)] : I == null ? x() : I, 3), _), D = new f(_), $ = function() {
        for (var S = D.g(i), M = u, B = 0; S < p; ) S = (S + B) * s, M *= s, B = D.g(1);
        for (; S >= d; ) S /= 2, M /= 2, B >>>= 1;
        return (S + B) / M;
      };
      return $.int32 = function() {
        return D.g(4) | 0;
      }, $.quick = function() {
        return D.g(4) / 4294967296;
      }, $.double = $, y(v(D.S), a), (N.pass || C || function(S, M, B, U) {
        return U && (U.S && g(U, D), S.state = function() {
          return g(D, {});
        }), B ? (r[l] = S, M) : S;
      })($, F, "global" in N ? N.global : this == r, N.state);
    }
    function f(I) {
      var N, C = I.length, _ = this, F = 0, D = _.i = _.j = 0, $ = _.S = [];
      for (C || (I = [C++]); F < s; ) $[F] = F++;
      for (F = 0; F < s; F++) $[F] = $[D = c & D + I[F % C] + (N = $[F])], $[D] = N;
      (_.g = function(S) {
        for (var M, B = 0, U = _.i, H = _.j, q = _.S; S--; ) M = q[U = c & U + 1], B = B * s + q[c & (q[U] = q[H = c & H + M]) + (q[H] = M)];
        return _.i = U, _.j = H, B;
      })(s);
    }
    function g(I, N) {
      return N.i = I.i, N.j = I.j, N.S = I.S.slice(), N;
    }
    function b(I, N) {
      var C = [], _ = typeof I, F;
      if (N && _ == "object") for (F in I) try {
        C.push(b(I[F], N - 1));
      } catch (D) {
      }
      return C.length ? C : _ == "string" ? I : I + "\0";
    }
    function y(I, N) {
      for (var C = I + "", _, F = 0; F < C.length; ) N[c & F] = c & (_ ^= N[c & F] * 19) + C.charCodeAt(F++);
      return v(N);
    }
    function x() {
      try {
        var I;
        return h && (I = h.randomBytes) ? I = I(s) : (I = new Uint8Array(s), (n.crypto || n.msCrypto).getRandomValues(I)), v(I);
      } catch (_) {
        var N = n.navigator, C = N && N.plugins;
        return [+/* @__PURE__ */ new Date(), n, C, n.screen, v(a)];
      }
    }
    function v(I) {
      return String.fromCharCode.apply(0, I);
    }
    if (y(r.random(), a), typeof t == "object" && t.exports) {
      t.exports = m;
      try {
        h = PR();
      } catch (I) {
      }
    } else typeof define == "function" && define.amd ? define(function() {
      return m;
    }) : r["seed" + l] = m;
  })(typeof self != "undefined" ? self : e17, [], Math);
});
var bm = Vt((e17, t) => {
  var n = FR(), a = $R(), r = DR(), s = RR(), i = MR(), o = OR(), l = LR();
  l.alea = n, l.xor128 = a, l.xorwow = r, l.xorshift7 = s, l.xor4096 = i, l.tychei = o, t.exports = l;
});
var FS = Vt(() => {
});
var Iv = Vt(() => {
});
var $S = Vt(() => {
});
var zR = Vt(() => {
});
var WR = Vt(() => {
});
var BR = Vt(() => {
});
var VR = Vt((e17, t) => {
  var n = (() => {
    var a = typeof document != "undefined" && document.currentScript ? document.currentScript.src : void 0;
    return typeof __filename != "undefined" && (a = a || __filename), function(r) {
      r = r || {};
      function s() {
        return ue.buffer != Re && ut(ue.buffer), gt;
      }
      function i() {
        return ue.buffer != Re && ut(ue.buffer), Gn;
      }
      function o() {
        return ue.buffer != Re && ut(ue.buffer), Ot;
      }
      function l() {
        return ue.buffer != Re && ut(ue.buffer), un;
      }
      function u() {
        return ue.buffer != Re && ut(ue.buffer), Fn;
      }
      function p() {
        return ue.buffer != Re && ut(ue.buffer), oa;
      }
      function d() {
        return ue.buffer != Re && ut(ue.buffer), $n;
      }
      var c = typeof r != "undefined" ? r : {}, h, m;
      c.ready = new Promise(function(R, j) {
        h = R, m = j;
      });
      var f;
      typeof process != "undefined" && process.listeners && (f = { uncaughtException: process.listeners("uncaughtException"), unhandledRejection: process.listeners("unhandledRejection") });
      var g = Object.assign({}, c), b = [], y = "./this.program", x = (R, j) => {
        throw j;
      }, v = typeof window == "object", I = typeof importScripts == "function", N = typeof process == "object" && typeof process.versions == "object" && typeof process.versions.node == "string", C = c.ENVIRONMENT_IS_PTHREAD || false, _ = "";
      function F(R) {
        return c.locateFile ? c.locateFile(R, _) : _ + R;
      }
      var D, $, S, M;
      function B(R) {
        R instanceof Gs || J("exiting due to exception: " + R);
      }
      if (N) {
        var U = Iv(), H = $S();
        I ? _ = H.dirname(_) + "/" : _ = __dirname + "/", D = (j, le) => (j = gl(j) ? new URL(j) : H.normalize(j), U.readFileSync(j, le ? void 0 : "utf8")), S = (j) => {
          var le = D(j, true);
          return le.buffer || (le = new Uint8Array(le)), le;
        }, $ = (j, le, Ne) => {
          j = gl(j) ? new URL(j) : H.normalize(j), U.readFile(j, function(Me, Fe) {
            Me ? Ne(Me) : le(Fe.buffer);
          });
        }, process.argv.length > 1 && (y = process.argv[1].replace(/\\/g, "/")), b = process.argv.slice(2), process.on("uncaughtException", function(j) {
          if (!(j instanceof Gs)) throw j;
        }), process.on("unhandledRejection", function(j) {
          throw j;
        }), x = (j, le) => {
          if (Ia()) throw process.exitCode = j, le;
          B(le), process.exit(j);
        }, c.inspect = function() {
          return "[Emscripten Module object]";
        };
        let R;
        try {
          R = zR();
        } catch (j) {
          throw console.error('The "worker_threads" module is not supported in this node.js build - perhaps a newer version is needed?'), j;
        }
        global.Worker = R.Worker;
      } else (v || I) && (I ? _ = self.location.href : typeof document != "undefined" && document.currentScript && (_ = document.currentScript.src), typeof a != "undefined" && a && (_ = a), _.indexOf("blob:") !== 0 ? _ = _.substr(0, _.replace(/[?#].*/, "").lastIndexOf("/") + 1) : _ = "", N || (D = (R) => {
        var j = new XMLHttpRequest();
        return j.open("GET", R, false), j.send(null), j.responseText;
      }, I && (S = (R) => {
        var j = new XMLHttpRequest();
        return j.open("GET", R, false), j.responseType = "arraybuffer", j.send(null), new Uint8Array(j.response);
      }), $ = (R, j, le) => {
        var Ne = new XMLHttpRequest();
        Ne.open("GET", R, true), Ne.responseType = "arraybuffer", Ne.onload = () => {
          if (Ne.status == 200 || Ne.status == 0 && Ne.response) {
            j(Ne.response);
            return;
          }
          le();
        }, Ne.onerror = le, Ne.send(null);
      }), M = (R) => document.title = R);
      N && typeof performance == "undefined" && (global.performance = WR().performance);
      var q = console.log.bind(console), K = console.warn.bind(console);
      N && (q = (R) => U.writeSync(1, R + `
`), K = (R) => U.writeSync(2, R + `
`));
      var Z = c.print || q, J = c.printErr || K;
      Object.assign(c, g), g = null, c.arguments && (b = c.arguments), c.thisProgram && (y = c.thisProgram), c.quit && (x = c.quit);
      var ee = 4, ae = Atomics.load, te = Atomics.store, se = Atomics.compareExchange, ie;
      c.wasmBinary && (ie = c.wasmBinary);
      var ve = c.noExitRuntime || true;
      typeof WebAssembly != "object" && Us("no native wasm support detected");
      var ue, ye, ke = false, Se;
      function Le(R, j) {
        R || Us(j);
      }
      var Ue = typeof TextDecoder != "undefined" ? new TextDecoder("utf8") : void 0;
      function mt(R, j, le) {
        j >>>= 0;
        for (var Ne = j + le, Me = j; R[Me] && !(Me >= Ne); ) ++Me;
        if (Me - j > 16 && R.buffer && Ue) return Ue.decode(R.buffer instanceof SharedArrayBuffer ? R.slice(j, Me) : R.subarray(j, Me));
        for (var Fe = ""; j < Me; ) {
          var me = R[j++];
          if (!(me & 128)) {
            Fe += String.fromCharCode(me);
            continue;
          }
          var we = R[j++] & 63;
          if ((me & 224) == 192) {
            Fe += String.fromCharCode((me & 31) << 6 | we);
            continue;
          }
          var Tt = R[j++] & 63;
          if ((me & 240) == 224 ? me = (me & 15) << 12 | we << 6 | Tt : me = (me & 7) << 18 | we << 12 | Tt << 6 | R[j++] & 63, me < 65536) Fe += String.fromCharCode(me);
          else {
            var ua = me - 65536;
            Fe += String.fromCharCode(55296 | ua >> 10, 56320 | ua & 1023);
          }
        }
        return Fe;
      }
      function st(R, j) {
        return R >>>= 0, R ? mt(i(), R, j) : "";
      }
      function tt(R, j, le, Ne) {
        if (le >>>= 0, !(Ne > 0)) return 0;
        for (var Me = le, Fe = le + Ne - 1, me = 0; me < R.length; ++me) {
          var we = R.charCodeAt(me);
          if (we >= 55296 && we <= 57343) {
            var Tt = R.charCodeAt(++me);
            we = 65536 + ((we & 1023) << 10) | Tt & 1023;
          }
          if (we <= 127) {
            if (le >= Fe) break;
            j[le++ >>> 0] = we;
          } else if (we <= 2047) {
            if (le + 1 >= Fe) break;
            j[le++ >>> 0] = 192 | we >> 6, j[le++ >>> 0] = 128 | we & 63;
          } else if (we <= 65535) {
            if (le + 2 >= Fe) break;
            j[le++ >>> 0] = 224 | we >> 12, j[le++ >>> 0] = 128 | we >> 6 & 63, j[le++ >>> 0] = 128 | we & 63;
          } else {
            if (le + 3 >= Fe) break;
            j[le++ >>> 0] = 240 | we >> 18, j[le++ >>> 0] = 128 | we >> 12 & 63, j[le++ >>> 0] = 128 | we >> 6 & 63, j[le++ >>> 0] = 128 | we & 63;
          }
        }
        return j[le >>> 0] = 0, le - Me;
      }
      function nt(R, j, le) {
        return tt(R, i(), j, le);
      }
      var Re, gt, Gn, Ot, ia, un, Fn, oa, $n;
      C && (Re = c.buffer);
      function ut(R) {
        Re = R, c.HEAP8 = gt = new Int8Array(R), c.HEAP16 = Ot = new Int16Array(R), c.HEAP32 = un = new Int32Array(R), c.HEAPU8 = Gn = new Uint8Array(R), c.HEAPU16 = ia = new Uint16Array(R), c.HEAPU32 = Fn = new Uint32Array(R), c.HEAPF32 = oa = new Float32Array(R), c.HEAPF64 = $n = new Float64Array(R);
      }
      var Dn = c.INITIAL_MEMORY || 16777216;
      if (C) ue = c.wasmMemory, Re = c.buffer;
      else if (c.wasmMemory) ue = c.wasmMemory;
      else if (ue = new WebAssembly.Memory({ initial: Dn / 65536, maximum: 65536, shared: true }), !(ue.buffer instanceof SharedArrayBuffer)) throw J("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"), N && J("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)"), Error("bad memory");
      ue && (Re = ue.buffer), Dn = Re.byteLength, ut(Re);
      var Hn, xr = [], ml = [], Za = [], Wp = false;
      function Ia() {
        return ve;
      }
      function Ur() {
        if (c.preRun) for (typeof c.preRun == "function" && (c.preRun = [c.preRun]); c.preRun.length; ) Sg(c.preRun.shift());
        Vp(xr);
      }
      function Jt() {
        Wp = true, !C && Vp(ml);
      }
      function Hd() {
        if (!C) {
          if (c.postRun) for (typeof c.postRun == "function" && (c.postRun = [c.postRun]); c.postRun.length; ) Rk(c.postRun.shift());
          Vp(Za);
        }
      }
      function Sg(R) {
        xr.unshift(R);
      }
      function Ng(R) {
        ml.unshift(R);
      }
      function Rk(R) {
        Za.unshift(R);
      }
      var Gr = 0, fl = null, vr = null;
      function Tg(R) {
        Gr++, c.monitorRunDependencies && c.monitorRunDependencies(Gr);
      }
      function jd(R) {
        if (Gr--, c.monitorRunDependencies && c.monitorRunDependencies(Gr), Gr == 0 && (fl !== null && (clearInterval(fl), fl = null), vr)) {
          var j = vr;
          vr = null, j();
        }
      }
      function Us(R) {
        c.onAbort && c.onAbort(R), R = "Aborted(" + R + ")", J(R), ke = true, Se = 1, R += ". Build with -sASSERTIONS for more info.";
        var j = new WebAssembly.RuntimeError(R);
        throw m(j), j;
      }
      var Cg = "data:application/octet-stream;base64,";
      function qd(R) {
        return R.startsWith(Cg);
      }
      function gl(R) {
        return R.startsWith("file://");
      }
      var gn;
      gn = "tfjs-backend-wasm-threaded-simd.wasm", qd(gn) || (gn = F(gn));
      function Kd(R) {
        try {
          if (R == gn && ie) return new Uint8Array(ie);
          if (S) return S(R);
          throw "both async and sync fetching of the wasm failed";
        } catch (j) {
          Us(j);
        }
      }
      function Eg() {
        if (!ie && (v || I)) {
          if (typeof fetch == "function" && !gl(gn)) return fetch(gn, { credentials: "same-origin" }).then(function(R) {
            if (!R.ok) throw "failed to load wasm binary file at '" + gn + "'";
            return R.arrayBuffer();
          }).catch(function() {
            return Kd(gn);
          });
          if ($) return new Promise(function(R, j) {
            $(gn, function(le) {
              R(new Uint8Array(le));
            }, j);
          });
        }
        return Promise.resolve().then(function() {
          return Kd(gn);
        });
      }
      function _g() {
        var R = { env: oh, wasi_snapshot_preview1: oh };
        function j(me, we) {
          var Tt = me.exports;
          if (c.asm = Tt, Lg(c.asm._emscripten_tls_init), Hn = c.asm.__indirect_function_table, Ng(c.asm.__wasm_call_ctors), ye = we, !C) {
            var ua = Ae.unusedWorkers.length;
            Ae.unusedWorkers.forEach(function(kr) {
              Ae.loadWasmModuleToWorker(kr, function() {
                --ua || jd("wasm-instantiate");
              });
            });
          }
        }
        C || Tg("wasm-instantiate");
        function le(me) {
          j(me.instance, me.module);
        }
        function Ne(me) {
          return Eg().then(function(we) {
            return WebAssembly.instantiate(we, R);
          }).then(function(we) {
            return we;
          }).then(me, function(we) {
            J("failed to asynchronously prepare wasm: " + we), Us(we);
          });
        }
        function Me() {
          return !ie && typeof WebAssembly.instantiateStreaming == "function" && !qd(gn) && !gl(gn) && !N && typeof fetch == "function" ? fetch(gn, { credentials: "same-origin" }).then(function(me) {
            var we = WebAssembly.instantiateStreaming(me, R);
            return we.then(le, function(Tt) {
              return J("wasm streaming compile failed: " + Tt), J("falling back to ArrayBuffer instantiation"), Ne(le);
            });
          }) : Ne(le);
        }
        if (c.instantiateWasm) try {
          var Fe = c.instantiateWasm(R, j);
          return Fe;
        } catch (me) {
          J("Module.instantiateWasm callback failed with error: " + me), m(me);
        }
        return Me().catch(m), {};
      }
      var Mk, Ok, Xd = {};
      function Gs(R) {
        this.name = "ExitStatus", this.message = "Program terminated with exit(" + R + ")", this.status = R;
      }
      function Ag(R) {
        var j = Ae.pthreads[R];
        delete Ae.pthreads[R], j.terminate(), ex(R), Ae.runningWorkers.splice(Ae.runningWorkers.indexOf(j), 1), j.pthread_ptr = 0;
      }
      function Fg(R) {
        var j = Ae.pthreads[R];
        j.postMessage({ cmd: "cancel" });
      }
      function Bp(R) {
        var j = Ae.pthreads[R];
        Le(j), Ae.returnWorkerToPool(j);
      }
      function $g(R) {
        var j = Ae.getNewWorker();
        if (!j) return 6;
        Ae.runningWorkers.push(j), Ae.pthreads[R.pthread_ptr] = j, j.pthread_ptr = R.pthread_ptr;
        var le = { cmd: "run", start_routine: R.startRoutine, arg: R.arg, pthread_ptr: R.pthread_ptr };
        return j.runPthread = () => {
          N && j.ref(), j.postMessage(le, R.transferList), delete j.runPthread;
        }, j.loaded && j.runPthread(), 0;
      }
      var Yd = { varargs: void 0, get: function() {
        Yd.varargs += 4;
        var R = l()[Yd.varargs - 4 >>> 2];
        return R;
      }, getStr: function(R) {
        var j = st(R);
        return j;
      } };
      function Zd(R) {
        if (C) return Hr(1, 1, R);
        Se = R, Ia() || (Ae.terminateAllThreads(), c.onExit && c.onExit(R), ke = true), x(R, new Gs(R));
      }
      function Dg(R, j) {
        if (Se = R, !j && C) throw Qd(R), "unwind";
        Zd(R);
      }
      var Jd = Dg;
      function Rg(R) {
        if (R instanceof Gs || R == "unwind") return Se;
        x(1, R);
      }
      var Ae = { unusedWorkers: [], runningWorkers: [], tlsInitFunctions: [], pthreads: {}, init: function() {
        C ? Ae.initWorker() : Ae.initMainThread();
      }, initMainThread: function() {
        for (var R = 8; R--; ) Ae.allocateUnusedWorker();
      }, initWorker: function() {
        ve = false;
      }, setExitStatus: function(R) {
        Se = R;
      }, terminateAllThreads: function() {
        for (var R of Object.values(Ae.pthreads)) Ae.returnWorkerToPool(R);
        for (var R of Ae.unusedWorkers) R.terminate();
        Ae.unusedWorkers = [];
      }, returnWorkerToPool: function(R) {
        var j = R.pthread_ptr;
        delete Ae.pthreads[j], Ae.unusedWorkers.push(R), Ae.runningWorkers.splice(Ae.runningWorkers.indexOf(R), 1), R.pthread_ptr = 0, N && R.unref(), ex(j);
      }, receiveObjectTransfer: function(R) {
      }, threadInitTLS: function() {
        Ae.tlsInitFunctions.forEach((R) => R());
      }, loadWasmModuleToWorker: function(R, j) {
        R.onmessage = (Fe) => {
          var me = Fe.data, we = me.cmd;
          if (R.pthread_ptr && (Ae.currentProxiedOperationCallerThread = R.pthread_ptr), me.targetThread && me.targetThread != hh()) {
            var Tt = Ae.pthreads[me.targetThread];
            Tt ? Tt.postMessage(me, me.transferList) : J('Internal error! Worker sent a message "' + we + '" to target pthread ' + me.targetThread + ", but that thread no longer exists!"), Ae.currentProxiedOperationCallerThread = void 0;
            return;
          }
          we === "processProxyingQueue" ? Up(me.queue) : we === "spawnThread" ? $g(me) : we === "cleanupThread" ? Bp(me.thread) : we === "killThread" ? Ag(me.thread) : we === "cancelThread" ? Fg(me.thread) : we === "loaded" ? (R.loaded = true, N && R.unref(), j && j(R), R.runPthread && R.runPthread()) : we === "print" ? Z("Thread " + me.threadId + ": " + me.text) : we === "printErr" ? J("Thread " + me.threadId + ": " + me.text) : we === "alert" ? alert("Thread " + me.threadId + ": " + me.text) : me.target === "setimmediate" ? R.postMessage(me) : we === "callHandler" ? c[me.handler](...me.args) : we && J("worker sent an unknown command " + we), Ae.currentProxiedOperationCallerThread = void 0;
        }, R.onerror = (Fe) => {
          var me = "worker sent an error!";
          throw J(me + " " + Fe.filename + ":" + Fe.lineno + ": " + Fe.message), Fe;
        }, N && (R.on("message", function(Fe) {
          R.onmessage({ data: Fe });
        }), R.on("error", function(Fe) {
          R.onerror(Fe);
        }), R.on("detachedExit", function() {
        }));
        var le = [], Ne = ["onExit", "onAbort", "print", "printErr"];
        for (var Me of Ne) c.hasOwnProperty(Me) && le.push(Me);
        R.postMessage({ cmd: "load", handlers: le, urlOrBlob: c.mainScriptUrlOrBlob || a, wasmMemory: ue, wasmModule: ye });
      }, allocateUnusedWorker: function() {
        var R, j = F("tfjs-backend-wasm-threaded-simd.worker.js");
        R = new Worker(j), Ae.unusedWorkers.push(R);
      }, getNewWorker: function() {
        return Ae.unusedWorkers.length == 0 && (Ae.allocateUnusedWorker(), Ae.loadWasmModuleToWorker(Ae.unusedWorkers[0])), Ae.unusedWorkers.pop();
      } };
      c.PThread = Ae;
      function Vp(R) {
        for (; R.length > 0; ) R.shift()(c);
      }
      function Mg() {
        var R = hh(), j = l()[R + 52 >>> 2], le = l()[R + 56 >>> 2], Ne = j - le;
        Vk(j, Ne), mh(j);
      }
      c.establishStackSpace = Mg;
      function Qd(R) {
        if (C) return Hr(2, 0, R);
        try {
          Jd(R);
        } catch (j) {
          Rg(j);
        }
      }
      var bl = [];
      function Og(R) {
        var j = bl[R];
        return j || (R >= bl.length && (bl.length = R + 1), bl[R] = j = Hn.get(R)), j;
      }
      function Pg(R, j) {
        var le = Og(R)(j);
        Ia() ? Ae.setExitStatus(le) : Bk(le);
      }
      c.invokeEntryPoint = Pg;
      function Lg(R) {
        Ae.tlsInitFunctions.push(R);
      }
      function zg(R) {
        Lk(R, !I, 1, !v), Ae.threadInitTLS();
      }
      function Wg(R) {
        C ? postMessage({ cmd: "cleanupThread", thread: R }) : Bp(R);
      }
      function eh(R, j, le, Ne) {
        return C ? Hr(3, 1, R, j, le, Ne) : th(R, j, le, Ne);
      }
      function th(R, j, le, Ne) {
        if (typeof SharedArrayBuffer == "undefined") return J("Current environment does not support SharedArrayBuffer, pthreads are not available!"), 6;
        var Me = [], Fe = 0;
        if (C && (Me.length === 0 || Fe)) return eh(R, j, le, Ne);
        if (Fe) return Fe;
        var me = { startRoutine: le, pthread_ptr: R, arg: Ne, transferList: Me };
        return C ? (me.cmd = "spawnThread", postMessage(me, Me), 0) : $g(me);
      }
      function Bg() {
        return 65536;
      }
      var Vg = true;
      function Ug() {
        return Vg;
      }
      function Up(R) {
        Atomics.store(l(), R >> 2, 1), hh() && Wk(R), Atomics.compareExchange(l(), R >> 2, 1, 0);
      }
      c.executeNotifiedProxyingQueue = Up;
      function Gg(R, j, le, Ne) {
        if (R == j) setTimeout(() => Up(Ne));
        else if (C) postMessage({ targetThread: R, cmd: "processProxyingQueue", queue: Ne });
        else {
          var Me = Ae.pthreads[R];
          if (!Me) return;
          Me.postMessage({ cmd: "processProxyingQueue", queue: Ne });
        }
        return 1;
      }
      function Hg(R, j, le) {
        return -1;
      }
      function jg() {
        Us("");
      }
      function Hs(R) {
        Hs.shown || (Hs.shown = {}), Hs.shown[R] || (Hs.shown[R] = 1, N && (R = "warning: " + R), J(R));
      }
      function qg() {
        N || I || Hs("Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread");
      }
      function Kg() {
        return Date.now();
      }
      function nh() {
        return 4294901760;
      }
      function Xg() {
        return nh();
      }
      var Gp;
      N ? Gp = () => {
        var R = process.hrtime();
        return R[0] * 1e3 + R[1] / 1e6;
      } : Gp = () => performance.timeOrigin + performance.now();
      function Yg(R, j, le) {
        i().copyWithin(R >>> 0, j >>> 0, j + le >>> 0);
      }
      function Zg() {
        return N ? BR().cpus().length : navigator.hardwareConcurrency;
      }
      function Jg(R) {
        var j = tx(), le = R();
        return mh(j), le;
      }
      function Hr(R, j) {
        var le = arguments.length - 2, Ne = arguments;
        return Jg(() => {
          for (var Me = le, Fe = fh(Me * 8), me = Fe >> 3, we = 0; we < le; we++) {
            var Tt = Ne[2 + we];
            d()[me + we >>> 0] = Tt;
          }
          return zk(R, Me, Fe, j);
        });
      }
      var Hp = [];
      function Qg(R, j, le) {
        Hp.length = j;
        for (var Ne = le >> 3, Me = 0; Me < j; Me++) Hp[Me] = d()[Ne + Me >>> 0];
        var Fe = R < 0, me = Fe ? Xd[-R - 1] : lb[R];
        return me.apply(null, Hp);
      }
      function eb(R) {
        try {
          return ue.grow(R - Re.byteLength + 65535 >>> 16), ut(ue.buffer), 1;
        } catch (j) {
        }
      }
      function tb(R) {
        var j = i().length;
        if (R = R >>> 0, R <= j) return false;
        var le = nh();
        if (R > le) return false;
        let Ne = (Tt, ua) => Tt + (ua - Tt % ua) % ua;
        for (var Me = 1; Me <= 4; Me *= 2) {
          var Fe = j * (1 + 0.2 / Me);
          Fe = Math.min(Fe, R + 100663296);
          var me = Math.min(le, Ne(Math.max(R, Fe), 65536)), we = eb(me);
          if (we) return true;
        }
        return false;
      }
      function nb() {
        throw "unwind";
      }
      function ah(R) {
        return C ? Hr(4, 1, R) : 52;
      }
      function rh(R, j, le, Ne, Me) {
        return C ? Hr(5, 1, R, j, le, Ne, Me) : 70;
      }
      var ab = [null, [], []];
      function rb(R, j) {
        var le = ab[R];
        j === 0 || j === 10 ? ((R === 1 ? Z : J)(mt(le, 0)), le.length = 0) : le.push(j);
      }
      function sh(R, j, le, Ne) {
        if (C) return Hr(6, 1, R, j, le, Ne);
        for (var Me = 0, Fe = 0; Fe < le; Fe++) {
          var me = u()[j >>> 2], we = u()[j + 4 >>> 2];
          j += 8;
          for (var Tt = 0; Tt < we; Tt++) rb(R, i()[me + Tt >>> 0]);
          Me += we;
        }
        return u()[Ne >>> 2] = Me, 0;
      }
      function ih(R) {
        var j = c["_" + R];
        return j;
      }
      function sb(R, j) {
        s().set(R, j >>> 0);
      }
      function ib(R, j, le, Ne, Me) {
        var Fe = { string: (pa) => {
          var wl = 0;
          if (pa != null && pa !== 0) {
            var Hk = (pa.length << 2) + 1;
            wl = fh(Hk), nt(pa, wl, Hk);
          }
          return wl;
        }, array: (pa) => {
          var wl = fh(pa.length);
          return sb(pa, wl), wl;
        } };
        function me(pa) {
          return j === "string" ? st(pa) : j === "boolean" ? !!pa : pa;
        }
        var we = ih(R), Tt = [], ua = 0;
        if (Ne) for (var kr = 0; kr < Ne.length; kr++) {
          var Gk = Fe[le[kr]];
          Gk ? (ua === 0 && (ua = tx()), Tt[kr] = Gk(Ne[kr])) : Tt[kr] = Ne[kr];
        }
        var nx = we.apply(null, Tt);
        function xR(pa) {
          return ua !== 0 && mh(ua), me(pa);
        }
        return nx = xR(nx), nx;
      }
      function ob(R, j, le, Ne) {
        le = le || [];
        var Me = le.every((me) => me === "number" || me === "boolean"), Fe = j !== "string";
        return Fe && Me && !Ne ? ih(R) : function() {
          return ib(R, j, le, arguments, Ne);
        };
      }
      Ae.init();
      var lb = [null, Zd, Qd, eh, ah, rh, sh], oh = { __emscripten_init_main_thread_js: zg, __emscripten_thread_cleanup: Wg, __pthread_create_js: th, _emscripten_default_pthread_stack_size: Bg, _emscripten_get_now_is_monotonic: Ug, _emscripten_notify_task_queue: Gg, _emscripten_set_offscreencanvas_size: Hg, abort: jg, emscripten_check_blocking_allowed: qg, emscripten_date_now: Kg, emscripten_get_heap_max: Xg, emscripten_get_now: Gp, emscripten_memcpy_big: Yg, emscripten_num_logical_cores: Zg, emscripten_receive_on_main_thread_js: Qg, emscripten_resize_heap: tb, emscripten_unwind_to_js_event_loop: nb, exit: Jd, fd_close: ah, fd_seek: rh, fd_write: sh, memory: ue || c.wasmMemory }, Pk = _g(), ub = c.___wasm_call_ctors = function() {
        return (ub = c.___wasm_call_ctors = c.asm.__wasm_call_ctors).apply(null, arguments);
      }, pb = c._init = function() {
        return (pb = c._init = c.asm.init).apply(null, arguments);
      }, cb = c._init_with_threads_count = function() {
        return (cb = c._init_with_threads_count = c.asm.init_with_threads_count).apply(null, arguments);
      }, db = c._get_threads_count = function() {
        return (db = c._get_threads_count = c.asm.get_threads_count).apply(null, arguments);
      }, hb = c._register_tensor = function() {
        return (hb = c._register_tensor = c.asm.register_tensor).apply(null, arguments);
      }, mb = c._dispose_data = function() {
        return (mb = c._dispose_data = c.asm.dispose_data).apply(null, arguments);
      }, fb = c._dispose = function() {
        return (fb = c._dispose = c.asm.dispose).apply(null, arguments);
      }, gb = c._Abs = function() {
        return (gb = c._Abs = c.asm.Abs).apply(null, arguments);
      }, bb = c._Acos = function() {
        return (bb = c._Acos = c.asm.Acos).apply(null, arguments);
      }, yb = c._Acosh = function() {
        return (yb = c._Acosh = c.asm.Acosh).apply(null, arguments);
      }, xb = c._Add = function() {
        return (xb = c._Add = c.asm.Add).apply(null, arguments);
      }, vb = c._AddN = function() {
        return (vb = c._AddN = c.asm.AddN).apply(null, arguments);
      }, wb = c._All = function() {
        return (wb = c._All = c.asm.All).apply(null, arguments);
      }, kb = c._Any = function() {
        return (kb = c._Any = c.asm.Any).apply(null, arguments);
      }, Ib = c._ArgMax = function() {
        return (Ib = c._ArgMax = c.asm.ArgMax).apply(null, arguments);
      }, Sb = c._ArgMin = function() {
        return (Sb = c._ArgMin = c.asm.ArgMin).apply(null, arguments);
      }, Nb = c._Asin = function() {
        return (Nb = c._Asin = c.asm.Asin).apply(null, arguments);
      }, Tb = c._Asinh = function() {
        return (Tb = c._Asinh = c.asm.Asinh).apply(null, arguments);
      }, Cb = c._Atan = function() {
        return (Cb = c._Atan = c.asm.Atan).apply(null, arguments);
      }, Eb = c._Atan2 = function() {
        return (Eb = c._Atan2 = c.asm.Atan2).apply(null, arguments);
      }, _b = c._Atanh = function() {
        return (_b = c._Atanh = c.asm.Atanh).apply(null, arguments);
      }, Ab = c._AvgPool = function() {
        return (Ab = c._AvgPool = c.asm.AvgPool).apply(null, arguments);
      }, Fb = c._AvgPool3D = function() {
        return (Fb = c._AvgPool3D = c.asm.AvgPool3D).apply(null, arguments);
      }, $b = c._AvgPool3DGrad = function() {
        return ($b = c._AvgPool3DGrad = c.asm.AvgPool3DGrad).apply(null, arguments);
      }, Db = c._AvgPoolGrad = function() {
        return (Db = c._AvgPoolGrad = c.asm.AvgPoolGrad).apply(null, arguments);
      }, Rb = c._BatchMatMul = function() {
        return (Rb = c._BatchMatMul = c.asm.BatchMatMul).apply(null, arguments);
      }, Mb = c._Bincount = function() {
        return (Mb = c._Bincount = c.asm.Bincount).apply(null, arguments);
      }, Ob = c._BitwiseAnd = function() {
        return (Ob = c._BitwiseAnd = c.asm.BitwiseAnd).apply(null, arguments);
      }, Pb = c._Ceil = function() {
        return (Pb = c._Ceil = c.asm.Ceil).apply(null, arguments);
      }, Lb = c._ClipByValue = function() {
        return (Lb = c._ClipByValue = c.asm.ClipByValue).apply(null, arguments);
      }, zb = c._Conv2D = function() {
        return (zb = c._Conv2D = c.asm.Conv2D).apply(null, arguments);
      }, Wb = c._Conv2DBackpropInput = function() {
        return (Wb = c._Conv2DBackpropInput = c.asm.Conv2DBackpropInput).apply(null, arguments);
      }, Bb = c._Conv3D = function() {
        return (Bb = c._Conv3D = c.asm.Conv3D).apply(null, arguments);
      }, Vb = c._Conv3DBackpropFilterV2 = function() {
        return (Vb = c._Conv3DBackpropFilterV2 = c.asm.Conv3DBackpropFilterV2).apply(null, arguments);
      }, Ub = c._Conv3DBackpropInputV2 = function() {
        return (Ub = c._Conv3DBackpropInputV2 = c.asm.Conv3DBackpropInputV2).apply(null, arguments);
      }, Gb = c._Cos = function() {
        return (Gb = c._Cos = c.asm.Cos).apply(null, arguments);
      }, Hb = c._Cosh = function() {
        return (Hb = c._Cosh = c.asm.Cosh).apply(null, arguments);
      }, jb = c._CropAndResize = function() {
        return (jb = c._CropAndResize = c.asm.CropAndResize).apply(null, arguments);
      }, qb = c._Cumprod = function() {
        return (qb = c._Cumprod = c.asm.Cumprod).apply(null, arguments);
      }, Kb = c._Cumsum = function() {
        return (Kb = c._Cumsum = c.asm.Cumsum).apply(null, arguments);
      }, Xb = c._DenseBincount = function() {
        return (Xb = c._DenseBincount = c.asm.DenseBincount).apply(null, arguments);
      }, Yb = c._DepthToSpace = function() {
        return (Yb = c._DepthToSpace = c.asm.DepthToSpace).apply(null, arguments);
      }, Zb = c._DepthwiseConv2dNative = function() {
        return (Zb = c._DepthwiseConv2dNative = c.asm.DepthwiseConv2dNative).apply(null, arguments);
      }, Jb = c._Diag = function() {
        return (Jb = c._Diag = c.asm.Diag).apply(null, arguments);
      }, Qb = c._Dilation2D = function() {
        return (Qb = c._Dilation2D = c.asm.Dilation2D).apply(null, arguments);
      }, ey = c._Dilation2DBackpropFilter = function() {
        return (ey = c._Dilation2DBackpropFilter = c.asm.Dilation2DBackpropFilter).apply(null, arguments);
      }, ty = c._Dilation2DBackpropInput = function() {
        return (ty = c._Dilation2DBackpropInput = c.asm.Dilation2DBackpropInput).apply(null, arguments);
      }, ny = c._Elu = function() {
        return (ny = c._Elu = c.asm.Elu).apply(null, arguments);
      }, ay = c._EluGrad = function() {
        return (ay = c._EluGrad = c.asm.EluGrad).apply(null, arguments);
      }, ry = c._Equal = function() {
        return (ry = c._Equal = c.asm.Equal).apply(null, arguments);
      }, sy = c._Erf = function() {
        return (sy = c._Erf = c.asm.Erf).apply(null, arguments);
      }, iy = c._Exp = function() {
        return (iy = c._Exp = c.asm.Exp).apply(null, arguments);
      }, oy = c._Expm1 = function() {
        return (oy = c._Expm1 = c.asm.Expm1).apply(null, arguments);
      }, ly = c._FlipLeftRight = function() {
        return (ly = c._FlipLeftRight = c.asm.FlipLeftRight).apply(null, arguments);
      }, uy = c._Floor = function() {
        return (uy = c._Floor = c.asm.Floor).apply(null, arguments);
      }, py = c._FloorDiv = function() {
        return (py = c._FloorDiv = c.asm.FloorDiv).apply(null, arguments);
      }, cy = c._FusedBatchNorm = function() {
        return (cy = c._FusedBatchNorm = c.asm.FusedBatchNorm).apply(null, arguments);
      }, dy = c._FusedConv2D = function() {
        return (dy = c._FusedConv2D = c.asm.FusedConv2D).apply(null, arguments);
      }, hy = c._FusedDepthwiseConv2D = function() {
        return (hy = c._FusedDepthwiseConv2D = c.asm.FusedDepthwiseConv2D).apply(null, arguments);
      }, my = c._Gather = function() {
        return (my = c._Gather = c.asm.Gather).apply(null, arguments);
      }, fy = c._GatherNd = function() {
        return (fy = c._GatherNd = c.asm.GatherNd).apply(null, arguments);
      }, gy = c._Greater = function() {
        return (gy = c._Greater = c.asm.Greater).apply(null, arguments);
      }, by = c._GreaterEqual = function() {
        return (by = c._GreaterEqual = c.asm.GreaterEqual).apply(null, arguments);
      }, yy = c._IsFinite = function() {
        return (yy = c._IsFinite = c.asm.IsFinite).apply(null, arguments);
      }, xy = c._IsInf = function() {
        return (xy = c._IsInf = c.asm.IsInf).apply(null, arguments);
      }, vy = c._IsNan = function() {
        return (vy = c._IsNan = c.asm.IsNan).apply(null, arguments);
      }, wy = c._LRN = function() {
        return (wy = c._LRN = c.asm.LRN).apply(null, arguments);
      }, ky = c._LRNGrad = function() {
        return (ky = c._LRNGrad = c.asm.LRNGrad).apply(null, arguments);
      }, Iy = c._LeakyRelu = function() {
        return (Iy = c._LeakyRelu = c.asm.LeakyRelu).apply(null, arguments);
      }, Sy = c._Less = function() {
        return (Sy = c._Less = c.asm.Less).apply(null, arguments);
      }, Ny = c._LessEqual = function() {
        return (Ny = c._LessEqual = c.asm.LessEqual).apply(null, arguments);
      }, Ty = c._LinSpace = function() {
        return (Ty = c._LinSpace = c.asm.LinSpace).apply(null, arguments);
      }, Cy = c._Log = function() {
        return (Cy = c._Log = c.asm.Log).apply(null, arguments);
      }, Ey = c._Log1p = function() {
        return (Ey = c._Log1p = c.asm.Log1p).apply(null, arguments);
      }, _y = c._LogicalAnd = function() {
        return (_y = c._LogicalAnd = c.asm.LogicalAnd).apply(null, arguments);
      }, Ay = c._LogicalNot = function() {
        return (Ay = c._LogicalNot = c.asm.LogicalNot).apply(null, arguments);
      }, Fy = c._LogicalOr = function() {
        return (Fy = c._LogicalOr = c.asm.LogicalOr).apply(null, arguments);
      }, $y = c._LogicalXor = function() {
        return ($y = c._LogicalXor = c.asm.LogicalXor).apply(null, arguments);
      }, Dy = c._Max = function() {
        return (Dy = c._Max = c.asm.Max).apply(null, arguments);
      }, Ry = c._MaxPool = function() {
        return (Ry = c._MaxPool = c.asm.MaxPool).apply(null, arguments);
      }, My = c._MaxPool3D = function() {
        return (My = c._MaxPool3D = c.asm.MaxPool3D).apply(null, arguments);
      }, Oy = c._MaxPool3DGrad = function() {
        return (Oy = c._MaxPool3DGrad = c.asm.MaxPool3DGrad).apply(null, arguments);
      }, Py = c._MaxPoolGrad = function() {
        return (Py = c._MaxPoolGrad = c.asm.MaxPoolGrad).apply(null, arguments);
      }, Ly = c._MaxPoolWithArgmax = function() {
        return (Ly = c._MaxPoolWithArgmax = c.asm.MaxPoolWithArgmax).apply(null, arguments);
      }, zy = c._Maximum = function() {
        return (zy = c._Maximum = c.asm.Maximum).apply(null, arguments);
      }, Wy = c._Mean = function() {
        return (Wy = c._Mean = c.asm.Mean).apply(null, arguments);
      }, By = c._Min = function() {
        return (By = c._Min = c.asm.Min).apply(null, arguments);
      }, Vy = c._Minimum = function() {
        return (Vy = c._Minimum = c.asm.Minimum).apply(null, arguments);
      }, Uy = c._MirrorPad = function() {
        return (Uy = c._MirrorPad = c.asm.MirrorPad).apply(null, arguments);
      }, Gy = c._Mod = function() {
        return (Gy = c._Mod = c.asm.Mod).apply(null, arguments);
      }, Hy = c._Multinomial = function() {
        return (Hy = c._Multinomial = c.asm.Multinomial).apply(null, arguments);
      }, jy = c._Multiply = function() {
        return (jy = c._Multiply = c.asm.Multiply).apply(null, arguments);
      }, qy = c._Neg = function() {
        return (qy = c._Neg = c.asm.Neg).apply(null, arguments);
      }, Ky = c._NonMaxSuppressionV3 = function() {
        return (Ky = c._NonMaxSuppressionV3 = c.asm.NonMaxSuppressionV3).apply(null, arguments);
      }, Xy = c._NonMaxSuppressionV4 = function() {
        return (Xy = c._NonMaxSuppressionV4 = c.asm.NonMaxSuppressionV4).apply(null, arguments);
      }, lh = c._NonMaxSuppressionV5 = function() {
        return (lh = c._NonMaxSuppressionV5 = c.asm.NonMaxSuppressionV5).apply(null, arguments);
      }, uh = c._NotEqual = function() {
        return (uh = c._NotEqual = c.asm.NotEqual).apply(null, arguments);
      }, jp = c._OneHot = function() {
        return (jp = c._OneHot = c.asm.OneHot).apply(null, arguments);
      }, Yy = c._PadV2 = function() {
        return (Yy = c._PadV2 = c.asm.PadV2).apply(null, arguments);
      }, Zy = c._Pow = function() {
        return (Zy = c._Pow = c.asm.Pow).apply(null, arguments);
      }, yl = c._Prelu = function() {
        return (yl = c._Prelu = c.asm.Prelu).apply(null, arguments);
      }, ph = c._Prod = function() {
        return (ph = c._Prod = c.asm.Prod).apply(null, arguments);
      }, xl = c._RealDiv = function() {
        return (xl = c._RealDiv = c.asm.RealDiv).apply(null, arguments);
      }, vl = c._Reciprocal = function() {
        return (vl = c._Reciprocal = c.asm.Reciprocal).apply(null, arguments);
      }, Jy = c._Relu = function() {
        return (Jy = c._Relu = c.asm.Relu).apply(null, arguments);
      }, Y = c._Relu6 = function() {
        return (Y = c._Relu6 = c.asm.Relu6).apply(null, arguments);
      }, oe = c._ResizeBilinear = function() {
        return (oe = c._ResizeBilinear = c.asm.ResizeBilinear).apply(null, arguments);
      }, Ie = c._ResizeBilinearGrad = function() {
        return (Ie = c._ResizeBilinearGrad = c.asm.ResizeBilinearGrad).apply(null, arguments);
      }, Ye = c._ResizeNearestNeighbor = function() {
        return (Ye = c._ResizeNearestNeighbor = c.asm.ResizeNearestNeighbor).apply(null, arguments);
      }, wt = c._ResizeNearestNeighborGrad = function() {
        return (wt = c._ResizeNearestNeighborGrad = c.asm.ResizeNearestNeighborGrad).apply(null, arguments);
      }, kt = c._Reverse = function() {
        return (kt = c._Reverse = c.asm.Reverse).apply(null, arguments);
      }, Ge = c._RotateWithOffset = function() {
        return (Ge = c._RotateWithOffset = c.asm.RotateWithOffset).apply(null, arguments);
      }, Be = c._Round = function() {
        return (Be = c._Round = c.asm.Round).apply(null, arguments);
      }, Pt = c._Rsqrt = function() {
        return (Pt = c._Rsqrt = c.asm.Rsqrt).apply(null, arguments);
      }, la = c._ScatterNd = function() {
        return (la = c._ScatterNd = c.asm.ScatterNd).apply(null, arguments);
      }, wr = c._SearchSorted = function() {
        return (wr = c._SearchSorted = c.asm.SearchSorted).apply(null, arguments);
      }, ch = c._SelectV2 = function() {
        return (ch = c._SelectV2 = c.asm.SelectV2).apply(null, arguments);
      }, qp = c._Selu = function() {
        return (qp = c._Selu = c.asm.Selu).apply(null, arguments);
      }, Qy = c._Sigmoid = function() {
        return (Qy = c._Sigmoid = c.asm.Sigmoid).apply(null, arguments);
      }, Rn = c._Sign = function() {
        return (Rn = c._Sign = c.asm.Sign).apply(null, arguments);
      }, jr = c._Sin = function() {
        return (jr = c._Sin = c.asm.Sin).apply(null, arguments);
      }, dh = c._Sinh = function() {
        return (dh = c._Sinh = c.asm.Sinh).apply(null, arguments);
      }, BD = c._Softmax = function() {
        return (BD = c._Softmax = c.asm.Softmax).apply(null, arguments);
      }, VD = c._Softplus = function() {
        return (VD = c._Softplus = c.asm.Softplus).apply(null, arguments);
      }, UD = c._SparseFillEmptyRows = function() {
        return (UD = c._SparseFillEmptyRows = c.asm.SparseFillEmptyRows).apply(null, arguments);
      }, GD = c._SparseReshape = function() {
        return (GD = c._SparseReshape = c.asm.SparseReshape).apply(null, arguments);
      }, HD = c._SparseSegmentReduction = function() {
        return (HD = c._SparseSegmentReduction = c.asm.SparseSegmentReduction).apply(null, arguments);
      }, jD = c._SparseToDense = function() {
        return (jD = c._SparseToDense = c.asm.SparseToDense).apply(null, arguments);
      }, qD = c._Sqrt = function() {
        return (qD = c._Sqrt = c.asm.Sqrt).apply(null, arguments);
      }, KD = c._Square = function() {
        return (KD = c._Square = c.asm.Square).apply(null, arguments);
      }, XD = c._SquaredDifference = function() {
        return (XD = c._SquaredDifference = c.asm.SquaredDifference).apply(null, arguments);
      }, YD = c._Step = function() {
        return (YD = c._Step = c.asm.Step).apply(null, arguments);
      }, ZD = c._StridedSlice = function() {
        return (ZD = c._StridedSlice = c.asm.StridedSlice).apply(null, arguments);
      }, JD = c._Sub = function() {
        return (JD = c._Sub = c.asm.Sub).apply(null, arguments);
      }, QD = c._Sum = function() {
        return (QD = c._Sum = c.asm.Sum).apply(null, arguments);
      }, eR = c._Tan = function() {
        return (eR = c._Tan = c.asm.Tan).apply(null, arguments);
      }, tR = c._Tanh = function() {
        return (tR = c._Tanh = c.asm.Tanh).apply(null, arguments);
      }, nR = c._TensorScatterUpdate = function() {
        return (nR = c._TensorScatterUpdate = c.asm.TensorScatterUpdate).apply(null, arguments);
      }, aR = c._Tile = function() {
        return (aR = c._Tile = c.asm.Tile).apply(null, arguments);
      }, rR = c._TopK = function() {
        return (rR = c._TopK = c.asm.TopK).apply(null, arguments);
      }, sR = c._Transform = function() {
        return (sR = c._Transform = c.asm.Transform).apply(null, arguments);
      }, iR = c._Transpose = function() {
        return (iR = c._Transpose = c.asm.Transpose).apply(null, arguments);
      }, oR = c.__FusedMatMul = function() {
        return (oR = c.__FusedMatMul = c.asm._FusedMatMul).apply(null, arguments);
      }, lR = c._malloc = function() {
        return (lR = c._malloc = c.asm.malloc).apply(null, arguments);
      }, uR = c._free = function() {
        return (uR = c._free = c.asm.free).apply(null, arguments);
      }, pR = c.__emscripten_tls_init = function() {
        return (pR = c.__emscripten_tls_init = c.asm._emscripten_tls_init).apply(null, arguments);
      }, hh = c._pthread_self = function() {
        return (hh = c._pthread_self = c.asm.pthread_self).apply(null, arguments);
      }, cR = c.___errno_location = function() {
        return (cR = c.___errno_location = c.asm.__errno_location).apply(null, arguments);
      }, Lk = c.__emscripten_thread_init = function() {
        return (Lk = c.__emscripten_thread_init = c.asm._emscripten_thread_init).apply(null, arguments);
      }, dR = c.__emscripten_thread_crashed = function() {
        return (dR = c.__emscripten_thread_crashed = c.asm._emscripten_thread_crashed).apply(null, arguments);
      }, hR = c._emscripten_main_thread_process_queued_calls = function() {
        return (hR = c._emscripten_main_thread_process_queued_calls = c.asm.emscripten_main_thread_process_queued_calls).apply(null, arguments);
      }, mR = c._emscripten_main_browser_thread_id = function() {
        return (mR = c._emscripten_main_browser_thread_id = c.asm.emscripten_main_browser_thread_id).apply(null, arguments);
      }, zk = c._emscripten_run_in_main_runtime_thread_js = function() {
        return (zk = c._emscripten_run_in_main_runtime_thread_js = c.asm.emscripten_run_in_main_runtime_thread_js).apply(null, arguments);
      }, fR = c._emscripten_dispatch_to_thread_ = function() {
        return (fR = c._emscripten_dispatch_to_thread_ = c.asm.emscripten_dispatch_to_thread_).apply(null, arguments);
      }, Wk = c.__emscripten_proxy_execute_task_queue = function() {
        return (Wk = c.__emscripten_proxy_execute_task_queue = c.asm._emscripten_proxy_execute_task_queue).apply(null, arguments);
      }, ex = c.__emscripten_thread_free_data = function() {
        return (ex = c.__emscripten_thread_free_data = c.asm._emscripten_thread_free_data).apply(null, arguments);
      }, Bk = c.__emscripten_thread_exit = function() {
        return (Bk = c.__emscripten_thread_exit = c.asm._emscripten_thread_exit).apply(null, arguments);
      }, Vk = c._emscripten_stack_set_limits = function() {
        return (Vk = c._emscripten_stack_set_limits = c.asm.emscripten_stack_set_limits).apply(null, arguments);
      }, tx = c.stackSave = function() {
        return (tx = c.stackSave = c.asm.stackSave).apply(null, arguments);
      }, mh = c.stackRestore = function() {
        return (mh = c.stackRestore = c.asm.stackRestore).apply(null, arguments);
      }, fh = c.stackAlloc = function() {
        return (fh = c.stackAlloc = c.asm.stackAlloc).apply(null, arguments);
      }, gR = c.dynCall_iijjiiii = function() {
        return (gR = c.dynCall_iijjiiii = c.asm.dynCall_iijjiiii).apply(null, arguments);
      }, bR = c.dynCall_jiji = function() {
        return (bR = c.dynCall_jiji = c.asm.dynCall_jiji).apply(null, arguments);
      };
      c.keepRuntimeAlive = Ia, c.wasmMemory = ue, c.cwrap = ob, c.ExitStatus = Gs, c.PThread = Ae;
      var gh;
      vr = function R() {
        gh || Uk(), gh || (vr = R);
      };
      function Uk(R) {
        if (R = R || b, Gr > 0) return;
        if (C) {
          h(c), Jt(), startWorker(c);
          return;
        }
        if (Ur(), Gr > 0) return;
        function j() {
          gh || (gh = true, c.calledRun = true, !ke && (Jt(), h(c), c.onRuntimeInitialized && c.onRuntimeInitialized(), Hd()));
        }
        c.setStatus ? (c.setStatus("Running..."), setTimeout(function() {
          setTimeout(function() {
            c.setStatus("");
          }, 1), j();
        }, 1)) : j();
      }
      if (c.preInit) for (typeof c.preInit == "function" && (c.preInit = [c.preInit]); c.preInit.length > 0; ) c.preInit.pop()();
      Uk();
      var bh;
      f && (bh = { uncaughtException: process.listeners("uncaughtException").filter(function(R) {
        return !f.uncaughtException.indexOf(R) > -1;
      }), unhandledRejection: process.listeners("unhandledRejection").filter(function(R) {
        return !f.unhandledRejection.indexOf(R) > -1;
      }) });
      var yh;
      if (typeof WasmBackendModule != "undefined") yh = WasmBackendModule;
      else if (typeof r != "undefined") yh = r;
      else throw new Error("Could not find wasm module in post.js");
      if (bh) {
        var yR = yh._dispose;
        yh._dispose = function() {
          yR(), bh.uncaughtException.forEach(function(R) {
            process.removeListener("uncaughtException", R);
          }), bh.unhandledRejection.forEach(function(R) {
            process.removeListener("unhandledRejection", R);
          });
        };
      }
      return r.ready;
    };
  })();
  typeof e17 == "object" && typeof t == "object" ? t.exports = n : typeof define == "function" && define.amd ? define([], function() {
    return n;
  }) : typeof e17 == "object" && (e17.WasmBackendModuleThreadedSimd = n);
});
var UR = Vt((e17, t) => {
  t.exports.wasmWorkerContents = `"use strict";var Module={};var ENVIRONMENT_IS_NODE=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string";if(ENVIRONMENT_IS_NODE){var nodeWorkerThreads=require("worker_threads");var parentPort=nodeWorkerThreads.parentPort;parentPort.on("message",data=>onmessage({data:data}));var fs=require("fs");Object.assign(global,{self:global,require:require,Module:Module,location:{href:__filename},Worker:nodeWorkerThreads.Worker,importScripts:function(f){(0,eval)(fs.readFileSync(f,"utf8")+"//# sourceURL="+f)},postMessage:function(msg){parentPort.postMessage(msg)},performance:global.performance||{now:function(){return Date.now()}}})}var initializedJS=false;var pendingNotifiedProxyingQueues=[];function threadPrintErr(){var text=Array.prototype.slice.call(arguments).join(" ");if(ENVIRONMENT_IS_NODE){fs.writeSync(2,text+"
");return}console.error(text)}function threadAlert(){var text=Array.prototype.slice.call(arguments).join(" ");postMessage({cmd:"alert",text:text,threadId:Module["_pthread_self"]()})}var err=threadPrintErr;self.alert=threadAlert;Module["instantiateWasm"]=(info,receiveInstance)=>{var instance=new WebAssembly.Instance(Module["wasmModule"],info);receiveInstance(instance);Module["wasmModule"]=null;return instance.exports};self.onunhandledrejection=e=>{throw e.reason??e};self.startWorker=instance=>{Module=instance;postMessage({"cmd":"loaded"})};self.onmessage=e=>{try{if(e.data.cmd==="load"){Module["wasmModule"]=e.data.wasmModule;for(const handler of e.data.handlers){Module[handler]=function(){postMessage({cmd:"callHandler",handler:handler,args:[...arguments]})}}Module["wasmMemory"]=e.data.wasmMemory;Module["buffer"]=Module["wasmMemory"].buffer;Module["ENVIRONMENT_IS_PTHREAD"]=true;if(typeof e.data.urlOrBlob=="string"){importScripts(e.data.urlOrBlob)}else{var objectUrl=URL.createObjectURL(e.data.urlOrBlob);importScripts(objectUrl);URL.revokeObjectURL(objectUrl)}WasmBackendModuleThreadedSimd(Module)}else if(e.data.cmd==="run"){Module["__emscripten_thread_init"](e.data.pthread_ptr,0,0,1);Module["establishStackSpace"]();Module["PThread"].receiveObjectTransfer(e.data);Module["PThread"].threadInitTLS();if(!initializedJS){pendingNotifiedProxyingQueues.forEach(queue=>{Module["executeNotifiedProxyingQueue"](queue)});pendingNotifiedProxyingQueues=[];initializedJS=true}try{Module["invokeEntryPoint"](e.data.start_routine,e.data.arg)}catch(ex){if(ex!="unwind"){if(ex instanceof Module["ExitStatus"]){if(Module["keepRuntimeAlive"]()){}else{Module["__emscripten_thread_exit"](ex.status)}}else{throw ex}}}}else if(e.data.cmd==="cancel"){if(Module["_pthread_self"]()){Module["__emscripten_thread_exit"](-1)}}else if(e.data.target==="setimmediate"){}else if(e.data.cmd==="processProxyingQueue"){if(initializedJS){Module["executeNotifiedProxyingQueue"](e.data.queue)}else{pendingNotifiedProxyingQueues.push(e.data.queue)}}else if(e.data.cmd){err("worker.js received unknown command "+e.data.cmd);err(e.data)}}catch(ex){if(Module["__emscripten_thread_crashed"]){Module["__emscripten_thread_crashed"]()}throw ex}};`;
});
var GR = Vt((e17, t) => {
  var n = (() => {
    var a = typeof document != "undefined" && document.currentScript ? document.currentScript.src : void 0;
    return typeof __filename != "undefined" && (a = a || __filename), function(r) {
      r = r || {};
      var s = typeof r != "undefined" ? r : {}, i, o;
      s.ready = new Promise(function(Y, oe) {
        i = Y, o = oe;
      });
      var l;
      typeof process != "undefined" && process.listeners && (l = { uncaughtException: process.listeners("uncaughtException"), unhandledRejection: process.listeners("unhandledRejection") });
      var u = Object.assign({}, s), p = [], d = "./this.program", c = (Y, oe) => {
        throw oe;
      }, h = typeof window == "object", m = typeof importScripts == "function", f = typeof process == "object" && typeof process.versions == "object" && typeof process.versions.node == "string", g = "";
      function b(Y) {
        return s.locateFile ? s.locateFile(Y, g) : g + Y;
      }
      var y, x, v, I;
      function N(Y) {
        Y instanceof fl || D("exiting due to exception: " + Y);
      }
      if (f) {
        var C = Iv(), _ = $S();
        m ? g = _.dirname(g) + "/" : g = __dirname + "/", y = (Y, oe) => (Y = Ur(Y) ? new URL(Y) : _.normalize(Y), C.readFileSync(Y, oe ? void 0 : "utf8")), v = (Y) => {
          var oe = y(Y, true);
          return oe.buffer || (oe = new Uint8Array(oe)), oe;
        }, x = (Y, oe, Ie) => {
          Y = Ur(Y) ? new URL(Y) : _.normalize(Y), C.readFile(Y, function(Ye, wt) {
            Ye ? Ie(Ye) : oe(wt.buffer);
          });
        }, process.argv.length > 1 && (d = process.argv[1].replace(/\\/g, "/")), p = process.argv.slice(2), process.on("uncaughtException", function(Y) {
          if (!(Y instanceof fl)) throw Y;
        }), process.on("unhandledRejection", function(Y) {
          throw Y;
        }), c = (Y, oe) => {
          if (Gn()) throw process.exitCode = Y, oe;
          N(oe), process.exit(Y);
        }, s.inspect = function() {
          return "[Emscripten Module object]";
        };
      } else (h || m) && (m ? g = self.location.href : typeof document != "undefined" && document.currentScript && (g = document.currentScript.src), a && (g = a), g.indexOf("blob:") !== 0 ? g = g.substr(0, g.replace(/[?#].*/, "").lastIndexOf("/") + 1) : g = "", y = (Y) => {
        var oe = new XMLHttpRequest();
        return oe.open("GET", Y, false), oe.send(null), oe.responseText;
      }, m && (v = (Y) => {
        var oe = new XMLHttpRequest();
        return oe.open("GET", Y, false), oe.responseType = "arraybuffer", oe.send(null), new Uint8Array(oe.response);
      }), x = (Y, oe, Ie) => {
        var Ye = new XMLHttpRequest();
        Ye.open("GET", Y, true), Ye.responseType = "arraybuffer", Ye.onload = () => {
          if (Ye.status == 200 || Ye.status == 0 && Ye.response) {
            oe(Ye.response);
            return;
          }
          Ie();
        }, Ye.onerror = Ie, Ye.send(null);
      }, I = (Y) => document.title = Y);
      var F = s.print || console.log.bind(console), D = s.printErr || console.warn.bind(console);
      Object.assign(s, u), u = null, s.arguments && (p = s.arguments), s.thisProgram && (d = s.thisProgram), s.quit && (c = s.quit);
      var $ = 4, S;
      s.wasmBinary && (S = s.wasmBinary);
      var M = s.noExitRuntime || true;
      typeof WebAssembly != "object" && Za("no native wasm support detected");
      var B, U = false, H;
      function q(Y, oe) {
        Y || Za(oe);
      }
      var K = typeof TextDecoder != "undefined" ? new TextDecoder("utf8") : void 0;
      function Z(Y, oe, Ie) {
        oe >>>= 0;
        for (var Ye = oe + Ie, wt = oe; Y[wt] && !(wt >= Ye); ) ++wt;
        if (wt - oe > 16 && Y.buffer && K) return K.decode(Y.subarray(oe, wt));
        for (var kt = ""; oe < wt; ) {
          var Ge = Y[oe++];
          if (!(Ge & 128)) {
            kt += String.fromCharCode(Ge);
            continue;
          }
          var Be = Y[oe++] & 63;
          if ((Ge & 224) == 192) {
            kt += String.fromCharCode((Ge & 31) << 6 | Be);
            continue;
          }
          var Pt = Y[oe++] & 63;
          if ((Ge & 240) == 224 ? Ge = (Ge & 15) << 12 | Be << 6 | Pt : Ge = (Ge & 7) << 18 | Be << 12 | Pt << 6 | Y[oe++] & 63, Ge < 65536) kt += String.fromCharCode(Ge);
          else {
            var la = Ge - 65536;
            kt += String.fromCharCode(55296 | la >> 10, 56320 | la & 1023);
          }
        }
        return kt;
      }
      function J(Y, oe) {
        return Y >>>= 0, Y ? Z(ie, Y, oe) : "";
      }
      function ee(Y, oe, Ie, Ye) {
        if (Ie >>>= 0, !(Ye > 0)) return 0;
        for (var wt = Ie, kt = Ie + Ye - 1, Ge = 0; Ge < Y.length; ++Ge) {
          var Be = Y.charCodeAt(Ge);
          if (Be >= 55296 && Be <= 57343) {
            var Pt = Y.charCodeAt(++Ge);
            Be = 65536 + ((Be & 1023) << 10) | Pt & 1023;
          }
          if (Be <= 127) {
            if (Ie >= kt) break;
            oe[Ie++ >>> 0] = Be;
          } else if (Be <= 2047) {
            if (Ie + 1 >= kt) break;
            oe[Ie++ >>> 0] = 192 | Be >> 6, oe[Ie++ >>> 0] = 128 | Be & 63;
          } else if (Be <= 65535) {
            if (Ie + 2 >= kt) break;
            oe[Ie++ >>> 0] = 224 | Be >> 12, oe[Ie++ >>> 0] = 128 | Be >> 6 & 63, oe[Ie++ >>> 0] = 128 | Be & 63;
          } else {
            if (Ie + 3 >= kt) break;
            oe[Ie++ >>> 0] = 240 | Be >> 18, oe[Ie++ >>> 0] = 128 | Be >> 12 & 63, oe[Ie++ >>> 0] = 128 | Be >> 6 & 63, oe[Ie++ >>> 0] = 128 | Be & 63;
          }
        }
        return oe[Ie >>> 0] = 0, Ie - wt;
      }
      function ae(Y, oe, Ie) {
        return ee(Y, ie, oe, Ie);
      }
      var te, se, ie, ve, ue, ye, ke, Se, Le;
      function Ue(Y) {
        te = Y, s.HEAP8 = se = new Int8Array(Y), s.HEAP16 = ve = new Int16Array(Y), s.HEAP32 = ye = new Int32Array(Y), s.HEAPU8 = ie = new Uint8Array(Y), s.HEAPU16 = ue = new Uint16Array(Y), s.HEAPU32 = ke = new Uint32Array(Y), s.HEAPF32 = Se = new Float32Array(Y), s.HEAPF64 = Le = new Float64Array(Y);
      }
      var mt = s.INITIAL_MEMORY || 16777216, st, tt = [], nt = [], Re = [], gt = false;
      function Gn() {
        return M;
      }
      function Ot() {
        if (s.preRun) for (typeof s.preRun == "function" && (s.preRun = [s.preRun]); s.preRun.length; ) Fn(s.preRun.shift());
        vr(tt);
      }
      function ia() {
        gt = true, vr(nt);
      }
      function un() {
        if (s.postRun) for (typeof s.postRun == "function" && (s.postRun = [s.postRun]); s.postRun.length; ) $n(s.postRun.shift());
        vr(Re);
      }
      function Fn(Y) {
        tt.unshift(Y);
      }
      function oa(Y) {
        nt.unshift(Y);
      }
      function $n(Y) {
        Re.unshift(Y);
      }
      var ut = 0, Dn = null, Hn = null;
      function xr(Y) {
        ut++, s.monitorRunDependencies && s.monitorRunDependencies(ut);
      }
      function ml(Y) {
        if (ut--, s.monitorRunDependencies && s.monitorRunDependencies(ut), ut == 0 && (Dn !== null && (clearInterval(Dn), Dn = null), Hn)) {
          var oe = Hn;
          Hn = null, oe();
        }
      }
      function Za(Y) {
        s.onAbort && s.onAbort(Y), Y = "Aborted(" + Y + ")", D(Y), U = true, H = 1, Y += ". Build with -sASSERTIONS for more info.";
        var oe = new WebAssembly.RuntimeError(Y);
        throw o(oe), oe;
      }
      var Wp = "data:application/octet-stream;base64,";
      function Ia(Y) {
        return Y.startsWith(Wp);
      }
      function Ur(Y) {
        return Y.startsWith("file://");
      }
      var Jt;
      Jt = "tfjs-backend-wasm.wasm", Ia(Jt) || (Jt = b(Jt));
      function Hd(Y) {
        try {
          if (Y == Jt && S) return new Uint8Array(S);
          if (v) return v(Y);
          throw "both async and sync fetching of the wasm failed";
        } catch (oe) {
          Za(oe);
        }
      }
      function Sg() {
        if (!S && (h || m)) {
          if (typeof fetch == "function" && !Ur(Jt)) return fetch(Jt, { credentials: "same-origin" }).then(function(Y) {
            if (!Y.ok) throw "failed to load wasm binary file at '" + Jt + "'";
            return Y.arrayBuffer();
          }).catch(function() {
            return Hd(Jt);
          });
          if (x) return new Promise(function(Y, oe) {
            x(Jt, function(Ie) {
              Y(new Uint8Array(Ie));
            }, oe);
          });
        }
        return Promise.resolve().then(function() {
          return Hd(Jt);
        });
      }
      function Ng() {
        var Y = { env: Bp, wasi_snapshot_preview1: Bp };
        function oe(Ge, Be) {
          var Pt = Ge.exports;
          s.asm = Pt, B = s.asm.memory, Ue(B.buffer), st = s.asm.__indirect_function_table, oa(s.asm.__wasm_call_ctors), ml("wasm-instantiate");
        }
        xr("wasm-instantiate");
        function Ie(Ge) {
          oe(Ge.instance);
        }
        function Ye(Ge) {
          return Sg().then(function(Be) {
            return WebAssembly.instantiate(Be, Y);
          }).then(function(Be) {
            return Be;
          }).then(Ge, function(Be) {
            D("failed to asynchronously prepare wasm: " + Be), Za(Be);
          });
        }
        function wt() {
          return !S && typeof WebAssembly.instantiateStreaming == "function" && !Ia(Jt) && !Ur(Jt) && !f && typeof fetch == "function" ? fetch(Jt, { credentials: "same-origin" }).then(function(Ge) {
            var Be = WebAssembly.instantiateStreaming(Ge, Y);
            return Be.then(Ie, function(Pt) {
              return D("wasm streaming compile failed: " + Pt), D("falling back to ArrayBuffer instantiation"), Ye(Ie);
            });
          }) : Ye(Ie);
        }
        if (s.instantiateWasm) try {
          var kt = s.instantiateWasm(Y, oe);
          return kt;
        } catch (Ge) {
          D("Module.instantiateWasm callback failed with error: " + Ge), o(Ge);
        }
        return wt().catch(o), {};
      }
      var Rk, Gr;
      function fl(Y) {
        this.name = "ExitStatus", this.message = "Program terminated with exit(" + Y + ")", this.status = Y;
      }
      function vr(Y) {
        for (; Y.length > 0; ) Y.shift()(s);
      }
      function Tg() {
        Za("");
      }
      function jd() {
        return 4294901760;
      }
      function Us() {
        return jd();
      }
      function Cg(Y, oe, Ie) {
        ie.copyWithin(Y >>> 0, oe >>> 0, oe + Ie >>> 0);
      }
      function qd(Y) {
        try {
          return B.grow(Y - te.byteLength + 65535 >>> 16), Ue(B.buffer), 1;
        } catch (oe) {
        }
      }
      function gl(Y) {
        var oe = ie.length;
        Y = Y >>> 0;
        var Ie = jd();
        if (Y > Ie) return false;
        let Ye = (Pt, la) => Pt + (la - Pt % la) % la;
        for (var wt = 1; wt <= 4; wt *= 2) {
          var kt = oe * (1 + 0.2 / wt);
          kt = Math.min(kt, Y + 100663296);
          var Ge = Math.min(Ie, Ye(Math.max(Y, kt), 65536)), Be = qd(Ge);
          if (Be) return true;
        }
        return false;
      }
      var gn = { varargs: void 0, get: function() {
        gn.varargs += 4;
        var Y = ye[gn.varargs - 4 >>> 2];
        return Y;
      }, getStr: function(Y) {
        var oe = J(Y);
        return oe;
      } };
      function Kd(Y) {
        return 52;
      }
      function Eg(Y, oe, Ie, Ye, wt) {
        return 70;
      }
      var _g = [null, [], []];
      function Mk(Y, oe) {
        var Ie = _g[Y];
        oe === 0 || oe === 10 ? ((Y === 1 ? F : D)(Z(Ie, 0)), Ie.length = 0) : Ie.push(oe);
      }
      function Ok(Y, oe, Ie, Ye) {
        for (var wt = 0, kt = 0; kt < Ie; kt++) {
          var Ge = ke[oe >>> 2], Be = ke[oe + 4 >>> 2];
          oe += 8;
          for (var Pt = 0; Pt < Be; Pt++) Mk(Y, ie[Ge + Pt >>> 0]);
          wt += Be;
        }
        return ke[Ye >>> 2] = wt, 0;
      }
      function Xd(Y) {
        var oe = s["_" + Y];
        return oe;
      }
      function Gs(Y, oe) {
        se.set(Y, oe >>> 0);
      }
      function Ag(Y, oe, Ie, Ye, wt) {
        var kt = { string: (Rn) => {
          var jr = 0;
          if (Rn != null && Rn !== 0) {
            var dh = (Rn.length << 2) + 1;
            jr = jp(dh), ae(Rn, jr, dh);
          }
          return jr;
        }, array: (Rn) => {
          var jr = jp(Rn.length);
          return Gs(Rn, jr), jr;
        } };
        function Ge(Rn) {
          return oe === "string" ? J(Rn) : oe === "boolean" ? !!Rn : Rn;
        }
        var Be = Xd(Y), Pt = [], la = 0;
        if (Ye) for (var wr = 0; wr < Ye.length; wr++) {
          var ch = kt[Ie[wr]];
          ch ? (la === 0 && (la = lh()), Pt[wr] = ch(Ye[wr])) : Pt[wr] = Ye[wr];
        }
        var qp = Be.apply(null, Pt);
        function Qy(Rn) {
          return la !== 0 && uh(la), Ge(Rn);
        }
        return qp = Qy(qp), qp;
      }
      function Fg(Y, oe, Ie, Ye) {
        Ie = Ie || [];
        var wt = Ie.every((Ge) => Ge === "number" || Ge === "boolean"), kt = oe !== "string";
        return kt && wt && !Ye ? Xd(Y) : function() {
          return Ag(Y, oe, Ie, arguments, Ye);
        };
      }
      var Bp = { abort: Tg, emscripten_get_heap_max: Us, emscripten_memcpy_big: Cg, emscripten_resize_heap: gl, fd_close: Kd, fd_seek: Eg, fd_write: Ok }, $g = Ng(), Yd = s.___wasm_call_ctors = function() {
        return (Yd = s.___wasm_call_ctors = s.asm.__wasm_call_ctors).apply(null, arguments);
      }, Zd = s._init = function() {
        return (Zd = s._init = s.asm.init).apply(null, arguments);
      }, Dg = s._init_with_threads_count = function() {
        return (Dg = s._init_with_threads_count = s.asm.init_with_threads_count).apply(null, arguments);
      }, Jd = s._get_threads_count = function() {
        return (Jd = s._get_threads_count = s.asm.get_threads_count).apply(null, arguments);
      }, Rg = s._register_tensor = function() {
        return (Rg = s._register_tensor = s.asm.register_tensor).apply(null, arguments);
      }, Ae = s._dispose_data = function() {
        return (Ae = s._dispose_data = s.asm.dispose_data).apply(null, arguments);
      }, Vp = s._dispose = function() {
        return (Vp = s._dispose = s.asm.dispose).apply(null, arguments);
      }, Mg = s._Abs = function() {
        return (Mg = s._Abs = s.asm.Abs).apply(null, arguments);
      }, Qd = s._Acos = function() {
        return (Qd = s._Acos = s.asm.Acos).apply(null, arguments);
      }, bl = s._Acosh = function() {
        return (bl = s._Acosh = s.asm.Acosh).apply(null, arguments);
      }, Og = s._Add = function() {
        return (Og = s._Add = s.asm.Add).apply(null, arguments);
      }, Pg = s._AddN = function() {
        return (Pg = s._AddN = s.asm.AddN).apply(null, arguments);
      }, Lg = s._All = function() {
        return (Lg = s._All = s.asm.All).apply(null, arguments);
      }, zg = s._Any = function() {
        return (zg = s._Any = s.asm.Any).apply(null, arguments);
      }, Wg = s._ArgMax = function() {
        return (Wg = s._ArgMax = s.asm.ArgMax).apply(null, arguments);
      }, eh = s._ArgMin = function() {
        return (eh = s._ArgMin = s.asm.ArgMin).apply(null, arguments);
      }, th = s._Asin = function() {
        return (th = s._Asin = s.asm.Asin).apply(null, arguments);
      }, Bg = s._Asinh = function() {
        return (Bg = s._Asinh = s.asm.Asinh).apply(null, arguments);
      }, Vg = s._Atan = function() {
        return (Vg = s._Atan = s.asm.Atan).apply(null, arguments);
      }, Ug = s._Atan2 = function() {
        return (Ug = s._Atan2 = s.asm.Atan2).apply(null, arguments);
      }, Up = s._Atanh = function() {
        return (Up = s._Atanh = s.asm.Atanh).apply(null, arguments);
      }, Gg = s._AvgPool = function() {
        return (Gg = s._AvgPool = s.asm.AvgPool).apply(null, arguments);
      }, Hg = s._AvgPool3D = function() {
        return (Hg = s._AvgPool3D = s.asm.AvgPool3D).apply(null, arguments);
      }, jg = s._AvgPool3DGrad = function() {
        return (jg = s._AvgPool3DGrad = s.asm.AvgPool3DGrad).apply(null, arguments);
      }, Hs = s._AvgPoolGrad = function() {
        return (Hs = s._AvgPoolGrad = s.asm.AvgPoolGrad).apply(null, arguments);
      }, qg = s._BatchMatMul = function() {
        return (qg = s._BatchMatMul = s.asm.BatchMatMul).apply(null, arguments);
      }, Kg = s._Bincount = function() {
        return (Kg = s._Bincount = s.asm.Bincount).apply(null, arguments);
      }, nh = s._BitwiseAnd = function() {
        return (nh = s._BitwiseAnd = s.asm.BitwiseAnd).apply(null, arguments);
      }, Xg = s._Ceil = function() {
        return (Xg = s._Ceil = s.asm.Ceil).apply(null, arguments);
      }, Gp = s._ClipByValue = function() {
        return (Gp = s._ClipByValue = s.asm.ClipByValue).apply(null, arguments);
      }, Yg = s._Conv2D = function() {
        return (Yg = s._Conv2D = s.asm.Conv2D).apply(null, arguments);
      }, Zg = s._Conv2DBackpropInput = function() {
        return (Zg = s._Conv2DBackpropInput = s.asm.Conv2DBackpropInput).apply(null, arguments);
      }, Jg = s._Conv3D = function() {
        return (Jg = s._Conv3D = s.asm.Conv3D).apply(null, arguments);
      }, Hr = s._Conv3DBackpropFilterV2 = function() {
        return (Hr = s._Conv3DBackpropFilterV2 = s.asm.Conv3DBackpropFilterV2).apply(null, arguments);
      }, Hp = s._Conv3DBackpropInputV2 = function() {
        return (Hp = s._Conv3DBackpropInputV2 = s.asm.Conv3DBackpropInputV2).apply(null, arguments);
      }, Qg = s._Cos = function() {
        return (Qg = s._Cos = s.asm.Cos).apply(null, arguments);
      }, eb = s._Cosh = function() {
        return (eb = s._Cosh = s.asm.Cosh).apply(null, arguments);
      }, tb = s._CropAndResize = function() {
        return (tb = s._CropAndResize = s.asm.CropAndResize).apply(null, arguments);
      }, nb = s._Cumprod = function() {
        return (nb = s._Cumprod = s.asm.Cumprod).apply(null, arguments);
      }, ah = s._Cumsum = function() {
        return (ah = s._Cumsum = s.asm.Cumsum).apply(null, arguments);
      }, rh = s._DenseBincount = function() {
        return (rh = s._DenseBincount = s.asm.DenseBincount).apply(null, arguments);
      }, ab = s._DepthToSpace = function() {
        return (ab = s._DepthToSpace = s.asm.DepthToSpace).apply(null, arguments);
      }, rb = s._DepthwiseConv2dNative = function() {
        return (rb = s._DepthwiseConv2dNative = s.asm.DepthwiseConv2dNative).apply(null, arguments);
      }, sh = s._Diag = function() {
        return (sh = s._Diag = s.asm.Diag).apply(null, arguments);
      }, ih = s._Dilation2D = function() {
        return (ih = s._Dilation2D = s.asm.Dilation2D).apply(null, arguments);
      }, sb = s._Dilation2DBackpropFilter = function() {
        return (sb = s._Dilation2DBackpropFilter = s.asm.Dilation2DBackpropFilter).apply(null, arguments);
      }, ib = s._Dilation2DBackpropInput = function() {
        return (ib = s._Dilation2DBackpropInput = s.asm.Dilation2DBackpropInput).apply(null, arguments);
      }, ob = s._Elu = function() {
        return (ob = s._Elu = s.asm.Elu).apply(null, arguments);
      }, lb = s._EluGrad = function() {
        return (lb = s._EluGrad = s.asm.EluGrad).apply(null, arguments);
      }, oh = s._Equal = function() {
        return (oh = s._Equal = s.asm.Equal).apply(null, arguments);
      }, Pk = s._Erf = function() {
        return (Pk = s._Erf = s.asm.Erf).apply(null, arguments);
      }, ub = s._Exp = function() {
        return (ub = s._Exp = s.asm.Exp).apply(null, arguments);
      }, pb = s._Expm1 = function() {
        return (pb = s._Expm1 = s.asm.Expm1).apply(null, arguments);
      }, cb = s._FlipLeftRight = function() {
        return (cb = s._FlipLeftRight = s.asm.FlipLeftRight).apply(null, arguments);
      }, db = s._Floor = function() {
        return (db = s._Floor = s.asm.Floor).apply(null, arguments);
      }, hb = s._FloorDiv = function() {
        return (hb = s._FloorDiv = s.asm.FloorDiv).apply(null, arguments);
      }, mb = s._FusedBatchNorm = function() {
        return (mb = s._FusedBatchNorm = s.asm.FusedBatchNorm).apply(null, arguments);
      }, fb = s._FusedConv2D = function() {
        return (fb = s._FusedConv2D = s.asm.FusedConv2D).apply(null, arguments);
      }, gb = s._FusedDepthwiseConv2D = function() {
        return (gb = s._FusedDepthwiseConv2D = s.asm.FusedDepthwiseConv2D).apply(null, arguments);
      }, bb = s._Gather = function() {
        return (bb = s._Gather = s.asm.Gather).apply(null, arguments);
      }, yb = s._GatherNd = function() {
        return (yb = s._GatherNd = s.asm.GatherNd).apply(null, arguments);
      }, xb = s._Greater = function() {
        return (xb = s._Greater = s.asm.Greater).apply(null, arguments);
      }, vb = s._GreaterEqual = function() {
        return (vb = s._GreaterEqual = s.asm.GreaterEqual).apply(null, arguments);
      }, wb = s._IsFinite = function() {
        return (wb = s._IsFinite = s.asm.IsFinite).apply(null, arguments);
      }, kb = s._IsInf = function() {
        return (kb = s._IsInf = s.asm.IsInf).apply(null, arguments);
      }, Ib = s._IsNan = function() {
        return (Ib = s._IsNan = s.asm.IsNan).apply(null, arguments);
      }, Sb = s._LRN = function() {
        return (Sb = s._LRN = s.asm.LRN).apply(null, arguments);
      }, Nb = s._LRNGrad = function() {
        return (Nb = s._LRNGrad = s.asm.LRNGrad).apply(null, arguments);
      }, Tb = s._LeakyRelu = function() {
        return (Tb = s._LeakyRelu = s.asm.LeakyRelu).apply(null, arguments);
      }, Cb = s._Less = function() {
        return (Cb = s._Less = s.asm.Less).apply(null, arguments);
      }, Eb = s._LessEqual = function() {
        return (Eb = s._LessEqual = s.asm.LessEqual).apply(null, arguments);
      }, _b = s._LinSpace = function() {
        return (_b = s._LinSpace = s.asm.LinSpace).apply(null, arguments);
      }, Ab = s._Log = function() {
        return (Ab = s._Log = s.asm.Log).apply(null, arguments);
      }, Fb = s._Log1p = function() {
        return (Fb = s._Log1p = s.asm.Log1p).apply(null, arguments);
      }, $b = s._LogicalAnd = function() {
        return ($b = s._LogicalAnd = s.asm.LogicalAnd).apply(null, arguments);
      }, Db = s._LogicalNot = function() {
        return (Db = s._LogicalNot = s.asm.LogicalNot).apply(null, arguments);
      }, Rb = s._LogicalOr = function() {
        return (Rb = s._LogicalOr = s.asm.LogicalOr).apply(null, arguments);
      }, Mb = s._LogicalXor = function() {
        return (Mb = s._LogicalXor = s.asm.LogicalXor).apply(null, arguments);
      }, Ob = s._Max = function() {
        return (Ob = s._Max = s.asm.Max).apply(null, arguments);
      }, Pb = s._MaxPool = function() {
        return (Pb = s._MaxPool = s.asm.MaxPool).apply(null, arguments);
      }, Lb = s._MaxPool3D = function() {
        return (Lb = s._MaxPool3D = s.asm.MaxPool3D).apply(null, arguments);
      }, zb = s._MaxPool3DGrad = function() {
        return (zb = s._MaxPool3DGrad = s.asm.MaxPool3DGrad).apply(null, arguments);
      }, Wb = s._MaxPoolGrad = function() {
        return (Wb = s._MaxPoolGrad = s.asm.MaxPoolGrad).apply(null, arguments);
      }, Bb = s._MaxPoolWithArgmax = function() {
        return (Bb = s._MaxPoolWithArgmax = s.asm.MaxPoolWithArgmax).apply(null, arguments);
      }, Vb = s._Maximum = function() {
        return (Vb = s._Maximum = s.asm.Maximum).apply(null, arguments);
      }, Ub = s._Mean = function() {
        return (Ub = s._Mean = s.asm.Mean).apply(null, arguments);
      }, Gb = s._Min = function() {
        return (Gb = s._Min = s.asm.Min).apply(null, arguments);
      }, Hb = s._Minimum = function() {
        return (Hb = s._Minimum = s.asm.Minimum).apply(null, arguments);
      }, jb = s._MirrorPad = function() {
        return (jb = s._MirrorPad = s.asm.MirrorPad).apply(null, arguments);
      }, qb = s._Mod = function() {
        return (qb = s._Mod = s.asm.Mod).apply(null, arguments);
      }, Kb = s._Multinomial = function() {
        return (Kb = s._Multinomial = s.asm.Multinomial).apply(null, arguments);
      }, Xb = s._Multiply = function() {
        return (Xb = s._Multiply = s.asm.Multiply).apply(null, arguments);
      }, Yb = s._Neg = function() {
        return (Yb = s._Neg = s.asm.Neg).apply(null, arguments);
      }, Zb = s._NonMaxSuppressionV3 = function() {
        return (Zb = s._NonMaxSuppressionV3 = s.asm.NonMaxSuppressionV3).apply(null, arguments);
      }, Jb = s._NonMaxSuppressionV4 = function() {
        return (Jb = s._NonMaxSuppressionV4 = s.asm.NonMaxSuppressionV4).apply(null, arguments);
      }, Qb = s._NonMaxSuppressionV5 = function() {
        return (Qb = s._NonMaxSuppressionV5 = s.asm.NonMaxSuppressionV5).apply(null, arguments);
      }, ey = s._NotEqual = function() {
        return (ey = s._NotEqual = s.asm.NotEqual).apply(null, arguments);
      }, ty = s._OneHot = function() {
        return (ty = s._OneHot = s.asm.OneHot).apply(null, arguments);
      }, ny = s._PadV2 = function() {
        return (ny = s._PadV2 = s.asm.PadV2).apply(null, arguments);
      }, ay = s._Pow = function() {
        return (ay = s._Pow = s.asm.Pow).apply(null, arguments);
      }, ry = s._Prelu = function() {
        return (ry = s._Prelu = s.asm.Prelu).apply(null, arguments);
      }, sy = s._Prod = function() {
        return (sy = s._Prod = s.asm.Prod).apply(null, arguments);
      }, iy = s._RealDiv = function() {
        return (iy = s._RealDiv = s.asm.RealDiv).apply(null, arguments);
      }, oy = s._Reciprocal = function() {
        return (oy = s._Reciprocal = s.asm.Reciprocal).apply(null, arguments);
      }, ly = s._Relu = function() {
        return (ly = s._Relu = s.asm.Relu).apply(null, arguments);
      }, uy = s._Relu6 = function() {
        return (uy = s._Relu6 = s.asm.Relu6).apply(null, arguments);
      }, py = s._ResizeBilinear = function() {
        return (py = s._ResizeBilinear = s.asm.ResizeBilinear).apply(null, arguments);
      }, cy = s._ResizeBilinearGrad = function() {
        return (cy = s._ResizeBilinearGrad = s.asm.ResizeBilinearGrad).apply(null, arguments);
      }, dy = s._ResizeNearestNeighbor = function() {
        return (dy = s._ResizeNearestNeighbor = s.asm.ResizeNearestNeighbor).apply(null, arguments);
      }, hy = s._ResizeNearestNeighborGrad = function() {
        return (hy = s._ResizeNearestNeighborGrad = s.asm.ResizeNearestNeighborGrad).apply(null, arguments);
      }, my = s._Reverse = function() {
        return (my = s._Reverse = s.asm.Reverse).apply(null, arguments);
      }, fy = s._RotateWithOffset = function() {
        return (fy = s._RotateWithOffset = s.asm.RotateWithOffset).apply(null, arguments);
      }, gy = s._Round = function() {
        return (gy = s._Round = s.asm.Round).apply(null, arguments);
      }, by = s._Rsqrt = function() {
        return (by = s._Rsqrt = s.asm.Rsqrt).apply(null, arguments);
      }, yy = s._ScatterNd = function() {
        return (yy = s._ScatterNd = s.asm.ScatterNd).apply(null, arguments);
      }, xy = s._SearchSorted = function() {
        return (xy = s._SearchSorted = s.asm.SearchSorted).apply(null, arguments);
      }, vy = s._SelectV2 = function() {
        return (vy = s._SelectV2 = s.asm.SelectV2).apply(null, arguments);
      }, wy = s._Selu = function() {
        return (wy = s._Selu = s.asm.Selu).apply(null, arguments);
      }, ky = s._Sigmoid = function() {
        return (ky = s._Sigmoid = s.asm.Sigmoid).apply(null, arguments);
      }, Iy = s._Sign = function() {
        return (Iy = s._Sign = s.asm.Sign).apply(null, arguments);
      }, Sy = s._Sin = function() {
        return (Sy = s._Sin = s.asm.Sin).apply(null, arguments);
      }, Ny = s._Sinh = function() {
        return (Ny = s._Sinh = s.asm.Sinh).apply(null, arguments);
      }, Ty = s._Softmax = function() {
        return (Ty = s._Softmax = s.asm.Softmax).apply(null, arguments);
      }, Cy = s._Softplus = function() {
        return (Cy = s._Softplus = s.asm.Softplus).apply(null, arguments);
      }, Ey = s._SparseFillEmptyRows = function() {
        return (Ey = s._SparseFillEmptyRows = s.asm.SparseFillEmptyRows).apply(null, arguments);
      }, _y = s._SparseReshape = function() {
        return (_y = s._SparseReshape = s.asm.SparseReshape).apply(null, arguments);
      }, Ay = s._SparseSegmentReduction = function() {
        return (Ay = s._SparseSegmentReduction = s.asm.SparseSegmentReduction).apply(null, arguments);
      }, Fy = s._SparseToDense = function() {
        return (Fy = s._SparseToDense = s.asm.SparseToDense).apply(null, arguments);
      }, $y = s._Sqrt = function() {
        return ($y = s._Sqrt = s.asm.Sqrt).apply(null, arguments);
      }, Dy = s._Square = function() {
        return (Dy = s._Square = s.asm.Square).apply(null, arguments);
      }, Ry = s._SquaredDifference = function() {
        return (Ry = s._SquaredDifference = s.asm.SquaredDifference).apply(null, arguments);
      }, My = s._Step = function() {
        return (My = s._Step = s.asm.Step).apply(null, arguments);
      }, Oy = s._StridedSlice = function() {
        return (Oy = s._StridedSlice = s.asm.StridedSlice).apply(null, arguments);
      }, Py = s._Sub = function() {
        return (Py = s._Sub = s.asm.Sub).apply(null, arguments);
      }, Ly = s._Sum = function() {
        return (Ly = s._Sum = s.asm.Sum).apply(null, arguments);
      }, zy = s._Tan = function() {
        return (zy = s._Tan = s.asm.Tan).apply(null, arguments);
      }, Wy = s._Tanh = function() {
        return (Wy = s._Tanh = s.asm.Tanh).apply(null, arguments);
      }, By = s._TensorScatterUpdate = function() {
        return (By = s._TensorScatterUpdate = s.asm.TensorScatterUpdate).apply(null, arguments);
      }, Vy = s._Tile = function() {
        return (Vy = s._Tile = s.asm.Tile).apply(null, arguments);
      }, Uy = s._TopK = function() {
        return (Uy = s._TopK = s.asm.TopK).apply(null, arguments);
      }, Gy = s._Transform = function() {
        return (Gy = s._Transform = s.asm.Transform).apply(null, arguments);
      }, Hy = s._Transpose = function() {
        return (Hy = s._Transpose = s.asm.Transpose).apply(null, arguments);
      }, jy = s.__FusedMatMul = function() {
        return (jy = s.__FusedMatMul = s.asm._FusedMatMul).apply(null, arguments);
      }, qy = s._malloc = function() {
        return (qy = s._malloc = s.asm.malloc).apply(null, arguments);
      }, Ky = s._free = function() {
        return (Ky = s._free = s.asm.free).apply(null, arguments);
      }, Xy = s.___errno_location = function() {
        return (Xy = s.___errno_location = s.asm.__errno_location).apply(null, arguments);
      }, lh = s.stackSave = function() {
        return (lh = s.stackSave = s.asm.stackSave).apply(null, arguments);
      }, uh = s.stackRestore = function() {
        return (uh = s.stackRestore = s.asm.stackRestore).apply(null, arguments);
      }, jp = s.stackAlloc = function() {
        return (jp = s.stackAlloc = s.asm.stackAlloc).apply(null, arguments);
      }, Yy = s.dynCall_iijjiiii = function() {
        return (Yy = s.dynCall_iijjiiii = s.asm.dynCall_iijjiiii).apply(null, arguments);
      }, Zy = s.dynCall_jiji = function() {
        return (Zy = s.dynCall_jiji = s.asm.dynCall_jiji).apply(null, arguments);
      };
      s.cwrap = Fg;
      var yl;
      Hn = function Y() {
        yl || ph(), yl || (Hn = Y);
      };
      function ph(Y) {
        if (Y = Y || p, ut > 0 || (Ot(), ut > 0)) return;
        function oe() {
          yl || (yl = true, s.calledRun = true, !U && (ia(), i(s), s.onRuntimeInitialized && s.onRuntimeInitialized(), un()));
        }
        s.setStatus ? (s.setStatus("Running..."), setTimeout(function() {
          setTimeout(function() {
            s.setStatus("");
          }, 1), oe();
        }, 1)) : oe();
      }
      if (s.preInit) for (typeof s.preInit == "function" && (s.preInit = [s.preInit]); s.preInit.length > 0; ) s.preInit.pop()();
      ph();
      var xl;
      l && (xl = { uncaughtException: process.listeners("uncaughtException").filter(function(Y) {
        return !l.uncaughtException.indexOf(Y) > -1;
      }), unhandledRejection: process.listeners("unhandledRejection").filter(function(Y) {
        return !l.unhandledRejection.indexOf(Y) > -1;
      }) });
      var vl;
      if (typeof r != "undefined") vl = r;
      else if (typeof WasmBackendModuleThreadedSimd != "undefined") vl = WasmBackendModuleThreadedSimd;
      else throw new Error("Could not find wasm module in post.js");
      if (xl) {
        var Jy = vl._dispose;
        vl._dispose = function() {
          Jy(), xl.uncaughtException.forEach(function(Y) {
            process.removeListener("uncaughtException", Y);
          }), xl.unhandledRejection.forEach(function(Y) {
            process.removeListener("unhandledRejection", Y);
          });
        };
      }
      return r.ready;
    };
  })();
  typeof e17 == "object" && typeof t == "object" ? t.exports = n : typeof define == "function" && define.amd ? define([], function() {
    return n;
  }) : typeof e17 == "object" && (e17.WasmBackendModule = n);
});
var ym = class {
  constructor(e17, t) {
    this.backend = e17, this.dataMover = t, this.data = /* @__PURE__ */ new WeakMap(), this.dataIdsCount = 0;
  }
  get(e17) {
    return this.data.has(e17) || this.dataMover.moveData(this.backend, e17), this.data.get(e17);
  }
  set(e17, t) {
    this.dataIdsCount++, this.data.set(e17, t);
  }
  has(e17) {
    return this.data.has(e17);
  }
  delete(e17) {
    return this.dataIdsCount--, this.data.delete(e17);
  }
  numDataIds() {
    return this.dataIdsCount;
  }
};
var Fc = class {
  refCount(e17) {
    return jn("refCount");
  }
  incRef(e17) {
    return jn("incRef");
  }
  timerAvailable() {
    return true;
  }
  time(e17) {
    return jn("time");
  }
  read(e17) {
    return jn("read");
  }
  readSync(e17) {
    return jn("readSync");
  }
  readToGPU(e17, t) {
    return jn("readToGPU");
  }
  numDataIds() {
    return jn("numDataIds");
  }
  disposeData(e17, t) {
    return jn("disposeData");
  }
  write(e17, t, n) {
    return jn("write");
  }
  move(e17, t, n, a, r) {
    return jn("move");
  }
  createTensorFromGPUData(e17, t, n) {
    return jn("createTensorFromGPUData");
  }
  memory() {
    return jn("memory");
  }
  floatPrecision() {
    return jn("floatPrecision");
  }
  epsilon() {
    return this.floatPrecision() === 32 ? 1e-7 : 1e-4;
  }
  dispose() {
    return jn("dispose");
  }
};
function jn(e17) {
  throw new Error(`'${e17}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`);
}
function DS(e17) {
  let t = e17.length, n = 0;
  for (; t > 0; ) n = Math.random() * t | 0, t--, Vh(e17, t, n);
}
function HR(e17, t) {
  if (e17.length !== t.length) throw new Error(`Array sizes must match to be shuffled together First array length was ${e17.length}Second array length was ${t.length}`);
  let n = e17.length, a = 0;
  for (; n > 0; ) a = Math.random() * n | 0, n--, Vh(e17, n, a), Vh(t, n, a);
}
function hc(e17, t, n) {
  return Math.max(e17, Math.min(t, n));
}
function jR(e17) {
  return e17 % 2 === 0 ? e17 : e17 + 1;
}
function Vh(e17, t, n) {
  let a = e17[t];
  e17[t] = e17[n], e17[n] = a;
}
function qR(e17) {
  let t = 0;
  for (let n = 0; n < e17.length; n++) t += e17[n];
  return t;
}
function KR(e17, t) {
  let n = Math.random();
  return t * n + (1 - n) * e17;
}
function XR(e17, t) {
  let n = 0;
  for (let a = 0; a < e17.length; a++) {
    let r = Number(e17[a]) - Number(t[a]);
    n += r * r;
  }
  return n;
}
function A(e17, t) {
  if (!e17) throw new Error(typeof t == "string" ? t : t());
}
function Nn(e17, t, n = "") {
  A(Ar(e17, t), () => n + ` Shapes ${e17} and ${t} must match`);
}
function Si(e17) {
  A(e17 != null, () => "The input to the tensor constructor must be a non-null value.");
}
function ot(e17) {
  if (e17.length === 0) return 1;
  let t = e17[0];
  for (let n = 1; n < e17.length; n++) t *= e17[n];
  return t;
}
function YR(e17) {
  return e17.length === 0;
}
function RS(e17, t) {
  if (e17 === t) return true;
  if (e17 == null || t == null || e17.length !== t.length) return false;
  for (let n = 0; n < e17.length; n++) if (e17[n] !== null && t[n] !== null && e17[n] !== t[n]) return false;
  return true;
}
function Ar(e17, t) {
  if (e17 === t) return true;
  if (e17 == null || t == null || e17.length !== t.length) return false;
  for (let n = 0; n < e17.length; n++) if (e17[n] !== t[n]) return false;
  return true;
}
function $l(e17) {
  return e17 % 1 === 0;
}
function ZR(e17) {
  if (Math.tanh != null) return Math.tanh(e17);
  if (e17 === 1 / 0) return 1;
  if (e17 === -1 / 0) return -1;
  {
    let t = Math.exp(2 * e17);
    return (t - 1) / (t + 1);
  }
}
function JR(e17) {
  let t = Math.ceil(Math.sqrt(e17));
  return [t, Math.ceil(e17 / t)];
}
function QR(e17) {
  let t = new Uint32Array(e17);
  for (let n = 0; n < e17; ++n) t[n] = n;
  return DS(t), t;
}
function uc(e17, t) {
  return t <= e17.length ? e17 : e17 + " ".repeat(t - e17.length);
}
function eM(e17, t = (r) => 0, n, a) {
  return new Promise((r, s) => {
    let i = 0, o = () => {
      if (e17()) {
        r();
        return;
      }
      i++;
      let l = t(i);
      if (n != null && i >= n) {
        s();
        return;
      }
      a != null ? a(o, l) : setTimeout(o, l);
    };
    o();
  });
}
function tM(e17, t) {
  let n = 1, a = -1;
  for (let s = 0; s < e17.length; ++s) if (e17[s] >= 0) n *= e17[s];
  else if (e17[s] === -1) {
    if (a !== -1) throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${a} and dim ${s}`);
    a = s;
  } else if (e17[s] < 0) throw Error(`Shapes can not be < 0. Found ${e17[s]} at dim ${s}`);
  if (a === -1) {
    if (t > 0 && t !== n) throw Error(`Size(${t}) must match the product of shape ${e17}`);
    return e17;
  }
  if (n === 0) throw Error(`Cannot infer the missing size in [${e17}] when there are 0 elements`);
  if (t % n !== 0) throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${n}`);
  let r = e17.slice();
  return r[a] = t / n, r;
}
function Aa(e17, t) {
  let n = t.length;
  return e17 = e17 == null ? t.map((a, r) => r) : [].concat(e17), A(e17.every((a) => a >= -n && a < n), () => `All values in axis param must be in range [-${n}, ${n}) but got axis ${e17}`), A(e17.every((a) => $l(a)), () => `All values in axis param must be integers but got axis ${e17}`), e17.map((a) => a < 0 ? n + a : a);
}
function MS(e17, t) {
  let n = [], a = [], r = t != null && Array.isArray(t) && t.length === 0, s = t == null || r ? null : Aa(t, e17).sort(), i = 0;
  for (let o = 0; o < e17.length; ++o) {
    if (s != null) {
      if (s[i] === o && e17[o] !== 1) throw new Error(`Can't squeeze axis ${o} since its dim '${e17[o]}' is not 1`);
      (s[i] == null || s[i] > o) && e17[o] === 1 && (n.push(e17[o]), a.push(o)), s[i] <= o && i++;
    }
    e17[o] !== 1 && (n.push(e17[o]), a.push(o));
  }
  return { newShape: n, keptDims: a };
}
function OS(e17, t) {
  return Sv(e17, t);
}
function Sv(e17, t) {
  let n = null;
  if (e17 == null || e17 === "float32") n = new Float32Array(t);
  else if (e17 === "int32") n = new Int32Array(t);
  else if (e17 === "bool") n = new Uint8Array(t);
  else if (e17 === "string") n = new Array(t);
  else throw new Error(`Unknown data type ${e17}`);
  return n;
}
function PS(e17, t) {
  for (let n = 0; n < e17.length; n++) {
    let a = e17[n];
    if (isNaN(a) || !isFinite(a)) throw Error(`A tensor of type ${t} being uploaded contains ${a}.`);
  }
}
function LS(e17) {
  return e17 === "bool" || e17 === "complex64" || e17 === "float32" || e17 === "int32" || e17 === "string";
}
function nM(e17, t) {
  return !(t === "complex64" || t === "float32" && e17 !== "complex64" || t === "int32" && e17 !== "float32" && e17 !== "complex64" || t === "bool" && e17 === "bool");
}
function Uh(e17) {
  if (e17 === "float32" || e17 === "int32") return 4;
  if (e17 === "complex64") return 8;
  if (e17 === "bool") return 1;
  throw new Error(`Unknown dtype ${e17}`);
}
function zS(e17) {
  if (e17 == null) return 0;
  let t = 0;
  return e17.forEach((n) => t += n.length), t;
}
function Jr(e17) {
  return typeof e17 == "string" || e17 instanceof String;
}
function WS(e17) {
  return typeof e17 == "boolean";
}
function BS(e17) {
  return typeof e17 == "number";
}
function $c(e17) {
  return Array.isArray(e17) ? $c(e17[0]) : e17 instanceof Float32Array ? "float32" : e17 instanceof Int32Array || e17 instanceof Uint8Array || e17 instanceof Uint8ClampedArray ? "int32" : BS(e17) ? "float32" : Jr(e17) ? "string" : WS(e17) ? "bool" : "float32";
}
function ss(e17) {
  return !!(e17 && e17.constructor && e17.call && e17.apply);
}
function Gh(e17, t) {
  for (let n = t; n < e17; ++n) if (e17 % n === 0) return n;
  return e17;
}
function Xl(e17) {
  let t = e17.length;
  if (t < 2) return [];
  let n = new Array(t - 1);
  n[t - 2] = e17[t - 1];
  for (let a = t - 3; a >= 0; --a) n[a] = n[a + 1] * e17[a + 1];
  return n;
}
function VS(e17, t, n, a = false) {
  let r = new Array();
  if (t.length === 1) {
    let s = t[0] * (a ? 2 : 1);
    for (let i = 0; i < s; i++) r[i] = n[e17 + i];
  } else {
    let s = t[0], i = t.slice(1), o = i.reduce((l, u) => l * u) * (a ? 2 : 1);
    for (let l = 0; l < s; l++) r[l] = VS(e17 + l * o, i, n, a);
  }
  return r;
}
function El(e17, t, n = false) {
  if (e17.length === 0) return t[0];
  let a = e17.reduce((r, s) => r * s) * (n ? 2 : 1);
  if (a === 0) return [];
  if (a !== t.length) throw new Error(`[${e17}] does not match the input size ${t.length}${n ? " for a complex tensor" : ""}.`);
  return VS(0, e17, t, n);
}
function aM(e17, t) {
  if (Array.isArray(e17)) return e17;
  if (t === "float32") return e17 instanceof Float32Array ? e17 : new Float32Array(e17);
  if (t === "int32") return e17 instanceof Int32Array ? e17 : new Int32Array(e17);
  if (t === "bool" || t === "string") return Uint8Array.from(new Int32Array(e17));
  throw new Error(`Unknown dtype ${t}`);
}
function Nv(e17, t) {
  let n = xm(e17, t);
  for (let a = 0; a < n.length; a++) n[a] = 1;
  return n;
}
function xm(e17, t) {
  if (t == null || t === "float32" || t === "complex64") return new Float32Array(e17);
  if (t === "int32") return new Int32Array(e17);
  if (t === "bool") return new Uint8Array(e17);
  throw new Error(`Unknown data type ${t}`);
}
function rM(e17, t) {
  let n = e17.reduce((a, r) => a * r, 1);
  if (t == null || t === "float32") return El(e17, new Float32Array(n));
  if (t === "int32") return El(e17, new Int32Array(n));
  if (t === "bool") return El(e17, new Uint8Array(n));
  throw new Error(`Unknown data type ${t}`);
}
function na(e17) {
  e17.forEach((t) => {
    A(Number.isInteger(t) && t >= 0, () => `Tensor must have a shape comprised of positive integers but got shape [${e17}].`);
  });
}
function sM(e17, t, n) {
  if (t === 0) return 0;
  if (t === 1) return e17[0];
  let a = e17[e17.length - 1];
  for (let r = 0; r < e17.length - 1; ++r) a += n[r] * e17[r];
  return a;
}
function iM(e17, t, n) {
  if (t === 0) return [];
  if (t === 1) return [e17];
  let a = new Array(t);
  for (let r = 0; r < a.length - 1; ++r) a[r] = Math.floor(e17 / n[r]), e17 -= a[r] * n[r];
  return a[a.length - 1] = e17, a;
}
function vm(e17) {
  return e17 && e17.then && typeof e17.then == "function";
}
var jk = "tfjsflags";
var US = class {
  constructor(e17) {
    this.global = e17, this.flags = {}, this.flagRegistry = {}, this.urlFlags = {}, this.getQueryParams = oM, this.populateURLFlags();
  }
  setPlatform(e17, t) {
    this.platform != null && (G().getBool("IS_TEST") || G().getBool("PROD") || console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${e17}.`)), this.platformName = e17, this.platform = t;
  }
  registerFlag(e17, t, n) {
    if (this.flagRegistry[e17] = { evaluationFn: t, setHook: n }, this.urlFlags[e17] != null) {
      let a = this.urlFlags[e17];
      G().getBool("IS_TEST") || G().getBool("PROD") || console.warn(`Setting feature override from URL ${e17}: ${a}.`), this.set(e17, a);
    }
  }
  async getAsync(e17) {
    return e17 in this.flags ? this.flags[e17] : (this.flags[e17] = await this.evaluateFlag(e17), this.flags[e17]);
  }
  get(e17) {
    if (e17 in this.flags) return this.flags[e17];
    let t = this.evaluateFlag(e17);
    if (vm(t)) throw new Error(`Flag ${e17} cannot be synchronously evaluated. Please use getAsync() instead.`);
    return this.flags[e17] = t, this.flags[e17];
  }
  getNumber(e17) {
    return this.get(e17);
  }
  getBool(e17) {
    return this.get(e17);
  }
  getString(e17) {
    return this.get(e17);
  }
  getFlags() {
    return this.flags;
  }
  get features() {
    return this.flags;
  }
  set(e17, t) {
    if (this.flagRegistry[e17] == null) throw new Error(`Cannot set flag ${e17} as it has not been registered.`);
    this.flags[e17] = t, this.flagRegistry[e17].setHook != null && this.flagRegistry[e17].setHook(t);
  }
  evaluateFlag(e17) {
    if (this.flagRegistry[e17] == null) throw new Error(`Cannot evaluate flag '${e17}': no evaluation function found.`);
    return this.flagRegistry[e17].evaluationFn();
  }
  setFlags(e17) {
    this.flags = Object.assign({}, e17);
  }
  reset() {
    this.flags = {}, this.urlFlags = {}, this.populateURLFlags();
  }
  populateURLFlags() {
    if (typeof this.global == "undefined" || typeof this.global.location == "undefined" || typeof this.global.location.search == "undefined") return;
    let e17 = this.getQueryParams(this.global.location.search);
    jk in e17 && e17[jk].split(",").forEach((t) => {
      let [n, a] = t.split(":");
      this.urlFlags[n] = uM(n, a);
    });
  }
};
function oM(e17) {
  let t = {};
  return e17.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g, (n, ...a) => (lM(t, a[0], a[1]), a.join("="))), t;
}
function lM(e17, t, n) {
  e17[decodeURIComponent(t)] = decodeURIComponent(n || "");
}
function uM(e17, t) {
  let n = t.toLowerCase();
  return n === "true" || n === "false" ? n === "true" : `${+n}` === n ? +n : t;
}
function G() {
  return Tv;
}
var Tv = null;
function pM(e17) {
  Tv = e17;
}
var rx;
function GS() {
  if (rx == null) {
    let e17;
    if (typeof window != "undefined") e17 = window;
    else if (typeof global != "undefined") e17 = global;
    else if (typeof process != "undefined") e17 = process;
    else if (typeof self != "undefined") e17 = self;
    else throw new Error("Could not find a global object");
    rx = e17;
  }
  return rx;
}
function cM() {
  let e17 = GS();
  return e17._tfGlobals == null && (e17._tfGlobals = /* @__PURE__ */ new Map()), e17._tfGlobals;
}
function Cv(e17, t) {
  let n = cM();
  if (n.has(e17)) return n.get(e17);
  {
    let a = t();
    return n.set(e17, a), n.get(e17);
  }
}
var Yl = "Abs";
var Ni = "Acos";
var Ti = "Acosh";
var vs = "Add";
var Ci = "AddN";
var Zl = "All";
var Jl = "Any";
var Ql = "ArgMax";
var eu = "ArgMin";
var Ei = "Asin";
var _i = "Asinh";
var Ai = "Atan";
var Fi = "Atanh";
var $i = "Atan2";
var Di = "AvgPool";
var Dc = "AvgPoolGrad";
var tu = "AvgPool3D";
var Rc = "AvgPool3DGrad";
var Ri = "BatchMatMul";
var nu = "BatchToSpaceND";
var au = "Bincount";
var ru = "BitwiseAnd";
var HS = "BroadcastTo";
var Mc = "BroadcastArgs";
var Mi = "Cast";
var Oi = "Ceil";
var ws = "ClipByValue";
var wm = "Complex";
var Oc = "ComplexAbs";
var su = "Concat";
var Pi = "Conv2D";
var km = "Conv2DBackpropFilter";
var Li = "Conv2DBackpropInput";
var zi = "Conv3D";
var iu = "Conv3DBackpropFilterV2";
var ou = "Conv3DBackpropInputV2";
var Wi = "Cos";
var Bi = "Cosh";
var lu = "Cumprod";
var Vi = "Cumsum";
var uu = "CropAndResize";
var Pc = "DenseBincount";
var pu = "DepthToSpace";
var Ui = "DepthwiseConv2dNative";
var Im = "DepthwiseConv2dNativeBackpropFilter";
var Sm = "DepthwiseConv2dNativeBackpropInput";
var Lc = "Diag";
var Gi = "Dilation2D";
var Dl = "Dilation2DBackpropInput";
var Rl = "Dilation2DBackpropFilter";
var Nm = "Draw";
var Hi = "RealDiv";
var Tm = "Einsum";
var ji = "Elu";
var cu = "EluGrad";
var qi = "Erf";
var du = "Equal";
var Ki = "Exp";
var hu = "ExpandDims";
var Xi = "Expm1";
var Cm = "FFT";
var zc = "Fill";
var mu = "FlipLeftRight";
var Yi = "Floor";
var Zi = "FloorDiv";
var Ji = "FusedBatchNorm";
var fu = "GatherV2";
var gu = "GatherNd";
var bu = "Greater";
var Qi = "GreaterEqual";
var eo = "Identity";
var Em = "IFFT";
var _m = "Imag";
var to = "IsFinite";
var no = "IsInf";
var ao = "IsNan";
var ro = "LeakyRelu";
var yu = "Less";
var xu = "LessEqual";
var vu = "LinSpace";
var so = "Log";
var io = "Log1p";
var wu = "LogicalAnd";
var ku = "LogicalNot";
var Iu = "LogicalOr";
var jS = "LogicalXor";
var qS = "LogSoftmax";
var dM = "LowerBound";
var oo = "LRN";
var Su = "LRNGrad";
var hM = "MatrixBandPart";
var lo = "Max";
var uo = "Maximum";
var po = "MaxPool";
var Wc = "MaxPoolGrad";
var Nu = "MaxPool3D";
var Bc = "MaxPool3DGrad";
var Vc = "MaxPoolWithArgmax";
var co = "Mean";
var ho = "Min";
var mo = "Minimum";
var fo = "MirrorPad";
var go = "Mod";
var Tu = "Multinomial";
var bo = "Multiply";
var Cu = "Neg";
var Eu = "NotEqual";
var _u = "NonMaxSuppressionV3";
var Au = "NonMaxSuppressionV4";
var Fu = "NonMaxSuppressionV5";
var $u = "OnesLike";
var yo = "OneHot";
var Du = "Pack";
var xo = "PadV2";
var mM = "Pool";
var vo = "Pow";
var wo = "Prelu";
var ko = "Prod";
var Am = "RaggedGather";
var Fm = "RaggedRange";
var $m = "RaggedTensorToTensor";
var Uc = "Range";
var Dm = "Real";
var Io = "Reciprocal";
var So = "Relu";
var Ru = "Reshape";
var No = "ResizeNearestNeighbor";
var Mu = "ResizeNearestNeighborGrad";
var To = "ResizeBilinear";
var Ou = "ResizeBilinearGrad";
var Co = "Relu6";
var Eo = "Reverse";
var _o = "Round";
var Ao = "Rsqrt";
var Pu = "ScatterNd";
var Lu = "TensorScatterUpdate";
var zu = "SearchSorted";
var Wu = "Select";
var Fo = "Selu";
var Bu = "Slice";
var $o = "Sin";
var Do = "Sinh";
var Ro = "Sign";
var Mo = "Sigmoid";
var Oo = "Softplus";
var Po = "Sqrt";
var Lo = "Sum";
var Vu = "SpaceToBatchND";
var Uu = "SplitV";
var zo = "Softmax";
var Gc = "SparseFillEmptyRows";
var Gu = "SparseReshape";
var Hc = "SparseSegmentMean";
var jc = "SparseSegmentSum";
var Hu = "SparseToDense";
var Wo = "SquaredDifference";
var qc = "Square";
var Kc = "StaticRegexReplace";
var ju = "StridedSlice";
var Xc = "StringNGrams";
var Yc = "StringSplit";
var Zc = "StringToHashBucketFast";
var Bo = "Sub";
var Vo = "Tan";
var Uo = "Tanh";
var ks = "Tile";
var qu = "TopK";
var Ku = "Transform";
var Cr = "Transpose";
var Jc = "Unique";
var Xu = "Unpack";
var Qc = "UnsortedSegmentSum";
var fM = "UpperBound";
var Yu = "ZerosLike";
var Is = "Step";
var Hh = "FromPixels";
var Zu = "RotateWithOffset";
var ii = "_FusedMatMul";
var oi = "FusedConv2D";
var li = "FusedDepthwiseConv2D";
function Zr(...e17) {
  G().getBool("IS_TEST") || G().getBool("PROD") || console.warn(...e17);
}
function gM(...e17) {
  G().getBool("IS_TEST") || G().getBool("PROD") || console.log(...e17);
}
var Ml = Cv("kernelRegistry", () => /* @__PURE__ */ new Map());
var mc = Cv("gradRegistry", () => /* @__PURE__ */ new Map());
function fc(e17, t) {
  let n = Ev(e17, t);
  return Ml.get(n);
}
function vx(e17) {
  return mc.get(e17);
}
function jh(e17) {
  let t = Ml.entries(), n = [];
  for (; ; ) {
    let { done: a, value: r } = t.next();
    if (a) break;
    let [s, i] = r, [o] = s.split("_");
    o === e17 && n.push(i);
  }
  return n;
}
function ed(e17) {
  let { kernelName: t, backendName: n } = e17, a = Ev(t, n);
  Ml.has(a) && Zr(`The kernel '${t}' for backend '${n}' is already registered`), Ml.set(a, e17);
}
function KS(e17) {
  let { kernelName: t } = e17;
  mc.has(t) && G().getBool("DEBUG") && Zr(`Overriding the gradient for '${t}'`), mc.set(t, e17);
}
function bM(e17, t) {
  let n = Ev(e17, t);
  if (!Ml.has(n)) throw new Error(`The kernel '${e17}' for backend '${t}' is not registered`);
  Ml.delete(n);
}
function yM(e17) {
  if (!mc.has(e17)) throw new Error(`The gradient '${e17}' for backend is not registered`);
  mc.delete(e17);
}
function xM(e17, t) {
  jh(e17).forEach((n) => {
    let a = Object.assign({}, n, { backendName: t });
    ed(a);
  });
}
function Ev(e17, t) {
  return `${t}_${e17}`;
}
var w = {};
_e(w, { arraysEqual: () => Ar, arraysEqualWithNull: () => RS, assert: () => A, assertNonNegativeIntegerDimensions: () => na, assertNonNull: () => Si, assertShapesMatch: () => Nn, bytesFromStringArray: () => zS, bytesPerElement: () => Uh, checkConversionForErrors: () => PS, clamp: () => hc, computeStrides: () => Xl, convertBackendValuesAndArrayBuffer: () => aM, createScalarValue: () => NM, createShuffledIndices: () => QR, decodeString: () => qh, distSquared: () => XR, encodeString: () => nd, fetch: () => CM, fingerPrint64: () => SM, flatten: () => is, getArrayFromDType: () => Sv, getTypedArrayFromDType: () => OS, hasEncodingLoss: () => nM, hexToLong: () => td, indexToLoc: () => iM, inferDtype: () => $c, inferFromImplicitShape: () => tM, isBoolean: () => WS, isFunction: () => ss, isInt: () => $l, isNumber: () => BS, isPromise: () => vm, isScalarShape: () => YR, isString: () => Jr, isTypedArray: () => en, isValidDtype: () => LS, locToIndex: () => sM, makeOnesTypedArray: () => Nv, makeZerosNestedTypedArray: () => rM, makeZerosTypedArray: () => xm, nearestDivisor: () => Gh, nearestLargerEven: () => jR, now: () => gc, parseAxisParam: () => Aa, randUniform: () => KR, repeatedTry: () => eM, rightPad: () => uc, shuffle: () => DS, shuffleCombo: () => HR, sizeFromShape: () => ot, sizeToSquarishShape: () => JR, squeezeShape: () => MS, sum: () => qR, swap: () => Vh, tanh: () => ZR, toNestedArray: () => El, toTypedArray: () => Rm });
function XS(e17) {
  return e17 instanceof Float32Array || e17 instanceof Int32Array || e17 instanceof Uint8Array || e17 instanceof Uint8ClampedArray;
}
var qk = xs(ER());
var Ys = qk.default || qk;
function td(e17) {
  return Ys.fromString(e17, true, 16);
}
var YS = td("c3a5c85c97cb3127");
var Ks = td("b492b66fbe98f273");
var wn = td("9ae16a3b2f90404f");
function wx(e17) {
  return e17.xor(e17.shru(47));
}
function ZS(e17, t, n) {
  let a = e17.slice(t, t + n);
  return Ys.fromBytes(Array.from(a), true, true);
}
function bt(e17, t) {
  return ZS(e17, t, 8);
}
function Kk(e17, t) {
  return ZS(e17, t, 4);
}
function Qt(e17, t) {
  return t === 0 ? e17 : e17.shru(t).or(e17.shl(64 - t));
}
function ns(e17, t, n = td("9ddfea08eb382d69")) {
  let a = e17.xor(t).mul(n);
  a = a.xor(a.shru(47));
  let r = t.xor(a).mul(n);
  return r = r.xor(r.shru(47)), r = r.mul(n), r;
}
function vM(e17, t, n, a, r, s) {
  r = r.add(e17), s = Qt(s.add(r).add(a), 21);
  let i = r;
  return r = r.add(t), r = r.add(n), s = s.add(Qt(r, 44)), [r.add(a), s.add(i)];
}
function xh(e17, t, n, a) {
  return vM(bt(e17, t), bt(e17, t + 8), bt(e17, t + 16), bt(e17, t + 24), n, a);
}
function wM(e17, t = e17.length) {
  if (t >= 8) {
    let n = wn.add(t * 2), a = bt(e17, 0).add(wn), r = bt(e17, t - 8), s = Qt(r, 37).mul(n).add(a), i = Qt(a, 25).add(r).mul(n);
    return ns(s, i, n);
  }
  if (t >= 4) {
    let n = wn.add(t * 2), a = Kk(e17, 0);
    return ns(a.shl(3).add(t), Kk(e17, t - 4), n);
  }
  if (t > 0) {
    let n = e17[0], a = e17[t >> 1], r = e17[t - 1], s = n + (a << 8), i = t + (r << 2);
    return wx(wn.mul(s).xor(YS.mul(i))).mul(wn);
  }
  return wn;
}
function kM(e17, t = e17.length) {
  let n = wn.add(t * 2), a = bt(e17, 0).mul(Ks), r = bt(e17, 8), s = bt(e17, t - 8).mul(n), i = bt(e17, t - 16).mul(wn);
  return ns(Qt(a.add(r), 43).add(Qt(s, 30)).add(i), a.add(Qt(r.add(wn), 18)).add(s), n);
}
function IM(e17, t = e17.length) {
  let n = wn.add(t * 2), a = bt(e17, 0).mul(wn), r = bt(e17, 8), s = bt(e17, t - 8).mul(n), i = bt(e17, t - 16).mul(wn), o = Qt(a.add(r), 43).add(Qt(s, 30)).add(i), l = ns(o, a.add(Qt(r.add(wn), 18)).add(s), n), u = bt(e17, 16).mul(n), p = bt(e17, 24), d = o.add(bt(e17, t - 32)).mul(n), c = l.add(bt(e17, t - 24)).mul(n);
  return ns(Qt(u.add(p), 43).add(Qt(d, 30)).add(c), u.add(Qt(p.add(a), 18)).add(d), n);
}
function SM(e17, t = e17.length) {
  let n = Ys.fromNumber(81, true);
  if (t <= 32) return t <= 16 ? wM(e17, t) : kM(e17, t);
  if (t <= 64) return IM(e17, t);
  let a = n, r = n.mul(Ks).add(113), s = wx(r.mul(wn).add(113)).mul(wn), i = [Ys.UZERO, Ys.UZERO], o = [Ys.UZERO, Ys.UZERO];
  a = a.mul(wn).add(bt(e17, 0));
  let l = 0, u = (t - 1 >> 6) * 64, p = u + (t - 1 & 63) - 63;
  do
    a = Qt(a.add(r).add(i[0]).add(bt(e17, l + 8)), 37).mul(Ks), r = Qt(r.add(i[1]).add(bt(e17, l + 48)), 42).mul(Ks), a = a.xor(o[1]), r = r.add(i[0]).add(bt(e17, l + 40)), s = Qt(s.add(o[0]), 33).mul(Ks), i = xh(e17, l, i[1].mul(Ks), a.add(o[0])), o = xh(e17, l + 32, s.add(o[1]), r.add(bt(e17, l + 16))), [s, a] = [a, s], l += 64;
  while (l !== u);
  let d = Ks.add(s.and(255).shl(1));
  return l = p, o[0] = o[0].add(t - 1 & 63), i[0] = i[0].add(o[0]), o[0] = o[0].add(i[0]), a = Qt(a.add(r).add(i[0]).add(bt(e17, l + 8)), 37).mul(d), r = Qt(r.add(i[1]).add(bt(e17, l + 48)), 42).mul(d), a = a.xor(o[1].mul(9)), r = r.add(i[0].mul(9).add(bt(e17, l + 40))), s = Qt(s.add(o[0]), 33).mul(d), i = xh(e17, l, i[1].mul(d), a.add(o[0])), o = xh(e17, l + 32, s.add(o[1]), r.add(bt(e17, l + 16))), [s, a] = [a, s], ns(ns(i[0], o[0], d).add(wx(r).mul(YS)).add(s), ns(i[1], o[1], d).add(a), d);
}
function NM(e17, t) {
  return t === "string" ? nd(e17) : Rm([e17], t);
}
function TM(e17, t) {
  return e17 instanceof Float32Array && t === "float32" || e17 instanceof Int32Array && t === "int32" || e17 instanceof Uint8Array && t === "bool";
}
function Rm(e17, t) {
  if (t === "string") throw new Error("Cannot convert a string[] to a TypedArray");
  if (Array.isArray(e17) && (e17 = is(e17)), G().getBool("DEBUG") && PS(e17, t), TM(e17, t)) return e17;
  if (t == null || t === "float32" || t === "complex64") return new Float32Array(e17);
  if (t === "int32") return new Int32Array(e17);
  if (t === "bool") {
    let n = new Uint8Array(e17.length);
    for (let a = 0; a < n.length; ++a) Math.round(e17[a]) !== 0 && (n[a] = 1);
    return n;
  } else throw new Error(`Unknown data type ${t}`);
}
function gc() {
  return G().platform.now();
}
function CM(e17, t) {
  return G().platform.fetch(e17, t);
}
function nd(e17, t = "utf-8") {
  return t = t || "utf-8", G().platform.encode(e17, t);
}
function qh(e17, t = "utf-8") {
  return t = t || "utf-8", G().platform.decode(e17, t);
}
function en(e17) {
  return G().platform.isTypedArray != null ? G().platform.isTypedArray(e17) : XS(e17);
}
function is(e17, t = [], n = false) {
  if (t == null && (t = []), typeof e17 == "boolean" || typeof e17 == "number" || typeof e17 == "string" || vm(e17) || e17 == null || en(e17) && n) t.push(e17);
  else if (Array.isArray(e17) || en(e17)) for (let a = 0; a < e17.length; ++a) is(e17[a], t, n);
  else {
    let a = -1;
    for (let r of Object.keys(e17)) /^([1-9]+[0-9]*|0)$/.test(r) && (a = Math.max(a, Number(r)));
    for (let r = 0; r <= a; r++) is(e17[r], t, n);
  }
  return t;
}
var EM = class {
  constructor(e17, t) {
    this.backendTimer = e17, this.logger = t, t == null && (this.logger = new AM());
  }
  profileKernel(e17, t, n) {
    let a, r = () => {
      a = n();
    }, s, i = gc();
    if (this.backendTimer.timerAvailable()) s = this.backendTimer.time(r);
    else {
      r();
      for (let o of a) o.dataSync();
      s = Promise.resolve({ kernelMs: gc() - i });
    }
    if (G().getBool("CHECK_COMPUTATION_FOR_ERRORS")) for (let o = 0; o < a.length; o++) {
      let l = a[o];
      l.data().then((u) => {
        _M(u, l.dtype, e17);
      });
    }
    return { kernelName: e17, outputs: a, inputs: t, timeMs: s.then((o) => o.kernelMs), extraInfo: s.then((o) => o.getExtraProfileInfo != null ? o.getExtraProfileInfo() : "") };
  }
  logKernelProfile(e17) {
    let { kernelName: t, outputs: n, timeMs: a, inputs: r, extraInfo: s } = e17;
    n.forEach((i) => {
      Promise.all([i.data(), a, s]).then((o) => {
        this.logger.logKernelProfile(t, i, o[0], o[1], r, o[2]);
      });
    });
  }
};
function _M(e17, t, n) {
  if (t !== "float32") return false;
  for (let a = 0; a < e17.length; a++) {
    let r = e17[a];
    if (isNaN(r) || !isFinite(r)) return console.warn(`Found ${r} in the result of '${n}'`), true;
  }
  return false;
}
var AM = class {
  logKernelProfile(e17, t, n, a, r, s) {
    let i = typeof a == "number" ? uc(`${a}ms`, 9) : a.error, o = uc(e17, 25), l = t.rank, u = t.size, p = uc(t.shape.toString(), 14), d = "";
    for (let c in r) {
      let h = r[c];
      if (h != null) {
        let m = h.shape || t.shape, f = m.length;
        d += `${c}: ${f}D ${f > 0 ? m : ""} `;
      }
    }
    console.log(`%c${o}	%c${i}	%c${l}D ${p}	%c${u}	%c${d}	%c${s}`, "font-weight:bold", "color:red", "color:blue", "color: orange", "color: green", "color: steelblue");
  }
};
function FM(e17, t, n) {
  let a = {}, r = {};
  for (let l = 0; l < t.length; l++) a[t[l].id] = true;
  for (let l = 0; l < e17.length; l++) {
    let u = e17[l], p = u.inputs;
    for (let d in p) {
      let c = p[d], h = false;
      for (let m = 0; m < t.length; m++) if (a[c.id]) {
        u.outputs.forEach((f) => a[f.id] = true), h = true, r[u.id] = true;
        break;
      }
      if (h) break;
    }
  }
  let s = {};
  s[n.id] = true;
  let i = {};
  for (let l = e17.length - 1; l >= 0; l--) {
    let u = e17[l], p = u.inputs;
    for (let d = 0; d < u.outputs.length; d++) if (s[u.outputs[d].id]) {
      for (let c in p) s[p[c].id] = true, i[u.id] = true;
      break;
    }
  }
  let o = [];
  for (let l = 0; l < e17.length; l++) {
    let u = e17[l];
    if (r[u.id] && i[u.id]) {
      let p = {};
      for (let c in u.inputs) {
        let h = u.inputs[c];
        a[h.id] && (p[c] = h);
      }
      let d = Object.assign({}, u);
      d.inputs = p, d.outputs = u.outputs, o.push(d);
    }
  }
  return o;
}
function $M(e17, t, n, a) {
  for (let r = t.length - 1; r >= 0; r--) {
    let s = t[r], i = [];
    if (s.outputs.forEach((l) => {
      let u = e17[l.id];
      u != null ? i.push(u) : i.push(null);
    }), s.gradient == null) throw new Error(`Cannot compute gradient: gradient function not found for ${s.kernelName}.`);
    let o = s.gradient(i);
    for (let l in s.inputs) {
      if (!(l in o)) throw new Error(`Cannot backprop through input ${l}. Available gradients found: ${Object.keys(o)}.`);
      let u = n(() => o[l]());
      if (u.dtype !== "float32") throw new Error(`Error in gradient for op ${s.kernelName}. The gradient of input ${l} must have 'float32' dtype, but has '${u.dtype}'`);
      let p = s.inputs[l];
      if (!Ar(u.shape, p.shape)) throw new Error(`Error in gradient for op ${s.kernelName}. The gradient of input '${l}' has shape '${u.shape}', which does not match the shape of the input '${p.shape}'`);
      if (e17[p.id] == null) e17[p.id] = u;
      else {
        let d = e17[p.id];
        e17[p.id] = a(d, u), d.dispose();
      }
    }
  }
}
var Xk = 20;
var Kp = 3;
var sx = 7;
function DM(e17, t, n, a) {
  let r = Xl(t), s = RM(e17, t, n, r), i = t.length, o = Dh(e17, t, n, r, s), l = ["Tensor"];
  return a && (l.push(`  dtype: ${n}`), l.push(`  rank: ${i}`), l.push(`  shape: [${t}]`), l.push("  values:")), l.push(o.map((u) => "    " + u).join(`
`)), l.join(`
`);
}
function RM(e17, t, n, a) {
  let r = ot(t), s = a[a.length - 1], i = new Array(s).fill(0), o = t.length, l = n === "complex64" ? ec(e17) : e17;
  if (o > 1) for (let u = 0; u < r / s; u++) {
    let p = u * s;
    for (let d = 0; d < s; d++) i[d] = Math.max(i[d], Qp(l[p + d], 0, n).length);
  }
  return i;
}
function Qp(e17, t, n) {
  let a;
  return Array.isArray(e17) ? a = `${parseFloat(e17[0].toFixed(sx))} + ${parseFloat(e17[1].toFixed(sx))}j` : Jr(e17) ? a = `'${e17}'` : n === "bool" ? a = JS(e17) : a = parseFloat(e17.toFixed(sx)).toString(), uc(a, t);
}
function JS(e17) {
  return e17 === 0 ? "false" : "true";
}
function Dh(e17, t, n, a, r, s = true) {
  let i = n === "complex64" ? 2 : 1, o = t[0], l = t.length;
  if (l === 0) {
    if (n === "complex64") {
      let f = ec(e17);
      return [Qp(f[0], 0, n)];
    }
    return n === "bool" ? [JS(e17[0])] : [e17[0].toString()];
  }
  if (l === 1) {
    if (o > Xk) {
      let f = Kp * i, g = Array.from(e17.slice(0, f)), b = Array.from(e17.slice((o - Kp) * i, o * i));
      return n === "complex64" && (g = ec(g), b = ec(b)), ["[" + g.map((y, x) => Qp(y, r[x], n)).join(", ") + ", ..., " + b.map((y, x) => Qp(y, r[o - Kp + x], n)).join(", ") + "]"];
    }
    return ["[" + (n === "complex64" ? ec(e17) : Array.from(e17)).map((f, g) => Qp(f, r[g], n)).join(", ") + "]"];
  }
  let u = t.slice(1), p = a.slice(1), d = a[0] * i, c = [];
  if (o > Xk) {
    for (let f = 0; f < Kp; f++) {
      let g = f * d, b = g + d;
      c.push(...Dh(e17.slice(g, b), u, n, p, r, false));
    }
    c.push("...");
    for (let f = o - Kp; f < o; f++) {
      let g = f * d, b = g + d;
      c.push(...Dh(e17.slice(g, b), u, n, p, r, f === o - 1));
    }
  } else for (let f = 0; f < o; f++) {
    let g = f * d, b = g + d;
    c.push(...Dh(e17.slice(g, b), u, n, p, r, f === o - 1));
  }
  let h = l === 2 ? "," : "";
  c[0] = "[" + (o > 0 ? c[0] + h : "");
  for (let f = 1; f < c.length - 1; f++) c[f] = " " + c[f] + h;
  let m = `,
`;
  for (let f = 2; f < l; f++) m += `
`;
  return c[c.length - 1] = " " + c[c.length - 1] + "]" + (s ? "" : m), c;
}
function ec(e17) {
  let t = [];
  for (let n = 0; n < e17.length; n += 2) t.push([e17[n], e17[n + 1]]);
  return t;
}
var Wt = class {
  constructor(e17, t, n) {
    if (this.dtype = t, this.shape = e17.slice(), this.size = ot(e17), n != null) {
      let a = n.length;
      A(a === this.size, () => `Length of values '${a}' does not match the size inferred by the shape '${this.size}'.`);
    }
    if (t === "complex64") throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");
    this.values = n || Sv(t, this.size), this.strides = Xl(e17);
  }
  set(e17, ...t) {
    t.length === 0 && (t = [0]), A(t.length === this.rank, () => `The number of provided coordinates (${t.length}) must match the rank (${this.rank})`);
    let n = this.locToIndex(t);
    this.values[n] = e17;
  }
  get(...e17) {
    e17.length === 0 && (e17 = [0]);
    let t = 0;
    for (let a of e17) {
      if (a < 0 || a >= this.shape[t]) {
        let r = `Requested out of range element at ${e17}.   Buffer shape=${this.shape}`;
        throw new Error(r);
      }
      t++;
    }
    let n = e17[e17.length - 1];
    for (let a = 0; a < e17.length - 1; ++a) n += this.strides[a] * e17[a];
    return this.values[n];
  }
  locToIndex(e17) {
    if (this.rank === 0) return 0;
    if (this.rank === 1) return e17[0];
    let t = e17[e17.length - 1];
    for (let n = 0; n < e17.length - 1; ++n) t += this.strides[n] * e17[n];
    return t;
  }
  indexToLoc(e17) {
    if (this.rank === 0) return [];
    if (this.rank === 1) return [e17];
    let t = new Array(this.shape.length);
    for (let n = 0; n < t.length - 1; ++n) t[n] = Math.floor(e17 / this.strides[n]), e17 -= t[n] * this.strides[n];
    return t[t.length - 1] = e17, t;
  }
  get rank() {
    return this.shape.length;
  }
  toTensor() {
    return za().makeTensor(this.values, this.shape, this.dtype);
  }
};
var za = null;
var Sl = null;
var MM = null;
function OM(e17) {
  za = e17;
}
function PM(e17) {
  Sl = e17;
}
function LM(e17) {
  MM = e17;
}
var Ce = class {
  constructor(e17, t, n, a) {
    this.kept = false, this.isDisposedInternal = false, this.shape = e17.slice(), this.dtype = t || "float32", this.size = ot(e17), this.strides = Xl(e17), this.dataId = n, this.id = a, this.rankType = this.rank < 5 ? this.rank.toString() : "higher";
  }
  get rank() {
    return this.shape.length;
  }
  async buffer() {
    let e17 = await this.data();
    return Sl.buffer(this.shape, this.dtype, e17);
  }
  bufferSync() {
    return Sl.buffer(this.shape, this.dtype, this.dataSync());
  }
  async array() {
    let e17 = await this.data();
    return El(this.shape, e17, this.dtype === "complex64");
  }
  arraySync() {
    return El(this.shape, this.dataSync(), this.dtype === "complex64");
  }
  async data() {
    this.throwIfDisposed();
    let e17 = za().read(this.dataId);
    if (this.dtype === "string") {
      let t = await e17;
      try {
        return t.map((n) => qh(n));
      } catch (n) {
        throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().");
      }
    }
    return e17;
  }
  dataToGPU(e17) {
    return this.throwIfDisposed(), za().readToGPU(this.dataId, e17);
  }
  dataSync() {
    this.throwIfDisposed();
    let e17 = za().readSync(this.dataId);
    if (this.dtype === "string") try {
      return e17.map((t) => qh(t));
    } catch (t) {
      throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().");
    }
    return e17;
  }
  async bytes() {
    this.throwIfDisposed();
    let e17 = await za().read(this.dataId);
    return this.dtype === "string" ? e17 : new Uint8Array(e17.buffer);
  }
  dispose() {
    this.isDisposed || (this.kerasMask && this.kerasMask.dispose(), za().disposeTensor(this), this.isDisposedInternal = true);
  }
  get isDisposed() {
    return this.isDisposedInternal;
  }
  throwIfDisposed() {
    if (this.isDisposed) throw new Error("Tensor is disposed.");
  }
  print(e17 = false) {
    return Sl.print(this, e17);
  }
  clone() {
    return this.throwIfDisposed(), Sl.clone(this);
  }
  toString(e17 = false) {
    let t = this.dataSync();
    return DM(t, this.shape, this.dtype, e17);
  }
  cast(e17) {
    return this.throwIfDisposed(), Sl.cast(this, e17);
  }
  variable(e17 = true, t, n) {
    return this.throwIfDisposed(), za().makeVariable(this, e17, t, n);
  }
};
Object.defineProperty(Ce, Symbol.hasInstance, { value: (e17) => !!e17 && e17.data != null && e17.dataSync != null && e17.throwIfDisposed != null });
function Q() {
  return Cv("Tensor", () => Ce);
}
Q();
var os = class extends Ce {
  constructor(e17, t, n, a) {
    super(e17.shape, e17.dtype, e17.dataId, a), this.trainable = t, this.name = n;
  }
  assign(e17) {
    if (e17.dtype !== this.dtype) throw new Error(`dtype of the new value (${e17.dtype}) and previous value (${this.dtype}) must match`);
    if (!Ar(e17.shape, this.shape)) throw new Error(`shape of the new value (${e17.shape}) and previous value (${this.shape}) must match`);
    za().disposeTensor(this), this.dataId = e17.dataId, za().incRef(this, null);
  }
  dispose() {
    za().disposeVariable(this), this.isDisposedInternal = true;
  }
};
Object.defineProperty(os, Symbol.hasInstance, { value: (e17) => e17 instanceof Ce && e17.assign != null && e17.assign instanceof Function });
var Wa = {};
_e(Wa, { assertTypesMatch: () => tN, getTensorsInContainer: () => _v, isTensorInList: () => WM, makeTypesMatch: () => _t });
var kx;
(function(e17) {
  e17.R0 = "R0", e17.R1 = "R1", e17.R2 = "R2", e17.R3 = "R3", e17.R4 = "R4", e17.R5 = "R5", e17.R6 = "R6";
})(kx || (kx = {}));
var Ix;
(function(e17) {
  e17.float32 = "float32", e17.int32 = "int32", e17.bool = "int32", e17.complex64 = "complex64";
})(Ix || (Ix = {}));
var Sx;
(function(e17) {
  e17.float32 = "float32", e17.int32 = "int32", e17.bool = "bool", e17.complex64 = "complex64";
})(Sx || (Sx = {}));
var Nx;
(function(e17) {
  e17.float32 = "float32", e17.int32 = "float32", e17.bool = "float32", e17.complex64 = "complex64";
})(Nx || (Nx = {}));
var Tx;
(function(e17) {
  e17.float32 = "complex64", e17.int32 = "complex64", e17.bool = "complex64", e17.complex64 = "complex64";
})(Tx || (Tx = {}));
var zM = { float32: Nx, int32: Ix, bool: Sx, complex64: Tx };
function fa(e17, t) {
  if (e17 === "string" || t === "string") {
    if (e17 === "string" && t === "string") return "string";
    throw new Error(`Can not upcast ${e17} with ${t}`);
  }
  return zM[e17][t];
}
function Mm(e17) {
  return fa(e17, "int32");
}
function QS(e17) {
  return e17 != null && typeof e17 == "object" && "texture" in e17 && e17.texture instanceof WebGLTexture;
}
function eN(e17) {
  return typeof GPUBuffer != "undefined" && e17 != null && typeof e17 == "object" && "buffer" in e17 && e17.buffer instanceof GPUBuffer;
}
function _t(e17, t) {
  if (e17.dtype === t.dtype) return [e17, t];
  let n = fa(e17.dtype, t.dtype);
  return [e17.cast(n), t.cast(n)];
}
function tN(e17, t) {
  A(e17.dtype === t.dtype, () => `The dtypes of the first(${e17.dtype}) and second(${t.dtype}) input must match`);
}
function WM(e17, t) {
  return t.some((n) => n.id === e17.id);
}
function _v(e17) {
  let t = [];
  return nN(e17, t, /* @__PURE__ */ new Set()), t;
}
function nN(e17, t, n) {
  if (e17 == null) return;
  if (e17 instanceof Ce) {
    t.push(e17);
    return;
  }
  if (!BM(e17)) return;
  let a = e17;
  for (let r in a) {
    let s = a[r];
    n.has(s) || (n.add(s), nN(s, t, n));
  }
}
function BM(e17) {
  return Array.isArray(e17) || typeof e17 == "object";
}
function ix(e17) {
  return e17.kernelName != null;
}
var Yk = class {
  constructor() {
    this.registeredVariables = {}, this.nextTapeNodeId = 0, this.numBytes = 0, this.numTensors = 0, this.numStringTensors = 0, this.numDataBuffers = 0, this.gradientDepth = 0, this.kernelDepth = 0, this.scopeStack = [], this.numDataMovesStack = [], this.nextScopeId = 0, this.tensorInfo = /* @__PURE__ */ new WeakMap(), this.profiling = false, this.activeProfile = { newBytes: 0, newTensors: 0, peakBytes: 0, kernels: [], result: null, get kernelNames() {
      return Array.from(new Set(this.kernels.map((e17) => e17.name)));
    } };
  }
  dispose() {
    for (let e17 in this.registeredVariables) this.registeredVariables[e17].dispose();
  }
};
var Av = class Cx {
  constructor(t) {
    this.ENV = t, this.registry = {}, this.registryFactory = {}, this.pendingBackendInitId = 0, this.state = new Yk();
  }
  async ready() {
    if (this.pendingBackendInit != null) return this.pendingBackendInit.then(() => {
    });
    if (this.backendInstance != null) return;
    let t = this.getSortedBackends();
    for (let n = 0; n < t.length; n++) {
      let a = t[n];
      if (await this.initializeBackend(a).success) {
        await this.setBackend(a);
        return;
      }
    }
    throw new Error("Could not initialize any backends, all backend initializations failed.");
  }
  get backend() {
    if (this.pendingBackendInit != null) throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);
    if (this.backendInstance == null) {
      let { name: t, asyncInit: n } = this.initializeBackendsAndReturnBest();
      if (n) throw new Error(`The highest priority backend '${t}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);
      this.setBackend(t);
    }
    return this.backendInstance;
  }
  backendNames() {
    return Object.keys(this.registryFactory);
  }
  findBackend(t) {
    if (!(t in this.registry)) if (t in this.registryFactory) {
      let { asyncInit: n } = this.initializeBackend(t);
      if (n) return null;
    } else return null;
    return this.registry[t];
  }
  findBackendFactory(t) {
    return t in this.registryFactory ? this.registryFactory[t].factory : null;
  }
  registerBackend(t, n, a = 1) {
    return t in this.registryFactory ? (Zr(`${t} backend was already registered. Reusing existing backend factory.`), false) : (this.registryFactory[t] = { factory: n, priority: a }, true);
  }
  async setBackend(t) {
    if (this.registryFactory[t] == null) throw new Error(`Backend name '${t}' not found in registry`);
    if (this.backendName = t, this.registry[t] == null) {
      this.backendInstance = null;
      let { success: n, asyncInit: a } = this.initializeBackend(t);
      if (!(a ? await n : n)) return false;
    }
    return this.backendInstance = this.registry[t], this.setupRegisteredKernels(), this.profiler = new EM(this.backendInstance), true;
  }
  setupRegisteredKernels() {
    jh(this.backendName).forEach((t) => {
      t.setupFunc != null && t.setupFunc(this.backendInstance);
    });
  }
  disposeRegisteredKernels(t) {
    jh(t).forEach((n) => {
      n.disposeFunc != null && n.disposeFunc(this.registry[t]);
    });
  }
  initializeBackend(t) {
    let n = this.registryFactory[t];
    if (n == null) throw new Error(`Cannot initialize backend ${t}, no registration found.`);
    try {
      let a = n.factory();
      if (a && !(a instanceof Fc) && typeof a.then == "function") {
        let r = ++this.pendingBackendInitId, s = a.then((i) => r < this.pendingBackendInitId ? false : (this.registry[t] = i, this.pendingBackendInit = null, true)).catch((i) => (r < this.pendingBackendInitId || (this.pendingBackendInit = null, Zr(`Initialization of backend ${t} failed`), Zr(i.stack || i.message)), false));
        return this.pendingBackendInit = s, { success: s, asyncInit: true };
      } else return this.registry[t] = a, { success: true, asyncInit: false };
    } catch (a) {
      return Zr(`Initialization of backend ${t} failed`), Zr(a.stack || a.message), { success: false, asyncInit: false };
    }
  }
  removeBackend(t) {
    if (!(t in this.registryFactory)) throw new Error(`${t} backend not found in registry`);
    this.backendName === t && this.pendingBackendInit != null && this.pendingBackendInitId++, t in this.registry && (this.disposeRegisteredKernels(t), this.registry[t].dispose(), delete this.registry[t]), delete this.registryFactory[t], this.backendName === t && (this.pendingBackendInit = null, this.backendName = null, this.backendInstance = null);
  }
  getSortedBackends() {
    if (Object.keys(this.registryFactory).length === 0) throw new Error("No backend found in registry.");
    return Object.keys(this.registryFactory).sort((t, n) => this.registryFactory[n].priority - this.registryFactory[t].priority);
  }
  initializeBackendsAndReturnBest() {
    let t = this.getSortedBackends();
    for (let n = 0; n < t.length; n++) {
      let a = t[n], { success: r, asyncInit: s } = this.initializeBackend(a);
      if (s || r) return { name: a, asyncInit: s };
    }
    throw new Error("Could not initialize any backends, all backend initializations failed.");
  }
  moveData(t, n) {
    let a = this.state.tensorInfo.get(n), r = a.backend, s = this.readSync(n), i = r.refCount(n);
    r.disposeData(n, true), a.backend = t, t.move(n, s, a.shape, a.dtype, i), this.shouldCheckForMemLeaks() && this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1]++;
  }
  tidy(t, n) {
    let a = null;
    if (n == null) {
      if (typeof t != "function") throw new Error("Please provide a function to tidy()");
      n = t;
    } else {
      if (typeof t != "string" && !(t instanceof String)) throw new Error("When calling with two arguments, the first argument to tidy() must be a string");
      if (typeof n != "function") throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");
      a = t;
    }
    let r;
    return this.scopedRun(() => this.startScope(a), () => this.endScope(r), () => (r = n(), r instanceof Promise && console.error("Cannot return a Promise inside of tidy."), r));
  }
  scopedRun(t, n, a) {
    t();
    try {
      let r = a();
      return n(), r;
    } catch (r) {
      throw n(), r;
    }
  }
  nextTensorId() {
    return Cx.nextTensorId++;
  }
  nextVariableId() {
    return Cx.nextVariableId++;
  }
  clone(t) {
    let n = P.runKernel(eo, { x: t }), a = { x: t }, r = (i) => ({ x: () => {
      let o = "float32", l = { x: i }, u = { dtype: o };
      return P.runKernel(Mi, l, u);
    } }), s = [];
    return this.addTapeNode(this.state.activeScope.name, a, [n], r, s, {}), n;
  }
  runKernel(t, n, a) {
    if (this.backendName == null && this.backend, fc(t, this.backendName) == null) throw new Error(`Kernel '${t}' not registered for backend '${this.backendName}'`);
    return this.runKernelFunc({ kernelName: t, inputs: n, attrs: a });
  }
  shouldCheckForMemLeaks() {
    return this.ENV.getBool("IS_TEST");
  }
  checkKernelForMemLeak(t, n, a) {
    let r = this.backend.numDataIds(), s = 0;
    a.forEach((l) => {
      s += l.dtype === "complex64" ? 3 : 1;
    });
    let i = this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1], o = r - n - s - i;
    if (o > 0) throw new Error(`Backend '${this.backendName}' has an internal memory leak (${o} data ids) after running '${t}'`);
  }
  runKernelFunc(t) {
    let n, a = [], r = this.isTapeOn(), s = this.state.numBytes, i = this.state.numTensors;
    this.shouldCheckForMemLeaks() && this.state.numDataMovesStack.push(0);
    let o;
    this.backendName == null && this.backend;
    let l, u = ix(t) ? t.kernelName : this.state.activeScope != null ? this.state.activeScope.name : "";
    if (ix(t)) {
      let { kernelName: m, inputs: f, attrs: g } = t;
      this.backendName == null && this.backend;
      let b = fc(m, this.backendName);
      A(b != null, () => `Cannot find registered kernel '${m}' for backend '${this.backendName}'`), o = () => {
        let y = this.backend.numDataIds();
        l = b.kernelFunc({ inputs: f, attrs: g, backend: this.backend });
        let x = Array.isArray(l) ? l : [l];
        this.shouldCheckForMemLeaks() && this.checkKernelForMemLeak(m, y, x);
        let v = x.map((I) => I.rank != null ? I : this.makeTensorFromTensorInfo(I));
        if (r) {
          let I = this.getTensorsForGradient(m, f, v);
          a = this.saveTensorsForBackwardMode(I);
        }
        return v;
      };
    } else {
      let { forwardFunc: m } = t, f = (g) => {
        r && (a = g.map((b) => this.keep(this.clone(b))));
      };
      o = () => {
        let g = this.backend.numDataIds();
        l = this.tidy(() => m(this.backend, f));
        let b = Array.isArray(l) ? l : [l];
        return this.shouldCheckForMemLeaks() && this.checkKernelForMemLeak(u, g, b), b;
      };
    }
    let { inputs: p, attrs: d } = t, c = ix(t) ? null : t.backwardsFunc, h;
    return this.scopedRun(() => this.state.kernelDepth++, () => this.state.kernelDepth--, () => {
      !this.ENV.getBool("DEBUG") && !this.state.profiling ? n = o() : (h = this.profiler.profileKernel(u, p, () => o()), this.ENV.getBool("DEBUG") && this.profiler.logKernelProfile(h), n = h.outputs);
    }), r && this.addTapeNode(u, p, n, c, a, d), this.state.profiling && this.state.activeProfile.kernels.push({ name: u, bytesAdded: this.state.numBytes - s, totalBytesSnapshot: this.state.numBytes, tensorsAdded: this.state.numTensors - i, totalTensorsSnapshot: this.state.numTensors, inputShapes: Object.keys(p).map((m) => p[m] != null ? p[m].shape : null), outputShapes: n.map((m) => m.shape), kernelTimeMs: h.timeMs, extraInfo: h.extraInfo }), Array.isArray(l) ? n : n[0];
  }
  saveTensorsForBackwardMode(t) {
    return t.map((n) => this.keep(this.clone(n)));
  }
  getTensorsForGradient(t, n, a) {
    let r = vx(t);
    if (r != null) {
      let s = r.inputsToSave || [], i = r.outputsToSave || [], o;
      r.saveAllInputs ? (A(Array.isArray(n), () => "saveAllInputs is true, expected inputs to be an array."), o = Object.keys(n).map((u) => n[u])) : o = s.map((u) => n[u]);
      let l = a.filter((u, p) => i[p]);
      return o.concat(l);
    }
    return [];
  }
  makeTensor(t, n, a, r) {
    if (t == null) throw new Error("Values passed to engine.makeTensor() are null");
    a = a || "float32", r = r || this.backend;
    let s = t;
    a === "string" && Jr(t[0]) && (s = t.map((l) => nd(l)));
    let i = r.write(s, n, a), o = new Ce(n, a, i, this.nextTensorId());
    if (this.trackTensor(o, r), a === "string") {
      let l = this.state.tensorInfo.get(i), u = zS(s);
      this.state.numBytes += u - l.bytes, l.bytes = u;
    }
    return o;
  }
  makeTensorFromDataId(t, n, a, r) {
    a = a || "float32";
    let s = { dataId: t, shape: n, dtype: a };
    return this.makeTensorFromTensorInfo(s, r);
  }
  makeTensorFromTensorInfo(t, n) {
    let { dataId: a, shape: r, dtype: s } = t, i = new Ce(r, s, a, this.nextTensorId());
    return this.trackTensor(i, n), i;
  }
  makeVariable(t, n = true, a, r) {
    a = a || this.nextVariableId().toString(), r != null && r !== t.dtype && (t = t.cast(r));
    let s = new os(t, n, a, this.nextTensorId());
    if (this.state.registeredVariables[s.name] != null) throw new Error(`Variable with name ${s.name} was already registered`);
    return this.state.registeredVariables[s.name] = s, this.incRef(s, this.backend), s;
  }
  trackTensor(t, n) {
    this.state.numTensors++, t.dtype === "string" && this.state.numStringTensors++;
    let a = 0;
    t.dtype !== "complex64" && t.dtype !== "string" && (a = t.size * Uh(t.dtype)), this.state.numBytes += a, this.state.tensorInfo.has(t.dataId) || (this.state.numDataBuffers++, this.state.tensorInfo.set(t.dataId, { backend: n || this.backend, dtype: t.dtype, shape: t.shape, bytes: a })), t instanceof os || this.track(t);
  }
  incRef(t, n) {
    this.trackTensor(t, n), this.backend.incRef(t.dataId);
  }
  removeDataId(t, n) {
    this.state.tensorInfo.has(t) && this.state.tensorInfo.get(t).backend === n && (this.state.tensorInfo.delete(t), this.state.numDataBuffers--);
  }
  disposeTensor(t) {
    if (!this.state.tensorInfo.has(t.dataId)) return;
    let n = this.state.tensorInfo.get(t.dataId);
    if (this.state.numTensors--, t.dtype === "string" && (this.state.numStringTensors--, this.state.numBytes -= n.bytes), t.dtype !== "complex64" && t.dtype !== "string") {
      let a = t.size * Uh(t.dtype);
      this.state.numBytes -= a;
    }
    n.backend.disposeData(t.dataId) && this.removeDataId(t.dataId, n.backend);
  }
  disposeVariables() {
    for (let t in this.state.registeredVariables) {
      let n = this.state.registeredVariables[t];
      this.disposeVariable(n);
    }
  }
  disposeVariable(t) {
    this.disposeTensor(t), this.state.registeredVariables[t.name] != null && delete this.state.registeredVariables[t.name];
  }
  memory() {
    let t = this.backend.memory();
    return t.numTensors = this.state.numTensors, t.numDataBuffers = this.state.numDataBuffers, t.numBytes = this.state.numBytes, this.state.numStringTensors > 0 && (t.unreliable = true, t.reasons == null && (t.reasons = []), t.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")), t;
  }
  async profile(t) {
    this.state.profiling = true;
    let n = this.state.numBytes, a = this.state.numTensors;
    this.state.activeProfile.kernels = [], this.state.activeProfile.result = await t(), this.state.profiling = false, this.state.activeProfile.peakBytes = Math.max(...this.state.activeProfile.kernels.map((r) => r.totalBytesSnapshot)), this.state.activeProfile.newBytes = this.state.numBytes - n, this.state.activeProfile.newTensors = this.state.numTensors - a;
    for (let r of this.state.activeProfile.kernels) r.kernelTimeMs = await r.kernelTimeMs, r.extraInfo = await r.extraInfo;
    return this.state.activeProfile;
  }
  isTapeOn() {
    return this.state.gradientDepth > 0 && this.state.kernelDepth === 0;
  }
  addTapeNode(t, n, a, r, s, i) {
    let o = { id: this.state.nextTapeNodeId++, kernelName: t, inputs: n, outputs: a, saved: s }, l = vx(t);
    l != null && (r = l.gradFunc), r != null && (o.gradient = (u) => (u = u.map((p, d) => {
      if (p == null) {
        let c = a[d], h = xm(c.size, c.dtype);
        return this.makeTensor(h, c.shape, c.dtype);
      }
      return p;
    }), r(u.length > 1 ? u : u[0], s, i))), this.state.activeTape.push(o);
  }
  keep(t) {
    return t.kept = true, t;
  }
  startTape() {
    this.state.gradientDepth === 0 && (this.state.activeTape = []), this.state.gradientDepth++;
  }
  endTape() {
    this.state.gradientDepth--;
  }
  startScope(t) {
    let n = { track: [], name: "unnamed scope", id: this.state.nextScopeId++ };
    t && (n.name = t), this.state.scopeStack.push(n), this.state.activeScope = n;
  }
  endScope(t) {
    let n = _v(t), a = new Set(n.map((s) => s.id));
    for (let s = 0; s < this.state.activeScope.track.length; s++) {
      let i = this.state.activeScope.track[s];
      !i.kept && !a.has(i.id) && i.dispose();
    }
    let r = this.state.scopeStack.pop();
    this.state.activeScope = this.state.scopeStack.length === 0 ? null : this.state.scopeStack[this.state.scopeStack.length - 1], n.forEach((s) => {
      !s.kept && s.scopeId === r.id && this.track(s);
    });
  }
  gradients(t, n, a, r = false) {
    if (A(n.length > 0, () => "gradients() received an empty list of xs."), a != null && a.dtype !== "float32") throw new Error(`dy must have 'float32' dtype, but has '${a.dtype}'`);
    let s = this.scopedRun(() => this.startTape(), () => this.endTape(), () => this.tidy("forward", t));
    A(s instanceof Ce, () => "The result y returned by f() must be a tensor.");
    let i = FM(this.state.activeTape, n, s);
    if (!r && i.length === 0 && n.length > 0) throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");
    return this.tidy("backward", () => {
      let o = {};
      o[s.id] = a == null ? VM(s.shape) : a, $M(o, i, (u) => this.tidy(u), UM);
      let l = n.map((u) => o[u.id]);
      return this.state.gradientDepth === 0 && (this.state.activeTape.forEach((u) => {
        for (let p of u.saved) p.dispose();
      }), this.state.activeTape = null), { value: s, grads: l };
    });
  }
  customGrad(t) {
    return A(ss(t), () => "The f passed in customGrad(f) must be a function."), (...n) => {
      A(n.every((o) => o instanceof Ce), () => "The args passed in customGrad(f)(x1, x2,...) must all be tensors");
      let a, r = {};
      n.forEach((o, l) => {
        r[l] = o;
      });
      let s = (o, l) => (a = t(...n, l), A(a.value instanceof Ce, () => "The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"), A(ss(a.gradFunc), () => "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."), a.value), i = (o, l) => {
        let u = a.gradFunc(o, l), p = Array.isArray(u) ? u : [u];
        A(p.length === n.length, () => "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."), A(p.every((c) => c instanceof Ce), () => "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.");
        let d = {};
        return p.forEach((c, h) => {
          d[h] = () => c;
        }), d;
      };
      return this.runKernelFunc({ forwardFunc: s, backwardsFunc: i, inputs: r });
    };
  }
  readSync(t) {
    return this.state.tensorInfo.get(t).backend.readSync(t);
  }
  read(t) {
    return this.state.tensorInfo.get(t).backend.read(t);
  }
  readToGPU(t, n) {
    return this.state.tensorInfo.get(t).backend.readToGPU(t, n);
  }
  async time(t) {
    let n = gc(), a = await this.backend.time(t);
    return a.wallMs = gc() - n, a;
  }
  track(t) {
    return this.state.activeScope != null && (t.scopeId = this.state.activeScope.id, this.state.activeScope.track.push(t)), t;
  }
  get registeredVariables() {
    return this.state.registeredVariables;
  }
  reset() {
    this.pendingBackendInitId++, this.state.dispose(), this.ENV.reset(), this.state = new Yk();
    for (let t in this.registry) this.disposeRegisteredKernels(t), this.registry[t].dispose(), delete this.registry[t];
    this.backendName = null, this.backendInstance = null, this.pendingBackendInit = null;
  }
};
Av.nextTensorId = 0;
Av.nextVariableId = 0;
function VM(e17) {
  let t = Nv(ot(e17), "float32");
  return P.makeTensor(t, e17, "float32");
}
function aN() {
  let e17 = GS();
  if (e17._tfengine == null) {
    let t = new US(e17);
    e17._tfengine = new Av(t);
  }
  return pM(e17._tfengine.ENV), OM(() => e17._tfengine), e17._tfengine;
}
var P = aN();
function UM(e17, t) {
  let n = { a: e17, b: t };
  return P.runKernel(vs, n);
}
var ad = {};
_e(ad, { isBrowser: () => rN, isMobile: () => jM, mockIsMobile: () => HM });
function GM() {
  return typeof navigator != "undefined" && navigator != null;
}
var Ex;
function HM(e17) {
  Ex = e17;
}
function jM(e17) {
  if (Ex !== void 0) return Ex;
  if (e17 || GM()) {
    if (e17 || (e17 = navigator), e17.product === "ReactNative") return true;
    let t = e17.userAgent || e17.vendor || (typeof window != "undefined" ? window.opera : "");
    if (!t) {
      let n = e17;
      return n.userAgentData && n.userAgentData.mobile;
    }
    return /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0, 4));
  }
  return false;
}
function rN() {
  return typeof window != "undefined" && window.document != null || typeof WorkerGlobalScope != "undefined";
}
var Wn = G();
Wn.registerFlag("DEBUG", () => false, (e17) => {
  e17 && console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.");
});
Wn.registerFlag("IS_BROWSER", () => rN());
Wn.registerFlag("IS_NODE", () => typeof process != "undefined" && typeof process.versions != "undefined" && typeof process.versions.node != "undefined");
Wn.registerFlag("IS_CHROME", () => typeof navigator != "undefined" && navigator != null && navigator.userAgent != null && /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor));
Wn.registerFlag("IS_SAFARI", () => typeof navigator != "undefined" && navigator != null && navigator.userAgent != null && /Safari/.test(navigator.userAgent) && /Apple/.test(navigator.vendor));
Wn.registerFlag("PROD", () => false);
Wn.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY", () => Wn.getBool("DEBUG"));
Wn.registerFlag("DEPRECATION_WARNINGS_ENABLED", () => true);
Wn.registerFlag("IS_TEST", () => false);
Wn.registerFlag("CHECK_COMPUTATION_FOR_ERRORS", () => Wn.getBool("DEBUG"));
Wn.registerFlag("WRAP_TO_IMAGEBITMAP", () => false);
Wn.registerFlag("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU", () => false);
Wn.registerFlag("USE_SETTIMEOUTCUSTOM", () => false);
function lr(e17, t) {
  let n = e17;
  if (en(e17)) return t === "string" ? [] : [e17.length];
  if (QS(e17)) {
    let r = e17.channels || "RGBA";
    return [e17.height, e17.width * r.length];
  } else if (eN(e17)) return [e17.buffer.size / (t == null ? 4 : Uh(t))];
  if (!Array.isArray(e17)) return [];
  let a = [];
  for (; Array.isArray(n) || en(n) && t !== "string"; ) a.push(n.length), n = n[0];
  return Array.isArray(e17) && G().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY") && sN(e17, a, []), a;
}
function sN(e17, t, n) {
  if (n = n || [], !Array.isArray(e17) && !en(e17)) {
    A(t.length === 0, () => `Element arr[${n.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`);
    return;
  }
  A(t.length > 0, () => `Element arr[${n.join("][")}] should be a primitive, but is an array of ${e17.length} elements`), A(e17.length === t[0], () => `Element arr[${n.join("][")}] should have ${t[0]} elements, but has ${e17.length} elements`);
  let a = t.slice(1);
  for (let r = 0; r < e17.length; ++r) sN(e17[r], a, n.concat(r));
}
function Zk(e17, t, n, a) {
  if (e17 !== "string_or_numeric") {
    if (e17 == null) throw new Error("Expected dtype cannot be null.");
    if (e17 !== "numeric" && e17 !== t || e17 === "numeric" && t === "string") throw new Error(`Argument '${n}' passed to '${a}' must be ${e17} tensor, but got ${t} tensor`);
  }
}
function E(e17, t, n, a = "numeric") {
  if (e17 instanceof Q()) return Zk(a, e17.dtype, t, n), e17;
  let r = $c(e17);
  if (r !== "string" && ["bool", "int32", "float32"].indexOf(a) >= 0 && (r = a), Zk(a, r, t, n), e17 == null || !en(e17) && !Array.isArray(e17) && typeof e17 != "number" && typeof e17 != "boolean" && typeof e17 != "string") {
    let o = e17 == null ? "null" : e17.constructor.name;
    throw new Error(`Argument '${t}' passed to '${n}' must be a Tensor or TensorLike, but got '${o}'`);
  }
  let s = lr(e17, r);
  !en(e17) && !Array.isArray(e17) && (e17 = [e17]);
  let i = r !== "string" ? Rm(e17, r) : is(e17, [], true);
  return P.makeTensor(i, s, r);
}
function bc(e17, t, n, a = "numeric") {
  if (!Array.isArray(e17)) throw new Error(`Argument ${t} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);
  return e17.map((r, s) => E(r, `${t}[${s}]`, n, a));
}
var Fv = "__op";
function L(e17) {
  let t = Object.keys(e17);
  if (t.length !== 1) throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);
  let n = t[0], a = e17[n];
  n.endsWith("_") && (n = n.substring(0, n.length - 1)), n = n + Fv;
  let r = (...s) => {
    P.startScope(n);
    try {
      let i = a(...s);
      return vm(i) && console.error("Cannot return a Promise inside of tidy."), P.endScope(i), i;
    } catch (i) {
      throw P.endScope(null), i;
    }
  };
  return Object.defineProperty(r, "name", { value: n, configurable: true }), r;
}
function qM(e17, t) {
  let n = E(e17, "real", "complex"), a = E(t, "imag", "complex");
  Nn(n.shape, a.shape, `real and imag shapes, ${n.shape} and ${a.shape}, must match in call to tf.complex().`);
  let r = { real: n, imag: a };
  return P.runKernel(wm, r);
}
var _r = L({ complex_: qM });
function Ss(e17, t, n, a) {
  if (a == null) a = $c(e17);
  else if (a === "complex64") throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");
  if (eN(e17) || QS(e17)) {
    if (a !== "float32" && a !== "int32") throw new Error(`Creating tensor from GPU data only supports 'float32'|'int32' dtype, while the dtype is ${a}.`);
    return P.backend.createTensorFromGPUData(e17, t || n, a);
  }
  if (!en(e17) && !Array.isArray(e17) && typeof e17 != "number" && typeof e17 != "boolean" && typeof e17 != "string") throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");
  if (t != null) {
    na(t);
    let r = ot(t), s = ot(n);
    A(r === s, () => `Based on the provided shape, [${t}], the tensor should have ${r} values but has ${s}`);
    for (let i = 0; i < n.length; ++i) {
      let o = n[i], l = i === n.length - 1 ? o !== ot(t.slice(i)) : true;
      A(n[i] === t[i] || !l, () => `Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${t}). `);
    }
  }
  return !en(e17) && !Array.isArray(e17) && (e17 = [e17]), t = t || n, e17 = a !== "string" ? Rm(e17, a) : is(e17, [], true), P.makeTensor(e17, t, a);
}
function bn(e17, t, n) {
  let a = lr(e17, n);
  return Ss(e17, t, a, n);
}
var ui = { float32: 4, float16: 2, int32: 4, uint16: 2, uint8: 1, bool: 1, complex64: 8 };
var Fr = class iN {
  static join(t) {
    return new iN(t).slice();
  }
  constructor(t) {
    if (this.shards = [], this.previousShardIndex = 0, t == null || (t instanceof Array || (t = [t]), t = t.map((a) => en(a) ? a.buffer : a), t.length === 0)) return;
    this.bufferUniformSize = t[0].byteLength;
    let n = 0;
    for (let a = 0; a < t.length; a++) {
      let r = t[a];
      a !== t.length - 1 && r.byteLength !== this.bufferUniformSize && (this.bufferUniformSize = void 0);
      let s = n + r.byteLength;
      this.shards.push({ buffer: r, start: n, end: s }), n = s;
    }
    this.shards.length === 0 && (this.byteLength = 0), this.byteLength = this.shards[this.shards.length - 1].end;
  }
  slice(t = 0, n = this.byteLength) {
    if (this.shards.length === 0) return new ArrayBuffer(0);
    if (t = isNaN(Number(t)) ? 0 : t, n = isNaN(Number(n)) ? 0 : n, t = Math.max(0, t), n = Math.min(this.byteLength, n), n <= t) return new ArrayBuffer(0);
    let a = this.findShardForByte(t);
    if (a === -1) throw new Error(`Could not find start shard for byte ${t}`);
    let r = n - t, s = new ArrayBuffer(r), i = new Uint8Array(s), o = 0;
    for (let l = a; l < this.shards.length; l++) {
      let u = this.shards[l], p = t + o - u.start, d = o, c = Math.min(n, u.end) - u.start, h = new Uint8Array(u.buffer, p, c - p);
      if (i.set(h, d), o += h.length, n < u.end) break;
    }
    return s;
  }
  findShardForByte(t) {
    if (this.shards.length === 0 || t < 0 || t >= this.byteLength) return -1;
    if (this.bufferUniformSize != null) return this.previousShardIndex = Math.floor(t / this.bufferUniformSize), this.previousShardIndex;
    function n(r) {
      return t < r.start ? -1 : t >= r.end ? 1 : 0;
    }
    if (n(this.shards[this.previousShardIndex]) === 0) return this.previousShardIndex;
    let a = KM(this.shards, n);
    return a === -1 ? -1 : (this.previousShardIndex = a, this.previousShardIndex);
  }
};
function KM(e17, t) {
  let n = 0, a = e17.length;
  for (; n <= a; ) {
    let r = Math.floor((a - n) / 2) + n, s = t(e17[r]);
    if (s === 0) return r;
    s < 0 ? a = r : n = r + 1;
  }
  return -1;
}
function XM() {
  G().set("PROD", true);
}
function YM() {
  G().set("DEBUG", true);
}
function ZM() {
  G().set("DEPRECATION_WARNINGS_ENABLED", false), console.warn("TensorFlow.js deprecation warnings have been disabled.");
}
function $v(e17) {
  G().getBool("DEPRECATION_WARNINGS_ENABLED") && console.warn(e17 + " You can disable deprecation warnings with tf.disableDeprecationWarnings().");
}
LM($v);
function JM() {
  P.disposeVariables();
}
function Ta() {
  return P;
}
function Kh() {
  return P.memory();
}
function QM(e17) {
  return P.profile(e17);
}
function O(e17, t) {
  return P.tidy(e17, t);
}
function Ee(e17) {
  _v(e17).forEach((t) => t.dispose());
}
function Ht(e17) {
  return P.keep(e17);
}
function eO(e17) {
  return P.time(e17);
}
function tO(e17) {
  return P.setBackend(e17);
}
function nO() {
  return P.ready();
}
function oN() {
  return P.backendName;
}
function aO(e17) {
  P.removeBackend(e17);
}
function rO(e17) {
  return P.findBackend(e17);
}
function sO(e17) {
  return P.findBackendFactory(e17);
}
function Om(e17, t, n = 1) {
  return P.registerBackend(e17, t, n);
}
function Dv() {
  return P.backend;
}
function iO(e17, t) {
  G().setPlatform(e17, t);
}
var ls = 4;
async function oO(e17, t) {
  let n = [], a = [], r = Array.isArray(e17) ? e17.map((i) => i.name) : Object.keys(e17);
  for (let i = 0; i < r.length; ++i) {
    let o = r[i], l = Array.isArray(e17) ? e17[i].tensor : e17[o];
    if (l.dtype !== "float32" && l.dtype !== "int32" && l.dtype !== "bool" && l.dtype !== "string" && l.dtype !== "complex64") throw new Error(`Unsupported dtype in weight '${o}': ${l.dtype}`);
    let u = { name: o, shape: l.shape, dtype: l.dtype };
    if (l.dtype === "string") {
      let p = new Promise(async (d) => {
        let c = await l.bytes(), h = c.reduce((g, b) => g + b.length, 0) + ls * c.length, m = new Uint8Array(h), f = 0;
        for (let g = 0; g < c.length; g++) {
          let b = c[g], y = new Uint8Array(new Uint32Array([b.length]).buffer);
          m.set(y, f), f += ls, m.set(b, f), f += b.length;
        }
        d(m);
      });
      a.push(p);
    } else a.push(l.data());
    t != null && (u.group = t), n.push(u);
  }
  let s = await Promise.all(a);
  return { data: pO(s), specs: n };
}
function lN(e17, t) {
  let n = new Fr(e17), a = {}, r = 0;
  for (let s of t) {
    let i = lO(s, (o, l) => n.slice(r + o, r + l));
    a[s.name] = uN(s, n.slice(r, r + i)), r += i;
  }
  return a;
}
function lO(e17, t) {
  let n = ot(e17.shape), a;
  if ("quantization" in e17) {
    let r = e17.quantization;
    a = ui[r.dtype];
  } else if (e17.dtype === "string") {
    let r = 0;
    for (let s = 0; s < n; s++) r += ls + new Uint32Array(t(r, r + ls))[0];
    return r;
  } else a = ui[e17.dtype];
  return n * a;
}
async function uO(e17, t) {
  let n = ot(e17.shape), a;
  if ("quantization" in e17) {
    let r = e17.quantization;
    a = ui[r.dtype];
  } else if (e17.dtype === "string") {
    let r = 0;
    for (let s = 0; s < n; s++) r += ls + new Uint32Array(await t(r, r + ls))[0];
    return r;
  } else a = ui[e17.dtype];
  return n * a;
}
function uN(e17, t) {
  let n = e17.name, a = e17.dtype, r = e17.shape, s = ot(r), i, o = 0;
  if ("quantization" in e17) {
    let l = e17.quantization;
    if (l.dtype === "uint8" || l.dtype === "uint16") {
      if (!("min" in l && "scale" in l)) throw new Error(`Weight ${e17.name} with quantization ${l.dtype} doesn't have corresponding metadata min and scale.`);
    } else if (l.dtype === "float16") {
      if (a !== "float32") throw new Error(`Weight ${e17.name} is quantized with ${l.dtype} which only supports weights of type float32 not ${a}.`);
    } else throw new Error(`Weight ${e17.name} has unknown quantization dtype ${l.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);
    let u = ui[l.dtype], p = l.dtype === "uint8" ? new Uint8Array(t) : new Uint16Array(t);
    if (a === "float32") if (l.dtype === "uint8" || l.dtype === "uint16") {
      i = new Float32Array(p.length);
      for (let d = 0; d < p.length; d++) {
        let c = p[d];
        i[d] = c * l.scale + l.min;
      }
    } else if (l.dtype === "float16") i = bO()(p);
    else throw new Error(`Unsupported quantization type ${l.dtype} for weight type float32.`);
    else if (a === "int32") {
      if (l.dtype !== "uint8" && l.dtype !== "uint16") throw new Error(`Unsupported quantization type ${l.dtype} for weight type int32.`);
      i = new Int32Array(p.length);
      for (let d = 0; d < p.length; d++) {
        let c = p[d];
        i[d] = Math.round(c * l.scale + l.min);
      }
    } else throw new Error(`Unsupported dtype in weight '${n}': ${a}`);
    o += s * u;
  } else if (a === "string") {
    let l = ot(e17.shape);
    i = [];
    for (let u = 0; u < l; u++) {
      let p = new Uint32Array(t.slice(o, o + ls))[0];
      o += ls;
      let d = new Uint8Array(t.slice(o, o + p));
      i.push(d), o += p;
    }
  } else {
    let l = ui[a];
    if (a === "float32") i = new Float32Array(t);
    else if (a === "int32") i = new Int32Array(t);
    else if (a === "bool") i = new Uint8Array(t);
    else if (a === "complex64") {
      i = new Float32Array(t);
      let u = new Float32Array(i.length / 2), p = new Float32Array(i.length / 2);
      for (let m = 0; m < u.length; m++) u[m] = i[m * 2], p[m] = i[m * 2 + 1];
      let d = bn(u, r, "float32"), c = bn(p, r, "float32"), h = _r(d, c);
      return d.dispose(), c.dispose(), h;
    } else throw new Error(`Unsupported dtype in weight '${n}': ${a}`);
    o += s * l;
  }
  return bn(i, r, a);
}
async function Jk(e17, t, n) {
  let a = new Uint8Array(t);
  for (; a.byteLength < n; ) {
    let { done: r, value: s } = await e17.read();
    if (r && s == null) {
      let o = n - a.byteLength;
      throw new Error(`Reader is done but ${o} bytes are still expected`);
    }
    let i = new Uint8Array(a.length + s.byteLength);
    i.set(a, 0), i.set(new Uint8Array(s), a.length), a = i;
  }
  return a.buffer;
}
async function pN(e17, t) {
  let n = {}, a = e17.getReader(), r = new ArrayBuffer(0);
  for (let s of t) {
    let i = await uO(s, async (u, p) => (r = await Jk(a, r, p), r.slice(u, p)));
    r = await Jk(a, r, i);
    let o = r.slice(0, i);
    r = r.slice(i);
    let l = uN(s, o);
    if (n[s.name] = l, oN() === "webgpu") {
      let u = Dv();
      "uploadToGPU" in u && ot(l.shape) >= G().get("WEBGPU_CPU_HANDOFF_SIZE_THRESHOLD") && u.uploadToGPU(l.dataId);
    }
  }
  return n;
}
function pO(e17) {
  if (e17 === null) throw new Error(`Invalid input value: ${JSON.stringify(e17)}`);
  let t = 0, n = [];
  e17.forEach((s) => {
    if (t += s.byteLength, n.push(s.byteLength === s.buffer.byteLength ? s : new s.constructor(s)), !(s instanceof Float32Array || s instanceof Int32Array || s instanceof Uint8Array)) throw new Error(`Unsupported TypedArray subtype: ${s.constructor.name}`);
  });
  let a = new Uint8Array(t), r = 0;
  return n.forEach((s) => {
    a.set(new Uint8Array(s.buffer), r), r += s.byteLength;
  }), a.buffer;
}
var Rv = typeof Buffer != "undefined" && (typeof Blob == "undefined" || typeof atob == "undefined" || typeof btoa == "undefined");
function Qk(e17) {
  return Rv ? Buffer.byteLength(e17, "utf8") : new Blob([e17]).size;
}
function cO(e17) {
  if (Rv) return Buffer.from(e17).toString("base64");
  let t = new Uint8Array(e17), n = "";
  for (let a = 0, r = t.length; a < r; a++) n += String.fromCharCode(t[a]);
  return btoa(n);
}
function dO(e17) {
  if (Rv) {
    let a = Buffer.from(e17, "base64");
    return a.buffer.slice(a.byteOffset, a.byteOffset + a.byteLength);
  }
  let t = atob(e17), n = new Uint8Array(t.length);
  for (let a = 0; a < t.length; ++a) n.set([t.charCodeAt(a)], a);
  return n.buffer;
}
function hO(e17) {
  return Fr.join(e17);
}
function eI(e17) {
  let t = "/";
  for (e17 = e17.trim(); e17.endsWith(t); ) e17 = e17.slice(0, e17.length - 1);
  let n = e17.split(t);
  return n[n.length - 1];
}
function cN(e17, t) {
  let n = { modelTopology: e17.modelTopology, format: e17.format, generatedBy: e17.generatedBy, convertedBy: e17.convertedBy, weightsManifest: t };
  return e17.signature != null && (n.signature = e17.signature), e17.userDefinedMetadata != null && (n.userDefinedMetadata = e17.userDefinedMetadata), e17.modelInitializer != null && (n.modelInitializer = e17.modelInitializer), e17.initializerSignature != null && (n.initializerSignature = e17.initializerSignature), e17.trainingConfig != null && (n.trainingConfig = e17.trainingConfig), n;
}
function dN(e17, t, n) {
  let a = { modelTopology: e17.modelTopology, format: e17.format, generatedBy: e17.generatedBy, convertedBy: e17.convertedBy };
  if (e17.trainingConfig != null && (a.trainingConfig = e17.trainingConfig), e17.weightsManifest != null) {
    if (!t) throw new Error("modelJSON has weightsManifest but weightSpecs is null");
    if (!n) throw new Error("modelJSON has weightsManifest but weightData is null");
    a.weightSpecs = t, a.weightData = n;
  }
  return e17.signature != null && (a.signature = e17.signature), e17.userDefinedMetadata != null && (a.userDefinedMetadata = e17.userDefinedMetadata), e17.modelInitializer != null && (a.modelInitializer = e17.modelInitializer), e17.initializerSignature != null && (a.initializerSignature = e17.initializerSignature), a;
}
async function Mv(e17, t) {
  let n, a;
  return e17.weightsManifest != null && ([n, a] = await t(e17.weightsManifest)), dN(e17, n, a);
}
function rd(e17) {
  if (e17.modelTopology instanceof ArrayBuffer) throw new Error("Expected JSON model topology, received ArrayBuffer.");
  return { dateSaved: /* @__PURE__ */ new Date(), modelTopologyType: "JSON", modelTopologyBytes: e17.modelTopology == null ? 0 : Qk(JSON.stringify(e17.modelTopology)), weightSpecsBytes: e17.weightSpecs == null ? 0 : Qk(JSON.stringify(e17.weightSpecs)), weightDataBytes: e17.weightData == null ? 0 : new Fr(e17.weightData).byteLength };
}
function _x(e17) {
  let t = [];
  for (let n of e17) t.push(...n.weights);
  return t;
}
function mO() {
  let e17 = (n) => {
    let a = n << 13, r = 0;
    for (; !(a & 8388608); ) r -= 8388608, a <<= 1;
    return a &= -8388609, r += 947912704, a | r;
  }, t = new Uint32Array(2048);
  t[0] = 0;
  for (let n = 1; n < 1024; n++) t[n] = e17(n);
  for (let n = 1024; n < 2048; n++) t[n] = 939524096 + (n - 1024 << 13);
  return t;
}
function fO() {
  let e17 = new Uint32Array(64);
  e17[0] = 0, e17[31] = 1199570944, e17[32] = 2147483648, e17[63] = 3347054592;
  for (let t = 1; t < 31; t++) e17[t] = t << 23;
  for (let t = 33; t < 63; t++) e17[t] = 2147483648 + (t - 32 << 23);
  return e17;
}
function gO() {
  let e17 = new Uint32Array(64);
  for (let t = 0; t < 64; t++) e17[t] = 1024;
  return e17[0] = e17[32] = 0, e17;
}
function bO() {
  let e17 = mO(), t = fO(), n = gO();
  return (a) => {
    let r = new ArrayBuffer(4 * a.length), s = new Uint32Array(r);
    for (let i = 0; i < a.length; i++) {
      let o = a[i], l = e17[n[o >> 10] + (o & 1023)] + t[o >> 10];
      s[i] = l;
    }
    return new Float32Array(r);
  };
}
var ga = class La {
  constructor() {
    this.saveRouters = [], this.loadRouters = [];
  }
  static getInstance() {
    return La.instance == null && (La.instance = new La()), La.instance;
  }
  static registerSaveRouter(t) {
    La.getInstance().saveRouters.push(t);
  }
  static registerLoadRouter(t) {
    La.getInstance().loadRouters.push(t);
  }
  static getSaveHandlers(t) {
    return La.getHandlers(t, "save");
  }
  static getLoadHandlers(t, n) {
    return La.getHandlers(t, "load", n);
  }
  static getHandlers(t, n, a) {
    let r = [];
    return (n === "load" ? La.getInstance().loadRouters : La.getInstance().saveRouters).forEach((s) => {
      let i = s(t, a);
      i !== null && r.push(i);
    }), r;
  }
};
var yO = (e17) => ga.registerSaveRouter(e17);
var xO = (e17) => ga.registerLoadRouter(e17);
var vO = (e17) => ga.getSaveHandlers(e17);
var wO = (e17, t) => ga.getLoadHandlers(e17, t);
var Ax = "tensorflowjs";
var Fx = 1;
var ti = "models_store";
var Qr = "model_info_store";
function hN() {
  if (!G().getBool("IS_BROWSER")) throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");
  let e17 = typeof window == "undefined" ? self : window, t = e17.indexedDB || e17.mozIndexedDB || e17.webkitIndexedDB || e17.msIndexedDB || e17.shimIndexedDB;
  if (t == null) throw new Error("The current browser does not appear to support IndexedDB.");
  return t;
}
function $x(e17) {
  let t = e17.result;
  t.createObjectStore(ti, { keyPath: "modelPath" }), t.createObjectStore(Qr, { keyPath: "modelPath" });
}
var pi = class {
  constructor(e17) {
    if (this.indexedDB = hN(), e17 == null || !e17) throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");
    this.modelPath = e17;
  }
  async save(e17) {
    if (e17.modelTopology instanceof ArrayBuffer) throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");
    return this.databaseAction(this.modelPath, e17);
  }
  async load() {
    return this.databaseAction(this.modelPath);
  }
  databaseAction(e17, t) {
    return new Promise((n, a) => {
      let r = this.indexedDB.open(Ax, Fx);
      r.onupgradeneeded = () => $x(r), r.onsuccess = () => {
        let s = r.result;
        if (t == null) {
          let i = s.transaction(ti, "readonly"), o = i.objectStore(ti).get(this.modelPath);
          o.onsuccess = () => {
            if (o.result == null) return s.close(), a(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));
            n(o.result.modelArtifacts);
          }, o.onerror = (l) => (s.close(), a(o.error)), i.oncomplete = () => s.close();
        } else {
          t.weightData = Fr.join(t.weightData);
          let i = rd(t), o = s.transaction(Qr, "readwrite"), l = o.objectStore(Qr), u;
          try {
            u = l.put({ modelPath: this.modelPath, modelArtifactsInfo: i });
          } catch (d) {
            return a(d);
          }
          let p;
          u.onsuccess = () => {
            p = s.transaction(ti, "readwrite");
            let d = p.objectStore(ti), c;
            try {
              c = d.put({ modelPath: this.modelPath, modelArtifacts: t, modelArtifactsInfo: i });
            } catch (h) {
              return a(h);
            }
            c.onsuccess = () => n({ modelArtifactsInfo: i }), c.onerror = (h) => {
              l = o.objectStore(Qr);
              let m = l.delete(this.modelPath);
              m.onsuccess = () => (s.close(), a(c.error)), m.onerror = (f) => (s.close(), a(c.error));
            };
          }, u.onerror = (d) => (s.close(), a(u.error)), o.oncomplete = () => {
            p == null ? s.close() : p.oncomplete = () => s.close();
          };
        }
      }, r.onerror = (s) => a(r.error);
    });
  }
};
pi.URL_SCHEME = "indexeddb://";
var mN = (e17) => G().getBool("IS_BROWSER") && !Array.isArray(e17) && e17.startsWith(pi.URL_SCHEME) ? kO(e17.slice(pi.URL_SCHEME.length)) : null;
ga.registerSaveRouter(mN);
ga.registerLoadRouter(mN);
function kO(e17) {
  return new pi(e17);
}
function IO(e17) {
  return e17.startsWith(pi.URL_SCHEME) ? e17.slice(pi.URL_SCHEME.length) : e17;
}
var SO = class {
  constructor() {
    this.indexedDB = hN();
  }
  async listModels() {
    return new Promise((e17, t) => {
      let n = this.indexedDB.open(Ax, Fx);
      n.onupgradeneeded = () => $x(n), n.onsuccess = () => {
        let a = n.result, r = a.transaction(Qr, "readonly"), s = r.objectStore(Qr).getAll();
        s.onsuccess = () => {
          let i = {};
          for (let o of s.result) i[o.modelPath] = o.modelArtifactsInfo;
          e17(i);
        }, s.onerror = (i) => (a.close(), t(s.error)), r.oncomplete = () => a.close();
      }, n.onerror = (a) => t(n.error);
    });
  }
  async removeModel(e17) {
    return e17 = IO(e17), new Promise((t, n) => {
      let a = this.indexedDB.open(Ax, Fx);
      a.onupgradeneeded = () => $x(a), a.onsuccess = () => {
        let r = a.result, s = r.transaction(Qr, "readwrite"), i = s.objectStore(Qr), o = i.get(e17), l;
        o.onsuccess = () => {
          if (o.result == null) return r.close(), n(new Error(`Cannot find model with path '${e17}' in IndexedDB.`));
          {
            let u = i.delete(e17), p = () => {
              l = r.transaction(ti, "readwrite");
              let d = l.objectStore(ti).delete(e17);
              d.onsuccess = () => t(o.result.modelArtifactsInfo), d.onerror = (c) => n(o.error);
            };
            u.onsuccess = p, u.onerror = (d) => (p(), r.close(), n(o.error));
          }
        }, o.onerror = (u) => (r.close(), n(o.error)), s.oncomplete = () => {
          l == null ? r.close() : l.oncomplete = () => r.close();
        };
      }, a.onerror = (r) => n(a.error);
    });
  }
};
var Tr = "/";
var Nl = "tensorflowjs_models";
var fN = "info";
var NO = "model_topology";
var TO = "weight_specs";
var CO = "weight_data";
var EO = "model_metadata";
function gN(e17) {
  return { info: [Nl, e17, fN].join(Tr), topology: [Nl, e17, NO].join(Tr), weightSpecs: [Nl, e17, TO].join(Tr), weightData: [Nl, e17, CO].join(Tr), modelMetadata: [Nl, e17, EO].join(Tr) };
}
function bN(e17) {
  for (let t of Object.values(e17)) window.localStorage.removeItem(t);
}
function _O(e17) {
  let t = e17.split(Tr);
  if (t.length < 3) throw new Error(`Invalid key format: ${e17}`);
  return t.slice(1, t.length - 1).join(Tr);
}
function AO(e17) {
  return e17.startsWith(ci.URL_SCHEME) ? e17.slice(ci.URL_SCHEME.length) : e17;
}
var ci = class {
  constructor(e17) {
    if (!G().getBool("IS_BROWSER") || typeof window == "undefined" || typeof window.localStorage == "undefined") throw new Error("The current environment does not support local storage.");
    if (this.LS = window.localStorage, e17 == null || !e17) throw new Error("For local storage, modelPath must not be null, undefined or empty.");
    this.modelPath = e17, this.keys = gN(this.modelPath);
  }
  async save(e17) {
    if (e17.modelTopology instanceof ArrayBuffer) throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");
    {
      let t = JSON.stringify(e17.modelTopology), n = JSON.stringify(e17.weightSpecs), a = rd(e17), r = Fr.join(e17.weightData);
      try {
        this.LS.setItem(this.keys.info, JSON.stringify(a)), this.LS.setItem(this.keys.topology, t), this.LS.setItem(this.keys.weightSpecs, n), this.LS.setItem(this.keys.weightData, cO(r));
        let s = { format: e17.format, generatedBy: e17.generatedBy, convertedBy: e17.convertedBy, signature: e17.signature != null ? e17.signature : void 0, userDefinedMetadata: e17.userDefinedMetadata != null ? e17.userDefinedMetadata : void 0, modelInitializer: e17.modelInitializer != null ? e17.modelInitializer : void 0, initializerSignature: e17.initializerSignature != null ? e17.initializerSignature : void 0, trainingConfig: e17.trainingConfig != null ? e17.trainingConfig : void 0 };
        return this.LS.setItem(this.keys.modelMetadata, JSON.stringify(s)), { modelArtifactsInfo: a };
      } catch (s) {
        throw bN(this.keys), new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${a.modelTopologyBytes}, weightSpecsBytes=${a.weightSpecsBytes}, weightDataBytes=${a.weightDataBytes}.`);
      }
    }
  }
  async load() {
    let e17 = JSON.parse(this.LS.getItem(this.keys.info));
    if (e17 == null) throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);
    if (e17.modelTopologyType !== "JSON") throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");
    let t = {}, n = JSON.parse(this.LS.getItem(this.keys.topology));
    if (n == null) throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);
    t.modelTopology = n;
    let a = JSON.parse(this.LS.getItem(this.keys.weightSpecs));
    if (a == null) throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);
    t.weightSpecs = a;
    let r = this.LS.getItem(this.keys.modelMetadata);
    if (r != null) {
      let i = JSON.parse(r);
      t.format = i.format, t.generatedBy = i.generatedBy, t.convertedBy = i.convertedBy, i.signature != null && (t.signature = i.signature), i.userDefinedMetadata != null && (t.userDefinedMetadata = i.userDefinedMetadata), i.modelInitializer != null && (t.modelInitializer = i.modelInitializer), i.initializerSignature != null && (t.initializerSignature = i.initializerSignature), i.trainingConfig != null && (t.trainingConfig = i.trainingConfig);
    }
    let s = this.LS.getItem(this.keys.weightData);
    if (s == null) throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);
    return t.weightData = dO(s), t;
  }
};
ci.URL_SCHEME = "localstorage://";
var yN = (e17) => G().getBool("IS_BROWSER") && !Array.isArray(e17) && e17.startsWith(ci.URL_SCHEME) ? FO(e17.slice(ci.URL_SCHEME.length)) : null;
ga.registerSaveRouter(yN);
ga.registerLoadRouter(yN);
function FO(e17) {
  return new ci(e17);
}
var $O = class {
  constructor() {
    A(G().getBool("IS_BROWSER"), () => "Current environment is not a web browser"), A(typeof window == "undefined" || typeof window.localStorage != "undefined", () => "Current browser does not appear to support localStorage"), this.LS = window.localStorage;
  }
  async listModels() {
    let e17 = {}, t = Nl + Tr, n = Tr + fN;
    for (let a = 0; a < this.LS.length; ++a) {
      let r = this.LS.key(a);
      if (r.startsWith(t) && r.endsWith(n)) {
        let s = _O(r);
        e17[s] = JSON.parse(this.LS.getItem(r));
      }
    }
    return e17;
  }
  async removeModel(e17) {
    e17 = AO(e17);
    let t = gN(e17);
    if (this.LS.getItem(t.info) == null) throw new Error(`Cannot find model at path '${e17}'`);
    let n = JSON.parse(this.LS.getItem(t.info));
    return bN(t), n;
  }
};
var _l = "://";
var us = class qr {
  constructor() {
    this.managers = {};
  }
  static getInstance() {
    return qr.instance == null && (qr.instance = new qr()), qr.instance;
  }
  static registerManager(t, n) {
    A(t != null, () => "scheme must not be undefined or null."), t.endsWith(_l) && (t = t.slice(0, t.indexOf(_l))), A(t.length > 0, () => "scheme must not be an empty string.");
    let a = qr.getInstance();
    A(a.managers[t] == null, () => `A model store manager is already registered for scheme '${t}'.`), a.managers[t] = n;
  }
  static getManager(t) {
    let n = qr.getInstance().managers[t];
    if (n == null) throw new Error(`Cannot find model manager for scheme '${t}'`);
    return n;
  }
  static getSchemes() {
    return Object.keys(qr.getInstance().managers);
  }
};
function Rh(e17) {
  if (e17.indexOf(_l) === -1) throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${us.getSchemes().join(",")}`);
  return { scheme: e17.split(_l)[0], path: e17.split(_l)[1] };
}
async function xN(e17, t, n = false) {
  A(e17 !== t, () => `Old path and new path are the same: '${e17}'`);
  let a = ga.getLoadHandlers(e17);
  A(a.length > 0, () => `Copying failed because no load handler is found for source URL ${e17}.`), A(a.length < 2, () => `Copying failed because more than one (${a.length}) load handlers for source URL ${e17}.`);
  let r = a[0], s = ga.getSaveHandlers(t);
  A(s.length > 0, () => `Copying failed because no save handler is found for destination URL ${t}.`), A(s.length < 2, () => `Copying failed because more than one (${a.length}) save handlers for destination URL ${t}.`);
  let i = s[0], o = Rh(e17).scheme, l = Rh(e17).path, u = o === Rh(e17).scheme, p = await r.load();
  n && u && await us.getManager(o).removeModel(l);
  let d = await i.save(p);
  return n && !u && await us.getManager(o).removeModel(l), d.modelArtifactsInfo;
}
async function DO() {
  let e17 = us.getSchemes(), t = {};
  for (let n of e17) {
    let a = await us.getManager(n).listModels();
    for (let r in a) {
      let s = n + _l + r;
      t[s] = a[r];
    }
  }
  return t;
}
async function RO(e17) {
  let t = Rh(e17);
  return us.getManager(t.scheme).removeModel(t.path);
}
async function MO(e17, t) {
  return xN(e17, t, false);
}
async function OO(e17, t) {
  return xN(e17, t, true);
}
var PO = class {
  constructor() {
    this.messageName = "setTimeoutCustom", this.functionRefs = [], this.handledMessageCount = 0, this.hasEventListener = false;
  }
  fetch(e17, t) {
    return fetch(e17, t);
  }
  now() {
    return performance.now();
  }
  encode(e17, t) {
    if (t !== "utf-8" && t !== "utf8") throw new Error(`Browser's encoder only supports utf-8, but got ${t}`);
    return this.textEncoder == null && (this.textEncoder = new TextEncoder()), this.textEncoder.encode(e17);
  }
  decode(e17, t) {
    return new TextDecoder(t).decode(e17);
  }
  setTimeoutCustom(e17, t) {
    if (typeof window == "undefined" || !G().getBool("USE_SETTIMEOUTCUSTOM")) {
      setTimeout(e17, t);
      return;
    }
    this.functionRefs.push(e17), setTimeout(() => {
      window.postMessage({ name: this.messageName, index: this.functionRefs.length - 1 }, "*");
    }, t), this.hasEventListener || (this.hasEventListener = true, window.addEventListener("message", (n) => {
      if (n.source === window && n.data.name === this.messageName) {
        n.stopPropagation();
        let a = this.functionRefs[n.data.index];
        a(), this.handledMessageCount++, this.handledMessageCount === this.functionRefs.length && (this.functionRefs = [], this.handledMessageCount = 0);
      }
    }, true));
  }
  isTypedArray(e17) {
    return XS(e17);
  }
};
if (G().get("IS_BROWSER")) {
  G().setPlatform("browser", new PO());
  try {
    us.registerManager(ci.URL_SCHEME, new $O());
  } catch (e17) {
  }
  try {
    us.registerManager(pi.URL_SCHEME, new SO());
  } catch (e17) {
  }
}
var LO = { importFetch: () => _R() };
var ox;
var zO = class {
  constructor() {
    this.util = AR(), this.textEncoder = new this.util.TextEncoder();
  }
  fetch(e17, t) {
    return G().global.fetch != null ? G().global.fetch(e17, t) : (ox == null && (ox = LO.importFetch()), ox(e17, t));
  }
  now() {
    let e17 = process.hrtime();
    return e17[0] * 1e3 + e17[1] / 1e6;
  }
  encode(e17, t) {
    if (t !== "utf-8" && t !== "utf8") throw new Error(`Node built-in encoder only supports utf-8, but got ${t}`);
    return this.textEncoder.encode(e17);
  }
  decode(e17, t) {
    return e17.length === 0 ? "" : new this.util.TextDecoder(t).decode(e17);
  }
  isTypedArray(e17) {
    return this.util.types.isFloat32Array(e17) || this.util.types.isInt32Array(e17) || this.util.types.isUint8Array(e17) || this.util.types.isUint8ClampedArray(e17);
  }
};
G().get("IS_NODE") && !G().get("IS_BROWSER") && G().setPlatform("node", new zO());
function Oe(e17, t = "float32", n) {
  return t = t || "float32", na(e17), new Wt(e17, t, n);
}
function WO(e17, t) {
  let n = E(e17, "x", "cast");
  if (!LS(t)) throw new Error(`Failed to cast to unknown dtype ${t}`);
  if (t === "string" && n.dtype !== "string" || t !== "string" && n.dtype === "string") throw new Error("Only strings can be casted to strings");
  let a = { x: n }, r = { dtype: t };
  return P.runKernel(Mi, a, r);
}
var re = L({ cast_: WO });
function BO(e17) {
  let t = { x: E(e17, "x", "clone", "string_or_numeric") };
  return P.runKernel(eo, t);
}
var sr = L({ clone_: BO });
function Ov(e17, t = false) {
  console.log(e17.toString(t));
}
aN();
var VO = { buffer: Oe, cast: re, clone: sr, print: Ov };
PM(VO);
function UO(e17, t) {
  let n = E(e17, "a", "add"), a = E(t, "b", "add");
  [n, a] = _t(n, a);
  let r = { a: n, b: a };
  return P.runKernel(vs, r);
}
var X = L({ add_: UO });
function GO(e17, t) {
  let n = E(e17, "a", "floorDiv"), a = E(t, "b", "floorDiv");
  [n, a] = _t(n, a);
  let r = { a: n, b: a };
  return P.runKernel(Zi, r);
}
var Pm = L({ floorDiv_: GO });
function HO(e17, t) {
  let n = E(e17, "a", "div"), a = E(t, "b", "div");
  if ([n, a] = _t(n, a), n.dtype === "int32" && a.dtype === "int32") return Pm(n, a);
  let r = { a: n, b: a }, s = {};
  return P.runKernel(Hi, r, s);
}
var he = L({ div_: HO });
function jO(e17, t) {
  let n = E(e17, "a", "mul"), a = E(t, "b", "mul");
  [n, a] = _t(n, a);
  let r = { a: n, b: a };
  return P.runKernel(bo, r);
}
var z = L({ mul_: jO });
function qO(e17) {
  let t = E(e17, "x", "abs");
  if (t.dtype === "complex64") {
    let n = { x: t };
    return P.runKernel(Oc, n);
  } else {
    let n = { x: t };
    return P.runKernel(Yl, n);
  }
}
var Lt = L({ abs_: qO });
function KO(e17) {
  let t = { x: E(e17, "x", "acos") };
  return P.runKernel(Ni, t);
}
var Pv = L({ acos_: KO });
function XO(e17) {
  let t = { x: E(e17, "x", "acosh") };
  return P.runKernel(Ti, t);
}
var Lv = L({ acosh_: XO });
function YO(e17) {
  A(Array.isArray(e17), () => "The argument passed to tf.addN() must be a list of tensors"), A(e17.length >= 1, () => `Must pass at least one tensor to tf.addN(), but got ${e17.length}`);
  let t = e17.map((r, s) => E(r, `tensors${s}`, "addN")), n = t[0];
  t.forEach((r) => {
    if (r.dtype !== n.dtype) throw new Error("All tensors passed to tf.addN() must have the same dtype");
  }), t.forEach((r) => {
    if (!Ar(r.shape, n.shape)) throw new Error("All tensors passed to tf.addN() must have the same shape");
  });
  let a = t;
  return P.runKernel(Ci, a);
}
var vN = L({ addN_: YO });
function ZO(e17, t = null, n = false) {
  let a = { x: E(e17, "x", "all", "bool") }, r = { axis: t, keepDims: n };
  return P.runKernel(Zl, a, r);
}
var Lm = L({ all_: ZO });
function JO(e17, t = null, n = false) {
  let a = { x: E(e17, "x", "any", "bool") }, r = { axis: t, keepDims: n };
  return P.runKernel(Jl, a, r);
}
var yc = L({ any_: JO });
function QO(e17, t = 0) {
  let n = { x: E(e17, "x", "argMax") }, a = { axis: t };
  return P.runKernel(Ql, n, a);
}
var di = L({ argMax_: QO });
function eP(e17, t = 0) {
  let n = { x: E(e17, "x", "argMin") }, a = { axis: t };
  return P.runKernel(eu, n, a);
}
var zv = L({ argMin_: eP });
function tP(e17) {
  let t = { x: E(e17, "x", "asin") };
  return P.runKernel(Ei, t);
}
var Wv = L({ asin_: tP });
function nP(e17) {
  let t = { x: E(e17, "x", "asinh") };
  return P.runKernel(_i, t);
}
var Bv = L({ asinh_: nP });
function aP(e17) {
  let t = { x: E(e17, "x", "atan") };
  return P.runKernel(Ai, t);
}
var Vv = L({ atan_: aP });
function rP(e17, t) {
  let n = E(e17, "a", "atan2"), a = E(t, "b", "atan2");
  [n, a] = _t(n, a);
  let r = { a: n, b: a };
  return P.runKernel($i, r);
}
var Uv = L({ atan2_: rP });
function sP(e17) {
  let t = { x: E(e17, "x", "atanh") };
  return P.runKernel(Fi, t);
}
var Gv = L({ atanh_: sP });
function iP(e17, t, n, a, r = "NHWC", s) {
  let i = e17[3], o = [...t, i], l = IN(r);
  return sd(e17, o, n, s, a, null, null, l);
}
function wN(e17, t, n, a, r, s, i = "channelsLast") {
  let [o, l] = xc(t), u;
  if (i === "channelsLast") u = [o, l, e17[3], e17[3]];
  else if (i === "channelsFirst") u = [o, l, e17[1], e17[1]];
  else throw new Error(`Unknown dataFormat ${i}`);
  return sd(e17, u, n, a, r, s, false, i);
}
function oP(e17, t, n, a, r, s, i = "NDHWC") {
  let [o, l, u] = Dx(t), p, d;
  if (i === "NDHWC") d = "channelsLast", p = [o, l, u, e17[4], e17[4]];
  else if (i === "NCDHW") d = "channelsFirst", p = [o, l, u, e17[1], e17[1]];
  else throw new Error(`Unknown dataFormat ${i}`);
  return kN(e17, p, n, a, r, false, d, s);
}
function sd(e17, t, n, a, r, s, i = false, o = "channelsLast") {
  let [l, u, p, d] = [-1, -1, -1, -1];
  if (o === "channelsLast") [l, u, p, d] = e17;
  else if (o === "channelsFirst") [l, d, u, p] = e17;
  else throw new Error(`Unknown dataFormat ${o}`);
  let [c, h, , m] = t, [f, g] = xc(n), [b, y] = xc(a), x = Al(c, b), v = Al(h, y), { padInfo: I, outHeight: N, outWidth: C } = pP(r, u, p, f, g, x, v, s, o), _ = i ? m * d : m, F;
  return o === "channelsFirst" ? F = [l, _, N, C] : o === "channelsLast" && (F = [l, N, C, _]), { batchSize: l, dataFormat: o, inHeight: u, inWidth: p, inChannels: d, outHeight: N, outWidth: C, outChannels: _, padInfo: I, strideHeight: f, strideWidth: g, filterHeight: c, filterWidth: h, effectiveFilterHeight: x, effectiveFilterWidth: v, dilationHeight: b, dilationWidth: y, inShape: e17, outShape: F, filterShape: t };
}
function kN(e17, t, n, a, r, s = false, i = "channelsLast", o) {
  let [l, u, p, d, c] = [-1, -1, -1, -1, -1];
  if (i === "channelsLast") [l, u, p, d, c] = e17;
  else if (i === "channelsFirst") [l, c, u, p, d] = e17;
  else throw new Error(`Unknown dataFormat ${i}`);
  let [h, m, f, , g] = t, [b, y, x] = Dx(n), [v, I, N] = Dx(a), C = Al(h, v), _ = Al(m, I), F = Al(f, N), { padInfo: D, outDepth: $, outHeight: S, outWidth: M } = cP(r, u, p, d, b, y, x, C, _, F, o), B = s ? g * c : g, U;
  return i === "channelsFirst" ? U = [l, B, $, S, M] : i === "channelsLast" && (U = [l, $, S, M, B]), { batchSize: l, dataFormat: i, inDepth: u, inHeight: p, inWidth: d, inChannels: c, outDepth: $, outHeight: S, outWidth: M, outChannels: B, padInfo: D, strideDepth: b, strideHeight: y, strideWidth: x, filterDepth: h, filterHeight: m, filterWidth: f, effectiveFilterDepth: C, effectiveFilterHeight: _, effectiveFilterWidth: F, dilationDepth: v, dilationHeight: I, dilationWidth: N, inShape: e17, outShape: U, filterShape: t };
}
function lP(e17, t, n, a, r) {
  a == null && (a = Hv(e17, t, n));
  let s = e17[0], i = e17[1], o = vc((s - t + 2 * a) / n + 1, r), l = vc((i - t + 2 * a) / n + 1, r);
  return [o, l];
}
function uP(e17, t, n, a, r, s) {
  r == null && (r = Hv(e17, t[0], a[0]));
  let i = [0, 0, 0, n];
  for (let o = 0; o < 3; o++) e17[o] + 2 * r >= t[o] && (i[o] = vc((e17[o] - t[o] + 2 * r) / a[o] + 1, s));
  return i;
}
function Hv(e17, t, n, a = 1) {
  let r = Al(t, a);
  return Math.floor((e17[0] * (n - 1) - n + r) / 2);
}
function xc(e17) {
  return typeof e17 == "number" ? [e17, e17, e17] : e17.length === 2 ? [e17[0], e17[1], 1] : e17;
}
function Dx(e17) {
  return typeof e17 == "number" ? [e17, e17, e17] : e17;
}
function Al(e17, t) {
  return t <= 1 ? e17 : e17 + (e17 - 1) * (t - 1);
}
function pP(e17, t, n, a, r, s, i, o, l) {
  let u, p, d;
  if (typeof e17 == "number") {
    u = { top: e17, bottom: e17, left: e17, right: e17, type: e17 === 0 ? "VALID" : "NUMBER" };
    let c = lP([t, n], s, a, e17, o);
    p = c[0], d = c[1];
  } else if (e17 === "same") {
    p = Math.ceil(t / a), d = Math.ceil(n / r);
    let c = Math.max(0, (p - 1) * a + s - t), h = Math.max(0, (d - 1) * r + i - n), m = Math.floor(c / 2), f = c - m, g = Math.floor(h / 2), b = h - g;
    u = { top: m, bottom: f, left: g, right: b, type: "SAME" };
  } else if (e17 === "valid") u = { top: 0, bottom: 0, left: 0, right: 0, type: "VALID" }, p = Math.ceil((t - s + 1) / a), d = Math.ceil((n - i + 1) / r);
  else if (typeof e17 == "object") {
    let c = l === "channelsLast" ? e17[1][0] : e17[2][0], h = l === "channelsLast" ? e17[1][1] : e17[2][1], m = l === "channelsLast" ? e17[2][0] : e17[3][0], f = l === "channelsLast" ? e17[2][1] : e17[3][1];
    u = { top: c, bottom: h, left: m, right: f, type: c === 0 && h === 0 && m === 0 && f === 0 ? "VALID" : "EXPLICIT" }, p = vc((t - s + c + h) / a + 1, o), d = vc((n - i + m + f) / r + 1, o);
  } else throw Error(`Unknown padding parameter: ${e17}`);
  return { padInfo: u, outHeight: p, outWidth: d };
}
function cP(e17, t, n, a, r, s, i, o, l, u, p) {
  let d, c, h, m;
  if (e17 === "valid" && (e17 = 0), typeof e17 == "number") {
    d = { top: e17, bottom: e17, left: e17, right: e17, front: e17, back: e17, type: e17 === 0 ? "VALID" : "NUMBER" };
    let f = uP([t, n, a, 1], [o, l, u], 1, [r, s, i], e17, p);
    c = f[0], h = f[1], m = f[2];
  } else if (e17 === "same") {
    c = Math.ceil(t / r), h = Math.ceil(n / s), m = Math.ceil(a / i);
    let f = (c - 1) * r + o - t, g = (h - 1) * s + l - n, b = (m - 1) * i + u - a, y = Math.floor(f / 2), x = f - y, v = Math.floor(g / 2), I = g - v, N = Math.floor(b / 2), C = b - N;
    d = { top: v, bottom: I, left: N, right: C, front: y, back: x, type: "SAME" };
  } else throw Error(`Unknown padding parameter: ${e17}`);
  return { padInfo: d, outDepth: c, outHeight: h, outWidth: m };
}
function vc(e17, t) {
  if (!t) return Math.trunc(e17);
  switch (t) {
    case "round":
      return Math.round(e17);
    case "ceil":
      return Math.ceil(e17);
    case "floor":
      return Math.floor(e17);
    default:
      throw new Error(`Unknown roundingMode ${t}`);
  }
}
function ps(e17) {
  let [t, n, a] = xc(e17);
  return t === 1 && n === 1 && a === 1;
}
function dr(e17, t) {
  return ps(e17) || ps(t);
}
function hi(e17) {
  return xc(e17).every((t) => t > 0);
}
function IN(e17) {
  if (e17 === "NHWC") return "channelsLast";
  if (e17 === "NCHW") return "channelsFirst";
  throw new Error(`Unknown dataFormat ${e17}`);
}
function Tn(e17, t, n) {
  if (n != null) {
    if (typeof t == "string") throw Error(`Error in ${e17}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`);
    if (typeof t == "number") A($l(t), () => `Error in ${e17}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`);
    else if (typeof t == "object") t.forEach((a) => {
      a.forEach((r) => {
        A($l(r), () => `Error in ${e17}: pad must be an integer when using dimRoundingMode ${n} but got pad ${r}.`);
      });
    });
    else throw Error(`Error in ${e17}: Unknown padding parameter: ${t}`);
  }
}
function dP(e17, t) {
  let n = { x: E(e17, "x", "reshape", "string_or_numeric") }, a = { shape: t };
  return P.runKernel(Ru, n, a);
}
var W = L({ reshape_: dP });
function hP(e17, t, n, a, r) {
  let s = E(e17, "x", "avgPool", "float32"), i = 1;
  A(dr(n, i), () => `Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '${i}'`);
  let o = s, l = false;
  s.rank === 3 && (l = true, o = W(s, [1, s.shape[0], s.shape[1], s.shape[2]])), A(o.rank === 4, () => `Error in avgPool: x must be rank 4 but got rank ${o.rank}.`), Tn("avgPool", a, r);
  let u = { x: o }, p = { filterSize: t, strides: n, pad: a, dimRoundingMode: r }, d = P.runKernel(Di, u, p);
  return d = re(d, s.dtype), l ? W(d, [d.shape[1], d.shape[2], d.shape[3]]) : d;
}
var ya = L({ avgPool_: hP });
function mP(e17, t, n, a, r, s = "NDHWC") {
  let i = E(e17, "x", "avgPool3d", "float32"), o = i, l = false;
  i.rank === 4 && (l = true, o = W(i, [1, i.shape[0], i.shape[1], i.shape[2], i.shape[3]])), A(o.rank === 5, () => `Error in avgPool3d: x must be rank 5 but got rank ${o.rank}.`), A(s === "NDHWC", () => `Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${s}`), A(typeof n == "number" && n > 0 || Array.isArray(n) && n[0] > 0 && n[1] > 0 && n[2] > 0, () => `Error in avgPool3d: Stride must be > 0, but got '${n}'`), Tn("avgPool3d", a, r);
  let u = { x: o }, p = { filterSize: t, strides: n, pad: a, dimRoundingMode: r, dataFormat: s }, d = P.runKernel(tu, u, p);
  return d = re(d, o.dtype), l ? W(d, [d.shape[1], d.shape[2], d.shape[3], d.shape[4]]) : d;
}
var jv = L({ avgPool3d_: mP });
function fP(e17, t = 0) {
  A(e17.length >= 1, () => "Pass at least one tensor to concat");
  let n = bc(e17, "tensors", "concat", "string_or_numeric");
  if (n[0].dtype === "complex64" && n.forEach((s) => {
    if (s.dtype !== "complex64") throw new Error(`Cannot concatenate complex64 tensors with a tensor
          with dtype ${s.dtype}. `);
  }), n.length === 1) return sr(n[0]);
  let a = n, r = { axis: t };
  return P.runKernel(su, a, r);
}
var et = L({ concat_: fP });
function gP(e17, t, n = false, a = false) {
  let r = E(e17, "a", "matMul"), s = E(t, "b", "matMul");
  [r, s] = _t(r, s);
  let i = { a: r, b: s }, o = { transposeA: n, transposeB: a };
  return P.runKernel(Ri, i, o);
}
var $e = L({ matMul_: gP });
function bP(e17) {
  let t = { x: E(e17, "x", "sigmoid", "float32") };
  return P.runKernel(Mo, t);
}
var ha = L({ sigmoid_: bP });
function yP(e17, t, n) {
  let a = E(e17, "x", "slice", "string_or_numeric");
  if (a.rank === 0) throw new Error("Slicing scalar is not possible");
  let r = { x: a }, s = { begin: t, size: n };
  return P.runKernel(Bu, r, s);
}
var Ve = L({ slice_: yP });
function xP(e17) {
  let t = { x: E(e17, "x", "tanh", "float32") };
  return P.runKernel(Uo, t);
}
var cs = L({ tanh_: xP });
function vP(e17, t, n, a, r, s) {
  let i = E(e17, "forgetBias", "basicLSTMCell"), o = E(t, "lstmKernel", "basicLSTMCell"), l = E(n, "lstmBias", "basicLSTMCell"), u = E(a, "data", "basicLSTMCell"), p = E(r, "c", "basicLSTMCell"), d = E(s, "h", "basicLSTMCell"), c = et([u, d], 1), h = $e(c, o), m = X(h, l), f = m.shape[0], g = m.shape[1] / 4, b = [f, g], y = Ve(m, [0, 0], b), x = Ve(m, [0, g], b), v = Ve(m, [0, g * 2], b), I = Ve(m, [0, g * 3], b), N = X(z(ha(y), cs(x)), z(p, ha(X(i, v)))), C = z(cs(N), ha(I));
  return [N, C];
}
var SN = L({ basicLSTMCell_: vP });
function wP(e17, t, n) {
  let a = E(e17, "x", "batchToSpaceND"), r = t.reduce((o, l) => o * l);
  A(a.rank >= 1 + t.length, () => `input rank is ${a.rank} but should be > than blockShape.length ${t.length}`), A(n.length === t.length, () => `crops.length is ${n.length} but should be equal to blockShape.length  ${t.length}`), A(a.shape[0] % r === 0, () => `input tensor batch is ${a.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${r}`);
  let s = { x: a }, i = { blockShape: t, crops: n };
  return P.runKernel(nu, s, i);
}
var id = L({ batchToSpaceND_: wP });
function kP(e17) {
  let t;
  return e17.rank === 0 || e17.rank === 1 ? t = W(e17, [1, 1, 1, e17.size]) : e17.rank === 2 ? t = W(e17, [1, 1, e17.shape[0], e17.shape[1]]) : e17.rank === 3 ? t = W(e17, [1, e17.shape[0], e17.shape[1], e17.shape[2]]) : t = e17, t;
}
function IP(e17, t, n, a, r, s) {
  s == null && (s = 1e-3);
  let i = E(e17, "x", "batchNorm"), o = E(t, "mean", "batchNorm"), l = E(n, "variance", "batchNorm"), u;
  r != null && (u = E(r, "scale", "batchNorm"));
  let p;
  a != null && (p = E(a, "offset", "batchNorm")), A(o.rank === l.rank, () => "Batch normalization gradient requires mean and variance to have equal ranks."), A(p == null || o.rank === p.rank, () => "Batch normalization gradient requires mean and offset to have equal ranks."), A(u == null || o.rank === u.rank, () => "Batch normalization gradient requires mean and scale to have equal ranks.");
  let d = { x: kP(i), scale: u, offset: p, mean: o, variance: l }, c = { varianceEpsilon: s }, h = P.runKernel(Ji, d, c);
  return W(h, i.shape);
}
var Ns = L({ batchNorm_: IP });
function SP(e17, t, n, a, r, s) {
  let i = E(e17, "x", "batchNorm"), o = E(t, "mean", "batchNorm"), l = E(n, "variance", "batchNorm"), u;
  r != null && (u = E(r, "scale", "batchNorm"));
  let p;
  return a != null && (p = E(a, "offset", "batchNorm")), A(i.rank === 2, () => `Error in batchNorm2D: x must be rank 2 but got rank ${i.rank}.`), A(o.rank === 2 || o.rank === 1, () => `Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${o.rank}.`), A(l.rank === 2 || l.rank === 1, () => `Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${l.rank}.`), u != null && A(u.rank === 2 || u.rank === 1, () => `Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${u.rank}.`), p != null && A(p.rank === 2 || p.rank === 1, () => `Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${p.rank}.`), Ns(i, o, l, p, u, s);
}
var qv = L({ batchNorm2d_: SP });
function NP(e17, t, n, a, r, s) {
  let i = E(e17, "x", "batchNorm"), o = E(t, "mean", "batchNorm"), l = E(n, "variance", "batchNorm"), u;
  r != null && (u = E(r, "scale", "batchNorm"));
  let p;
  return a != null && (p = E(a, "offset", "batchNorm")), A(i.rank === 3, () => `Error in batchNorm3D: x must be rank 3 but got rank ${i.rank}.`), A(o.rank === 3 || o.rank === 1, () => `Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${o.rank}.`), A(l.rank === 3 || l.rank === 1, () => `Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${l.rank}.`), u != null && A(u.rank === 3 || u.rank === 1, () => `Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${u.rank}.`), p != null && A(p.rank === 3 || p.rank === 1, () => `Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${p.rank}.`), Ns(i, o, l, p, u, s);
}
var Kv = L({ batchNorm3d_: NP });
function TP(e17, t, n, a, r, s) {
  let i = E(e17, "x", "batchNorm"), o = E(t, "mean", "batchNorm"), l = E(n, "variance", "batchNorm"), u;
  r != null && (u = E(r, "scale", "batchNorm"));
  let p;
  return a != null && (p = E(a, "offset", "batchNorm")), A(i.rank === 4, () => `Error in batchNorm4D: x must be rank 4 but got rank ${i.rank}.`), A(o.rank === 4 || o.rank === 1, () => `Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${o.rank}.`), A(l.rank === 4 || l.rank === 1, () => `Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${l.rank}.`), u != null && A(u.rank === 4 || u.rank === 1, () => `Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${u.rank}.`), p != null && A(p.rank === 4 || p.rank === 1, () => `Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${p.rank}.`), Ns(i, o, l, p, u, s);
}
var Xv = L({ batchNorm4d_: TP });
function CP(e17, t, n) {
  let a = E(e17, "x", "bincount"), r = E(t, "weights", "bincount");
  A(a.dtype === "int32", () => `Error in bincount: input dtype must be int32, but got ${a.dtype}`), A(n >= 0, () => `size must be non-negative, but got ${n}.`), A(r.size === a.size || r.size === 0, () => `Error in bincount: weights must have the same size as input or0-length, but got input shape: ${a.shape}, weights shape: ${r.shape}.`);
  let s = { x: a, weights: r }, i = { size: n };
  return P.runKernel(au, s, i);
}
var Yv = L({ bincount_: CP });
function EP(e17, t) {
  let n = E(e17, "x", "bitwiseAnd"), a = E(t, "y", "bitwiseAnd");
  if (!Ar(n.shape, a.shape)) throw new Error(`BitwiseAnd: Tensors must have the same shape. x: ${n.shape}, y: ${a.shape}`);
  if (n.dtype !== "int32" || a.dtype !== "int32") throw new Error(`BitwiseAnd: Only supports 'int32' values in tensor, found type of x: ${n.dtype} and type of y: ${a.dtype}`);
  let r = { a: n, b: a };
  return P.runKernel(ru, r);
}
var NN = L({ bitwiseAnd_: EP });
function _P(e17, t) {
  let n = E(e17, "s0", "broadcastArgs", "int32"), a = E(t, "s1", "broadcastArgs", "int32");
  if (n.rank !== 1) throw new Error(`broadcastArgs(): first input must be a vector (rank=1). Has rank ${n.rank}`);
  if (a.rank !== 1) throw new Error(`broadcastArgs(): second input must be a vector (rank=1). Has rank ${a.rank}`);
  let r = { s0: n, s1: a };
  return P.runKernel(Mc, r);
}
var TN = L({ broadcastArgs_: _P });
function AP(e17, t) {
  let n = E(e17, "broadcastTo", "x"), a = n.shape;
  if (na(t), t.length < n.rank) throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${n.rank}.`);
  if (t.length > n.rank) {
    let l = n.shape.slice();
    for (; l.length < t.length; ) l.unshift(1);
    n = W(n, l);
  }
  let r = n.shape, s = Array.from(t);
  for (let l = t.length - 1; l >= 0; l--) if (r[l] === t[l]) s[l] = 1;
  else if (n.shape[l] !== 1) throw new Error(`broadcastTo(): [${a}] cannot be broadcast to [${t}].`);
  if (s.map((l, u) => l > 1 ? u : -1).filter((l) => l >= 0).length === 0) return sr(n);
  let i = { x: n }, o = { reps: s };
  return P.runKernel(ks, i, o);
}
var ai = L({ broadcastTo_: AP });
function FP(e17) {
  let t = { x: E(e17, "x", "ceil", "float32") };
  return P.runKernel(Oi, t);
}
var Zv = L({ ceil_: FP });
function yn(e17, t, n) {
  na(e17), n = n || $c(t);
  let a = { shape: e17, value: t, dtype: n };
  return P.runKernel(zc, {}, a);
}
function $P(e17, t, n) {
  let a = E(e17, "x", "clipByValue");
  if (A(t <= n, () => `Error in clip: min (${t}) must be less than or equal to max (${n}).`), t === n) return yn(a.shape, t, a.dtype);
  let r = { x: a }, s = { clipValueMin: t, clipValueMax: n };
  return P.runKernel(ws, r, s);
}
var an = L({ clipByValue_: $P });
function DP(e17) {
  return et(e17, 0);
}
var Jv = L({ concat1d_: DP });
function RP(e17, t) {
  return et(e17, t);
}
var Qv = L({ concat2d_: RP });
function MP(e17, t) {
  return et(e17, t);
}
var ew = L({ concat3d_: MP });
function OP(e17, t) {
  return et(e17, t);
}
var tw = L({ concat4d_: OP });
function PP(e17, t, n, a, r = "NHWC", s = [1, 1], i) {
  let o = E(e17, "x", "conv2d", "float32"), l = E(t, "filter", "conv2d", "float32"), u = o, p = false;
  o.rank === 3 && (p = true, u = W(o, [1, o.shape[0], o.shape[1], o.shape[2]])), A(u.rank === 4, () => `Error in conv2d: input must be rank 4, but got rank ${u.rank}.`), A(l.rank === 4, () => `Error in conv2d: filter must be rank 4, but got rank ${l.rank}.`), Tn("conv2d", a, i);
  let d = r === "NHWC" ? u.shape[3] : u.shape[1];
  A(d === l.shape[2], () => `Error in conv2d: depth of input (${d}) must match input depth for filter ${l.shape[2]}.`), A(dr(n, s), () => `Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${s}'`), A(hi(s), () => "Error in conv2D: Dilated rates should be larger than 0."), A(hi(n), () => "Error in conv2D: Strides should be larger than 0.");
  let c = { x: u, filter: l }, h = { strides: n, pad: a, dataFormat: r, dilations: s, dimRoundingMode: i }, m = P.runKernel(Pi, c, h);
  return p ? W(m, [m.shape[1], m.shape[2], m.shape[3]]) : m;
}
var $t = L({ conv2d_: PP });
function LP(e17, t, n, a, r = "NWC", s = 1, i) {
  let o = E(e17, "x", "conv1d"), l = E(t, "filter", "conv1d"), u = o, p = false;
  o.rank === 2 && (p = true, u = W(o, [1, o.shape[0], o.shape[1]])), A(u.rank === 3, () => `Error in conv1d: input must be rank 3, but got rank ${u.rank}.`), A(l.rank === 3, () => `Error in conv1d: filter must be rank 3, but got rank ${l.rank}.`), Tn("conv1d", a, i), A(u.shape[2] === l.shape[1], () => `Error in conv1d: depth of input (${u.shape[2]}) must match input depth for filter ${l.shape[1]}.`), A(dr(n, s), () => `Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${s}'`), A(hi(s), () => "Error in conv1D: Dilated rates should be larger than 0."), A(hi(n), () => "Error in conv1D: Stride should be larger than 0."), A(r === "NWC", () => `Error in conv1d: got dataFormat of ${r} but only NWC is currently supported.`);
  let d = W(l, [1, l.shape[0], l.shape[1], l.shape[2]]), c = W(u, [u.shape[0], 1, u.shape[1], u.shape[2]]), h = $t(c, d, [1, n], a, "NHWC", [1, s], i);
  return p ? W(h, [h.shape[2], h.shape[3]]) : W(h, [h.shape[0], h.shape[2], h.shape[3]]);
}
var zm = L({ conv1d_: LP });
function zP(e17, t, n, a, r, s = "NHWC", i) {
  A(e17.length === t.rank, () => `Length of inShape (${e17.length}) and rank of dy (${t.rank}) must match`);
  let o = e17, l = t, u = false;
  t.rank === 3 && (u = true, l = W(t, [1, t.shape[0], t.shape[1], t.shape[2]]), o = [1, e17[0], e17[1], e17[2]]), A(o.length === 4, () => `Error in conv2dDerInput: inShape must be length 4, but got length ${o.length}.`), A(l.rank === 4, () => `Error in conv2dDerInput: dy must be rank 4, but got rank ${l.rank}`), A(n.rank === 4, () => `Error in conv2dDerInput: filter must be rank 4, but got rank ${n.rank}`);
  let p = s === "NHWC" ? o[3] : o[1], d = s === "NHWC" ? l.shape[3] : l.shape[1];
  A(p === n.shape[2], () => `Error in conv2dDerInput: depth of input (${p}) must match input depth for filter ${n.shape[2]}.`), A(d === n.shape[3], () => `Error in conv2dDerInput: depth of output (${d}) must match output depth for filter ${n.shape[3]}.`), Tn("conv2dDerInput", r, i);
  let c = { dy: l, filter: n }, h = { strides: a, pad: r, dataFormat: s, dimRoundingMode: i, inputShape: o }, m = P.runKernel(Li, c, h);
  return u ? W(m, [m.shape[1], m.shape[2], m.shape[3]]) : m;
}
var nw = L({ conv2DBackpropInput_: zP });
function WP(e17, t, n, a, r, s) {
  let i = E(e17, "x", "conv2dTranspose"), o = E(t, "filter", "conv2dTranspose");
  return nw(n, i, o, a, r, "NHWC", s);
}
var Wm = L({ conv2dTranspose_: WP });
function BP(e17, t, n, a, r = "NDHWC", s = [1, 1, 1]) {
  let i = E(e17, "x", "conv3d"), o = E(t, "filter", "conv3d"), l = i, u = false;
  i.rank === 4 && (u = true, l = W(i, [1, i.shape[0], i.shape[1], i.shape[2], i.shape[3]])), A(l.rank === 5, () => `Error in conv3d: input must be rank 5, but got rank ${l.rank}.`), A(o.rank === 5, () => `Error in conv3d: filter must be rank 5, but got rank ${o.rank}.`), A(l.shape[4] === o.shape[3], () => `Error in conv3d: depth of input (${l.shape[4]}) must match input depth for filter ${o.shape[3]}.`), A(dr(n, s), () => `Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${s}'`), A(r === "NDHWC", () => `Error in conv3d: got dataFormat of ${r} but only NDHWC is currently supported.`), A(hi(s), () => "Error in conv3D: Dilated rates should be larger than 0."), A(hi(n), () => "Error in conv3D: Strides should be larger than 0.");
  let p = { x: l, filter: o }, d = { strides: n, pad: a, dataFormat: r, dilations: s }, c = P.runKernel(zi, p, d);
  return u ? W(c, [c.shape[1], c.shape[2], c.shape[3], c.shape[4]]) : c;
}
var aw = L({ conv3d_: BP });
function VP(e17, t, n, a, r) {
  A(e17.length === t.rank, () => `Length of inShape (${e17.length}) and rank of dy (${t.rank}) must match`);
  let s = e17, i = t, o = false;
  t.rank === 4 && (o = true, i = W(t, [1, t.shape[0], t.shape[1], t.shape[2], t.shape[3]]), s = [1, e17[0], e17[1], e17[2], e17[3]]);
  let l = s[4], u = i.shape[4];
  A(s.length === 5, () => `Error in conv3dDerInput: inShape must be length 5, but got length ${s.length}.`), A(i.rank === 5, () => `Error in conv3dDerInput: dy must be rank 5, but got rank ${i.rank}`), A(n.rank === 5, () => `Error in conv3dDerInput: filter must be rank 5, but got rank ${n.rank}`), A(l === n.shape[3], () => `Error in conv3dDerInput: depth of input (${l}) must match input depth for filter ${n.shape[3]}.`), A(u === n.shape[4], () => `Error in conv3dDerInput: depth of output (${u}) must match output depth for filter ${n.shape[4]}.`);
  let p = { dy: i, filter: n }, d = { pad: r, strides: a, inputShape: s }, c = P.runKernel(ou, p, d);
  return o ? W(c, [c.shape[1], c.shape[2], c.shape[3], c.shape[4]]) : c;
}
var CN = L({ conv3DBackpropInput_: VP });
function UP(e17, t, n, a, r) {
  let s = E(e17, "x", "conv3dTranspose"), i = E(t, "filter", "conv3dTranspose");
  return CN(n, s, i, a, r);
}
var rw = L({ conv3dTranspose_: UP });
function GP(e17) {
  let t = { x: E(e17, "x", "cos", "float32") };
  return P.runKernel(Wi, t);
}
var od = L({ cos_: GP });
function HP(e17) {
  let t = { x: E(e17, "x", "cosh", "float32") };
  return P.runKernel(Bi, t);
}
var Bm = L({ cosh_: HP });
function jP(e17, t = 0, n = false, a = false) {
  let r = { x: E(e17, "x", "cumprod") }, s = { axis: t, exclusive: n, reverse: a };
  return P.runKernel(lu, r, s);
}
var wc = L({ cumprod_: jP });
function qP(e17, t = 0, n = false, a = false) {
  let r = { x: E(e17, "x", "cumsum") }, s = { axis: t, exclusive: n, reverse: a };
  return P.runKernel(Vi, r, s);
}
var Vm = L({ cumsum_: qP });
function KP(e17, t, n, a = false) {
  let r = E(e17, "x", "denseBincount"), s = E(t, "weights", "denseBincount");
  A(r.dtype === "int32", () => `Error in denseBincount: input dtype must be int32, but got ${r.dtype}`), A(r.rank <= 2, () => `Error in denseBincount: input must be at most rank 2, but got rank ${r.rank}.`), A(n >= 0, () => `size must be non-negative, but got ${n}.`), A(s.size === r.size || s.size === 0, () => `Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${r.shape}, weights shape: ${s.shape}.`);
  let i = { x: r, weights: s }, o = { size: n, binaryOutput: a };
  return P.runKernel(Pc, i, o);
}
var Xh = L({ denseBincount_: KP });
function XP(e17, t, n = "NHWC") {
  let a = E(e17, "x", "depthToSpace", "float32"), r = n === "NHWC" ? a.shape[1] : a.shape[2], s = n === "NHWC" ? a.shape[2] : a.shape[3], i = n === "NHWC" ? a.shape[3] : a.shape[1];
  A(t > 1, () => `blockSize should be > 1 for depthToSpace, but was: ${t}`), A(r * t >= 0, () => `Negative dimension size caused by overflow when multiplying
    ${r} and ${t}  for depthToSpace with input shape
    ${a.shape}`), A(s * t >= 0, () => `Negative dimension size caused by overflow when multiplying
    ${s} and ${t} for depthToSpace with input shape
        ${a.shape}`), A(i % (t * t) === 0, () => `Dimension size must be evenly divisible by ${t * t} but is ${i} for depthToSpace with input shape ${a.shape}`);
  let o = { x: a }, l = { blockSize: t, dataFormat: n };
  return P.runKernel(pu, o, l);
}
var sw = L({ depthToSpace_: XP });
function YP(e17, t, n, a, r = "NHWC", s = [1, 1], i) {
  let o = E(e17, "x", "depthwiseConv2d", "float32"), l = E(t, "filter", "depthwiseConv2d", "float32"), u = o, p = false;
  o.rank === 3 && (p = true, u = W(o, [1, o.shape[0], o.shape[1], o.shape[2]])), A(u.rank === 4, () => `Error in depthwiseConv2d: input must be rank 4, but got rank ${u.rank}.`), A(l.rank === 4, () => `Error in depthwiseConv2d: filter must be rank 4, but got rank ${l.rank}.`);
  let d = r === "NHWC" ? u.shape[3] : u.shape[1];
  A(d === l.shape[2], () => `Error in depthwiseConv2d: number of input channels (${d}) must match the inChannels dimension in filter ${l.shape[2]}.`), Tn("depthwiseConv2d", a, i);
  let c = { x: u, filter: l }, h = { strides: n, pad: a, dataFormat: r, dilations: s, dimRoundingMode: i }, m = P.runKernel(Ui, c, h);
  return p ? W(m, [m.shape[1], m.shape[2], m.shape[3]]) : m;
}
var Ts = L({ depthwiseConv2d_: YP });
function ZP(e17) {
  let t = { x: E(e17, "x", "diag") };
  return P.runKernel(Lc, t);
}
var EN = L({ diag_: ZP });
function JP(e17, t, n, a, r = [1, 1], s = "NHWC") {
  let i = E(e17, "x", "dilation2d"), o = E(t, "filter", "dilation2d");
  A(i.rank === 3 || i.rank === 4, () => `Error in dilation2d: input must be rank 3 or 4, but got rank ${i.rank}.`), A(o.rank === 3, () => `Error in dilation2d: filter must be rank 3, but got rank ${o.rank}.`), A(s === "NHWC", () => `Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${s}`);
  let l = i, u = false;
  i.rank === 3 && (l = W(i, [1, i.shape[0], i.shape[1], i.shape[2]]), u = true), A(l.shape[3] === o.shape[2], () => `Error in dilation2d:  input and filter must have the same depth: ${l.shape[3]} vs ${o.shape[2]}`);
  let p = { x: l, filter: o }, d = { strides: n, pad: a, dilations: r }, c = P.runKernel(Gi, p, d);
  return u ? W(c, [c.shape[1], c.shape[2], c.shape[3]]) : c;
}
var iw = L({ dilation2d_: JP });
var Ju = {};
_e(Ju, { assertAndGetBroadcastShape: () => ct, getBroadcastDims: () => _N, getReductionAxes: () => Bt });
function _N(e17, t) {
  let n = e17.length, a = [];
  for (let r = 0; r < n; r++) {
    let s = n - 1 - r, i = e17[s] || 1;
    (t[t.length - 1 - r] || 1) > 1 && i === 1 && a.unshift(s);
  }
  return a;
}
function Bt(e17, t) {
  let n = [];
  for (let a = 0; a < t.length; a++) {
    let r = e17[e17.length - a - 1], s = t.length - a - 1, i = t[s];
    (r == null || r === 1 && i > 1) && n.unshift(s);
  }
  return n;
}
function ct(e17, t) {
  let n = Math.max(e17.length, t.length), a = new Array(n);
  for (let r = 0; r < n; r++) {
    let s = e17[e17.length - r - 1];
    s == null && (s = 1);
    let i = t[t.length - r - 1];
    if (i == null && (i = 1), s === 1) a[n - r - 1] = i;
    else if (i === 1) a[n - r - 1] = s;
    else if (s !== i) {
      let o = `Operands could not be broadcast together with shapes ${e17} and ${t}.`;
      throw Error(o);
    } else a[n - r - 1] = s;
  }
  return a;
}
function QP(e17, t) {
  let n = E(e17, "a", "equal", "string_or_numeric"), a = E(t, "b", "equal", "string_or_numeric");
  [n, a] = _t(n, a), ct(n.shape, a.shape);
  let r = { a: n, b: a };
  return P.runKernel(du, r);
}
var Jn = L({ equal_: QP });
function e3(e17, t, n) {
  let a = E(t, "a", "where"), r = E(n, "b", "where"), s = E(e17, "condition", "where", "bool"), i = ct(ct(s.shape, a.shape), r.shape), o = ai(s, i), l = ai(a, i), u = ai(r, i), p = { condition: o, t: l, e: u };
  return P.runKernel(Wu, p);
}
var nn = L({ where_: e3 });
function t3(e17) {
  let t = { x: E(e17, "x", "zerosLike") };
  return P.runKernel(Yu, t);
}
var qe = L({ zerosLike_: t3 });
function n3(e17, t) {
  let n = E(e17, "a", "div"), a = E(t, "b", "div");
  [n, a] = _t(n, a);
  let r = he(n, a), s = qe(r), i = Jn(a, s);
  return nn(i, s, r);
}
var ow = L({ divNoNan_: n3 });
function a3(e17, t) {
  let n = E(e17, "t1", "dot"), a = E(t, "t2", "dot");
  A((n.rank === 1 || n.rank === 2) && (a.rank === 1 || a.rank === 2), () => `Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${a.rank}.`);
  let r = n.rank === 1 ? n.size : n.shape[1], s = a.rank === 1 ? a.size : a.shape[0];
  if (A(r === s, () => `Error in dot: inner dimensions of inputs must match, but got ${r} and ${s}.`), n.rank === 1 && a.rank === 1) {
    let i = W(n, [1, -1]), o = W(a, [-1, 1]), l = $e(i, o);
    return W(l, []);
  } else if (n.rank === 1 && a.rank === 2) {
    let i = W(n, [1, -1]), o = W(a, [a.shape[0], a.shape[1]]), l = $e(i, o);
    return W(l, [l.size]);
  } else if (n.rank === 2 && a.rank === 1) {
    let i = W(a, [-1, 1]), o = $e(n, i);
    return W(o, [o.size]);
  } else {
    let i = W(a, [a.shape[0], a.shape[1]]);
    return $e(n, i);
  }
}
var lw = L({ dot_: a3 });
function r3(e17, ...t) {
  let n = t.map((r, s) => E(r, `tensors${s}`, "einsum")), a = { equation: e17 };
  return P.runKernel(Tm, n, a);
}
var Zs = L({ einsum_: r3 });
function s3(e17) {
  let t = { x: E(e17, "x", "elu", "float32") };
  return P.runKernel(ji, t);
}
var Qu = L({ elu_: s3 });
function i3(e17, t) {
  let n = E(e17, "x", "ensureShape", "string_or_numeric");
  if (!RS(n.shape, t)) throw new Error(`EnsureShape: Shape of tensor ${n.shape} is not compatible with expected shape ${t}`);
  return e17;
}
var AN = L({ ensureShape_: i3 });
function o3(e17) {
  let t = E(e17, "x", "erf");
  A(t.dtype === "int32" || t.dtype === "float32", () => "Input dtype must be `int32` or `float32`."), t.dtype === "int32" && (t = re(t, "float32"));
  let n = { x: t };
  return P.runKernel(qi, n);
}
var Um = L({ erf_: o3 });
function uw(e17, t) {
  for (let n = 0; n < e17.length; ++n) if (e17[e17.length - n - 1] !== t - 1 - n) return false;
  return true;
}
function FN(e17, t, n) {
  let a = e17.length + t.length, r = [], s = 0, i = 0;
  for (let o = 0; o < a; o++) n.indexOf(o) === -1 ? r.push(e17[s++]) : r.push(t[i++]);
  return r;
}
function $N(e17, t) {
  let n = [], a = e17.length;
  for (let s = 0; s < a; s++) t.indexOf(s) === -1 && n.push(e17[s]);
  let r = t.map((s) => e17[s]);
  return [n, r];
}
function mi(e17, t) {
  let n = t.map((a) => 1);
  return FN(e17, n, t);
}
function l3(e17, t, n) {
  A(uw(t, n), () => `${e17} supports only inner-most axes for now. Got axes ${t} and rank-${n} input.`);
}
function DN(e17, t) {
  if (uw(e17, t)) return null;
  let n = [];
  for (let a = 0; a < t; ++a) e17.indexOf(a) === -1 && n.push(a);
  return e17.forEach((a) => n.push(a)), n;
}
function pw(e17) {
  return e17.map((t, n) => [n, t]).sort((t, n) => t[1] - n[1]).map((t) => t[0]);
}
function u3(e17, t) {
  let n = [];
  for (let a = t - e17; a < t; ++a) n.push(a);
  return n;
}
function p3(e17, t = null, n = false) {
  let a = { x: E(e17, "x", "max") }, r = { reductionIndices: t, keepDims: n };
  return P.runKernel(lo, a, r);
}
var ma = L({ max_: p3 });
function c3(e17, t = null, n = false) {
  let a = { x: E(e17, "x", "min") }, r = { axis: t, keepDims: n };
  return P.runKernel(ho, a, r);
}
var Ol = L({ min_: c3 });
function d3(e17, t) {
  let n = E(e17, "base", "pow"), a = E(t, "exp", "pow");
  [n, a] = _t(n, a);
  let r = { a: n, b: a };
  return P.runKernel(vo, r);
}
var ur = L({ pow_: d3 });
function xe(e17, t) {
  if ((en(e17) && t !== "string" || Array.isArray(e17)) && t !== "complex64") throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");
  if (t === "string" && en(e17) && !(e17 instanceof Uint8Array)) throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");
  return Ss(e17, [], [], t);
}
function h3(e17) {
  let t = { x: E(e17, "x", "sqrt", "float32") };
  return P.runKernel(Po, t);
}
var rn = L({ sqrt_: h3 });
function m3(e17) {
  let t = E(e17, "x", "square"), n = {};
  return P.runKernel("Square", { x: t }, n);
}
var pt = L({ square_: m3 });
function f3(e17, t = null, n = false) {
  let a = E(e17, "x", "sum");
  a.dtype === "bool" && (a = re(a, "int32"));
  let r = { x: a }, s = { axis: t, keepDims: n };
  return P.runKernel(Lo, r, s);
}
var fe = L({ sum_: f3 });
function g3(e17, t = "euclidean", n = null, a = false) {
  e17 = E(e17, "x", "norm");
  let r = RN(e17, t, n), s = r.shape;
  if (a) {
    let i = Aa(n, e17.shape);
    s = mi(r.shape, i);
  }
  return W(r, s);
}
function RN(e17, t, n = null) {
  if (e17.rank === 0) return Lt(e17);
  if (e17.rank !== 1 && n === null) return RN(W(e17, [-1]), t, n);
  if (e17.rank === 1 || typeof n == "number" || Array.isArray(n) && n.length === 1) {
    if (t === 1) return fe(Lt(e17), n);
    if (t === 1 / 0) return ma(Lt(e17), n);
    if (t === -1 / 0) return Ol(Lt(e17), n);
    if (t === "euclidean" || t === 2) return rn(fe(ur(Lt(e17), xe(2, "int32")), n));
    throw new Error(`Error in norm: invalid ord value: ${t}`);
  }
  if (Array.isArray(n) && n.length === 2) {
    if (t === 1) return ma(fe(Lt(e17), n[0]), n[1] - 1);
    if (t === 1 / 0) return ma(fe(Lt(e17), n[1]), n[0]);
    if (t === -1 / 0) return Ol(fe(Lt(e17), n[1]), n[0]);
    if (t === "fro" || t === "euclidean") return rn(fe(pt(e17), n));
    throw new Error(`Error in norm: invalid ord value: ${t}`);
  }
  throw new Error(`Error in norm: invalid axis: ${n}`);
}
var ep = L({ norm_: g3 });
function b3(e17, t = null, n = false) {
  return ep(e17, "euclidean", t, n);
}
var cw = L({ euclideanNorm_: b3 });
function y3(e17) {
  let t = { x: E(e17, "x", "exp") };
  return P.runKernel(Ki, t);
}
var dn = L({ exp_: y3 });
function x3(e17, t = 0) {
  let n = E(e17, "x", "expandDims", "string_or_numeric");
  A(t <= n.rank, () => "Axis must be <= rank of the tensor");
  let a = { input: n }, r = { dim: t };
  return P.runKernel(hu, a, r);
}
var Gt = L({ expandDims_: x3 });
function v3(e17) {
  let t = { x: E(e17, "x", "expm1") };
  return P.runKernel(Xi, t);
}
var dw = L({ expm1_: v3 });
function w3(e17, t) {
  let n = E(e17, "x", "tile", "string_or_numeric");
  A(n.rank === t.length, () => `Error in transpose: rank of input ${n.rank} must match length of reps ${t}.`);
  let a = { x: n }, r = { reps: t };
  return P.runKernel(ks, a, r);
}
var On = L({ tile_: w3 });
function k3(e17, t, n, a = "float32") {
  t == null && (t = e17);
  let r = Oe([e17, t], a), s = e17 <= t ? e17 : t;
  for (let o = 0; o < s; ++o) r.set(1, o, o);
  let i = W(r.toTensor(), [e17, t]);
  if (n == null) return i;
  if (n.length === 1) return On(Gt(i, 0), [n[0], 1, 1]);
  if (n.length === 2) return On(Gt(Gt(i, 0), 0), [n[0], n[1], 1, 1]);
  if (n.length === 3) return On(Gt(Gt(Gt(i, 0), 0), 0), [n[0], n[1], n[2], 1, 1]);
  throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`);
}
var Gm = L({ eye_: k3 });
function I3(e17) {
  let t = { x: E(e17, "x", "floor", "float32") };
  return P.runKernel(Yi, t);
}
var tp = L({ floor_: I3 });
function S3(e17, t, n = 0, a = 0) {
  let r = E(e17, "x", "gather"), s = E(t, "indices", "gather", "int32"), i = { x: r, indices: s }, o = { axis: n, batchDims: a };
  return P.runKernel(fu, i, o);
}
var np = L({ gather_: S3 });
function N3(e17, t) {
  let n = E(e17, "a", "greater", "string_or_numeric"), a = E(t, "b", "greater", "string_or_numeric");
  [n, a] = _t(n, a), ct(n.shape, a.shape);
  let r = { a: n, b: a };
  return P.runKernel(bu, r);
}
var Cn = L({ greater_: N3 });
function T3(e17, t) {
  let n = E(e17, "a", "greaterEqual", "string_or_numeric"), a = E(t, "b", "greaterEqual", "string_or_numeric");
  [n, a] = _t(n, a), ct(n.shape, a.shape);
  let r = { a: n, b: a };
  return P.runKernel(Qi, r);
}
var $r = L({ greaterEqual_: T3 });
function C3(e17) {
  let t = { input: E(e17, "input", "imag") };
  return P.runKernel(_m, t);
}
var ld = L({ imag_: C3 });
function E3(e17) {
  let t = { x: E(e17, "x", "isFinite") };
  return P.runKernel(to, t);
}
var hw = L({ isFinite_: E3 });
function _3(e17) {
  let t = { x: E(e17, "x", "isInf") };
  return P.runKernel(no, t);
}
var mw = L({ isInf_: _3 });
function A3(e17) {
  let t = { x: E(e17, "x", "isNaN") };
  return P.runKernel(ao, t);
}
var fw = L({ isNaN_: A3 });
function F3(e17, t = 0.2) {
  let n = { x: E(e17, "x", "leakyRelu") }, a = { alpha: t };
  return P.runKernel(ro, n, a);
}
var ud = L({ leakyRelu_: F3 });
function $3(e17, t) {
  let n = E(e17, "a", "less", "string_or_numeric"), a = E(t, "b", "less", "string_or_numeric");
  [n, a] = _t(n, a), ct(n.shape, a.shape);
  let r = { a: n, b: a };
  return P.runKernel(yu, r);
}
var Pl = L({ less_: $3 });
function D3(e17, t) {
  let n = E(e17, "a", "lessEqual", "string_or_numeric"), a = E(t, "b", "lessEqual", "string_or_numeric");
  [n, a] = _t(n, a), ct(n.shape, a.shape);
  let r = { a: n, b: a };
  return P.runKernel(xu, r);
}
var Cs = L({ lessEqual_: D3 });
function MN(e17, t, n) {
  if (n <= 0) throw new Error("The number of values should be positive.");
  let a = { start: e17, stop: t, num: n };
  return P.runKernel(vu, {}, a);
}
function R3(e17, t = 5, n = 1, a = 1, r = 0.5) {
  let s = E(e17, "x", "localResponseNormalization");
  A(s.rank === 4 || s.rank === 3, () => `Error in localResponseNormalization: x must be rank 3 or 4 but got
               rank ${s.rank}.`), A($l(t), () => `Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`);
  let i = s, o = false;
  s.rank === 3 && (o = true, i = W(s, [1, s.shape[0], s.shape[1], s.shape[2]]));
  let l = { x: i }, u = { depthRadius: t, bias: n, alpha: a, beta: r }, p = P.runKernel(oo, l, u);
  return o ? W(p, [p.shape[1], p.shape[2], p.shape[3]]) : p;
}
var gw = L({ localResponseNormalization_: R3 });
function M3(e17) {
  let t = { x: E(e17, "x", "log", "float32") };
  return P.runKernel(so, t);
}
var Qn = L({ log_: M3 });
function O3(e17) {
  let t = { x: E(e17, "x", "log1p") };
  return P.runKernel(io, t);
}
var pd = L({ log1p_: O3 });
function P3(e17) {
  return A(ss(e17), () => "The f passed in grad(f) must be a function"), (t, n) => {
    let a = E(t, "x", "tf.grad", "string_or_numeric"), r = n != null ? E(n, "dy", "tf.grad") : null;
    return P.tidy(() => {
      let { value: s, grads: i } = P.gradients(() => e17(a), [a], r);
      return r != null && Nn(s.shape, r.shape, "The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)"), Hm(i), i[0];
    });
  };
}
function L3(e17) {
  return A(ss(e17), () => "The f passed in grads(f) must be a function"), (t, n) => {
    A(Array.isArray(t), () => "The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s");
    let a = bc(t, "args", "tf.grads", "string_or_numeric"), r = n != null ? E(n, "dy", "tf.grads") : null;
    return P.tidy(() => {
      let { value: s, grads: i } = P.gradients(() => e17(...a), a, r);
      return r != null && Nn(s.shape, r.shape, "The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])"), Hm(i), i;
    });
  };
}
function z3(e17) {
  return A(ss(e17), () => "The f passed in valueAndGrad(f) must be a function"), (t, n) => {
    A(t instanceof Ce, () => "The x passed in valueAndGrad(f)(x) must be a tensor"), A(n == null || n instanceof Ce, () => "The dy passed in valueAndGrad(f)(x, dy) must be a tensor");
    let { grads: a, value: r } = P.gradients(() => e17(t), [t], n);
    return Hm(a), { grad: a[0], value: r };
  };
}
function W3(e17) {
  return A(ss(e17), () => "The f passed in valueAndGrads(f) must be a function"), (t, n) => {
    A(Array.isArray(t) && t.every((r) => r instanceof Ce), () => "The args passed in valueAndGrads(f)(args) must be array of tensors"), A(n == null || n instanceof Ce, () => "The dy passed in valueAndGrads(f)(args, dy) must be a tensor");
    let a = P.gradients(() => e17(...t), t, n);
    return n != null && Nn(a.value.shape, n.shape, "The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])"), Hm(a.grads), a;
  };
}
function ON(e17, t) {
  A(ss(e17), () => "The f passed in variableGrads(f) must be a function"), A(t == null || Array.isArray(t) && t.every((u) => u instanceof os), () => "The varList passed in variableGrads(f, varList) must be an array of variables");
  let n = t != null;
  if (!n) {
    t = [];
    for (let u in P.registeredVariables) t.push(P.registeredVariables[u]);
  }
  let a = n ? t.filter((u) => !u.trainable) : null, r = t.length;
  t = t.filter((u) => u.trainable), A(t.length > 0, () => `variableGrads() expects at least one of the input variables to be trainable, but none of the ${r} variables is trainable.`);
  let s = true, { value: i, grads: o } = P.gradients(e17, t, null, s);
  A(o.some((u) => u != null), () => "Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."), A(i.rank === 0, () => `The f passed in variableGrads(f) must return a scalar, but it returned a rank-${i.rank} tensor`);
  let l = {};
  return t.forEach((u, p) => {
    o[p] != null && (l[u.name] = o[p]);
  }), a != null && a.forEach((u) => l[u.name] = null), { value: i, grads: l };
}
function pr(e17) {
  return P.customGrad(e17);
}
function Hm(e17) {
  if (e17.filter((t) => t == null).length > 0) throw new Error(`Cannot compute gradient of y=f(x) with respect to x. Make sure that
    the f you passed encloses all operations that lead from x to y.`);
}
function B3(e17) {
  let t = { x: E(e17, "x", "neg") };
  return P.runKernel(Cu, t);
}
var yt = L({ neg_: B3 });
function V3(e17) {
  let t = { x: E(e17, "x", "softplus") };
  return P.runKernel(Oo, t);
}
var Go = L({ softplus_: V3 });
function U3(e17) {
  let t = E(e17, "x", "logSigmoid");
  return pr((n) => ({ value: yt(Go(yt(n))), gradFunc: (a) => z(a, ha(yt(n))) }))(t);
}
var bw = L({ logSigmoid_: U3 });
function G3(e17, t) {
  let n = E(e17, "a", "sub"), a = E(t, "b", "sub");
  [n, a] = _t(n, a);
  let r = { a: n, b: a };
  return P.runKernel(Bo, r);
}
var pe = L({ sub_: G3 });
function H3(e17, t = -1) {
  let n = E(e17, "logits", "logSoftmax");
  if (t === -1 && (t = n.rank - 1), t !== n.rank - 1) throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${t}`);
  return pr((a, r) => {
    let s = ma(a, t, true), i = pe(a, s), o = pe(re(i, "float32"), Qn(fe(dn(i), t, true)));
    return r([o]), { value: o, gradFunc: (l, u) => {
      let [p] = u, d = true, c = dn(p);
      return pe(l, z(fe(l, t, d), c));
    } };
  })(n);
}
var jm = L({ logSoftmax_: H3 });
function j3(e17, t = null, n = false) {
  let a = E(e17, "x", "logSumExp"), r = Aa(t, a.shape), s = ma(a, r, true), i = pe(a, s), o = dn(i), l = fe(o, r), u = Qn(l), p = X(W(s, u.shape), u);
  if (n) {
    let d = mi(p.shape, r);
    return W(p, d);
  }
  return p;
}
var cd = L({ logSumExp_: j3 });
function q3(e17, t) {
  let n = E(e17, "a", "logicalAnd", "bool"), a = E(t, "b", "logicalAnd", "bool");
  ct(n.shape, a.shape);
  let r = { a: n, b: a };
  return P.runKernel(wu, r);
}
var _a = L({ logicalAnd_: q3 });
function K3(e17) {
  let t = { x: E(e17, "x", "logicalNot", "bool") };
  return P.runKernel(ku, t);
}
var dd = L({ logicalNot_: K3 });
function X3(e17, t) {
  let n = E(e17, "a", "logicalOr", "bool"), a = E(t, "b", "logicalOr", "bool");
  ct(n.shape, a.shape);
  let r = { a: n, b: a };
  return P.runKernel(Iu, r);
}
var qm = L({ logicalOr_: X3 });
function Y3(e17, t) {
  let n = E(e17, "a", "logicalXor", "bool"), a = E(t, "b", "logicalXor", "bool");
  return ct(n.shape, a.shape), _a(qm(e17, t), dd(_a(e17, t)));
}
var yw = L({ logicalXor_: Y3 });
var vh = 2147483648;
function Z3(e17, t, n = "left") {
  let a = E(e17, "sortedSequence", "searchSorted"), r = E(t, "values", "searchSorted"), s = a.shape[a.shape.length - 1], i = r.shape[r.shape.length - 1], o = W(a, [-1, s]), l = W(r, [-1, i]);
  if (o.rank < 2) throw new Error("Sorted input argument must be at least 2-dimensional");
  if (o.shape[0] !== l.shape[0]) throw new Error("Leading dimension of 'sortedSequence' and 'values' must match.");
  if (ot(l.shape) >= vh) throw new Error(`values tensor size must less than ${vh}`);
  if (o.shape[1] >= vh) throw new Error(`trailing dim_size must less than ${vh} for int32 output type, was ${o.shape[1]}`);
  let u = { sortedSequence: o, values: l }, p = { side: n };
  return P.runKernel(zu, u, p);
}
var Km = L({ searchSorted_: Z3 });
function PN(e17, t) {
  return Km(e17, t, "left");
}
function J3(e17, t, n, a, r) {
  let s = E(e17, "x", "maxPool"), i = 1, o = s, l = false;
  s.rank === 3 && (l = true, o = W(s, [1, s.shape[0], s.shape[1], s.shape[2]])), A(o.rank === 4, () => `Error in maxPool: input must be rank 4 but got rank ${o.rank}.`), A(dr(n, i), () => `Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '${i}'`), Tn("maxPool", a, r);
  let u = { x: o }, p = { filterSize: t, strides: n, pad: a, dimRoundingMode: r }, d = P.runKernel(po, u, p);
  return l ? W(d, [d.shape[1], d.shape[2], d.shape[3]]) : d;
}
var Dt = L({ maxPool_: J3 });
function Q3(e17, t = [1, 1, 1], n, a, r, s = "NDHWC") {
  let i = E(e17, "x", "maxPool3d"), o = i, l = false;
  i.rank === 4 && (l = true, o = W(i, [1, i.shape[0], i.shape[1], i.shape[2], i.shape[3]])), A(o.rank === 5, () => `Error in maxPool3d: x must be rank 5 but got rank ${o.rank}.`), A(s === "NDHWC", () => `Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${s}`), Tn("maxPool3d", a, r);
  let u = { x: o }, p = { filterSize: t, strides: n, pad: a, dimRoundingMode: r, dataFormat: s }, d = P.runKernel(Nu, u, p);
  return l ? W(d, [d.shape[1], d.shape[2], d.shape[3], d.shape[4]]) : d;
}
var xw = L({ maxPool3d_: Q3 });
function eL(e17, t, n, a, r = false) {
  let s = { x: E(e17, "x", "maxPoolWithArgmax") }, i = { filterSize: t, strides: n, pad: a, includeBatchInIndex: r }, o = P.runKernel(Vc, s, i);
  return { result: o[0], indexes: o[1] };
}
var LN = L({ maxPoolWithArgmax_: eL });
function tL(e17, t) {
  let n = E(e17, "a", "maximum"), a = E(t, "b", "maximum");
  [n, a] = _t(n, a), n.dtype === "bool" && (n = re(n, "int32"), a = re(a, "int32")), ct(n.shape, a.shape);
  let r = { a: n, b: a };
  return P.runKernel(uo, r);
}
var hr = L({ maximum_: tL });
function nL(e17, t = null, n = false) {
  let a = { x: E(e17, "x", "mean") }, r = { axis: t, keepDims: n };
  return P.runKernel(co, a, r);
}
var Ct = L({ mean_: nL });
function It(e17, t = "float32") {
  if (na(e17), t === "complex64") {
    let a = It(e17, "float32"), r = It(e17, "float32");
    return _r(a, r);
  }
  let n = xm(ot(e17), t);
  return P.makeTensor(n, e17, t);
}
function Pn(e17, t = "float32") {
  if (na(e17), t === "complex64") {
    let a = Pn(e17, "float32"), r = It(e17, "float32");
    return _r(a, r);
  }
  let n = Nv(ot(e17), t);
  return P.makeTensor(n, e17, t);
}
function zN(e17, t, { indexing: n = "xy" } = {}) {
  if (n !== "xy" && n !== "ij") throw new TypeError(`${n} is not a valid third argument to meshgrid`);
  if (e17 === void 0) return [];
  let a = E(e17, "x", "meshgrid", e17 instanceof Ce ? e17.dtype : "float32");
  if (t === void 0) return [a];
  let r = E(t, "y", "meshgrid", t instanceof Ce ? t.dtype : "float32"), s = ot(a.shape), i = ot(r.shape);
  return n === "xy" ? (a = W(a, [1, -1]), r = W(r, [-1, 1]), [$e(Pn([i, 1], a.dtype), a), $e(r, Pn([1, s], r.dtype))]) : (a = W(a, [-1, 1]), r = W(r, [1, -1]), [$e(a, Pn([1, i], a.dtype)), $e(Pn([s, 1], r.dtype), r)]);
}
function aL(e17, t) {
  let n = E(e17, "a", "minimum"), a = E(t, "b", "minimum");
  [n, a] = _t(n, a), n.dtype === "bool" && (n = re(n, "int32"), a = re(a, "int32")), ct(n.shape, a.shape);
  let r = { a: n, b: a };
  return P.runKernel(mo, r);
}
var ds = L({ minimum_: aL });
function rL(e17, t, n) {
  A(n === "reflect" || n === "symmetric", () => `Invalid mode. Mode must be either reflect or symmetric. Got ${n}.`);
  let a = E(e17, "x", "mirrorPad");
  if (a.rank === 0) throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");
  A(t.length === a.rank, () => `Padding doesn't match input. Must be ${a.rank}. Got ${t.length}.`);
  let r = n === "reflect" ? 1 : 0;
  for (let o = 0; o < a.rank; o++) A(t[o].length === 2, () => "Invalid number of paddings. Must be length of 2 each."), A(t[o][0] >= 0 && t[o][0] <= a.shape[o] - r && t[o][1] >= 0 && t[o][1] <= a.shape[o] - r, () => `Padding in dimension ${o} cannot be greater than or equal to ${a.shape[o] - r} or less than 0 for input of shape ${a.shape}`);
  let s = { paddings: t, mode: n }, i = { x: a };
  return P.runKernel(fo, i, s);
}
var vw = L({ mirrorPad_: rL });
function sL(e17, t) {
  let n = E(e17, "a", "mod"), a = E(t, "b", "mod");
  [n, a] = _t(n, a);
  let r = { a: n, b: a };
  return P.runKernel(go, r);
}
var ww = L({ mod_: sL });
function iL(e17, t = null, n = false) {
  e17 = E(e17, "x", "moments");
  let a = Aa(t, e17.shape), r = Ct(e17, a, n), s = r.shape;
  n || (s = mi(r.shape, a));
  let i = pt(pe(re(e17, "float32"), W(r, s))), o = Ct(i, a, n);
  return { mean: r, variance: o };
}
var hd = L({ moments_: iL });
function oL(e17, t, n, a) {
  let r = E(t, "data", "multiRNNCell"), s = bc(n, "c", "multiRNNCell"), i = bc(a, "h", "multiRNNCell"), o = r, l = [];
  for (let d = 0; d < e17.length; d++) {
    let c = e17[d](o, s[d], i[d]);
    l.push(c[0]), l.push(c[1]), o = c[1];
  }
  let u = [], p = [];
  for (let d = 0; d < l.length; d += 2) u.push(l[d]), p.push(l[d + 1]);
  return [u, p];
}
var WN = L({ multiRNNCell_: oL });
function lL(e17, t, n, a = false) {
  let r = E(e17, "logits", "multinomial"), s = r.size, i = r.rank;
  if (s < 2) throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${s}.`);
  if (i > 2) throw new Error(`Rank of probabilities must be 1 or 2, but is ${i}`);
  n = n || Math.random();
  let o = { logits: i === 1 ? W(r, [1, -1]) : r }, l = { numSamples: t, seed: n, normalized: a }, u = P.runKernel(Tu, o, l);
  return i === 1 ? W(u, [u.size]) : u;
}
var BN = L({ multinomial_: lL });
function uL(e17, t) {
  let n = E(e17, "a", "notEqual", "string_or_numeric"), a = E(t, "b", "notEqual", "string_or_numeric");
  [n, a] = _t(n, a), ct(n.shape, a.shape);
  let r = { a: n, b: a };
  return P.runKernel(Eu, r);
}
var fi = L({ notEqual_: uL });
function pL(e17, t, n = 1, a = 0, r = "int32") {
  if (t < 2) throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`);
  let s = { indices: E(e17, "indices", "oneHot", "int32") }, i = { dtype: r, depth: t, onValue: n, offValue: a };
  return P.runKernel(yo, s, i);
}
var Ll = L({ oneHot_: pL });
function cL(e17) {
  let t = { x: E(e17, "x", "onesLike") };
  return P.runKernel($u, t);
}
var ea = L({ onesLike_: cL });
function dL(e17, t) {
  let n = E(e17, "v1", "outerProduct"), a = E(t, "v2", "outerProduct");
  A(n.rank === 1 && a.rank === 1, () => `Error in outerProduct: inputs must be rank 1, but got ranks ${n.rank} and ${a.rank}.`);
  let r = W(n, [-1, 1]), s = W(a, [1, -1]);
  return $e(r, s);
}
var VN = L({ outerProduct_: dL });
function hL(e17, t, n = 0) {
  let a = E(e17, "x", "pad");
  if (a.rank === 0) throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");
  let r = { paddings: t, constantValue: n }, s = { x: a };
  return P.runKernel(xo, s, r);
}
var xa = L({ pad_: hL });
function mL(e17, t, n = 0) {
  return A(t.length === 2, () => "Invalid number of paddings. Must be length of 2."), xa(e17, [t], n);
}
var UN = L({ pad1d_: mL });
function fL(e17, t, n = 0) {
  return A(t.length === 2 && t[0].length === 2 && t[1].length === 2, () => "Invalid number of paddings. Must be length of 2 each."), xa(e17, t, n);
}
var GN = L({ pad2d_: fL });
function gL(e17, t, n = 0) {
  return A(t.length === 3 && t[0].length === 2 && t[1].length === 2 && t[2].length === 2, () => "Invalid number of paddings. Must be length of 2 each."), xa(e17, t, n);
}
var HN = L({ pad3d_: gL });
function bL(e17, t, n = 0) {
  return A(t.length === 4 && t[0].length === 2 && t[1].length === 2 && t[2].length === 2 && t[3].length === 2, () => "Invalid number of paddings. Must be length of 2 each."), xa(e17, t, n);
}
var jN = L({ pad4d_: bL });
function yL(e17, t, n) {
  let a = E(e17, "x", "spaceToBatchND");
  A(a.rank >= 1 + t.length, () => `input rank ${a.rank} should be > than [blockShape] ${t.length}`), A(n.length === t.length, () => `paddings.shape[0] ${n.length} must be equal to [blockShape] ${t.length}`), A(a.shape.reduce((i, o, l) => l > 0 && l <= t.length ? i && (o + n[l - 1][0] + n[l - 1][1]) % t[l - 1] === 0 : i, true), () => `input spatial dimensions ${a.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${t.toString()}`);
  let r = { x: a }, s = { blockShape: t, paddings: n };
  return P.runKernel(Vu, r, s);
}
var md = L({ spaceToBatchND_: yL });
function xL(e17, t, n, a, r, s, i) {
  r == null && (r = [1, 1]), s == null && (s = 1), a === 0 && (a = "valid");
  let o = E(e17, "x", "maxPool"), l = o, u = false;
  o.rank === 3 && (u = true, l = W(o, [1, o.shape[0], o.shape[1], o.shape[2]])), A(dr(s, r), () => `Error in pool: Either strides or dilations must be 1. Got strides ${s} and dilations '${r}'`);
  let p = wN(l.shape, t, s, r, a), d = [p.dilationHeight, p.dilationWidth], c;
  a === "same" ? c = wL([p.filterHeight, p.filterWidth], d) : c = [[0, 0], [0, 0]];
  let h = d[0] === 1 && d[1] === 1, [m, f] = vL([p.inHeight, p.inWidth], d, c), g = h ? a : "valid", b = h ? l : md(l, d, m), y = (n === "avg" ? () => ya(b, t, s, g, i) : () => Dt(b, t, s, g, i))(), x = h ? y : id(y, d, f);
  return u ? W(x, [x.shape[1], x.shape[2], x.shape[3]]) : x;
}
function vL(e17, t, n) {
  let a = n.map((p) => p[0]), r = n.map((p) => p[1]), s = e17.concat(a, r), i = t.map((p, d) => (p - s[d] % p) % p), o = r.map((p, d) => p + i[d]), l = t.map((p, d) => [a[d], o[d]]), u = t.map((p, d) => [0, i[d]]);
  return [l, u];
}
function wL(e17, t) {
  let n = e17.map((s, i) => s + (s - 1) * (t[i] - 1)).map((s) => s - 1), a = n.map((s) => Math.floor(s / 2)), r = n.map((s, i) => s - a[i]);
  return n.map((s, i) => [a[i], r[i]]);
}
var kw = L({ pool_: xL });
function kL(e17, t) {
  let n = E(e17, "x", "prelu"), a = E(t, "alpha", "prelu"), r = { x: n, alpha: a };
  return P.runKernel(wo, r);
}
var fd = L({ prelu_: kL });
function IL(e17, t = null, n = false) {
  let a = E(e17, "x", "prod");
  a.dtype === "bool" && (a = re(a, "int32"));
  let r = { x: a }, s = { axis: t, keepDims: n };
  return P.runKernel(ko, r, s);
}
var Iw = L({ prod_: IL });
function SL(e17, t, n, a) {
  let r = e17.map((p, d) => E(p, `tensors${d}`, "raggedGather", "int32")), s = E(t, "paramsDenseValues", "raggedGather"), i = E(n, "indices", "raggedGather", "int32"), o = { paramsNestedSplits: r, paramsDenseValues: s, indices: i }, l = { outputRaggedRank: a }, u = P.runKernel(Am, o, l);
  return { outputNestedSplits: u.slice(0, u.length - 1), outputDenseValues: u[u.length - 1] };
}
var qN = L({ raggedGather_: SL });
function NL(e17, t, n) {
  let a = E(e17, "starts", "raggedRange"), r = E(t, "limits", "raggedRange", a.dtype), s = E(n, "deltas", "raggedRange", a.dtype), i = { starts: a, limits: r, deltas: s }, o = P.runKernel(Fm, i);
  return { rtNestedSplits: o[0], rtDenseValues: o[1] };
}
var KN = L({ raggedRange_: NL });
function TL(e17, t, n, a, r) {
  let s = E(e17, "shape", "raggedTensorToTensor", "int32"), i = E(t, "values", "raggedTensorToTensor"), o = E(n, "defaultValue", "raggedTensorToTensor", i.dtype), l = a.map((d, c) => E(d, `tensors${c}`, "raggedTensorToTensor", "int32")), u = { shape: s, values: i, defaultValue: o, rowPartitionTensors: l }, p = { rowPartitionTypes: r };
  return P.runKernel($m, u, p);
}
var XN = L({ raggedTensorToTensor_: TL });
function CL(e17, t, n) {
  na(e17);
  let a = ot(e17), r = null;
  if (n == null || n === "float32") r = new Float32Array(a);
  else if (n === "int32") r = new Int32Array(a);
  else if (n === "bool") r = new Uint8Array(a);
  else throw new Error(`Unknown data type ${n}`);
  for (let s = 0; s < a; s++) r[s] = t();
  return P.makeTensor(r, e17, n);
}
var YN = L({ rand_: CL });
var Sw = xs(bm());
var ZN = {};
_e(ZN, { TEST_EPSILON_FLOAT16: () => JN, createVideoElement: () => ML, encodeStrings: () => QN, expectArrayBuffersEqual: () => RL, expectArraysClose: () => _L, expectArraysEqual: () => FL, expectNumbersClose: () => $L, expectPromiseToFail: () => AL, expectValuesInRange: () => DL, play: () => OL, testEpsilon: () => Nw });
var EL = 1e-3;
var JN = 0.1;
function _L(e17, t, n) {
  return n == null && (n = Nw()), Rx(e17, t, (a, r) => Tw(a, r, n));
}
function Nw() {
  return P.backend.floatPrecision() === 32 ? EL : JN;
}
function Rx(e17, t, n) {
  let a = true;
  if ((en(e17) || en(t)) && (a = false), en(e17) && en(t) && (a = true), a) {
    let i = e17.constructor.name, o = t.constructor.name;
    if (i !== o) throw new Error(`Arrays are of different type. Actual: ${i}. Expected: ${o}`);
  }
  if (Array.isArray(e17) && Array.isArray(t)) {
    let i = lr(e17), o = lr(t);
    if (!Ar(i, o)) throw new Error(`Arrays have different shapes. Actual: [${i}]. Expected: [${o}]`);
  }
  let r = en(e17) ? e17 : is(e17), s = en(t) ? t : is(t);
  if (r.length !== s.length) throw new Error(`Arrays have different lengths actual: ${r.length} vs expected: ${s.length}.
Actual:   ${r}.
Expected: ${s}.`);
  for (let i = 0; i < s.length; ++i) {
    let o = r[i], l = s[i];
    if (!n(o, l)) throw new Error(`Arrays differ: actual[${i}] = ${o}, expected[${i}] = ${l}.
Actual:   ${r}.
Expected: ${s}.`);
  }
  typeof expect != "undefined" && expect().nothing();
}
function AL(e17, t) {
  e17().then(() => t.fail(), () => t()), typeof expect != "undefined" && expect().nothing();
}
function FL(e17, t) {
  let n = typeof t == "string" || typeof t == "number" || typeof t == "boolean" ? [t] : t;
  return Jr(e17) || Jr(e17[0]) || Jr(t) || Jr(t[0]) ? Rx(e17, n, (a, r) => a == r) : Rx(e17, t, (a, r) => Tw(a, r, 0));
}
function $L(e17, t, n) {
  if (n == null && (n = Nw()), !Tw(e17, t, n)) throw new Error(`Numbers differ: actual === ${e17}, expected === ${t}`);
  typeof expect != "undefined" && expect().nothing();
}
function Tw(e17, t, n) {
  return !isFinite(e17) && !isFinite(t) ? true : !(isNaN(e17) || isNaN(t) || Math.abs(e17 - t) > n);
}
function DL(e17, t, n) {
  for (let a = 0; a < e17.length; a++) if (e17[a] < t || e17[a] > n) throw new Error(`Value out of range:${e17[a]} low: ${t}, high: ${n}`);
}
function RL(e17, t) {
  let n = new Float32Array(e17), a = new Float32Array(t);
  if (n.length !== a.length) throw new Error(`Expected ArrayBuffer to be of length ${a.length}, but it was ${n.length}`);
  for (let r = 0; r < a.length; r++) if (n[r] !== a[r]) throw new Error(`Expected ArrayBuffer value at ${r} to be ${a[r]} but got ${n[r]} instead`);
}
function QN(e17) {
  for (let t = 0; t < e17.length; t++) {
    let n = e17[t];
    Array.isArray(n) ? QN(n) : e17[t] = nd(n);
  }
  return e17;
}
function ML(e17) {
  let t = document.createElement("video");
  return "playsInline" in t && (t.playsInline = true), t.muted = true, t.loop = true, t.style.position = "fixed", t.style.left = "0px", t.style.top = "0px", t.preload = "auto", t.appendChild(e17), new Promise((n) => {
    t.addEventListener("loadeddata", (a) => n(t)), t.load();
  });
}
async function OL(e17) {
  await e17.play(), "requestVideoFrameCallback" in e17 && await new Promise((t) => {
    e17.requestVideoFrameCallback(t);
  });
}
var Cw = class {
  constructor(e17, t, n, a, r) {
    this.mean = e17, this.stdDev = t, this.dtype = n, this.nextVal = NaN, this.truncated = a, this.truncated && (this.upper = this.mean + this.stdDev * 2, this.lower = this.mean - this.stdDev * 2);
    let s = r || Math.random();
    this.random = Sw.alea(s.toString());
  }
  nextValue() {
    if (!isNaN(this.nextVal)) {
      let a = this.nextVal;
      return this.nextVal = NaN, a;
    }
    let e17, t, n = false;
    for (; !n; ) {
      let a, r, s;
      do
        a = 2 * this.random() - 1, r = 2 * this.random() - 1, s = a * a + r * r;
      while (s >= 1 || s === 0);
      let i = Math.sqrt(-2 * Math.log(s) / s);
      e17 = this.mean + this.stdDev * a * i, t = this.mean + this.stdDev * r * i, (!this.truncated || this.isValidTruncated(e17)) && (n = true);
    }
    return (!this.truncated || this.isValidTruncated(t)) && (this.nextVal = this.convertValue(t)), this.convertValue(e17);
  }
  convertValue(e17) {
    return this.dtype == null || this.dtype === "float32" ? e17 : Math.round(e17);
  }
  isValidTruncated(e17) {
    return e17 <= this.upper && e17 >= this.lower;
  }
};
var PL = class {
  constructor(e17, t, n, a) {
    this.alpha = e17, this.beta = 1 / t, this.dtype = n;
    let r = a || Math.random();
    this.randu = Sw.alea(r.toString()), this.randn = new Cw(0, 1, n, false, this.randu()), e17 < 1 ? this.d = e17 + 2 / 3 : this.d = e17 - 1 / 3, this.c = 1 / Math.sqrt(9 * this.d);
  }
  nextValue() {
    let e17, t, n, a, r, s;
    for (; ; ) {
      do
        a = this.randn.nextValue(), s = 1 + this.c * a;
      while (s <= 0);
      if (s *= s * s, e17 = a * a, t = 1 - 0.331 * e17 * e17, n = 0.5 * e17 + this.d * (1 - s + Math.log(s)), r = this.randu(), r < t || Math.log(r) < n) break;
    }
    return s = 1 / this.beta * this.d * s, this.alpha < 1 && (s *= Math.pow(this.randu(), 1 / this.alpha)), this.convertValue(s);
  }
  convertValue(e17) {
    return this.dtype === "float32" ? e17 : Math.round(e17);
  }
};
var LL = class {
  constructor(e17 = 0, t = 1, n, a) {
    if (this.canReturnFloat = () => this.dtype == null || this.dtype === "float32", this.min = e17, this.range = t - e17, this.dtype = n, a == null && (a = Math.random()), typeof a == "number" && (a = a.toString()), !this.canReturnFloat() && this.range <= 1) throw new Error(`The difference between ${e17} - ${t} <= 1 and dtype is not float`);
    this.random = Sw.alea(a);
  }
  convertValue(e17) {
    return this.canReturnFloat() ? e17 : Math.round(e17);
  }
  nextValue() {
    return this.convertValue(this.min + this.range * this.random());
  }
};
function zL(e17, t, n = 1, a = "float32", r) {
  if (na(e17), n == null && (n = 1), a == null && (a = "float32"), a !== "float32" && a !== "int32") throw new Error(`Unsupported data type ${a}`);
  let s = new PL(t, n, a, r), i = Oe(e17, a);
  for (let o = 0; o < i.values.length; o++) i.values[o] = s.nextValue();
  return i.toTensor();
}
var eT = L({ randomGamma_: zL });
function WL(e17, t = 0, n = 1, a, r) {
  if (na(e17), a != null && a === "bool") throw new Error(`Unsupported data type ${a}`);
  let s = new Cw(t, n, a, false, r), i = Oe(e17, a);
  for (let o = 0; o < i.values.length; o++) i.values[o] = s.nextValue();
  return i.toTensor();
}
var Xm = L({ randomNormal_: WL });
function BL(e17, t, n) {
  if (t != null && t === "bool") throw new Error(`Unsupported data type ${t}`);
  return Xm(e17, 0, 1, t, n);
}
var tT = L({ randomStandardNormal_: BL });
function VL(e17, t = 0, n = 1, a = "float32", r) {
  na(e17);
  let s = Oe(e17, a), i = new LL(t, n, null, r);
  for (let o = 0; o < s.values.length; o++) s.values[o] = i.nextValue();
  return s.toTensor();
}
var Es = L({ randomUniform_: VL });
function UL(e17, t, n, a) {
  return Es(e17, t, n, "int32", a);
}
var nT = L({ randomUniformInt_: UL });
function gi(e17, t, n = 1, a = "float32") {
  if (n === 0) throw new Error("Cannot have a step of zero");
  let r = { start: e17, stop: t, step: n, dtype: a };
  return P.runKernel(Uc, {}, r);
}
function GL(e17) {
  let t = { input: E(e17, "input", "real") };
  return P.runKernel(Dm, t);
}
var zl = L({ real_: GL });
function HL(e17) {
  let t = { x: E(e17, "x", "reciprocal") };
  return P.runKernel(Io, t);
}
var Ew = L({ reciprocal_: HL });
function jL(e17) {
  let t = { x: E(e17, "x", "relu") };
  return P.runKernel(So, t);
}
var Ke = L({ relu_: jL });
function qL(e17) {
  let t = { x: E(e17, "x", "relu6") };
  return P.runKernel(Co, t);
}
var Ym = L({ relu6_: qL });
function KL(e17, t) {
  let n = { x: E(e17, "x", "reverse") }, a = { dims: t };
  return P.runKernel(Eo, n, a);
}
var ba = L({ reverse_: KL });
function XL(e17) {
  let t = E(e17, "x", "reverse");
  return A(t.rank === 1, () => `Error in reverse1D: x must be rank 1 but got rank ${t.rank}.`), ba(t, 0);
}
var aT = L({ reverse1d_: XL });
function YL(e17, t) {
  let n = E(e17, "x", "reverse");
  return A(n.rank === 2, () => `Error in reverse2D: x must be rank 2 but got rank ${n.rank}.`), ba(n, t);
}
var rT = L({ reverse2d_: YL });
function ZL(e17, t) {
  let n = E(e17, "x", "reverse");
  return A(n.rank === 3, () => `Error in reverse3D: x must be rank 3 but got rank ${n.rank}.`), ba(n, t);
}
var sT = L({ reverse3d_: ZL });
function JL(e17, t) {
  let n = E(e17, "x", "reverse");
  return A(n.rank === 4, () => `Error in reverse4D: x must be rank 4 but got rank ${n.rank}.`), ba(n, t);
}
var iT = L({ reverse4d_: JL });
function QL(e17) {
  let t = { x: E(e17, "x", "round") };
  return P.runKernel(_o, t);
}
var Zm = L({ round_: QL });
function ez(e17) {
  let t = { x: E(e17, "x", "rsqrt", "float32") };
  return P.runKernel(Ao, t);
}
var Jm = L({ rsqrt_: ez });
function tz(e17) {
  let t = { x: E(e17, "x", "selu") };
  return P.runKernel(Fo, t);
}
var Qm = L({ selu_: tz });
function nz(e17, t, n, a, r, s = [1, 1], i = "NHWC") {
  let o = E(e17, "x", "separableConv2d"), l = E(t, "depthwiseFilter", "separableConv2d"), u = E(n, "pointwiseFilter", "separableConv2d"), p = o, d = false;
  if (o.rank === 3 && (d = true, p = W(o, [1, o.shape[0], o.shape[1], o.shape[2]])), i === "NCHW") throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");
  A(p.rank === 4, () => `Error in separableConv2d: input must be rank 4, but got rank ${p.rank}.`), A(l.rank === 4, () => `Error in separableConv2d: depthwise filter must be rank 4, but got rank ${l.rank}.`), A(u.rank === 4, () => `Error in separableConv2d: pointwise filter must be rank 4, but got rank ${l.rank}.`), A(u.shape[0] === 1, () => `Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${u.shape[0]}.`), A(u.shape[1] === 1, () => `Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${u.shape[1]}.`);
  let c = l.shape[2], h = l.shape[3];
  A(u.shape[2] === c * h, () => `Error in separableConv2d: the third dimension of pointwise filter must be ${c * h}, but got ${u.shape[2]}.`);
  let m = Ts(p, l, a, r, i, s), f = $t(m, u, 1, "valid", i);
  return d ? W(f, [f.shape[1], f.shape[2], f.shape[3]]) : f;
}
var _s = L({ separableConv2d_: nz });
async function az(e17, t) {
  let n = E(e17, "x", "setdiff1d"), a = E(t, "y", "setdiff1d");
  A(n.dtype === a.dtype, () => `x and y should have the same dtype, but got x (${n.dtype}) and y (${a.dtype}).`), A(n.rank === 1, () => `x should be 1D tensor, but got x (${n.shape}).`), A(a.rank === 1, () => `y should be 1D tensor, but got y (${a.shape}).`);
  let r = await n.data(), s = await a.data(), i = new Set(s), o = 0;
  for (let p = 0; p < r.length; p++) i.has(r[p]) || o++;
  let l = new Wt([o], n.dtype), u = new Wt([o], "int32");
  for (let p = 0, d = 0; p < r.length; p++) i.has(r[p]) || (l.values[d] = r[p], u.values[d] = p, d++);
  return [l.toTensor(), u.toTensor()];
}
var oT = az;
function rz(e17) {
  let t = { x: E(e17, "x", "sign") };
  return P.runKernel(Ro, t);
}
var _w = L({ sign_: rz });
function sz(e17) {
  let t = { x: E(e17, "x", "sin", "float32") };
  return P.runKernel($o, t);
}
var ef = L({ sin_: sz });
function iz(e17) {
  let t = { x: E(e17, "x", "sinh") };
  return P.runKernel(Do, t);
}
var tf = L({ sinh_: iz });
function oz(e17, t, n) {
  let a = E(e17, "x", "slice1d");
  return A(a.rank === 1, () => `slice1d expects a rank-1 tensor, but got a rank-${a.rank} tensor`), Ve(a, [t], [n]);
}
var gd = L({ slice1d_: oz });
function lz(e17, t, n) {
  let a = E(e17, "x", "slice2d");
  return A(a.rank === 2, () => `slice2d expects a rank-2 tensor, but got a rank-${a.rank} tensor`), Ve(a, t, n);
}
var nf = L({ slice2d_: lz });
function uz(e17, t, n) {
  let a = E(e17, "x", "slice3d");
  return A(a.rank === 3, () => `slice3d expects a rank-3 tensor, but got a rank-${a.rank} tensor`), Ve(a, t, n);
}
var Ho = L({ slice3d_: uz });
function pz(e17, t, n) {
  let a = E(e17, "x", "slice4d");
  return A(a.rank === 4, () => `slice4d expects a rank-4 tensor, but got a rank-${a.rank} tensor`), Ve(a, t, n);
}
var Wl = L({ slice4d_: pz });
function cz(e17, t = -1) {
  let n = E(e17, "logits", "softmax", "float32");
  if (t === -1 && (t = n.rank - 1), t !== n.rank - 1) throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${t}`);
  let a = { logits: n }, r = { dim: t };
  return P.runKernel(zo, a, r);
}
var qa = L({ softmax_: cz });
function dz(e17) {
  A(e17.dtype === "complex64", () => `The dtype for tf.spectral.fft() must be complex64 but got ${e17.dtype}.`);
  let t = { input: e17 };
  return P.runKernel(Cm, t);
}
var bd = L({ fft_: dz });
function hz(e17) {
  A(e17.dtype === "complex64", () => `The dtype for tf.spectral.ifft() must be complex64 but got ${e17.dtype}.`);
  let t = { input: e17 };
  return P.runKernel(Em, t);
}
var Bl = L({ ifft_: hz });
function mz(e17) {
  let t = e17.shape[e17.shape.length - 1], n = e17.size / t, a;
  if (t <= 2) {
    let r = W(e17, [n, t]);
    a = Bl(r);
  } else {
    let r = [n, 2 * (t - 1)], s = W(zl(e17), [n, t]), i = W(ld(e17), [n, t]), o = ba(Ve(s, [0, 1], [n, t - 2]), 1), l = z(ba(Ve(i, [0, 1], [n, t - 2]), 1), xe(-1)), u = et([s, o], 1), p = et([i, l], 1), d = W(_r(u, p), [r[0], r[1]]);
    a = Bl(d);
  }
  if (a = zl(a), e17.rank === 3 && e17.shape[0] !== 0) {
    let r = a, s = e17.shape[0];
    a = W(a, [s, a.shape[0] / s, a.shape[1]]), r.dispose();
  }
  return a;
}
var af = L({ irfft_: mz });
function fz(e17, t, n = 0) {
  let a = { x: E(e17, "x", "split") }, r = { numOrSizeSplits: t, axis: n };
  return P.runKernel(Uu, a, r);
}
var Ln = L({ split_: fz });
function gz(e17, t) {
  A(e17.dtype === "float32", () => `The dtype for rfft() must be real value but got ${e17.dtype}`);
  let n = e17.shape[e17.shape.length - 1], a = e17.size / n, r;
  if (t != null && t < n) {
    let m = e17.shape.map((g) => 0), f = e17.shape.map((g) => g);
    f[e17.shape.length - 1] = t, r = Ve(e17, m, f), n = t;
  } else if (t != null && t > n) {
    let m = e17.shape.map((f) => f);
    m[e17.shape.length - 1] = t - n, r = et([e17, It(m)], e17.shape.length - 1), n = t;
  } else r = e17;
  let s = qe(r), i = W(_r(r, s), [a, n]), o = bd(i), l = Math.floor(n / 2) + 1, u = zl(o), p = ld(o), d = Ln(u, [l, n - l], u.shape.length - 1), c = Ln(p, [l, n - l], p.shape.length - 1), h = r.shape.slice();
  return h[r.shape.length - 1] = l, W(_r(d[0], c[0]), h);
}
var yd = L({ rfft_: gz });
function bz(e17, t) {
  let n = E(e17, "a", "squaredDifference"), a = E(t, "b", "squaredDifference");
  [n, a] = _t(n, a), ct(n.shape, a.shape);
  let r = { a: n, b: a }, s = {};
  return P.runKernel(Wo, r, s);
}
var rf = L({ squaredDifference_: bz });
function yz(e17, t) {
  let n = E(e17, "x", "squeeze", "string_or_numeric");
  return W(n, MS(n.shape, t).newShape);
}
var As = L({ squeeze_: yz });
function xz(e17, t = 0) {
  let n = bc(e17, "tensors", "stack", "string_or_numeric");
  A(n.length >= 1, () => "Pass at least one tensor to tf.stack"), n.length > 0 && A(t <= n[0].rank, () => "Axis must be <= rank of the tensor");
  let a = n, r = { axis: t };
  return P.runKernel(Du, a, r);
}
var At = L({ stack_: xz });
function vz(e17, t = 0) {
  let n = { x: E(e17, "x", "step") }, a = { alpha: t };
  return P.runKernel(Is, n, a);
}
var jo = L({ step_: vz });
function wz(e17, t, n, a, r = 0, s = 0, i = 0, o = 0, l = 0) {
  let u = { x: E(e17, "x", "stridedSlice", "string_or_numeric") }, p = { begin: t, end: n, strides: a, beginMask: r, endMask: s, ellipsisMask: i, newAxisMask: o, shrinkAxisMask: l };
  return P.runKernel(ju, u, p);
}
var Aw = L({ stridedSlice_: wz });
function kz(e17) {
  let t = { x: E(e17, "x", "tan", "float32") };
  return P.runKernel(Vo, t);
}
var Fw = L({ tan_: kz });
function je(e17, t) {
  Si(e17);
  let n = lr(e17, t);
  if (n.length !== 1) throw new Error("tensor1d() requires values to be a flat/TypedArray");
  return Ss(e17, null, n, t);
}
function Ea(e17, t, n) {
  if (Si(e17), t != null && t.length !== 2) throw new Error("tensor2d() requires shape to have two numbers");
  let a = lr(e17, n);
  if (a.length !== 2 && a.length !== 1) throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");
  if (a.length === 1 && t == null) throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");
  return Ss(e17, t, a, n);
}
function xd(e17, t, n) {
  if (Si(e17), t != null && t.length !== 3) throw new Error("tensor3d() requires shape to have three numbers");
  let a = lr(e17, n);
  if (a.length !== 3 && a.length !== 1) throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");
  if (a.length === 1 && t == null) throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");
  return Ss(e17, t, a, n);
}
function Fa(e17, t, n) {
  if (Si(e17), t != null && t.length !== 4) throw new Error("tensor4d() requires shape to have four numbers");
  let a = lr(e17, n);
  if (a.length !== 4 && a.length !== 1) throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");
  if (a.length === 1 && t == null) throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");
  return Ss(e17, t, a, n);
}
function lT(e17, t, n) {
  if (Si(e17), t != null && t.length !== 5) throw new Error("tensor5d() requires shape to have five numbers");
  let a = lr(e17, n);
  if (a.length !== 5 && a.length !== 1) throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");
  if (a.length === 1 && t == null) throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");
  return Ss(e17, t, a, n);
}
function uT(e17, t, n) {
  if (Si(e17), t != null && t.length !== 6) throw new Error("tensor6d() requires shape to have six numbers");
  let a = lr(e17, n);
  if (a.length !== 6 && a.length !== 1) throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");
  if (a.length === 1 && t == null) throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");
  return t = t || a, Ss(e17, t, a, n);
}
var sf = {};
_e(sf, { calculateShapes: () => pT, validateInput: () => of, validateUpdateShape: () => $w });
function $w(e17, t, n) {
  let a = t.rank > 1 ? t.shape[t.rank - 1] : 1, r = t.rank > 1 ? t.rank - 1 : 1, s = `Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${n.shape}, indices.shape: ${t.shape}, shape: ${e17}, sliceDim: ${a}, and batchDim: ${r}.`;
  if (n.rank < r) throw new Error(s + ` update.rank < ${r}. `);
  if (e17.length < a + (n.rank - r)) throw new Error(s + ` Output shape length < ${a + (n.rank - r)}`);
  if (n.rank !== r + e17.length - a) throw new Error(s + ` update.rank != ${r + e17.length - a}`);
  for (let i = 0; i < r; ++i) if (n.shape[i] !== t.shape[i]) throw new Error(s + ` updates.shape[${i}] (${n.shape[i]}) != indices.shape[${i}] (${t.shape[i]}).`);
  for (let i = 0; i < n.rank - r; ++i) if (n.shape[i + r] !== e17[i + a]) throw new Error(s + ` updates.shape[${i + r}] (${n.shape[i + r]}) != shape[${i + r}] (${e17[i + r]})`);
}
function of(e17, t, n) {
  if (t.rank < 1) throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);
  if (e17.rank < 1) throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${e17.rank}.`);
  if (t.dtype !== "int32") throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);
  if (n.length < 1) throw new Error(`Output rank must be greater or equal to 1, but got shape: ${n}`);
  if (n.length === 0) {
    if (t.size === 0) throw new Error(`Indices specified for empty output. indices shape: ${t.shape}`);
    if (e17.size === 0) throw new Error(`Updates specified for empty output. updates shape: ${e17.shape}`);
  }
  $w(n, t, e17);
}
function pT(e17, t, n) {
  let a = t.shape.length, r = a > 1 ? t.shape[a - 1] : 1, s = n.length, i = 1;
  for (let d = r; d < s; ++d) i *= n[d];
  let o = r < 1 ? 1 : r, l = ot(t.shape) / o, u = [...Xl(n.slice(0, r)), 1], p = ot(n);
  return { sliceRank: r, numUpdates: l, sliceSize: i, strides: u, outputSize: p };
}
function Iz(e17, t, n) {
  let a = E(e17, "tensor", "tensorScatterupdate"), r = E(t, "indices", "tensorScatterupdate", "int32"), s = E(n, "updates", "tensorScatterupdate");
  if (of(s, r, a.shape), a.dtype !== s.dtype) throw new Error(`tensor and updates must have the same dtype, instead they are ${a.dtype} and ${s.dtype}.`);
  let i = { tensor: a, indices: r, updates: s }, o = {};
  return P.runKernel(Lu, i, o);
}
var cT = L({ tensorScatterUpdate_: Iz });
function Sz(e17, t = 1, n = true) {
  let a = E(e17, "x", "topk");
  if (a.rank === 0) throw new Error("topk() expects the input to be of rank 1 or higher");
  let r = a.shape[a.shape.length - 1];
  if (t < 0) throw new Error(`'k' passed to topk() must be >= 0 but got ${t}`);
  if (t > r) throw new Error(`'k' passed to topk() must be <= the last dimension (${r}) but got ${t}`);
  let s = { x: a }, i = { k: t, sorted: n }, [o, l] = P.runKernel(qu, s, i);
  return { values: o, indices: l };
}
var Dw = L({ topk_: Sz });
function Nz(e17, t = 0, n = 1, a, r) {
  if (na(e17), a != null && a === "bool") throw new Error("Unsupported data type $ { dtype }");
  let s = new Cw(t, n, a, true, r), i = Oe(e17, a);
  for (let o = 0; o < i.values.length; o++) i.values[o] = s.nextValue();
  return i.toTensor();
}
var lf = L({ truncatedNormal_: Nz });
function Tz(e17, t = 0) {
  let n = E(e17, "x", "unique", "string_or_numeric");
  A(n.rank > 0, () => "The input tensor must be at least 1D");
  let a = { x: n }, r = { axis: t }, [s, i] = P.runKernel(Jc, a, r);
  return { values: s, indices: i };
}
var Rw = L({ unique_: Tz });
function Cz(e17, t, n) {
  let a = E(e17, "x", "unsortedSegmentSum"), r = E(t, "segmentIds", "unsortedSegmentSum", "int32");
  A($l(n), () => "numSegments must be of dtype int");
  let s = { x: a, segmentIds: r }, i = { numSegments: n };
  return P.runKernel(Qc, s, i);
}
var uf = L({ unsortedSegmentSum_: Cz });
function Ez(e17, t = 0) {
  let n = E(e17, "x", "unstack", "string_or_numeric");
  A(t >= -n.shape.length && t < n.shape.length, () => `Axis = ${t} is not in [-${n.shape.length}, ${n.shape.length})`);
  let a = { value: n }, r = { axis: t };
  return P.runKernel(Xu, a, r);
}
var dt = L({ unstack_: Ez });
function dT(e17, t) {
  return Km(e17, t, "right");
}
function Mw(e17, t = true, n, a) {
  return P.makeVariable(e17, t, n, a);
}
function hT(e17, t) {
  let n = [];
  for (let s = 0; s < t.length; s++) t[s] && n.push(s);
  let a = Oe(e17, "int32"), r = Oe([n.length, e17.length], "int32");
  for (let s = 0; s < n.length; s++) {
    let i = a.indexToLoc(n[s]), o = s * e17.length;
    r.values.set(i, o);
  }
  return r.toTensor();
}
async function _z(e17) {
  let t = E(e17, "condition", "whereAsync", "bool"), n = await t.data(), a = hT(t.shape, n);
  return e17 !== t && t.dispose(), a;
}
var Ow = _z;
async function Az(e17, t, n) {
  let a = E(e17, "tensor", "boolMask"), r = E(t, "mask", "boolMask", "bool"), s = n == null ? 0 : n, i = r.rank, o = a.shape;
  A(i > 0, () => "mask cannot be scalar"), Nn(o.slice(s, s + i), r.shape, "mask's shape must match the first K dimensions of tensor's shape,");
  let l = 1;
  for (let f = s; f < s + i; f++) l *= o[f];
  let u = o.slice(0, s).concat([l], o.slice(s + i)), p = W(a, u), d = W(r, [-1]), c = await Ow(d), h = As(c, [1]), m = np(p, h, s);
  return e17 !== a && a.dispose(), t !== r && r.dispose(), h.dispose(), p.dispose(), d.dispose(), c.dispose(), m;
}
var mT = Az;
function Fz(e17, t, n) {
  let a = E(e17, "x", "transpose");
  if (t == null && (t = a.shape.map((i, o) => o).reverse()), A(a.rank === t.length, () => `Error in transpose: rank of input ${a.rank} must match length of perm ${t}.`), t.forEach((i) => {
    A(i >= 0 && i < a.rank, () => `All entries in 'perm' must be between 0 and ${a.rank - 1} but got ${t}`);
  }), a.rank <= 1) return a.clone();
  let r = { x: a }, s = { perm: t };
  return a.dtype === "complex64" ? O(() => {
    let i = zl(a), o = ld(a);
    return i = P.runKernel(Cr, { x: i }, s), o = P.runKernel(Cr, { x: o }, s), n && (o = yt(o)), _r(i, o);
  }) : P.runKernel(Cr, r, s);
}
var De = L({ transpose_: Fz });
function $z(e17, t, n, a, r = true) {
  let s = E(e17, "v", "movingAverage"), i = E(t, "x", "movingAverage"), o = E(n, "decay", "movingAverage");
  tN(s, i), A(Ar(s.shape, i.shape), () => "Shape mismatch in v and x");
  let l = xe(1), u = pe(l, o), p = z(pe(i, s), u);
  if (r) {
    A(a != null, () => "When using zeroDebias: true, step is required.");
    let d = E(a, "step", "movingAverage");
    p = he(p, pe(l, ur(o, d)));
  }
  return X(s, p);
}
var fT = L({ movingAverage_: $z });
function Dz(e17, t, n) {
  na(n);
  let a = E(e17, "indices", "scatterND", "int32"), r = E(t, "updates", "scatterND");
  of(r, a, n);
  let s = { indices: a, updates: r }, i = { shape: n };
  return P.runKernel(Pu, s, i);
}
var gT = L({ scatterND_: Dz });
function Rz(e17, t, n, a) {
  if (e17.dtype !== "int32") throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${e17.dtype}.`);
  if (e17.rank > 2) throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${e17.shape}.`);
  let r = e17.rank > 0 ? e17.shape[0] : 1, s = e17.rank > 1 ? e17.shape[1] : 1;
  if (n.length !== s) throw new Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${s}.`);
  let i = t.size;
  if (!(t.rank === 0 || t.rank === 1 && i === r)) throw new Error(`sparseValues has incorrect shape ${t.shape}, should be [] or [${r}]`);
  if (t.dtype !== a.dtype) throw new Error("sparseValues.dtype must match defaultValues.dtype");
}
function Mz(e17, t, n, a = 0) {
  na(n);
  let r = E(e17, "sparseIndices", "sparseToDense", "int32"), s = E(t, "sparseValues", "sparseToDense", "string_or_numeric"), i = E(a, "defaultValue", "sparseToDense", s.dtype);
  Rz(r, s, n, i);
  let o = { sparseIndices: r, sparseValues: s, defaultValue: i }, l = { outputShape: n };
  return P.runKernel(Hu, o, l);
}
var bT = L({ sparseToDense_: Mz });
function Oz(e17, t) {
  let n = E(t, "indices", "gatherND", "int32"), a = { params: E(e17, "x", "gatherND", "string_or_numeric"), indices: n };
  return P.runKernel(gu, a);
}
var yT = L({ gatherND_: Oz });
function Pz(e17, t) {
  if (t == null) return e17.shape.slice();
  if (Ar(e17.shape, t)) return t;
  if (e17.shape.length === t.length) {
    let n = [];
    for (let a = 0; a < e17.shape.length; a++) t[a] == null && e17.shape[a] != null ? n.push(e17.shape[a]) : n.push(t[a]);
    return n;
  }
  return t;
}
function Lz(e17, t, n, a) {
  let r = E(e17, "x", "dropout");
  if (A(r.dtype === "float32", () => `x has to be a floating point tensor since it's going to be scaled, but got a ${r.dtype} tensor instead.`), A(t >= 0 && t < 1, () => `rate must be a float in the range [0, 1), but got ${t}.`), t === 0) return e17 instanceof Ce ? r.clone() : r;
  let s = Pz(r, n), i = 1 - t, o = he(tp(X(Es(s, 0, 1, "float32", a), i)), i);
  return z(r, o);
}
var Pw = L({ dropout_: Lz });
function Lw(e17) {
  return Math.floor(Math.pow(2, Math.ceil(Math.log(e17) / Math.log(2))));
}
function pf(e17, t, n) {
  let a = 1 - e17 % 2, r = new Float32Array(e17);
  for (let s = 0; s < e17; ++s) {
    let i = 2 * Math.PI * s / (e17 + a - 1);
    r[s] = t - n * Math.cos(i);
  }
  return je(r, "float32");
}
async function zz(e17, t, n = 1) {
  let a = E(e17, "predictions", "inTopK"), r = E(t, "targets", "inTopK");
  A(a.rank > 1, () => `inTopK() expects the predictions to be of rank 2 or higher, but got ${a.rank}`), A(a.rank - 1 === r.rank, () => `predictions rank should be 1 larger than targets rank, but got predictions rank ${a.rank} and targets rank ${r.rank}`), Nn(a.shape.slice(0, a.shape.length - 1), r.shape, "predictions's shape should be align with the targets' shape, except the last dimension.");
  let s = a.shape[a.shape.length - 1];
  A(n > 0 && n <= s, () => `'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${s}), but got ${n}`);
  let i = await a.data(), o = await r.data(), [l, u] = [i.length / s, s], p = OS("bool", l);
  for (let d = 0; d < l; d++) {
    let c = d * u, h = i.subarray(c, c + u), m = [];
    for (let f = 0; f < h.length; f++) m.push({ value: h[f], index: f });
    m.sort((f, g) => g.value - f.value), p[d] = 0;
    for (let f = 0; f < n; f++) if (m[f].index === o[d]) {
      p[d] = 1;
      break;
    }
  }
  return e17 !== a && a.dispose(), t !== r && r.dispose(), bn(p, r.shape, "bool");
}
var xT = zz;
var Vl = {};
_e(Vl, { conv2d: () => Vz, depthwiseConv2d: () => jz, matMul: () => Kz });
function Wz(e17, t, n, a, r, s = "NHWC", i) {
  let o = e17;
  e17.rank === 3 && (o = W(e17, [1, e17.shape[0], e17.shape[1], e17.shape[2]]));
  let l = t;
  l.rank === 3 && (l = W(t, [1, t.shape[0], t.shape[1], t.shape[2]])), A(o.rank === 4, () => `Error in conv2dDerFilter: input must be rank 4, but got shape ${o.shape}.`), A(l.rank === 4, () => `Error in conv2dDerFilter: dy must be rank 4, but got shape ${l.shape}.`), A(n.length === 4, () => `Error in conv2dDerFilter: filterShape must be length 4, but got ${n}.`);
  let u = s === "NHWC" ? o.shape[3] : o.shape[1], p = s === "NHWC" ? l.shape[3] : l.shape[1];
  A(u === n[2], () => `Error in conv2dDerFilter: depth of input ${u}) must match input depth in filter (${n[2]}.`), A(p === n[3], () => `Error in conv2dDerFilter: depth of dy (${p}) must match output depth for filter (${n[3]}).`), Tn("conv2dDerFilter", r, i);
  let d = { x: o, dy: l }, c = { strides: a, pad: r, dataFormat: s, dimRoundingMode: i, filterShape: n };
  return P.runKernel(km, d, c);
}
var zw = L({ conv2DBackpropFilter_: Wz });
function cf(e17, t, n) {
  if (n == null || n === "linear") return e17;
  if (n === "relu") return z(e17, jo(t));
  throw new Error(`Cannot compute gradient for fused activation ${n}.`);
}
function df(e17, t) {
  let n = t, a = Bt(e17.shape, t.shape);
  return a.length > 0 && (n = fe(n, a)), W(n, e17.shape);
}
function hf(e17, t, n, a) {
  if (t === "linear") return e17;
  if (t === "relu") return Ke(e17);
  if (t === "elu") return Qu(e17);
  if (t === "relu6") return Ym(e17);
  if (t === "prelu") return fd(e17, n);
  if (t === "leakyrelu") return ud(e17, a);
  if (t === "sigmoid") return ha(e17);
  throw new Error(`Unknown fused activation ${t}.`);
}
var mf = (e17, t) => !(e17 > 0) || t === "linear";
function Bz({ x: e17, filter: t, strides: n, pad: a, dataFormat: r = "NHWC", dilations: s = [1, 1], dimRoundingMode: i, bias: o, activation: l = "linear", preluActivationWeights: u, leakyreluAlpha: p }) {
  if (l = l || "linear", mf(P.state.gradientDepth, l) === false) {
    A(r === "NHWC", () => `Error in fused conv2d: got dataFormat of ${r} but only NHWC is currently supported for the case of gradient depth is 0 and the activation is not linear.`);
    let N = $t(e17, t, n, a, r, s, i);
    return o != null && (N = X(N, o)), hf(N, l, u, p);
  }
  let d = E(e17, "x", "conv2d", "float32"), c = E(t, "filter", "conv2d", "float32"), h = d, m = false;
  d.rank === 3 && (m = true, h = W(d, [1, d.shape[0], d.shape[1], d.shape[2]])), A(h.rank === 4, () => `Error in fused conv2d: input must be rank 4, but got rank ${h.rank}.`), A(c.rank === 4, () => `Error in fused conv2d: filter must be rank 4, but got rank ${c.rank}.`), Tn("fused conv2d", a, i);
  let f = r === "NHWC" ? h.shape[3] : h.shape[1];
  A(c.shape[2] === f, () => `Error in conv2d: depth of input (${f}) must match input depth for filter ${c.shape[2]}.`), A(dr(n, s), () => `Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${s}'`);
  let g = sd(h.shape, c.shape, n, s, a, i), b;
  o != null && (b = E(o, "bias", "fused conv2d"), [b] = _t(b, d), r === "NHWC" ? ct(g.outShape, b.shape) : (A(b.shape.length <= 1, () => `Error in fused conv2d: only supports scalar or 1-D Tensor bias for NCHW format but got the bias of rank-${b.shape.length}.`), A(b.shape.length === 0 || b.shape[0] === g.outChannels || b.shape[0] === 1, () => `Error in fused conv2d: bias shape (${b.shape}) is not compatible with the number of output channels (${g.outChannels})`)));
  let y;
  if (u != null) {
    let N = u.shape;
    if (A(N.length <= 1 || N.length === 3, () => `Error in fused conv2d: only supports scalar, 1-D Tensor or 3-D Tensor PReLU activation weights but got a tensor of rank-${N.length}.`), N.length === 1) A(N[0] === 1 || N[0] === g.outChannels, () => `Error in fused conv2d: PReLU activation weights (${N}) is not compatible with the number of output channels (${g.outChannels}).`);
    else if (N.length === 3) try {
      ct(N, g.outShape);
    } catch (C) {
      let _ = `Error in fused conv2d: PReLU activation weights (${N}) is not compatible with the output shape of the conv2d (${g.outShape}).`;
      throw Error(_);
    }
    y = E(u, "prelu weights", "fused conv2d");
  }
  let x = (N, C) => {
    A(r === "NHWC", () => `Error in gradient of fused conv2D: got dataFormat of ${r} but only NHWC is currently supported.`);
    let [_, F, D, $] = C, S = cf(N, D, l);
    A(ps(s), () => `Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`);
    let M = nw(F.shape, S, _, n, a), B = zw(F, S, _.shape, n, a), U = [M, B];
    if ($ != null) {
      let H = df($, S);
      U.push(H);
    }
    return U;
  }, v = { x: h, filter: c, bias: b, preluActivationWeights: y }, I = { strides: n, pad: a, dataFormat: r, dilations: s, dimRoundingMode: i, activation: l, leakyreluAlpha: p };
  return o == null ? pr((N, C, _) => {
    let F = P.runKernel(oi, v, I);
    return _([C, N, F]), m && (F = W(F, [F.shape[1], F.shape[2], F.shape[3]])), { value: F, gradFunc: x };
  })(h, c) : pr((N, C, _, F) => {
    let D = P.runKernel(oi, v, I);
    return F([C, N, D, _]), m && (D = W(D, [D.shape[1], D.shape[2], D.shape[3]])), { value: D, gradFunc: x };
  })(h, c, b);
}
var Vz = L({ fusedConv2d_: Bz });
function Uz(e17, t, n, a, r, s = [1, 1], i) {
  let o = e17;
  e17.rank === 3 && (o = W(e17, [1, e17.shape[0], e17.shape[1], e17.shape[2]]));
  let l = t;
  l.rank === 3 && (l = W(t, [1, t.shape[0], t.shape[1], t.shape[2]]));
  let u = { x: o, dy: l }, p = { strides: a, pad: r, dimRoundingMode: i, dilations: s, filterShape: n };
  return P.runKernel(Im, u, p);
}
var vT = L({ depthwiseConv2dNativeBackpropFilter_: Uz });
function Gz(e17, t, n, a, r, s = [1, 1], i) {
  let o = t, l = false;
  t.rank === 3 && (l = true, o = W(t, [1, t.shape[0], t.shape[1], t.shape[2]]));
  let u = { dy: o, filter: n }, p = { strides: a, pad: r, dimRoundingMode: i, dilations: s, inputShape: e17 }, d = P.runKernel(Sm, u, p);
  return l ? W(d, [d.shape[1], d.shape[2], d.shape[3]]) : d;
}
var wT = L({ depthwiseConv2dNativeBackpropInput_: Gz });
function Hz({ x: e17, filter: t, strides: n, pad: a, dataFormat: r = "NHWC", dilations: s = [1, 1], dimRoundingMode: i, bias: o, activation: l = "linear", preluActivationWeights: u, leakyreluAlpha: p }) {
  if (mf(P.state.gradientDepth, l) === false) {
    let I = Ts(e17, t, n, a, r, s, i);
    return o != null && (I = X(I, o)), hf(I, l, u, p);
  }
  let d = E(e17, "x", "depthwiseConv2d", "float32"), c = E(t, "filter", "depthwiseConv2d", "float32"), h = d, m = false;
  d.rank === 3 && (m = true, h = W(d, [1, d.shape[0], d.shape[1], d.shape[2]])), A(h.rank === 4, () => `Error in fused depthwiseConv2d: input must be rank 4, but got rank ${h.rank}.`), A(c.rank === 4, () => `Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${c.rank}.`), A(h.shape[3] === c.shape[2], () => `Error in fused depthwiseConv2d: number of input channels (${h.shape[3]}) must match the inChannels dimension in filter ${c.shape[2]}.`), s == null && (s = [1, 1]), A(dr(n, s), () => `Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${s}'`), Tn("fused depthwiseConv2d", a, i);
  let f = sd(h.shape, c.shape, n, s, a, i, true), g;
  o != null && (g = E(o, "bias", "fused conv2d"), [g] = _t(g, d), ct(f.outShape, g.shape));
  let b;
  u != null && (b = E(u, "prelu weights", "fused depthwiseConv2d"));
  let y = (I, N) => {
    A(ps(s), () => `Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${s}'`);
    let [C, _, F, D] = N, $ = cf(I, F, l), S = wT(_.shape, $, C, n, a, s, i), M = vT(_, $, C.shape, n, a, s, i);
    if (D != null) {
      let B = df(g, $);
      return [S, M, B];
    }
    return [S, M];
  }, x = { x: h, filter: c, bias: g, preluActivationWeights: b }, v = { strides: n, pad: a, dataFormat: r, dilations: s, dimRoundingMode: i, activation: l, leakyreluAlpha: p };
  return o == null ? pr((I, N, C) => {
    let _ = P.runKernel(li, x, v);
    return C([N, I, _]), m && (_ = W(_, [_.shape[1], _.shape[2], _.shape[3]])), { value: _, gradFunc: y };
  })(h, c) : pr((I, N, C, _) => {
    let F = P.runKernel(li, x, v);
    return _([N, I, F, C]), m && (F = W(F, [F.shape[1], F.shape[2], F.shape[3]])), { value: F, gradFunc: y };
  })(h, c, g);
}
var jz = L({ fusedDepthwiseConv2d_: Hz });
function qz({ a: e17, b: t, transposeA: n = false, transposeB: a = false, bias: r, activation: s = "linear", preluActivationWeights: i, leakyreluAlpha: o = 0.2 }) {
  if (mf(P.state.gradientDepth, s) === false) {
    let D = $e(e17, t, n, a);
    return r != null && (D = X(D, r)), hf(D, s, i, o);
  }
  let l = E(e17, "a", "fused matMul"), u = E(t, "b", "fused matMul");
  [l, u] = _t(l, u);
  let p = n ? l.shape[l.rank - 2] : l.shape[l.rank - 1], d = a ? u.shape[u.rank - 1] : u.shape[u.rank - 2], c = n ? l.shape[l.rank - 1] : l.shape[l.rank - 2], h = a ? u.shape[u.rank - 2] : u.shape[u.rank - 1], m = l.shape.slice(0, -2), f = u.shape.slice(0, -2), g = ot(m), b = ot(f);
  A(p === d, () => `Error in fused matMul: inner shapes (${p}) and (${d}) of Tensors with shapes ${l.shape} and ${u.shape} and transposeA=${n} and transposeB=${a} must match.`);
  let y = ct(l.shape.slice(0, -2), u.shape.slice(0, -2)).concat([c, h]), x = n ? W(l, [g, p, c]) : W(l, [g, c, p]), v = a ? W(u, [b, h, d]) : W(u, [b, d, h]), I;
  r != null && (I = E(r, "bias", "fused matMul"), [I] = _t(I, l), ct(y, I.shape));
  let N;
  i != null && (N = E(i, "prelu weights", "fused matMul"));
  let C = (D, $) => {
    let [S, M, B, U] = $, H = cf(W(D, B.shape), B, s), q, K;
    if (!n && !a ? (q = $e(H, M, false, true), K = $e(S, H, true, false)) : !n && a ? (q = $e(H, M, false, false), K = $e(H, S, true, false)) : n && !a ? (q = $e(M, H, false, true), K = $e(S, H, false, false)) : (q = $e(M, H, true, true), K = $e(H, S, true, true)), r != null) {
      let Z = df(U, H);
      return [q, K, Z];
    } else return [q, K];
  }, _ = { a: x, b: v, bias: I, preluActivationWeights: N }, F = { transposeA: n, transposeB: a, activation: s, leakyreluAlpha: o };
  return r == null ? pr((D, $, S) => {
    let M = P.runKernel(ii, _, F);
    return S([D, $, M]), { value: W(M, y), gradFunc: C };
  })(x, v) : pr((D, $, S, M) => {
    let B = P.runKernel(ii, _, F);
    return M([D, $, B, S]), { value: W(B, y), gradFunc: C };
  })(x, v, I);
}
var Kz = L({ fusedMatMul_: qz });
function Xz(e17) {
  return pf(e17, 0.54, 0.46);
}
var Yz = L({ hammingWindow_: Xz });
function Zz(e17) {
  return pf(e17, 0.5, 0.5);
}
var kT = L({ hannWindow_: Zz });
function Jz(e17, t, n, a = false, r = 0) {
  let s = 0, i = [];
  for (; s + t <= e17.size; ) i.push(Ve(e17, s, t)), s += n;
  if (a) for (; s < e17.size; ) {
    let o = s + t - e17.size, l = et([Ve(e17, s, t - o), yn([o], r)]);
    i.push(l), s += n;
  }
  return i.length === 0 ? Ea([], [0, t]) : W(et(i), [i.length, t]);
}
var IT = L({ frame_: Jz });
function Qz(e17, t, n, a, r = kT) {
  a == null && (a = Lw(t));
  let s = IT(e17, t, n), i = z(s, r(t));
  return yd(i, a);
}
var eW = L({ stft_: Qz });
function tW(e17, t, n, a, r = "bilinear", s = 0) {
  let i = E(e17, "image", "cropAndResize"), o = E(t, "boxes", "cropAndResize", "float32"), l = E(n, "boxInd", "cropAndResize", "int32"), u = o.shape[0];
  A(i.rank === 4, () => `Error in cropAndResize: image must be rank 4,but got rank ${i.rank}.`), A(o.rank === 2 && o.shape[1] === 4, () => `Error in cropAndResize: boxes must be have size [${u},4] but had shape ${o.shape}.`), A(l.rank === 1 && l.shape[0] === u, () => `Error in cropAndResize: boxInd must be have size [${u}] but had shape ${o.shape}.`), A(a.length === 2, () => `Error in cropAndResize: cropSize must be of length 2, but got length ${a.length}.`), A(a[0] >= 1 && a[1] >= 1, () => `cropSize must be atleast [1,1], but was ${a}`), A(r === "bilinear" || r === "nearest", () => `method must be bilinear or nearest, but was ${r}`);
  let p = { image: i, boxes: o, boxInd: l }, d = { method: r, extrapolationValue: s, cropSize: a };
  return P.runKernel(uu, p, d);
}
var nW = L({ cropAndResize_: tW });
function aW(e17) {
  let t = E(e17, "image", "flipLeftRight", "float32");
  A(t.rank === 4, () => `Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`);
  let n = { image: t };
  return P.runKernel(mu, n, {});
}
var rW = L({ flipLeftRight_: aW });
function sW(e17) {
  let t = E(e17, "image", "grayscaleToRGB"), n = t.rank - 1, a = t.shape[n];
  A(t.rank >= 2, () => `Error in grayscaleToRGB: images must be at least rank 2, but got rank ${t.rank}.`), A(a === 1, () => `Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${a}.`);
  let r = new Array(t.rank);
  return r.fill(1, 0, n), r[n] = 3, On(t, r);
}
var iW = L({ grayscaleToRGB_: sW });
function oW(e17) {
  let t = E(e17, "image", "RGBToGrayscale"), n = t.rank - 1, a = t.shape[n];
  A(t.rank >= 2, () => `Error in RGBToGrayscale: images must be at least rank 2, but got rank ${t.rank}.`), A(a === 3, () => `Error in RGBToGrayscale: last dimension of an RGB image should be size 3, but got size ${a}.`);
  let r = t.dtype, s = re(t, "float32"), i = je([0.2989, 0.587, 0.114]), o;
  switch (t.rank) {
    case 2:
      o = Zs("ij,j->i", s, i);
      break;
    case 3:
      o = Zs("ijk,k->ij", s, i);
      break;
    case 4:
      o = Zs("ijkl,l->ijk", s, i);
      break;
    case 5:
      o = Zs("ijklm,m->ijkl", s, i);
      break;
    case 6:
      o = Zs("ijklmn,n->ijklm", s, i);
      break;
    default:
      throw new Error("Not a valid tensor rank.");
  }
  return o = Gt(o, -1), re(o, r);
}
var lW = L({ rgbToGrayscale_: oW });
function uW(e17, t, n = 0, a = 0.5) {
  let r = E(e17, "image", "rotateWithOffset", "float32");
  A(r.rank === 4, () => `Error in rotateWithOffset: image must be rank 4,but got rank ${r.rank}.`);
  let s = { image: r }, i = { radians: t, fillValue: n, center: a };
  return P.runKernel(Zu, s, i);
}
var pW = L({ rotateWithOffset_: uW });
function ap(e17, t, n, a, r, s) {
  a == null && (a = 0.5), r == null && (r = Number.NEGATIVE_INFINITY), s == null && (s = 0);
  let i = e17.shape[0];
  return n = Math.min(n, i), A(0 <= a && a <= 1, () => `iouThreshold must be in [0, 1], but was '${a}'`), A(e17.rank === 2, () => `boxes must be a 2D tensor, but was of rank '${e17.rank}'`), A(e17.shape[1] === 4, () => `boxes must have 4 columns, but 2nd dimension was ${e17.shape[1]}`), A(t.rank === 1, () => "scores must be a 1D tensor"), A(t.shape[0] === i, () => `scores has incompatible shape with boxes. Expected ${i}, but was ${t.shape[0]}`), A(0 <= s && s <= 1, () => `softNmsSigma must be in [0, 1], but was '${s}'`), { maxOutputSize: n, iouThreshold: a, scoreThreshold: r, softNmsSigma: s };
}
function cW(e17, t, n, a = 0.5, r = Number.NEGATIVE_INFINITY) {
  let s = E(e17, "boxes", "nonMaxSuppression", "float32"), i = E(t, "scores", "nonMaxSuppression", "float32"), o = ap(s, i, n, a, r);
  n = o.maxOutputSize, a = o.iouThreshold, r = o.scoreThreshold;
  let l = { maxOutputSize: n, iouThreshold: a, scoreThreshold: r };
  return P.runKernel(_u, { boxes: s, scores: i }, l);
}
var dW = L({ nonMaxSuppression_: cW });
function hW(e17, t, n) {
  let a = mW(e17, t, n), r = a < 0 ? -(a + 1) : a;
  e17.splice(r, 0, t);
}
function mW(e17, t, n) {
  return gW(e17, t, n || fW);
}
function fW(e17, t) {
  return e17 > t ? 1 : e17 < t ? -1 : 0;
}
function gW(e17, t, n) {
  let a = 0, r = e17.length, s = 0, i = false;
  for (; a < r; ) {
    s = a + (r - a >>> 1);
    let o = n(t, e17[s]);
    o > 0 ? a = s + 1 : (r = s, i = !o);
  }
  return i ? a : -a - 1;
}
function ST(e17, t, n, a, r) {
  return Ww(e17, t, n, a, r, 0);
}
function NT(e17, t, n, a, r, s) {
  return Ww(e17, t, n, a, r, 0, false, s, true);
}
function TT(e17, t, n, a, r, s) {
  return Ww(e17, t, n, a, r, s, true);
}
function Ww(e17, t, n, a, r, s, i = false, o = false, l = false) {
  let u = [];
  for (let g = 0; g < t.length; g++) t[g] > r && u.push({ score: t[g], boxIndex: g, suppressBeginIndex: 0 });
  u.sort(tI);
  let p = s > 0 ? -0.5 / s : 0, d = [], c = [];
  for (; d.length < n && u.length > 0; ) {
    let g = u.pop(), { score: b, boxIndex: y, suppressBeginIndex: x } = g;
    if (b < r) break;
    let v = false;
    for (let I = d.length - 1; I >= x; --I) {
      let N = bW(e17, y, d[I]);
      if (N >= a) {
        v = true;
        break;
      }
      if (g.score = g.score * yW(a, p, N), g.score <= r) break;
    }
    g.suppressBeginIndex = d.length, v || (g.score === b ? (d.push(y), c.push(g.score)) : g.score > r && hW(u, g, tI));
  }
  let h = d.length, m = n - h;
  o && m > 0 && (d.push(...new Array(m).fill(0)), c.push(...new Array(m).fill(0)));
  let f = { selectedIndices: d };
  return i && (f.selectedScores = c), l && (f.validOutputs = h), f;
}
function bW(e17, t, n) {
  let a = e17.subarray(t * 4, t * 4 + 4), r = e17.subarray(n * 4, n * 4 + 4), s = Math.min(a[0], a[2]), i = Math.min(a[1], a[3]), o = Math.max(a[0], a[2]), l = Math.max(a[1], a[3]), u = Math.min(r[0], r[2]), p = Math.min(r[1], r[3]), d = Math.max(r[0], r[2]), c = Math.max(r[1], r[3]), h = (o - s) * (l - i), m = (d - u) * (c - p);
  if (h <= 0 || m <= 0) return 0;
  let f = Math.max(s, u), g = Math.max(i, p), b = Math.min(o, d), y = Math.min(l, c), x = Math.max(b - f, 0) * Math.max(y - g, 0);
  return x / (h + m - x);
}
function yW(e17, t, n) {
  let a = Math.exp(t * n * n);
  return n <= e17 ? a : 0;
}
function tI(e17, t) {
  return e17.score - t.score || e17.score === t.score && t.boxIndex - e17.boxIndex;
}
async function xW(e17, t, n, a = 0.5, r = Number.NEGATIVE_INFINITY) {
  let s = E(e17, "boxes", "nonMaxSuppressionAsync"), i = E(t, "scores", "nonMaxSuppressionAsync"), o = ap(s, i, n, a, r);
  n = o.maxOutputSize, a = o.iouThreshold, r = o.scoreThreshold;
  let l = await Promise.all([s.data(), i.data()]), u = l[0], p = l[1], { selectedIndices: d } = ST(u, p, n, a, r);
  return s !== e17 && s.dispose(), i !== t && i.dispose(), je(d, "int32");
}
var vW = xW;
function wW(e17, t, n, a = 0.5, r = Number.NEGATIVE_INFINITY, s = 0) {
  let i = E(e17, "boxes", "nonMaxSuppression"), o = E(t, "scores", "nonMaxSuppression"), l = ap(i, o, n, a, r, s);
  n = l.maxOutputSize, a = l.iouThreshold, r = l.scoreThreshold, s = l.softNmsSigma;
  let u = { boxes: i, scores: o }, p = { maxOutputSize: n, iouThreshold: a, scoreThreshold: r, softNmsSigma: s }, d = P.runKernel(Fu, u, p);
  return { selectedIndices: d[0], selectedScores: d[1] };
}
var kW = L({ nonMaxSuppressionWithScore_: wW });
async function IW(e17, t, n, a = 0.5, r = Number.NEGATIVE_INFINITY, s = 0) {
  let i = E(e17, "boxes", "nonMaxSuppressionAsync"), o = E(t, "scores", "nonMaxSuppressionAsync"), l = ap(i, o, n, a, r, s);
  n = l.maxOutputSize, a = l.iouThreshold, r = l.scoreThreshold, s = l.softNmsSigma;
  let u = await Promise.all([i.data(), o.data()]), p = u[0], d = u[1], { selectedIndices: c, selectedScores: h } = TT(p, d, n, a, r, s);
  return i !== e17 && i.dispose(), o !== t && o.dispose(), { selectedIndices: je(c, "int32"), selectedScores: je(h) };
}
var SW = IW;
function NW(e17, t, n, a = 0.5, r = Number.NEGATIVE_INFINITY, s = false) {
  let i = E(e17, "boxes", "nonMaxSuppression"), o = E(t, "scores", "nonMaxSuppression"), l = ap(i, o, n, a, r, null), u = l.maxOutputSize, p = l.iouThreshold, d = l.scoreThreshold, c = { boxes: i, scores: o }, h = { maxOutputSize: u, iouThreshold: p, scoreThreshold: d, padToMaxOutputSize: s }, m = P.runKernel(Au, c, h);
  return { selectedIndices: m[0], validOutputs: m[1] };
}
var TW = L({ nonMaxSuppressionPadded_: NW });
async function CW(e17, t, n, a = 0.5, r = Number.NEGATIVE_INFINITY, s = false) {
  let i = E(e17, "boxes", "nonMaxSuppressionAsync"), o = E(t, "scores", "nonMaxSuppressionAsync"), l = ap(i, o, n, a, r, null), u = l.maxOutputSize, p = l.iouThreshold, d = l.scoreThreshold, [c, h] = await Promise.all([i.data(), o.data()]), { selectedIndices: m, validOutputs: f } = NT(c, h, u, p, d, s);
  return i !== e17 && i.dispose(), o !== t && o.dispose(), { selectedIndices: je(m, "int32"), validOutputs: xe(f, "int32") };
}
var EW = CW;
function _W(e17, t, n = false, a = false) {
  let r = E(e17, "images", "resizeBilinear");
  A(r.rank === 3 || r.rank === 4, () => `Error in resizeBilinear: x must be rank 3 or 4, but got rank ${r.rank}.`), A(t.length === 2, () => `Error in resizeBilinear: new shape must 2D, but got shape ${t}.`), A(a === false || n === false, () => "Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false.");
  let s = r, i = false;
  r.rank === 3 && (i = true, s = W(r, [1, r.shape[0], r.shape[1], r.shape[2]]));
  let [] = t, o = { images: s }, l = { alignCorners: n, halfPixelCenters: a, size: t }, u = P.runKernel(To, o, l);
  return i ? W(u, [u.shape[1], u.shape[2], u.shape[3]]) : u;
}
var CT = L({ resizeBilinear_: _W });
function AW(e17, t, n = false, a = false) {
  let r = E(e17, "images", "resizeNearestNeighbor");
  A(r.rank === 3 || r.rank === 4, () => `Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${r.rank}.`), A(t.length === 2, () => `Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`), A(r.dtype === "float32" || r.dtype === "int32", () => "`images` must have `int32` or `float32` as dtype"), A(a === false || n === false, () => "Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false.");
  let s = r, i = false;
  r.rank === 3 && (i = true, s = W(r, [1, r.shape[0], r.shape[1], r.shape[2]]));
  let [] = t, o = { images: s }, l = { alignCorners: n, halfPixelCenters: a, size: t }, u = P.runKernel(No, o, l);
  return i ? W(u, [u.shape[1], u.shape[2], u.shape[3]]) : u;
}
var ET = L({ resizeNearestNeighbor_: AW });
function FW(e17, t = "binary", n = false, a = 0.5) {
  let r = E(e17, "image", "threshold"), s = 0.2989, i = 0.587, o = 0.114, l = r.shape[0] * r.shape[1], u = z(je([a]), 255), p, d, c, h;
  if (A(r.rank === 3, () => `Error in threshold: image must be rank 3,but got rank ${r.rank}.`), A(r.shape[2] === 3 || r.shape[2] === 1, () => `Error in threshold: image color channel must be equal to 3 or 1but got ${r.shape[2]}.`), A(r.dtype === "int32" || r.dtype === "float32", () => `Error in dtype: image dtype must be int32 or float32,but got dtype ${r.dtype}.`), A(t === "otsu" || t === "binary", () => `Method must be binary or otsu, but was ${t}`), r.shape[2] === 3) {
    [p, d, c] = Ln(r, [1, 1, 1], -1);
    let f = z(p, s), g = z(d, i), b = z(c, o);
    h = X(X(f, g), b);
  } else h = e17;
  if (t === "otsu") {
    let f = Yv(re(Zm(h), "int32"), bn([]), 256);
    u = $W(f, l);
  }
  let m = n ? Cs(h, u) : Cn(h, u);
  return re(z(m, 255), "int32");
}
function $W(e17, t) {
  let n = je([-1]), a = je([0]), r = je([0]), s, i, o, l, u, p;
  for (let d = 0; d < e17.size - 1; d++) {
    s = Ve(e17, 0, d + 1), i = Ve(e17, d + 1), u = he(fe(s), t), p = he(fe(i), t);
    let c = fe(z(s, gi(0, s.size)));
    o = he(c, fe(s));
    let h = yn(i.shape, s.size), m = X(gi(0, i.size), h), f = z(i, m);
    l = he(fe(f), fe(i));
    let g = pe(o, l), b = pe(o, l), y = z(u, p);
    r = z(z(y, g), b);
    let x = Cn(r, a);
    a = nn(x, r, a), n = nn(x, je([d]), n);
  }
  return n;
}
var DW = L({ threshold_: FW });
function RW(e17, t, n = "nearest", a = "constant", r = 0, s) {
  let i = E(e17, "image", "transform", "float32"), o = E(t, "transforms", "transform", "float32");
  A(i.rank === 4, () => `Error in transform: image must be rank 4,but got rank ${i.rank}.`), A(o.rank === 2 && (o.shape[0] === i.shape[0] || o.shape[0] === 1) && o.shape[1] === 8, () => "Error in transform: Input transform should be batch x 8 or 1 x 8"), A(s == null || s.length === 2, () => `Error in transform: outputShape must be [height, width] or null, but got ${s}.`);
  let l = { image: i, transforms: o }, u = { interpolation: n, fillMode: a, fillValue: r, outputShape: s };
  return P.runKernel(Ku, l, u);
}
var MW = L({ transform_: RW });
function OW(e17, t, n) {
  let a = E(e17, "a", "bandPart");
  A(a.rank >= 2, () => `bandPart(): Rank must be at least 2, got ${a.rank}.`);
  let r = a.shape, [s, i] = a.shape.slice(-2), o, l;
  typeof t == "number" ? (A(t % 1 === 0, () => `bandPart(): numLower must be an integer, got ${t}.`), A(t <= s, () => `bandPart(): numLower (${t}) must not be greater than the number of rows (${s}).`), o = E(t < 0 ? s : t, "numLower", "bandPart")) : (A(t.dtype === "int32", () => "bandPart(): numLower's dtype must be an int32."), o = nn(Pl(t, 0), s, ds(t, s))), typeof n == "number" ? (A(n % 1 === 0, () => `bandPart(): numUpper must be an integer, got ${n}.`), A(n <= i, () => `bandPart(): numUpper (${n}) must not be greater than the number of columns (${i}).`), l = E(n < 0 ? i : n, "numUpper", "bandPart")) : (A(n.dtype === "int32", () => "bandPart(): numUpper's dtype must be an int32."), l = nn(Pl(n, 0), i, ds(n, i)));
  let u = W(gi(0, s, 1, "int32"), [-1, 1]), p = gi(0, i, 1, "int32"), d = pe(u, p), c = _a(Cs(d, o), $r(d, yt(l))), h = It([s, i], a.dtype);
  return W(At(dt(W(a, [-1, s, i])).map((m) => nn(c, m, h))), r);
}
var PW = L({ bandPart_: OW });
function LW(e17) {
  let t;
  if (Array.isArray(e17)) {
    t = false, A(e17 != null && e17.length > 0, () => "Gram-Schmidt process: input must not be null, undefined, or empty");
    let r = e17[0].shape[0];
    for (let s = 1; s < e17.length; ++s) A(e17[s].shape[0] === r, () => `Gram-Schmidt: Non-unique lengths found in the input vectors: (${e17[s].shape[0]} vs. ${r})`);
  } else t = true, e17 = Ln(e17, e17.shape[0], 0).map((r) => As(r, [0]));
  A(e17.length <= e17[0].shape[0], () => `Gram-Schmidt: Number of vectors (${e17.length}) exceeds number of dimensions (${e17[0].shape[0]}).`);
  let n = [], a = e17;
  for (let r = 0; r < e17.length; ++r) n.push(P.tidy(() => {
    let s = a[r];
    if (r > 0) for (let i = 0; i < r; ++i) {
      let o = z(fe(z(n[i], s)), n[i]);
      s = pe(s, o);
    }
    return he(s, ep(s, "euclidean"));
  }));
  return t ? At(n, 0) : n;
}
var zW = L({ gramSchmidt_: LW });
function WW(e17, t = false) {
  if (A(e17.rank >= 2, () => `qr() requires input tensor to have a rank >= 2, but got rank ${e17.rank}`), e17.rank === 2) return nI(e17, t);
  {
    let n = e17.shape.slice(0, e17.shape.length - 2).reduce((l, u) => l * u), a = dt(W(e17, [n, e17.shape[e17.shape.length - 2], e17.shape[e17.shape.length - 1]]), 0), r = [], s = [];
    a.forEach((l) => {
      let [u, p] = nI(l, t);
      r.push(u), s.push(p);
    });
    let i = W(At(r, 0), e17.shape), o = W(At(s, 0), e17.shape);
    return [i, o];
  }
}
function nI(e17, t = false) {
  return P.tidy(() => {
    A(e17.shape.length === 2, () => `qr2d() requires a 2D Tensor, but got a ${e17.shape.length}D Tensor.`);
    let n = e17.shape[0], a = e17.shape[1], r = Gm(n), s = sr(e17), i = Ea([[1]], [1, 1]), o = sr(i), l = n >= a ? a : n;
    for (let u = 0; u < l; ++u) {
      let p = s, d = o, c = r;
      [o, s, r] = P.tidy(() => {
        let h = Ve(s, [u, u], [n - u, 1]), m = ep(h), f = Ve(s, [u, u], [1, 1]), g = nn(Cn(f, 0), Ea([[-1]]), Ea([[1]])), b = pe(f, z(g, m)), y = he(h, b);
        y.shape[0] === 1 ? o = sr(i) : o = et([i, Ve(y, [1, 0], [y.shape[0] - 1, y.shape[1]])], 0);
        let x = yt(he($e(g, b), m)), v = Ve(s, [u, 0], [n - u, a]), I = z(x, o), N = De(o);
        if (u === 0) s = pe(v, $e(I, $e(N, v)));
        else {
          let F = pe(v, $e(I, $e(N, v)));
          s = et([Ve(s, [0, 0], [u, a]), F], 0);
        }
        let C = De(I), _ = Ve(r, [0, u], [n, r.shape[1] - u]);
        if (u === 0) r = pe(_, $e($e(_, o), C));
        else {
          let F = pe(_, $e($e(_, o), C));
          r = et([Ve(r, [0, 0], [n, u]), F], 1);
        }
        return [o, s, r];
      }), Ee([p, d, c]);
    }
    return !t && n > a && (r = Ve(r, [0, 0], [n, a]), s = Ve(s, [0, 0], [a, a])), [r, s];
  });
}
var BW = L({ qr_: WW });
var kn;
(function(e17) {
  e17[e17.NONE = 0] = "NONE", e17[e17.MEAN = 1] = "MEAN", e17[e17.SUM = 2] = "SUM", e17[e17.SUM_BY_NONZERO_WEIGHTS = 3] = "SUM_BY_NONZERO_WEIGHTS";
})(kn || (kn = {}));
function VW(e17, t, n = kn.SUM_BY_NONZERO_WEIGHTS) {
  let a = E(e17, "losses", "computeWeightedLoss"), r = null;
  t != null && (r = E(t, "weights", "computeWeightedLoss"));
  let s = r == null ? a : z(a, r);
  if (n === kn.NONE) return s;
  if (n === kn.SUM) return fe(s);
  if (n === kn.MEAN) {
    if (r == null) return Ct(s);
    {
      let i = a.size / r.size, o = he(fe(s), fe(r));
      return i > 1 ? he(o, xe(i)) : o;
    }
  }
  if (n === kn.SUM_BY_NONZERO_WEIGHTS) {
    if (r == null) return he(fe(s), xe(a.size));
    {
      let i = z(r, Pn(a.shape)), o = re(fe(fi(i, xe(0))), "float32");
      return he(fe(s), o);
    }
  }
  throw Error(`Unknown reduction: ${n}`);
}
var Dr = L({ computeWeightedLoss_: VW });
function UW(e17, t, n, a = kn.SUM_BY_NONZERO_WEIGHTS) {
  let r = E(e17, "labels", "absoluteDifference"), s = E(t, "predictions", "absoluteDifference"), i = null;
  n != null && (i = E(n, "weights", "absoluteDifference")), Nn(r.shape, s.shape, "Error in absoluteDifference: ");
  let o = Lt(pe(r, s));
  return Dr(o, i, a);
}
var GW = L({ absoluteDifference_: UW });
function HW(e17, t, n, a, r = kn.SUM_BY_NONZERO_WEIGHTS) {
  let s = E(e17, "labels", "cosineDistance"), i = E(t, "predictions", "cosineDistance"), o = null;
  a != null && (o = E(a, "weights", "cosineDistance")), Nn(s.shape, i.shape, "Error in cosineDistance: ");
  let l = xe(1), u = pe(l, fe(z(s, i), n, true));
  return Dr(u, o, r);
}
var jW = L({ cosineDistance_: HW });
function qW(e17, t, n, a = kn.SUM_BY_NONZERO_WEIGHTS) {
  let r = E(e17, "labels", "hingeLoss"), s = E(t, "predictions", "hingeLoss"), i = null;
  n != null && (i = E(n, "weights", "hingeLoss")), Nn(r.shape, s.shape, "Error in hingeLoss: ");
  let o = xe(1);
  r = pe(z(xe(2), r), o);
  let l = Ke(pe(o, z(r, s)));
  return Dr(l, i, a);
}
var KW = L({ hingeLoss_: qW });
function XW(e17, t, n, a = 1, r = kn.SUM_BY_NONZERO_WEIGHTS) {
  let s = E(e17, "labels", "huberLoss"), i = E(t, "predictions", "huberLoss"), o = null;
  n != null && (o = E(n, "weights", "huberLoss")), Nn(s.shape, i.shape, "Error in huberLoss: ");
  let l = xe(a), u = Lt(pe(i, s)), p = ds(u, l), d = pe(u, p), c = X(z(xe(0.5), pt(p)), z(l, d));
  return Dr(c, o, r);
}
var YW = L({ huberLoss_: XW });
function ZW(e17, t, n, a = 1e-7, r = kn.SUM_BY_NONZERO_WEIGHTS) {
  let s = E(e17, "labels", "logLoss"), i = E(t, "predictions", "logLoss"), o = null;
  n != null && (o = E(n, "weights", "logLoss")), Nn(s.shape, i.shape, "Error in logLoss: ");
  let l = xe(1), u = xe(a), p = yt(z(s, Qn(X(i, u)))), d = z(pe(l, s), Qn(X(pe(l, i), u))), c = pe(p, d);
  return Dr(c, o, r);
}
var JW = L({ logLoss_: ZW });
function QW(e17, t, n, a = kn.SUM_BY_NONZERO_WEIGHTS) {
  let r = E(e17, "labels", "meanSquaredError"), s = E(t, "predictions", "meanSquaredError"), i = null;
  n != null && (i = E(n, "weights", "meanSquaredError")), Nn(r.shape, s.shape, "Error in meanSquaredError: ");
  let o = rf(r, s);
  return Dr(o, i, a);
}
var eB = L({ meanSquaredError_: QW });
function tB(e17, t) {
  let n = E(e17, "labels", "sigmoidCrossEntropyWithLogits"), a = E(t, "logits", "sigmoidCrossEntropyWithLogits");
  Nn(n.shape, a.shape, "Error in sigmoidCrossEntropyWithLogits: ");
  let r = Ke(a), s = z(a, n), i = pd(dn(yt(Lt(a))));
  return X(pe(r, s), i);
}
function nB(e17, t, n, a = 0, r = kn.SUM_BY_NONZERO_WEIGHTS) {
  let s = E(e17, "multiClassLabels", "sigmoidCrossEntropy"), i = E(t, "logits", "sigmoidCrossEntropy"), o = null;
  if (n != null && (o = E(n, "weights", "sigmoidCrossEntropy")), Nn(s.shape, i.shape, "Error in sigmoidCrossEntropy: "), a > 0) {
    let u = xe(a), p = xe(1), d = xe(0.5);
    s = X(z(s, pe(p, u)), z(d, u));
  }
  let l = tB(s, i);
  return Dr(l, o, r);
}
var aB = L({ sigmoidCrossEntropy_: nB });
function rB(e17, t, n = -1) {
  if (n === -1 && (n = t.rank - 1), n !== t.rank - 1) throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was ${n}`);
  return pr((a, r, s) => {
    let i = cd(r, [n], true), o = pe(re(r, "float32"), i);
    s([a, o]);
    let l = yt(z(o, a));
    return { value: fe(l, [n]), gradFunc: (u, p) => {
      let [d, c] = p, h = mi(u.shape, [n]);
      return [z(W(u, h), pe(re(d, "float32"), dn(c))), z(W(u, h), pe(dn(c), re(d, "float32")))];
    } };
  })(e17, t);
}
function sB(e17, t, n, a = 0, r = kn.SUM_BY_NONZERO_WEIGHTS) {
  let s = E(e17, "onehotLabels", "softmaxCrossEntropy"), i = E(t, "logits", "softmaxCrossEntropy"), o = null;
  if (n != null && (o = E(n, "weights", "softmaxCrossEntropy")), Nn(s.shape, i.shape, "Error in softmaxCrossEntropy: "), a > 0) {
    let u = xe(a), p = xe(1), d = xe(s.shape[1]);
    s = X(z(s, pe(p, u)), he(u, d));
  }
  let l = rB(s, i);
  return Dr(l, o, r);
}
var iB = L({ softmaxCrossEntropy_: sB });
function oB(e17, t, n, a) {
  let r = E(e17, "indices", "sparseFillEmptyRows", "int32"), s = E(t, "values", "sparseFillEmptyRows"), i = E(n, "denseShape", "sparseFillEmptyRows", "int32"), o = E(a, "defaultValue", "sparseFillEmptyRows", s.dtype);
  if (r.rank !== 2) throw new Error(`Indices should be Tensor2D but received shape
        ${r.shape}`);
  if (s.rank !== 1) throw new Error(`Values should be Tensor1D but received shape ${s.shape}`);
  if (i.rank !== 1) throw new Error(`Dense shape should be Tensor1D but received shape ${i.shape}`);
  if (o.rank !== 0) throw new Error(`Default value should be a scalar but received shape ${o.shape}`);
  let l = { indices: r, values: s, denseShape: i, defaultValue: o }, u = P.runKernel(Gc, l);
  return { outputIndices: u[0], outputValues: u[1], emptyRowIndicator: u[2], reverseIndexMap: u[3] };
}
var lB = L({ sparseFillEmptyRows_: oB });
function uB(e17, t, n) {
  let a = E(e17, "inputIndices", "sparseReshape", "int32"), r = E(t, "inputShape", "sparseReshape", "int32"), s = E(n, "newShape", "sparseReshape", "int32");
  if (a.rank !== 2) throw new Error(`Input indices should be Tensor2D but received shape
        ${a.shape}`);
  if (r.rank !== 1) throw new Error(`Input shape should be Tensor1D but received shape ${r.shape}`);
  if (s.rank !== 1) throw new Error(`New shape should be Tensor1D but received shape ${s.shape}`);
  let i = { inputIndices: a, inputShape: r, newShape: s }, o = P.runKernel(Gu, i);
  return { outputIndices: o[0], outputShape: o[1] };
}
var pB = L({ sparseReshape_: uB });
function cB(e17, t, n) {
  let a = E(e17, "data", "sparseSegmentMean"), r = E(t, "indices", "sparseSegmentMean", "int32"), s = E(n, "segmentIds", "sparseSegmentMean", "int32");
  if (a.rank < 1) throw new Error("Data should be at least 1 dimensional but received scalar");
  if (r.rank !== 1) throw new Error(`Indices should be Tensor1D but received shape
          ${r.shape}`);
  if (s.rank !== 1) throw new Error(`Segment ids should be Tensor1D but received shape
          ${s.shape}`);
  let i = { data: a, indices: r, segmentIds: s };
  return P.runKernel(Hc, i);
}
var dB = L({ sparseSegmentMean_: cB });
function hB(e17, t, n) {
  let a = E(e17, "data", "sparseSegmentSum"), r = E(t, "indices", "sparseSegmentSum", "int32"), s = E(n, "segmentIds", "sparseSegmentSum", "int32");
  if (a.rank < 1) throw new Error("Data should be at least 1 dimensional but received scalar");
  if (r.rank !== 1) throw new Error(`Indices should be Tensor1D but received shape
         ${r.shape}`);
  if (s.rank !== 1) throw new Error(`Segment ids should be Tensor1D but received shape
         ${s.shape}`);
  let i = { data: a, indices: r, segmentIds: s };
  return P.runKernel(jc, i);
}
var mB = L({ sparseSegmentSum_: hB });
function fB(e17, t, n, a, r, s, i, o) {
  let l = E(e17, "data", "stringNGrams", "string");
  if (l.dtype !== "string") throw new Error("Data must be of datatype string");
  if (l.shape.length !== 1) throw new Error(`Data must be a vector, saw: ${l.shape}`);
  let u = E(t, "dataSplits", "stringNGrams");
  if (u.dtype !== "int32") throw new Error("Data splits must be of datatype int32");
  let p = { separator: n, nGramWidths: a, leftPad: r, rightPad: s, padWidth: i, preserveShortSequences: o }, d = { data: l, dataSplits: u }, c = P.runKernel(Xc, d, p);
  return { nGrams: c[0], nGramsSplits: c[1] };
}
var gB = L({ stringNGrams_: fB });
function bB(e17, t, n = true) {
  let a = E(e17, "input", "stringSplit", "string"), r = E(t, "delimiter", "stringSplit", "string");
  if (a.rank !== 1) throw new Error(`Input should be Tensor1D but received shape ${a.shape}`);
  if (r.rank !== 0) throw new Error(`Delimiter should be a scalar but received shape ${r.shape}`);
  let s = { skipEmpty: n }, i = { input: a, delimiter: r }, o = P.runKernel(Yc, i, s);
  return { indices: o[0], values: o[1], shape: o[2] };
}
var yB = L({ stringSplit_: bB });
function xB(e17, t) {
  let n = E(e17, "input", "stringToHashBucketFast", "string"), a = { numBuckets: t };
  if (t <= 0) throw new Error("Number of buckets must be at least 1");
  let r = { input: n };
  return P.runKernel(Zc, r, a);
}
var vB = L({ stringToHashBucketFast_: xB });
function wB(e17, t, n, a = true) {
  let r = E(e17, "input", "staticRegexReplace", "string"), s = { pattern: t, rewrite: n, replaceGlobal: a };
  return P.runKernel(Kc, { x: r }, s);
}
var kB = L({ staticRegexReplace_: wB });
var _T = { fft: bd, ifft: Bl, rfft: yd, irfft: af };
var AT = { hammingWindow: Yz, hannWindow: kT, frame: IT, stft: eW };
var Zn = { flipLeftRight: rW, grayscaleToRGB: iW, resizeNearestNeighbor: ET, resizeBilinear: CT, rgbToGrayscale: lW, rotateWithOffset: pW, cropAndResize: nW, nonMaxSuppression: dW, nonMaxSuppressionAsync: vW, nonMaxSuppressionWithScore: kW, nonMaxSuppressionWithScoreAsync: SW, nonMaxSuppressionPadded: TW, nonMaxSuppressionPaddedAsync: EW, threshold: DW, transform: MW };
var Bw = { bandPart: PW, gramSchmidt: zW, qr: BW };
var FT = { absoluteDifference: GW, computeWeightedLoss: Dr, cosineDistance: jW, hingeLoss: KW, huberLoss: YW, logLoss: JW, meanSquaredError: eB, sigmoidCrossEntropy: aB, softmaxCrossEntropy: iB };
var $T = { sparseFillEmptyRows: lB, sparseReshape: pB, sparseSegmentMean: dB, sparseSegmentSum: mB };
var DT = { stringNGrams: gB, stringSplit: yB, stringToHashBucketFast: vB, staticRegexReplace: kB };
var ne = {};
_e(ne, { Serializable: () => RT, SerializationMap: () => MT, getRegisteredName: () => SB, registerClass: () => OT });
var IB = /* @__PURE__ */ new Map();
var Mx = /* @__PURE__ */ new Map();
var RT = class {
  getClassName() {
    return this.constructor.className;
  }
  static fromConfig(e17, t) {
    return new e17(t);
  }
};
var MT = class Tl {
  constructor() {
    this.classNameMap = {};
  }
  static getMap() {
    return Tl.instance == null && (Tl.instance = new Tl()), Tl.instance;
  }
  static register(t) {
    Tl.getMap().classNameMap[t.className] = [t, t.fromConfig];
  }
};
function OT(e17, t, n) {
  A(e17.className != null, () => "Class being registered does not have the static className property defined."), A(typeof e17.className == "string", () => "className is required to be a string, but got type " + typeof e17.className), A(e17.className.length > 0, () => "Class being registered has an empty-string as its className, which is disallowed."), typeof t == "undefined" && (t = "Custom"), typeof n == "undefined" && (n = e17.className);
  let a = n, r = t + ">" + a;
  return MT.register(e17), IB.set(r, e17), Mx.set(e17, r), e17;
}
function SB(e17) {
  return Mx.has(e17) ? Mx.get(e17) : e17.className;
}
var Rr = class extends RT {
  minimize(e17, t = false, n) {
    let { value: a, grads: r } = this.computeGradients(e17, n);
    if (n != null) {
      let s = n.map((i) => ({ name: i.name, tensor: r[i.name] }));
      this.applyGradients(s);
    } else this.applyGradients(r);
    return Ee(r), t ? a : (a.dispose(), null);
  }
  get iterations() {
    return this.iterations_ == null && (this.iterations_ = 0), this.iterations_;
  }
  incrementIterations() {
    this.iterations_ = this.iterations + 1;
  }
  computeGradients(e17, t) {
    return ON(e17, t);
  }
  dispose() {
    this.iterations_ != null && Ee(this.iterations_);
  }
  async saveIterations() {
    return this.iterations_ == null && (this.iterations_ = 0), { name: "iter", tensor: xe(this.iterations_, "int32") };
  }
  async getWeights() {
    throw new Error("getWeights() is not implemented for this optimizer yet.");
  }
  async setWeights(e17) {
    throw new Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`);
  }
  async extractIterations(e17) {
    return this.iterations_ = (await e17[0].tensor.data())[0], e17.slice(1);
  }
};
Object.defineProperty(Rr, Symbol.hasInstance, { value: (e17) => e17.minimize != null && e17.computeGradients != null && e17.applyGradients != null });
var Vw = class extends Rr {
  static get className() {
    return "Adadelta";
  }
  constructor(e17, t, n = null) {
    super(), this.learningRate = e17, this.rho = t, this.epsilon = n, this.accumulatedGrads = [], this.accumulatedUpdates = [], n == null && (this.epsilon = P.backend.epsilon());
  }
  applyGradients(e17) {
    (Array.isArray(e17) ? e17.map((t) => t.name) : Object.keys(e17)).forEach((t, n) => {
      let a = P.registeredVariables[t], r = false;
      this.accumulatedGrads[n] == null && (this.accumulatedGrads[n] = { originalName: `${t}/accum_grad`, variable: O(() => qe(a).variable(r)) }), this.accumulatedUpdates[n] == null && (this.accumulatedUpdates[n] = { originalName: `${t}/accum_var`, variable: O(() => qe(a).variable(r)) });
      let s = Array.isArray(e17) ? e17[n].tensor : e17[t];
      if (s == null) return;
      let i = this.accumulatedGrads[n].variable, o = this.accumulatedUpdates[n].variable;
      O(() => {
        let l = X(z(i, this.rho), z(pt(s), 1 - this.rho)), u = z(he(rn(X(o, this.epsilon)), rn(X(i, this.epsilon))), s), p = X(z(o, this.rho), z(pt(u), 1 - this.rho));
        i.assign(l), o.assign(p);
        let d = X(z(u, -this.learningRate), a);
        a.assign(d);
      });
    }), this.incrementIterations();
  }
  dispose() {
    this.accumulatedUpdates != null && (Ee(this.accumulatedGrads.map((e17) => e17.variable)), Ee(this.accumulatedUpdates.map((e17) => e17.variable)));
  }
  async getWeights() {
    let e17 = [...this.accumulatedGrads, ...this.accumulatedUpdates];
    return [await this.saveIterations()].concat(e17.map((t) => ({ name: t.originalName, tensor: t.variable })));
  }
  async setWeights(e17) {
    e17 = await this.extractIterations(e17);
    let t = e17.length / 2, n = false;
    this.accumulatedGrads = e17.slice(0, t).map((a) => ({ originalName: a.name, variable: a.tensor.variable(n) })), this.accumulatedUpdates = e17.slice(t, t * 2).map((a) => ({ originalName: a.name, variable: a.tensor.variable(n) }));
  }
  getConfig() {
    return { learningRate: this.learningRate, rho: this.rho, epsilon: this.epsilon };
  }
  static fromConfig(e17, t) {
    return new e17(t.learningRate, t.rho, t.epsilon);
  }
};
var Uw = class extends Rr {
  static get className() {
    return "Adagrad";
  }
  constructor(e17, t = 0.1) {
    super(), this.learningRate = e17, this.initialAccumulatorValue = t, this.accumulatedGrads = [];
  }
  applyGradients(e17) {
    (Array.isArray(e17) ? e17.map((t) => t.name) : Object.keys(e17)).forEach((t, n) => {
      let a = P.registeredVariables[t];
      this.accumulatedGrads[n] == null && (this.accumulatedGrads[n] = { originalName: `${t}/accumulator`, variable: O(() => yn(a.shape, this.initialAccumulatorValue).variable(false)) });
      let r = Array.isArray(e17) ? e17[n].tensor : e17[t];
      if (r == null) return;
      let s = this.accumulatedGrads[n].variable;
      O(() => {
        let i = X(s, pt(r));
        s.assign(i);
        let o = X(z(he(r, rn(X(i, P.backend.epsilon()))), -this.learningRate), a);
        a.assign(o);
      });
    }), this.incrementIterations();
  }
  dispose() {
    this.accumulatedGrads != null && Ee(this.accumulatedGrads.map((e17) => e17.variable));
  }
  async getWeights() {
    return [await this.saveIterations()].concat(this.accumulatedGrads.map((e17) => ({ name: e17.originalName, tensor: e17.variable })));
  }
  async setWeights(e17) {
    e17 = await this.extractIterations(e17);
    let t = false;
    this.accumulatedGrads = e17.map((n) => ({ originalName: n.name, variable: n.tensor.variable(t) }));
  }
  getConfig() {
    return { learningRate: this.learningRate, initialAccumulatorValue: this.initialAccumulatorValue };
  }
  static fromConfig(e17, t) {
    return new e17(t.learningRate, t.initialAccumulatorValue);
  }
};
var Gw = class extends Rr {
  static get className() {
    return "Adam";
  }
  constructor(e17, t, n, a = null) {
    super(), this.learningRate = e17, this.beta1 = t, this.beta2 = n, this.epsilon = a, this.accumulatedFirstMoment = [], this.accumulatedSecondMoment = [], O(() => {
      this.accBeta1 = xe(t).variable(), this.accBeta2 = xe(n).variable();
    }), a == null && (this.epsilon = P.backend.epsilon());
  }
  applyGradients(e17) {
    let t = Array.isArray(e17) ? e17.map((n) => n.name) : Object.keys(e17);
    O(() => {
      let n = pe(1, this.accBeta1), a = pe(1, this.accBeta2);
      t.forEach((r, s) => {
        let i = P.registeredVariables[r], o = false;
        this.accumulatedFirstMoment[s] == null && (this.accumulatedFirstMoment[s] = { originalName: `${r}/m`, variable: O(() => qe(i).variable(o)) }), this.accumulatedSecondMoment[s] == null && (this.accumulatedSecondMoment[s] = { originalName: `${r}/v`, variable: O(() => qe(i).variable(o)) });
        let l = Array.isArray(e17) ? e17[s].tensor : e17[r];
        if (l == null) return;
        let u = this.accumulatedFirstMoment[s].variable, p = this.accumulatedSecondMoment[s].variable, d = X(z(u, this.beta1), z(l, 1 - this.beta1)), c = X(z(p, this.beta2), z(pt(l), 1 - this.beta2)), h = he(d, n), m = he(c, a);
        u.assign(d), p.assign(c);
        let f = X(z(he(h, X(rn(m), this.epsilon)), -this.learningRate), i);
        i.assign(f);
      }), this.accBeta1.assign(z(this.accBeta1, this.beta1)), this.accBeta2.assign(z(this.accBeta2, this.beta2));
    }), this.incrementIterations();
  }
  dispose() {
    this.accBeta1.dispose(), this.accBeta2.dispose(), this.accumulatedFirstMoment != null && Ee(this.accumulatedFirstMoment.map((e17) => e17.variable)), this.accumulatedSecondMoment != null && Ee(this.accumulatedSecondMoment.map((e17) => e17.variable));
  }
  async getWeights() {
    let e17 = [...this.accumulatedFirstMoment, ...this.accumulatedSecondMoment];
    return [await this.saveIterations()].concat(e17.map((t) => ({ name: t.originalName, tensor: t.variable })));
  }
  async setWeights(e17) {
    e17 = await this.extractIterations(e17), O(() => {
      this.accBeta1.assign(ur(this.beta1, this.iterations_ + 1)), this.accBeta2.assign(ur(this.beta2, this.iterations_ + 1));
    });
    let t = e17.length / 2, n = false;
    this.accumulatedFirstMoment = e17.slice(0, t).map((a) => ({ originalName: a.name, variable: a.tensor.variable(n) })), this.accumulatedSecondMoment = e17.slice(t, t * 2).map((a) => ({ originalName: a.name, variable: a.tensor.variable(n) }));
  }
  getConfig() {
    return { learningRate: this.learningRate, beta1: this.beta1, beta2: this.beta2, epsilon: this.epsilon };
  }
  static fromConfig(e17, t) {
    return new e17(t.learningRate, t.beta1, t.beta2, t.epsilon);
  }
};
var Hw = class extends Rr {
  static get className() {
    return "Adamax";
  }
  constructor(e17, t, n, a = null, r = 0) {
    super(), this.learningRate = e17, this.beta1 = t, this.beta2 = n, this.epsilon = a, this.decay = r, this.accumulatedFirstMoment = [], this.accumulatedWeightedInfNorm = [], O(() => {
      this.iteration = xe(0).variable(), this.accBeta1 = xe(t).variable();
    }), a == null && (this.epsilon = P.backend.epsilon());
  }
  applyGradients(e17) {
    let t = Array.isArray(e17) ? e17.map((n) => n.name) : Object.keys(e17);
    O(() => {
      let n = pe(1, this.accBeta1), a = he(-this.learningRate, X(z(this.iteration, this.decay), 1));
      t.forEach((r, s) => {
        let i = P.registeredVariables[r], o = false;
        this.accumulatedFirstMoment[s] == null && (this.accumulatedFirstMoment[s] = { originalName: `${r}/m`, variable: qe(i).variable(o) }), this.accumulatedWeightedInfNorm[s] == null && (this.accumulatedWeightedInfNorm[s] = { originalName: `${r}/v`, variable: qe(i).variable(o) });
        let l = Array.isArray(e17) ? e17[s].tensor : e17[r];
        if (l == null) return;
        let u = this.accumulatedFirstMoment[s].variable, p = this.accumulatedWeightedInfNorm[s].variable, d = X(z(u, this.beta1), z(l, 1 - this.beta1)), c = z(p, this.beta2), h = Lt(l), m = hr(c, h);
        u.assign(d), p.assign(m);
        let f = X(z(he(a, n), he(d, X(m, this.epsilon))), i);
        i.assign(f);
      }), this.iteration.assign(X(this.iteration, 1)), this.accBeta1.assign(z(this.accBeta1, this.beta1));
    }), this.incrementIterations();
  }
  dispose() {
    this.accBeta1.dispose(), this.iteration.dispose(), this.accumulatedFirstMoment != null && Ee(this.accumulatedFirstMoment.map((e17) => e17.variable)), this.accumulatedWeightedInfNorm != null && Ee(this.accumulatedWeightedInfNorm.map((e17) => e17.variable));
  }
  async getWeights() {
    throw new Error("getWeights() is not implemented for Adamax yet.");
  }
  async setWeights(e17) {
    throw new Error("setWeights() is not implemented for Adamax yet.");
  }
  getConfig() {
    return { learningRate: this.learningRate, beta1: this.beta1, beta2: this.beta2, epsilon: this.epsilon, decay: this.decay };
  }
  static fromConfig(e17, t) {
    return new e17(t.learningRate, t.beta1, t.beta2, t.epsilon, t.decay);
  }
};
var ff = class extends Rr {
  static get className() {
    return "SGD";
  }
  constructor(e17) {
    super(), this.learningRate = e17, this.setLearningRate(e17);
  }
  applyGradients(e17) {
    (Array.isArray(e17) ? e17.map((t) => t.name) : Object.keys(e17)).forEach((t, n) => {
      let a = Array.isArray(e17) ? e17[n].tensor : e17[t];
      if (a == null) return;
      let r = P.registeredVariables[t];
      O(() => {
        let s = X(z(this.c, a), r);
        r.assign(s);
      });
    }), this.incrementIterations();
  }
  setLearningRate(e17) {
    this.learningRate = e17, this.c != null && this.c.dispose(), this.c = Ht(xe(-e17));
  }
  dispose() {
    this.c.dispose();
  }
  async getWeights() {
    return [await this.saveIterations()];
  }
  async setWeights(e17) {
    if (e17 = await this.extractIterations(e17), e17.length !== 0) throw new Error("SGD optimizer does not have settable weights.");
  }
  getConfig() {
    return { learningRate: this.learningRate };
  }
  static fromConfig(e17, t) {
    return new e17(t.learningRate);
  }
};
var jw = class extends ff {
  static get className() {
    return "Momentum";
  }
  constructor(e17, t, n = false) {
    super(e17), this.learningRate = e17, this.momentum = t, this.useNesterov = n, this.accumulations = [], this.m = xe(this.momentum);
  }
  applyGradients(e17) {
    (Array.isArray(e17) ? e17.map((t) => t.name) : Object.keys(e17)).forEach((t, n) => {
      let a = P.registeredVariables[t];
      this.accumulations[n] == null && (this.accumulations[n] = { originalName: `${t}/momentum`, variable: O(() => qe(a).variable(false)) });
      let r = this.accumulations[n].variable, s = Array.isArray(e17) ? e17[n].tensor : e17[t];
      s != null && O(() => {
        let i, o = X(z(this.m, r), s);
        this.useNesterov ? i = X(z(this.c, X(s, z(o, this.m))), a) : i = X(z(this.c, o), a), r.assign(o), a.assign(i);
      });
    }), this.incrementIterations();
  }
  dispose() {
    this.m.dispose(), this.accumulations != null && Ee(this.accumulations.map((e17) => e17.variable));
  }
  setMomentum(e17) {
    this.momentum = e17;
  }
  async getWeights() {
    return [await this.saveIterations()].concat(this.accumulations.map((e17) => ({ name: e17.originalName, tensor: e17.variable })));
  }
  async setWeights(e17) {
    e17 = await this.extractIterations(e17);
    let t = false;
    this.accumulations = e17.map((n) => ({ originalName: n.name, variable: n.tensor.variable(t) }));
  }
  getConfig() {
    return { learningRate: this.learningRate, momentum: this.momentum, useNesterov: this.useNesterov };
  }
  static fromConfig(e17, t) {
    return new e17(t.learningRate, t.momentum, t.useNesterov);
  }
};
var qw = class extends Rr {
  static get className() {
    return "RMSProp";
  }
  constructor(e17, t = 0.9, n = 0, a = null, r = false) {
    if (super(), this.learningRate = e17, this.decay = t, this.momentum = n, this.epsilon = a, this.accumulatedMeanSquares = [], this.accumulatedMoments = [], this.accumulatedMeanGrads = [], this.centered = r, a == null && (this.epsilon = P.backend.epsilon()), e17 == null) throw new Error("learningRate for RMSPropOptimizer must be defined.");
  }
  applyGradients(e17) {
    (Array.isArray(e17) ? e17.map((t) => t.name) : Object.keys(e17)).forEach((t, n) => {
      let a = P.registeredVariables[t], r = false;
      this.accumulatedMeanSquares[n] == null && (this.accumulatedMeanSquares[n] = { originalName: `${t}/rms`, variable: O(() => qe(a).variable(r)) }), this.accumulatedMoments[n] == null && (this.accumulatedMoments[n] = { originalName: `${t}/momentum`, variable: O(() => qe(a).variable(r)) }), this.accumulatedMeanGrads[n] == null && this.centered && (this.accumulatedMeanGrads[n] = { originalName: `${t}/mg`, variable: O(() => qe(a).variable(r)) });
      let s = Array.isArray(e17) ? e17[n].tensor : e17[t];
      if (s == null) return;
      let i = this.accumulatedMeanSquares[n].variable, o = this.accumulatedMoments[n].variable;
      O(() => {
        let l = X(z(i, this.decay), z(pt(s), 1 - this.decay));
        if (this.centered) {
          let u = this.accumulatedMeanGrads[n].variable, p = X(z(u, this.decay), z(s, 1 - this.decay)), d = he(z(s, this.learningRate), rn(pe(l, X(pt(p), this.epsilon)))), c = X(z(o, this.momentum), d);
          i.assign(l), u.assign(p), o.assign(c);
          let h = pe(a, c);
          a.assign(h);
        } else {
          let u = X(z(i, this.decay), z(pt(s), 1 - this.decay)), p = X(z(o, this.momentum), he(z(s, this.learningRate), rn(X(u, this.epsilon))));
          i.assign(u), o.assign(p);
          let d = pe(a, p);
          a.assign(d);
        }
      });
    }), this.incrementIterations();
  }
  dispose() {
    this.accumulatedMeanSquares != null && Ee(this.accumulatedMeanSquares.map((e17) => e17.variable)), this.accumulatedMeanGrads != null && this.centered && Ee(this.accumulatedMeanGrads.map((e17) => e17.variable)), this.accumulatedMoments != null && Ee(this.accumulatedMoments.map((e17) => e17.variable));
  }
  async getWeights() {
    let e17 = [...this.accumulatedMeanSquares, ...this.accumulatedMoments];
    return this.centered && e17.push(...this.accumulatedMeanGrads), [await this.saveIterations()].concat(e17.map((t) => ({ name: t.originalName, tensor: t.variable })));
  }
  async setWeights(e17) {
    e17 = await this.extractIterations(e17);
    let t = this.centered ? e17.length / 3 : e17.length / 2, n = false;
    this.accumulatedMeanSquares = e17.slice(0, t).map((a) => ({ originalName: a.name, variable: a.tensor.variable(n) })), this.accumulatedMoments = e17.slice(t, t * 2).map((a) => ({ originalName: a.name, variable: a.tensor.variable(n) })), this.centered && (this.accumulatedMeanGrads = e17.slice(t * 2, t * 3).map((a) => ({ originalName: a.name, variable: a.tensor.variable(n) })));
  }
  getConfig() {
    return { learningRate: this.learningRate, decay: this.decay, momentum: this.momentum, epsilon: this.epsilon, centered: this.centered };
  }
  static fromConfig(e17, t) {
    return new e17(t.learningRate, t.decay, t.momentum, t.epsilon, t.centered);
  }
};
var NB = [Vw, Uw, Gw, Hw, jw, qw, ff];
function TB() {
  for (let e17 of NB) OT(e17);
}
var jt = {};
_e(jt, { CompositeArrayBuffer: () => Fr, browserFiles: () => DB, browserHTTPRequest: () => zB, concatenateArrayBuffers: () => hO, copyModel: () => MO, decodeWeights: () => lN, decodeWeightsStream: () => pN, encodeWeights: () => oO, fromMemory: () => BB, fromMemorySync: () => BT, getLoadHandlers: () => wO, getModelArtifactsForJSON: () => Mv, getModelArtifactsForJSONSync: () => dN, getModelArtifactsInfoForJSON: () => rd, getSaveHandlers: () => vO, getWeightSpecs: () => _x, http: () => Xw, isHTTPScheme: () => Px, listModels: () => DO, loadWeights: () => MB, moveModel: () => OO, registerLoadRouter: () => xO, registerSaveRouter: () => yO, removeModel: () => RO, weightsLoaderFactory: () => LT, withSaveHandler: () => VB, withSaveHandlerSync: () => UB });
var CB = "model";
var EB = ".json";
var _B = ".weights.bin";
function aI(e17) {
  return new Promise((t) => setTimeout(t)).then(e17);
}
var Yh = class Ox {
  constructor(t) {
    if (!G().getBool("IS_BROWSER")) throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");
    t.startsWith(Ox.URL_SCHEME) && (t = t.slice(Ox.URL_SCHEME.length)), (t == null || t.length === 0) && (t = CB), this.modelJsonFileName = t + EB, this.weightDataFileName = t + _B;
  }
  async save(t) {
    if (typeof document == "undefined") throw new Error("Browser downloads are not supported in this environment since `document` is not present");
    let n = Fr.join(t.weightData), a = window.URL.createObjectURL(new Blob([n], { type: "application/octet-stream" }));
    if (t.modelTopology instanceof ArrayBuffer) throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");
    {
      let r = [{ paths: ["./" + this.weightDataFileName], weights: t.weightSpecs }], s = cN(t, r), i = window.URL.createObjectURL(new Blob([JSON.stringify(s)], { type: "application/json" })), o = this.modelJsonAnchor == null ? document.createElement("a") : this.modelJsonAnchor;
      if (o.download = this.modelJsonFileName, o.href = i, await aI(() => o.dispatchEvent(new MouseEvent("click"))), t.weightData != null) {
        let l = this.weightDataAnchor == null ? document.createElement("a") : this.weightDataAnchor;
        l.download = this.weightDataFileName, l.href = a, await aI(() => l.dispatchEvent(new MouseEvent("click")));
      }
      return { modelArtifactsInfo: rd(t) };
    }
  }
};
Yh.URL_SCHEME = "downloads://";
var AB = class {
  constructor(e17) {
    if (e17 == null || e17.length < 1) throw new Error(`When calling browserFiles, at least 1 file is required, but received ${e17}`);
    this.jsonFile = e17[0], this.weightsFiles = e17.slice(1);
  }
  async load() {
    return new Promise((e17, t) => {
      let n = new FileReader();
      n.onload = (a) => {
        let r = JSON.parse(a.target.result), s = r.modelTopology;
        if (s == null) {
          t(new Error(`modelTopology field is missing from file ${this.jsonFile.name}`));
          return;
        }
        if (r.weightsManifest == null) {
          t(new Error(`weightManifest field is missing from file ${this.jsonFile.name}`));
          return;
        }
        if (this.weightsFiles.length === 0) {
          e17({ modelTopology: s });
          return;
        }
        let i = Mv(r, (o) => this.loadWeights(o));
        e17(i);
      }, n.onerror = (a) => t(`Failed to read model topology and weights manifest JSON from file '${this.jsonFile.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`), n.readAsText(this.jsonFile);
    });
  }
  loadWeights(e17) {
    let t = [], n = [];
    for (let s of e17) t.push(...s.weights), n.push(...s.paths);
    let a = this.checkManifestAndWeightFiles(e17), r = n.map((s) => this.loadWeightsFile(s, a[s]));
    return Promise.all(r).then((s) => [t, s]);
  }
  loadWeightsFile(e17, t) {
    return new Promise((n, a) => {
      let r = new FileReader();
      r.onload = (s) => {
        let i = s.target.result;
        n(i);
      }, r.onerror = (s) => a(`Failed to weights data from file of path '${e17}'.`), r.readAsArrayBuffer(t);
    });
  }
  checkManifestAndWeightFiles(e17) {
    let t = [], n = this.weightsFiles.map((r) => eI(r.name)), a = {};
    for (let r of e17) r.paths.forEach((s) => {
      let i = eI(s);
      if (t.indexOf(i) !== -1) throw new Error(`Duplicate file basename found in weights manifest: '${i}'`);
      if (t.push(i), n.indexOf(i) === -1) throw new Error(`Weight file with basename '${i}' is not provided.`);
      a[s] = this.weightsFiles[n.indexOf(i)];
    });
    if (t.length !== this.weightsFiles.length) throw new Error(`Mismatch in the number of files in weights manifest (${t.length}) and the number of weight files provided (${this.weightsFiles.length}).`);
    return a;
  }
};
var FB = (e17) => G().getBool("IS_BROWSER") && !Array.isArray(e17) && e17.startsWith(Yh.URL_SCHEME) ? $B(e17.slice(Yh.URL_SCHEME.length)) : null;
ga.registerSaveRouter(FB);
function $B(e17 = "model") {
  return new Yh(e17);
}
function DB(e17) {
  return new AB(e17);
}
function rI(e17, t, n, a) {
  i(e17), n = n == null ? 0 : n, a = a == null ? 1 : a, o(n, a);
  let r = 0, s = (l) => (l.then((u) => {
    let p = n + ++r / e17.length * (a - n);
    return t(p), u;
  }), l);
  function i(l) {
    A(l != null && Array.isArray(l) && l.length > 0, () => "promises must be a none empty array");
  }
  function o(l, u) {
    A(l >= 0 && l <= 1, () => `Progress fraction must be in range [0, 1], but got startFraction ${l}`), A(u >= 0 && u <= 1, () => `Progress fraction must be in range [0, 1], but got endFraction ${u}`), A(u >= l, () => `startFraction must be no more than endFraction, but got startFraction ${l} and endFraction ${u}`);
  }
  return Promise.all(e17.map(s));
}
async function PT(e17, t) {
  t == null && (t = {});
  let n = t.fetchFunc == null ? G().platform.fetch : t.fetchFunc, a = e17.map((s) => n(s, t.requestInit, { isBinary: true })), r = (t.onProgress == null ? await Promise.all(a) : await rI(a, t.onProgress, 0, 0.5)).map((s) => s.arrayBuffer());
  return t.onProgress == null ? await Promise.all(r) : await rI(r, t.onProgress, 0.5, 1);
}
function RB(e17, t) {
  var n;
  let a = t.fetchFunc == null ? G().platform.fetch : t.fetchFunc, r = 0, s;
  return (n = t.onProgress) === null || n === void 0 || n.call(t, 0), new ReadableStream({ pull: async (i) => {
    for (var o; r < e17.length; ) {
      s || (s = (await a(e17[r], t.requestInit, { isBinary: true })).body.getReader());
      let { done: l, value: u } = await s.read();
      if (l) {
        r++, s = void 0, (o = t.onProgress) === null || o === void 0 || o.call(t, r / e17.length);
        continue;
      }
      i.enqueue(u);
      return;
    }
    i.close();
  } });
}
async function MB(e17, t = "", n, a) {
  return LT((r) => PT(r, { requestInit: a }))(e17, t, n);
}
function LT(e17) {
  return async (t, n = "", a) => {
    let r = t.map(() => false), s = {}, i = a != null ? a.map(() => false) : [], o = [];
    if (t.forEach((h, m) => {
      let f = 0;
      h.weights.forEach((g) => {
        let b = "quantization" in g ? g.quantization.dtype : g.dtype, y = ui[b] * ot(g.shape), x = () => {
          r[m] = true, s[m] == null && (s[m] = []), s[m].push({ manifestEntry: g, groupOffset: f, sizeBytes: y });
        };
        a != null ? a.forEach((v, I) => {
          v === g.name && (x(), i[I] = true);
        }) : x(), o.push(g.name), f += y;
      });
    }), !i.every((h) => h)) {
      let h = a.filter((m, f) => !i[f]);
      throw new Error(`Could not find weights in manifest with names: ${h.join(", ")}. 
Manifest JSON has weights with names: ${o.join(", ")}.`);
    }
    let l = r.reduce((h, m, f) => (m && h.push(f), h), []), u = [];
    l.forEach((h) => {
      t[h].paths.forEach((m) => {
        let f = n + (n.endsWith("/") ? "" : "/") + m;
        u.push(f);
      });
    });
    let p = await e17(u), d = {}, c = 0;
    return l.forEach((h) => {
      let m = t[h].paths.length, f = new Fr(p.slice(c, c + m));
      s[h].forEach((g) => {
        let b = f.slice(g.groupOffset, g.groupOffset + g.sizeBytes), y = lN(b, [g.manifestEntry]);
        for (let x in y) d[x] = y[x];
      }), c += m;
    }), d;
  };
}
var OB = "application/octet-stream";
var PB = "application/json";
var Kw = class {
  constructor(e17, t) {
    if (this.DEFAULT_METHOD = "POST", t == null && (t = {}), this.weightPathPrefix = t.weightPathPrefix, this.weightUrlConverter = t.weightUrlConverter, t.fetchFunc != null ? (A(typeof t.fetchFunc == "function", () => "Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)"), this.fetch = t.fetchFunc) : this.fetch = G().platform.fetch, A(e17 != null && e17.length > 0, () => "URL path for http must not be null, undefined or empty."), Array.isArray(e17) && A(e17.length === 2, () => `URL paths for http must have a length of 2, (actual length is ${e17.length}).`), this.path = e17, t.requestInit != null && t.requestInit.body != null) throw new Error("requestInit is expected to have no pre-existing body, but has one.");
    this.requestInit = t.requestInit || {}, this.loadOptions = t;
  }
  async save(e17) {
    if (e17.modelTopology instanceof ArrayBuffer) throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");
    let t = Object.assign({ method: this.DEFAULT_METHOD }, this.requestInit);
    t.body = new FormData();
    let n = [{ paths: ["./model.weights.bin"], weights: e17.weightSpecs }], a = cN(e17, n);
    if (t.body.append("model.json", new Blob([JSON.stringify(a)], { type: PB }), "model.json"), e17.weightData != null) {
      let s = Fr.join(e17.weightData);
      t.body.append("model.weights.bin", new Blob([s], { type: OB }), "model.weights.bin");
    }
    let r = await this.fetch(this.path, t);
    if (r.ok) return { modelArtifactsInfo: rd(e17), responses: [r] };
    throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${r.status}.`);
  }
  async loadModelJSON() {
    let e17 = await this.fetch(this.path, this.requestInit);
    if (!e17.ok) throw new Error(`Request to ${this.path} failed with status code ${e17.status}. Please verify this URL points to the model JSON of the model to load.`);
    let t;
    try {
      t = await e17.json();
    } catch (r) {
      let s = `Failed to parse model JSON of response from ${this.path}.`;
      throw this.path.endsWith(".pb") ? s += " Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository." : s += " Please make sure the server is serving valid JSON for this request.", new Error(s);
    }
    let n = t.modelTopology, a = t.weightsManifest;
    if (n == null && a == null) throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);
    return t;
  }
  async load() {
    if (this.loadOptions.streamWeights) return this.loadStream();
    let e17 = await this.loadModelJSON();
    return Mv(e17, (t) => this.loadWeights(t));
  }
  async loadStream() {
    let e17 = await this.loadModelJSON(), t = await this.getWeightUrls(e17.weightsManifest), n = _x(e17.weightsManifest), a = () => RB(t, this.loadOptions);
    return Object.assign(Object.assign({}, e17), { weightSpecs: n, getWeightStream: a });
  }
  async getWeightUrls(e17) {
    let t = Array.isArray(this.path) ? this.path[1] : this.path, [n, a] = LB(t), r = this.weightPathPrefix || n, s = [], i = [];
    for (let o of e17) for (let l of o.paths) this.weightUrlConverter != null ? i.push(this.weightUrlConverter(l)) : s.push(r + l + a);
    return this.weightUrlConverter && s.push(...await Promise.all(i)), s;
  }
  async loadWeights(e17) {
    let t = await this.getWeightUrls(e17), n = _x(e17), a = await PT(t, this.loadOptions);
    return [n, a];
  }
};
Kw.URL_SCHEME_REGEX = /^https?:\/\//;
function LB(e17) {
  let t = e17.lastIndexOf("/"), n = e17.lastIndexOf("?"), a = e17.substring(0, t), r = n > t ? e17.substring(n) : "";
  return [a + "/", r];
}
function Px(e17) {
  return e17.match(Kw.URL_SCHEME_REGEX) != null;
}
var zT = (e17, t) => {
  if (typeof fetch == "undefined" && (t == null || t.fetchFunc == null)) return null;
  {
    let n = true;
    if (Array.isArray(e17) ? n = e17.every((a) => Px(a)) : n = Px(e17), n) return Xw(e17, t);
  }
  return null;
};
ga.registerSaveRouter(zT);
ga.registerLoadRouter(zT);
function Xw(e17, t) {
  return new Kw(e17, t);
}
function zB(e17, t) {
  return Xw(e17, t);
}
var lx = class {
  constructor(e17) {
    this.modelArtifacts = e17;
  }
  load() {
    return this.modelArtifacts;
  }
};
var WT = class {
  constructor(e17) {
    this.saveHandler = e17;
  }
  save(e17) {
    return this.saveHandler(e17);
  }
};
var WB = class {
  constructor(e17) {
    e17.load && (this.load = () => Promise.resolve(e17.load())), e17.save && (this.save = (t) => Promise.resolve(e17.save(t)));
  }
};
function BB(e17, t, n, a) {
  let r = arguments;
  return new WB(BT(...r));
}
function BT(e17, t, n, a) {
  return arguments.length === 1 ? e17.modelTopology != null || e17.weightSpecs != null ? new lx(e17) : (console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."), new lx({ modelTopology: e17 })) : (console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."), new lx({ modelTopology: e17, weightSpecs: t, weightData: n, trainingConfig: a }));
}
function VB(e17) {
  return new WT(e17);
}
function UB(e17) {
  return new WT(e17);
}
var VT = {};
_e(VT, { confusionMatrix: () => HB });
function GB(e17, t, n) {
  let a = E(e17, "labels", "confusionMatrix"), r = E(t, "predictions", "confusionMatrix");
  A(n == null || n > 0 && Number.isInteger(n), () => `If provided, numClasses must be a positive integer, but got ${n}`), A(a.rank === 1, () => `Expected the rank of labels to be 1, but got ${a.rank}`), A(r.rank === 1, () => `Expected the rank of predictions to be 1, but got ${r.rank}`), A(a.shape[0] === r.shape[0], () => `Mismatch in the number of examples: ${a.shape[0]} vs. ${r.shape[0]}. Labels and predictions should have the same number of elements.`), A(n > 0 && Number.isInteger(n), () => `numClasses is required to be a positive integer, but got ${n}`);
  let s = Ll(re(a, "int32"), n), i = Ll(re(r, "int32"), n), o = De(s), l = $e(o, i);
  return re(l, "int32");
}
var HB = L({ confusionMatrix_: GB });
var qo = {};
_e(qo, { draw: () => QB, fromPixels: () => e4, fromPixelsAsync: () => YB, toPixels: () => JB });
var js;
var sI = false;
function UT(e17, t = 3) {
  if (t > 4) throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");
  if (e17 == null) throw new Error("pixels passed to tf.browser.fromPixels() can not be null");
  let n = false, a = false, r = false, s = false, i = false, o = false;
  if (e17.data instanceof Uint8Array) n = true;
  else if (typeof ImageData != "undefined" && e17 instanceof ImageData) a = true;
  else if (typeof HTMLVideoElement != "undefined" && e17 instanceof HTMLVideoElement) r = true;
  else if (typeof HTMLImageElement != "undefined" && e17 instanceof HTMLImageElement) s = true;
  else if (e17.getContext != null) i = true;
  else if (typeof ImageBitmap != "undefined" && e17 instanceof ImageBitmap) o = true;
  else throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${e17.constructor.name}`);
  if (fc(Hh, P.backendName) != null) {
    let c = { pixels: e17 }, h = { numChannels: t };
    return P.runKernel(Hh, c, h);
  }
  let [l, u] = r ? [e17.videoWidth, e17.videoHeight] : [e17.width, e17.height], p;
  if (i) p = e17.getContext("2d").getImageData(0, 0, l, u).data;
  else if (a || n) p = e17.data;
  else if (s || r || o) {
    if (js == null) if (typeof document == "undefined") if (typeof OffscreenCanvas != "undefined" && typeof OffscreenCanvasRenderingContext2D != "undefined") js = new OffscreenCanvas(1, 1).getContext("2d");
    else throw new Error("Cannot parse input in current context. Reason: OffscreenCanvas Context2D rendering is not supported.");
    else js = document.createElement("canvas").getContext("2d", { willReadFrequently: true });
    js.canvas.width = l, js.canvas.height = u, js.drawImage(e17, 0, 0, l, u), p = js.getImageData(0, 0, l, u).data;
  }
  let d;
  if (t === 4) d = new Int32Array(p);
  else {
    let c = l * u;
    d = new Int32Array(c * t);
    for (let h = 0; h < c; h++) for (let m = 0; m < t; ++m) d[h * t + m] = p[h * 4 + m];
  }
  return xd(d, [u, l, t], "int32");
}
function jB(e17) {
  return e17 != null && e17.data instanceof Uint8Array;
}
function qB() {
  return typeof window != "undefined" && typeof ImageBitmap != "undefined" && window.hasOwnProperty("createImageBitmap");
}
function KB(e17) {
  return e17 != null && e17.width !== 0 && e17.height !== 0;
}
function XB(e17) {
  return qB() && !(e17 instanceof ImageBitmap) && KB(e17) && !jB(e17);
}
async function YB(e17, t = 3) {
  let n = null;
  if (G().getBool("WRAP_TO_IMAGEBITMAP") && XB(e17)) {
    let a;
    try {
      a = await createImageBitmap(e17, { premultiplyAlpha: "none" });
    } catch (r) {
      a = null;
    }
    a != null && a.width === e17.width && a.height === e17.height ? n = a : n = e17;
  } else n = e17;
  return UT(n, t);
}
function GT(e17) {
  if (e17.rank !== 2 && e17.rank !== 3) throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${e17.rank}.`);
  let t = e17.rank === 2 ? 1 : e17.shape[2];
  if (t > 4 || t === 2) throw new Error(`toPixels only supports depth of size 1, 3 or 4 but got ${t}`);
  if (e17.dtype !== "float32" && e17.dtype !== "int32") throw new Error(`Unsupported type for toPixels: ${e17.dtype}. Please use float32 or int32 tensors.`);
}
function ZB(e17) {
  let t = (e17 == null ? void 0 : e17.alpha) || 1;
  if (t > 1 || t < 0) throw new Error(`Alpha value ${t} is suppoed to be in range [0 - 1].`);
}
async function JB(e17, t) {
  let n = E(e17, "img", "toPixels");
  if (!(e17 instanceof Ce)) {
    let u = n;
    n = re(u, "int32"), u.dispose();
  }
  GT(n);
  let [a, r] = n.shape.slice(0, 2), s = n.rank === 2 ? 1 : n.shape[2], i = await n.data(), o = n.dtype === "float32" ? 255 : 1, l = new Uint8ClampedArray(r * a * 4);
  for (let u = 0; u < a * r; ++u) {
    let p = [0, 0, 0, 255];
    for (let c = 0; c < s; c++) {
      let h = i[u * s + c];
      if (n.dtype === "float32") {
        if (h < 0 || h > 1) throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${h}.`);
      } else if (n.dtype === "int32" && (h < 0 || h > 255)) throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${h}.`);
      s === 1 ? (p[0] = h * o, p[1] = h * o, p[2] = h * o) : p[c] = h * o;
    }
    let d = u * 4;
    l[d + 0] = Math.round(p[0]), l[d + 1] = Math.round(p[1]), l[d + 2] = Math.round(p[2]), l[d + 3] = Math.round(p[3]);
  }
  if (t != null) {
    sI || fc(Nm, P.backendName) != null && (console.warn("tf.browser.toPixels is not efficient to draw tensor on canvas. Please try tf.browser.draw instead."), sI = true), t.width = r, t.height = a;
    let u = t.getContext("2d"), p = new ImageData(l, r, a);
    u.putImageData(p, 0, 0);
  }
  return n !== e17 && n.dispose(), l;
}
function QB(e17, t, n) {
  let a = E(e17, "img", "draw");
  if (!(e17 instanceof Ce)) {
    let i = a;
    a = re(i, "int32"), i.dispose();
  }
  GT(a), ZB(n == null ? void 0 : n.imageOptions);
  let r = { image: a }, s = { canvas: t, options: n };
  P.runKernel(Nm, r, s);
}
var e4 = L({ fromPixels_: UT });
var Yw = {};
_e(Yw, { prepareAndValidate: () => HT });
function HT(e17, t) {
  let n = e17.shape.length, a = t.shape.length;
  if (n < 1) throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${n}.`);
  if (a < 1) throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${a}.`);
  if (t.dtype !== "int32") throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);
  if (t.shape[a - 1] > n) throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[a - 1]} vs. ${n}`);
  if (ot(e17.shape) === 0) throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${e17.shape}.`);
  let r = t.shape, s = r[r.length - 1], i = 1;
  for (let d = 0; d < r.length - 1; ++d) i *= r[d];
  let o = e17.shape, l = r.slice();
  l.pop();
  let u = 1;
  for (let d = s; d < n; ++d) u *= o[d], l.push(o[d]);
  let p = [...Xl(e17.shape).map((d) => d / u), 1].slice(0, s);
  return [l, i, u, p];
}
var Kt = {};
_e(Kt, { assertParamsValid: () => n4, computeFlatOffset: () => o4, computeOutShape: () => r4, getNormalizedAxes: () => s4, isSliceContinous: () => i4, maskToAxes: () => a4, parseSliceParams: () => e2, sliceInfo: () => l4, startForAxis: () => JT, startIndicesWithElidedDims: () => XT, stopForAxis: () => QT, stopIndicesWithElidedDims: () => YT, stridesForAxis: () => ZT, stridesWithElidedDims: () => jT });
var Lx = -2;
var t4 = -1;
function n4(e17, t, n) {
  let a = e17.shape.length;
  A(a === t.length, () => `Error in slice${a}D: Length of begin ${t} must match the rank of the array (${a}).`), A(a === n.length, () => `Error in slice${a}D: Length of size ${n} must match the rank of the array (${a}).`);
  for (let r = 0; r < a; ++r) A(t[r] + n[r] <= e17.shape[r], () => `Error in slice${a}D: begin[${r}] + size[${r}] (${t[r] + n[r]}) would overflow input.shape[${r}] (${e17.shape[r]})`);
}
function a4(e17) {
  let t = [], n = 0;
  for (; e17 > 0; ) e17 & 1 && t.push(n), e17 /= 2, n++;
  return t;
}
function r4(e17, t, n) {
  let a = [];
  for (let r = 0; r < e17.length; r++) a[r] = Math.ceil((t[r] - e17[r]) / n[r]);
  return a;
}
function jT(e17, t, n, a) {
  let r = [...e17];
  for (let s = r.length; s < a.length; s++) r.push(1);
  for (let s = 0; s < n; s++) s === 0 ? r[t] = 1 : (r.splice(t, 0, 1), r.pop());
  return r;
}
function qT(e17, t, n) {
  return n <= e17 ? n : n - (t - 1);
}
function KT(e17, t) {
  let n = [];
  for (let a = 0; a < e17; a++) n.push(t + a);
  return n;
}
function s4(e17, t, n, a, r, s, i, o, l) {
  let u = e17.length, p = new Array(u), d = new Array(u), c = new Array(u);
  if (t.length && n > 0) {
    let h = t[0], m = n + 1;
    p = XT(i, h, m, a, e17), d = YT(o, h, m, r, e17), c = jT(s, h, m, e17);
  } else for (let h = 0; h < u; h++) p[h] = JT(i, a, s, e17, h, l), d[h] = QT(o, r, s, e17, h, l), c[h] = ZT(s, h, l);
  return { begin: p, end: d, strides: c };
}
function XT(e17, t, n, a, r) {
  let s = [...r], i = KT(n, t);
  for (let o = 0; o < s.length; o++) if (i.indexOf(o) > -1) s[o] = 0;
  else {
    let l = qT(t, n, o), u = a[l];
    e17 & 1 << l && (u = 0), s[o] = u;
  }
  return s;
}
function YT(e17, t, n, a, r) {
  let s = [...r], i = KT(n, t);
  for (let o = 0; o < s.length; o++) if (i.indexOf(o) > -1) s[o] = Number.MAX_SAFE_INTEGER;
  else {
    let l = qT(t, n, o), u = a[l];
    e17 & 1 << l && (u = Number.MAX_SAFE_INTEGER), s[o] = u;
  }
  for (let o = 0; o < s.length; o++) {
    let l = r[o];
    s[o] < 0 && (s[o] += l), s[o] = hc(0, s[o], r[o]);
  }
  return s;
}
function ZT(e17, t, n) {
  let a = e17[t];
  return (n & 1 << t || a == null) && (a = 1), a;
}
function JT(e17, t, n, a, r, s) {
  let i = t[r], o = n[r] || 1;
  (e17 & 1 << r || s & 1 << r || i == null) && (o > 0 ? i = Number.MIN_SAFE_INTEGER : i = Number.MAX_SAFE_INTEGER);
  let l = a[r];
  return i < 0 && (i += l), i = hc(0, i, l - 1), i;
}
function QT(e17, t, n, a, r, s) {
  let i = t[r], o = n[r] || 1;
  (e17 & 1 << r || s & 1 << r || i == null) && (o > 0 ? i = Number.MAX_SAFE_INTEGER : i = Number.MIN_SAFE_INTEGER);
  let l = a[r];
  return i < 0 && (i += l), o > 0 ? i = hc(0, i, l) : i = hc(-1, i, l - 1), i;
}
function i4(e17, t, n) {
  let a = n.length;
  for (let r = 0; r < n.length; r++) if (n[r] > 1) {
    a = r;
    break;
  }
  for (let r = a + 1; r < n.length; r++) if (t[r] > 0 || n[r] !== e17[r]) return false;
  return true;
}
function o4(e17, t) {
  let n = e17.length > 0 ? e17[e17.length - 1] : 1;
  for (let a = 0; a < e17.length - 1; a++) n += e17[a] * t[a];
  return n;
}
function e2(e17, t, n) {
  let a, r = e17.shape.length;
  typeof t == "number" ? a = [t, ...new Array(r - 1).fill(0)] : t.length < r ? a = t.concat(new Array(r - t.length).fill(0)) : a = t.slice(), a.forEach((i) => {
    A(i !== -1, () => "slice() does not support negative begin indexing.");
  });
  let s;
  return n == null ? s = new Array(r).fill(-1) : typeof n == "number" ? s = [n, ...new Array(r - 1).fill(-1)] : n.length < r ? s = n.concat(new Array(r - n.length).fill(-1)) : s = n, s = s.map((i, o) => i >= 0 ? i : (A(i === -1, () => `Negative size values should be exactly -1 but got ${i} for the slice() size at index ${o}.`), e17.shape[o] - a[o])), [a, s];
}
function l4(e17, t, n, a, r, s, i, o, l) {
  let u;
  if (a == null ? (u = new Array(t.length), u.fill(1)) : u = a, i != null && i & i - 1) throw new Error("Multiple ellipses in slice is not allowed.");
  let p = false, d = { dims: u.length, numAddAxisAfterEllipsis: 0, begin: t.slice(), end: n.slice(), strides: u.slice(), beginMask: r, endMask: s, ellipsisMask: i, newAxisMask: o, shrinkAxisMask: l };
  for (let y = 0; y < d.dims; y++) p && 1 << y & o && d.numAddAxisAfterEllipsis++, 1 << y & i && (p = true);
  p || (d.ellipsisMask |= 1 << d.dims, d.dims++);
  let c = { dims: e17.length, beginMask: 0, endMask: 0, beginValid: false, endValid: false };
  u4(d, c);
  let h = true, m = true, f = true, g = [], b = [];
  for (let y = 0; y < e17.length; ++y) {
    if (c.strides[y] === 0) throw Error(`strides[${y}] must be non-zero`);
    let x = !!(c.shrinkAxisMask & 1 << y), v = e17[y];
    if (v === -1) {
      g.push(x ? 1 : -1);
      continue;
    }
    let I = [c.beginMask & 1 << y, c.endMask & 1 << y], N = [c.strides[y] > 0 ? 0 : -1, c.strides[y] > 0 ? v : v - 1];
    if (x && c.strides[y] <= 0) throw Error("only stride 1 allowed on non-range indexing.");
    f = f && c.strides[y] === 1;
    let C = !!(c.beginMask & 1 << y && c.endMask & 1 << y);
    if (c.beginValid && c.endValid) {
      if (x) {
        let $ = c.begin[y] < 0 ? v + c.begin[y] : c.begin[y];
        if (c.begin[y] = $, c.end[y] = c.begin[y] + 1, $ < 0 || $ >= v) throw Error(`slice index ${c.begin[y]} of dimension ${y} out of bounds.`);
      } else c.begin[y] = iI(c.begin[y], 0, c.strides[y], v, I, N), c.end[y] = iI(c.end[y], 1, c.strides[y], v, I, N);
      let D = c.strides[y] === 1 && c.begin[y] === 0 && c.end[y] === v;
      h = h && D, m = m && (y === 0 && c.strides[y] === 1 || D);
    } else h = h && c.strides[y] === 1 && C, m = m && (y === 0 && c.strides[y] === 1 || C);
    let _, F = false;
    if (c.beginValid && c.endValid ? (_ = c.end[y] - c.begin[y], F = true) : x ? (_ = 1, F = true) : C && v >= 0 && (c.strides[y] < 0 ? _ = -v : _ = v, F = true), F) {
      let D;
      _ === 0 || _ < 0 != c.strides[y] < 0 ? D = 0 : D = Math.trunc(_ / c.strides[y]) + (_ % c.strides[y] !== 0 ? 1 : 0), g.push(D);
    } else g.push(-1);
  }
  for (let y = 0; y < c.finalShapeGatherIndices.length; ++y) {
    let x = c.finalShapeGatherIndices[y];
    x >= 0 ? b.push(g[x]) : x === Lx && b.push(1);
  }
  return { finalShapeSparse: b.filter((y, x) => c.finalShapeGatherIndices[x] !== Lx), finalShape: b, isIdentity: h, sliceDim0: m, isSimpleSlice: f, begin: c.begin, end: c.end, strides: c.strides };
}
function u4(e17, t) {
  t.beginMask = 0, t.endMask = 0, t.shrinkAxisMask = 0;
  let n = 0;
  t.beginValid = e17.begin != null, t.endValid = e17.end != null, t.begin = new Array(t.dims), t.end = new Array(t.dims), t.strides = new Array(t.dims), t.finalShapeGatherIndices = [], t.finalShapeGatherIndicesSparse = [], t.inputShapeGatherIndicesSparse = new Array(t.dims);
  for (let a = 0; a < e17.dims; a++) if (1 << a & e17.ellipsisMask) {
    let r = Math.min(t.dims - (e17.dims - a) + 1 + e17.numAddAxisAfterEllipsis, t.dims);
    for (; n < r; n++) t.begin[n] = 0, t.end[n] = 0, t.strides[n] = 1, t.beginMask |= 1 << n, t.endMask |= 1 << n, t.finalShapeGatherIndices.push(n), t.finalShapeGatherIndicesSparse.push(-1), t.inputShapeGatherIndicesSparse[n] = a;
  } else if (1 << a & e17.newAxisMask) t.finalShapeGatherIndices.push(Lx), t.finalShapeGatherIndicesSparse.push(-1);
  else {
    if (n === t.begin.length) throw Error(`Index out of range using input dim ${n}; input has only ${t.dims} dims, ${t.begin.length}.`);
    e17.begin != null && (t.begin[n] = e17.begin[a]), e17.end != null && (t.end[n] = e17.end[a]), t.strides[n] = e17.strides[a], e17.beginMask & 1 << a && (t.beginMask |= 1 << n), e17.endMask & 1 << a && (t.endMask |= 1 << n), e17.shrinkAxisMask & 1 << a ? (t.finalShapeGatherIndices.push(t4), t.finalShapeGatherIndicesSparse.push(-1), t.shrinkAxisMask |= 1 << n) : (t.finalShapeGatherIndices.push(n), t.finalShapeGatherIndicesSparse.push(a)), t.inputShapeGatherIndicesSparse[n] = a, n++;
  }
}
function iI(e17, t, n, a, r, s) {
  if (r[t]) return n > 0 ? s[t] : s[t + 1 & 1];
  {
    let i = e17 < 0 ? a + e17 : e17;
    return i < s[0] ? s[0] : i > s[1] ? s[1] : i;
  }
}
var p4 = "4.22.0";
var t2 = class {
  static sgd(e17) {
    return new ff(e17);
  }
  static momentum(e17, t, n = false) {
    return new jw(e17, t, n);
  }
  static rmsprop(e17, t = 0.9, n = 0, a = null, r = false) {
    return new qw(e17, t, n, a, r);
  }
  static adam(e17 = 1e-3, t = 0.9, n = 0.999, a = null) {
    return new Gw(e17, t, n, a);
  }
  static adadelta(e17 = 1e-3, t = 0.95, n = null) {
    return new Vw(e17, t, n);
  }
  static adamax(e17 = 2e-3, t = 0.9, n = 0.999, a = null, r = 0) {
    return new Hw(e17, t, n, a, r);
  }
  static adagrad(e17, t = 0.1) {
    return new Uw(e17, t);
  }
};
var Xs = t2;
var c4 = typeof requestAnimationFrame != "undefined" ? requestAnimationFrame : typeof setImmediate != "undefined" ? setImmediate : (e17) => e17();
function Zw() {
  return new Promise((e17) => c4(() => e17()));
}
var T = {};
_e(T, { ERF_A1: () => T4, ERF_A2: () => C4, ERF_A3: () => E4, ERF_A4: () => _4, ERF_A5: () => A4, ERF_P: () => N4, PARALLELIZE_THRESHOLD: () => Jw, RowPartitionType: () => er, SELU_SCALE: () => a2, SELU_SCALEALPHA: () => n2, applyActivation: () => hf, assertAndGetBroadcastShape: () => ct, assertAxesAreInnerMostDims: () => l3, assertParamsConsistent: () => d4, assignToTypedArray: () => O4, axesAreInnerMostDims: () => uw, calculateShapes: () => pT, checkEinsumDimSizes: () => V4, checkPadOnDimRoundingMode: () => Tn, combineLocations: () => FN, combineRaggedTensorToTensorShapes: () => m4, complexWithEvenIndex: () => D4, complexWithOddIndex: () => R4, computeConv2DInfo: () => sd, computeConv3DInfo: () => kN, computeDefaultPad: () => Hv, computeDilation2DInfo: () => iP, computeOptimalWindowSize: () => y4, computeOutAndReduceShapes: () => $N, computeOutShape: () => h4, computePool2DInfo: () => wN, computePool3DInfo: () => oP, convertConv2DDataFormat: () => IN, decodeEinsumEquation: () => W4, eitherStridesOrDilationsAreOne: () => dr, expandShapeToKeepDim: () => mi, exponent: () => L4, exponents: () => P4, fromStringArrayToUint8: () => uV, fromUint8ToStringArray: () => lV, getAxesPermutation: () => DN, getBroadcastDims: () => _N, getComplexWithIndex: () => M4, getEinsumComputePath: () => U4, getEinsumPermutation: () => B4, getFusedBiasGradient: () => df, getFusedDyActivation: () => cf, getImageCenter: () => x4, getInnerMostAxes: () => u3, getPermuted: () => w4, getRaggedRank: () => g4, getReductionAxes: () => Bt, getReshaped: () => v4, getReshapedPermuted: () => k4, getRowPartitionTypesHelper: () => f4, getSliceBeginCoords: () => I4, getSliceSize: () => S4, getSparseFillEmptyRowsIndicesDenseShapeMismatch: () => q4, getSparseFillEmptyRowsNegativeIndexErrorMessage: () => K4, getSparseFillEmptyRowsOutOfRangeIndexErrorMessage: () => X4, getSparseReshapeEmptyTensorZeroOutputDimErrorMessage: () => J4, getSparseReshapeInputOutputMismatchErrorMessage: () => eV, getSparseReshapeInputOutputMultipleErrorMessage: () => Q4, getSparseReshapeMultipleNegativeOneOutputDimErrorMessage: () => Y4, getSparseReshapeNegativeOutputDimErrorMessage: () => Z4, getSparseSegmentReductionIndicesOutOfRangeErrorMessage: () => rV, getSparseSegmentReductionNegativeSegmentIdsErrorMessage: () => tV, getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage: () => nV, getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage: () => aV, getUndoAxesPermutation: () => pw, isIdentityPermutation: () => G4, log: () => gM, mergeRealAndImagArrays: () => F4, prepareAndValidate: () => HT, prepareSplitSize: () => j4, segment_util: () => r2, shouldFuse: () => mf, slice_util: () => Kt, splitRealAndImagArrays: () => $4, stridesOrDilationsArePositive: () => hi, tupleValuesAreOne: () => ps, upcastType: () => fa, validateDefaultValueShape: () => b4, validateInput: () => of, validateUpdateShape: () => $w, warn: () => Zr });
function d4(e17, t) {
  let n = e17[0].length;
  e17.forEach((r, s) => {
    A(r.length === n, () => `Error in concat${n}D: rank of tensors[${s}] must be the same as the rank of the rest (${n})`);
  }), A(t >= 0 && t < n, () => `Error in concat${n}D: axis must be between 0 and ${n - 1}.`);
  let a = e17[0];
  e17.forEach((r, s) => {
    for (let i = 0; i < n; i++) A(i === t || r[i] === a[i], () => `Error in concat${n}D: Shape of tensors[${s}] (${r}) does not match the shape of the rest (${a}) along the non-concatenated axis ${s}.`);
  });
}
function h4(e17, t) {
  let n = e17[0].slice();
  for (let a = 1; a < e17.length; a++) n[t] += e17[a][t];
  return n;
}
var er;
(function(e17) {
  e17[e17.FIRST_DIM_SIZE = 0] = "FIRST_DIM_SIZE", e17[e17.VALUE_ROWIDS = 1] = "VALUE_ROWIDS", e17[e17.ROW_LENGTHS = 2] = "ROW_LENGTHS", e17[e17.ROW_SPLITS = 3] = "ROW_SPLITS", e17[e17.ROW_LIMITS = 4] = "ROW_LIMITS", e17[e17.ROW_STARTS = 5] = "ROW_STARTS";
})(er || (er = {}));
function m4(e17, t, n) {
  let a = new Array();
  if (n == null && t == null) return a;
  if (t == null) for (; a.length < e17 + n.length; ) a.push(-1);
  else a = t.slice();
  if (n == null) return a;
  if (e17 + n.length !== a.length) throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.rank = ${e17 + n.length}, but shape.rank = ${a.length}`);
  for (let r = 1; r < n.length; ++r) {
    let s = n[r], i = a[a.length - n.length + r], o = a[i];
    if (s >= 0) if (o >= 0) {
      if (o !== s) throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.shape[${r + e17}] = ${s} but shape[${r + e17}] = ${o}`);
    } else a[i] = s;
  }
  return a;
}
function f4(e17) {
  let t = { FIRST_DIM_SIZE: er.FIRST_DIM_SIZE, VALUE_ROWIDS: er.VALUE_ROWIDS, ROW_LENGTHS: er.ROW_LENGTHS, ROW_SPLITS: er.ROW_SPLITS, ROW_LIMITS: er.ROW_LIMITS, ROW_STARTS: er.ROW_STARTS }, n = [];
  for (let a of e17) if (a in t) n.push(t[a]);
  else break;
  return n;
}
function g4(e17) {
  return e17.length === 0 ? 0 : e17[0] === er.FIRST_DIM_SIZE ? e17.length - 1 : e17.length;
}
function b4(e17, t) {
  if (e17 == null || t == null) return;
  let n = e17.length, a = t.length;
  if (n >= a) throw new Error(`defaultValue.shape=${e17} and ragged tensor flatValues.shape=${t}, are incompatible: defaultValue.rank = ${n} must be less than ragged tensor input flatValues.rank = ${a})`);
  for (let r = 0; r < Math.min(n, a - 1); ++r) {
    let s = e17[r], i = t[r + 1];
    if (s >= 0 && i >= 0 && s !== 1 && s !== i) throw new Error(`defaultValue.shape=${e17}, and ragged tensor input flatValues.shape=${t} are incompatible: defaultValue.shape[${r - e17.length}] = ${s} but ragged tensor input.flatValues.shape[${r - e17.length}] = ${i}`);
  }
}
var Jw = 30;
function y4(e17) {
  return e17 <= Jw ? e17 : Gh(e17, Math.floor(Math.sqrt(e17)));
}
function x4(e17, t, n) {
  let a = n * (typeof e17 == "number" ? e17 : e17[0]), r = t * (typeof e17 == "number" ? e17 : e17[1]);
  return [a, r];
}
function v4(e17, t, n, a = true) {
  let r = [];
  if (a) r = r.concat(t.slice(0)), r.push(e17[0] / n), r = r.concat(e17.slice(1));
  else {
    r = r.concat(e17[0]);
    let s = t.length;
    for (let i = 0; i < s; ++i) r = r.concat([e17[i + 1] / t[i], t[i]]);
    r = r.concat(e17.slice(s + 1));
  }
  return r;
}
function w4(e17, t, n = true) {
  let a = [];
  if (n) {
    a.push(t);
    for (let r = t + 1; r < e17; ++r) r <= 2 * t ? (a.push(r), a.push(r - (t + 1))) : a.push(r);
  } else {
    let r = [], s = [];
    for (let i = 1; i < e17; ++i) i >= t * 2 + 1 || i % 2 === 1 ? s.push(i) : r.push(i);
    a.push(...r), a.push(0), a.push(...s);
  }
  return a;
}
function k4(e17, t, n, a = true) {
  let r = [];
  a ? r.push(e17[0] / n) : r.push(e17[0] * n);
  for (let s = 1; s < e17.length; ++s) s <= t.length ? a ? r.push(t[s - 1] * e17[s]) : r.push(e17[s] / t[s - 1]) : r.push(e17[s]);
  return r;
}
function I4(e17, t) {
  let n = [0];
  for (let a = 0; a < t; ++a) n.push(e17[a][0]);
  return n;
}
function S4(e17, t, n) {
  let a = e17.slice(0, 1);
  for (let r = 0; r < n; ++r) a.push(e17[r + 1] - t[r][0] - t[r][1]);
  return a;
}
var n2 = 1.7580993408473768;
var a2 = 1.0507009873554805;
var N4 = 0.3275911;
var T4 = 0.254829592;
var C4 = -0.284496736;
var E4 = 1.421413741;
var _4 = -1.453152027;
var A4 = 1.061405429;
function F4(e17, t) {
  if (e17.length !== t.length) throw new Error(`Cannot merge real and imag arrays of different lengths. real:${e17.length}, imag: ${t.length}.`);
  let n = new Float32Array(e17.length * 2);
  for (let a = 0; a < n.length; a += 2) n[a] = e17[a / 2], n[a + 1] = t[a / 2];
  return n;
}
function $4(e17) {
  let t = new Float32Array(e17.length / 2), n = new Float32Array(e17.length / 2);
  for (let a = 0; a < e17.length; a += 2) t[a / 2] = e17[a], n[a / 2] = e17[a + 1];
  return { real: t, imag: n };
}
function D4(e17) {
  let t = Math.ceil(e17.length / 4), n = new Float32Array(t), a = new Float32Array(t);
  for (let r = 0; r < e17.length; r += 4) n[Math.floor(r / 4)] = e17[r], a[Math.floor(r / 4)] = e17[r + 1];
  return { real: n, imag: a };
}
function R4(e17) {
  let t = Math.floor(e17.length / 4), n = new Float32Array(t), a = new Float32Array(t);
  for (let r = 2; r < e17.length; r += 4) n[Math.floor(r / 4)] = e17[r], a[Math.floor(r / 4)] = e17[r + 1];
  return { real: n, imag: a };
}
function M4(e17, t) {
  let n = e17[t * 2], a = e17[t * 2 + 1];
  return { real: n, imag: a };
}
function O4(e17, t, n, a) {
  e17[a * 2] = t, e17[a * 2 + 1] = n;
}
function P4(e17, t) {
  let n = new Float32Array(e17 / 2), a = new Float32Array(e17 / 2);
  for (let r = 0; r < Math.ceil(e17 / 2); r++) {
    let s = (t ? 2 : -2) * Math.PI * (r / e17);
    n[r] = Math.cos(s), a[r] = Math.sin(s);
  }
  return { real: n, imag: a };
}
function L4(e17, t, n) {
  let a = (n ? 2 : -2) * Math.PI * (e17 / t), r = Math.cos(a), s = Math.sin(a);
  return { real: r, imag: s };
}
var ux = "->";
var z4 = /->/g;
var oI = ",";
var lI = "...";
function W4(e17, t) {
  e17 = e17.replace(/\s/g, "");
  let n = (e17.length - e17.replace(z4, "").length) / ux.length;
  if (n < 1) throw new Error("Equations without an arrow are not supported.");
  if (n > 1) throw new Error(`Equation must contain exactly one arrow ("${ux}").`);
  let [a, r] = e17.split(ux);
  A(a.indexOf(lI) === -1, () => `The ellipsis notation ("${lI}") is not supported yet.`);
  let s = a.split(oI), i = s.length;
  if (t !== i) throw new Error(`Expected ${i} input tensors, received ${t}`);
  if (i > 2) throw new Error("Support for more than 2 input tensors is not implemented yet.");
  let o = [];
  for (let c = 0; c < r.length; ++c) {
    let h = r[c];
    if (!s.some((m) => m.indexOf(h) !== -1)) throw new Error(`Output subscripts contain the label ${h} not present in the input subscripts.`);
    o.indexOf(h) === -1 && o.push(h);
  }
  for (let c = 0; c < a.length; ++c) {
    let h = a[c];
    o.indexOf(h) === -1 && h !== oI && o.push(h);
  }
  let l = new Array(s.length);
  for (let c = 0; c < i; ++c) {
    if (new Set(s[c].split("")).size !== s[c].length) throw new Error(`Found duplicate axes in input component ${s[c]}. Support for duplicate axes in input is not implemented yet.`);
    l[c] = [];
    for (let h = 0; h < s[c].length; ++h) l[c].push(o.indexOf(s[c][h]));
  }
  let u = o.length, p = r.length, d = [];
  for (let c = p; c < u; ++c) d.push(c);
  return { allDims: o, summedDims: d, idDims: l };
}
function B4(e17, t) {
  let n = new Array(e17);
  n.fill(-1);
  for (let r = 0; r < t.length; ++r) n[t[r]] = r;
  let a = [];
  for (let r = 0; r < e17; ++r) n[r] === -1 && a.push(r);
  return n = n.filter((r) => r !== -1), { permutationIndices: n, expandDims: a };
}
function V4(e17, t, n) {
  let a = new Array(e17);
  for (let r = 0; r < n.length; ++r) {
    let s = n[r].shape;
    for (let i = 0; i < t[r].length; ++i) a[t[r][i]] === void 0 ? a[t[r][i]] = s[i] : A(a[t[r][i]] === s[i], () => `Expected dimension ${a[t[r][i]]} at axis ${i} of input shaped ${JSON.stringify(s)}, but got dimension ${s[i]}`);
  }
}
function U4(e17, t) {
  let n = e17, a = [], r = 0;
  e17.length === 0 && n.push(-1), r = e17.length + 1;
  for (let i = 0; i < r; ++i) a.push([]);
  let s = [];
  for (let i = 0; i < n.length; ++i) {
    let o = n[i], l = H4(t, o);
    for (let u of l) s.indexOf(u) === -1 && (a[i].push(u), s.push(u));
  }
  return { path: n, steps: a };
}
function G4(e17) {
  return e17.every((t, n) => t === n);
}
function H4(e17, t) {
  let n = [];
  for (let a = 0; a < e17.length; ++a) (e17[a].length === 0 || e17[a].indexOf(t) !== -1 || t === -1) && n.push(a);
  return n;
}
function j4(e17, t, n = 0) {
  let a = [];
  if (typeof t == "number") A(e17.shape[n] % t === 0, () => "Number of splits must evenly divide the axis."), a = new Array(t).fill(e17.shape[n] / t);
  else {
    let r = t.reduce((i, o) => (o === -1 && (i += 1), i), 0);
    A(r <= 1, () => "There should be only one negative value in split array.");
    let s = t.indexOf(-1);
    if (s !== -1) {
      let i = t.reduce((o, l) => l > 0 ? o + l : o);
      t[s] = e17.shape[n] - i;
    }
    A(e17.shape[n] === t.reduce((i, o) => i + o), () => "The sum of sizes must match the size of the axis dimension."), a = t;
  }
  return a;
}
function q4(e17) {
  return `Received SparseTensor with denseShape[0] = 0 but
  indices.shape[0] = ${e17}`;
}
function K4(e17, t) {
  return `indices(${e17}, 0) is invalid: ${t} < 0`;
}
function X4(e17, t, n) {
  return `indices(${e17}, 0) is invalid: ${t} >= ${n}`;
}
function Y4(e17, t) {
  return `only one output dimension may be -1, not both ${e17} and ${t}`;
}
function Z4(e17, t) {
  return `size ${e17} must be non-negative, not ${t}`;
}
function J4() {
  return "reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero";
}
function Q4(e17, t) {
  let n = ot(e17), a = ot(t);
  return `Input to reshape is a SparseTensor with ${n}
  dense values, but the requested shape requires a multiple of ${a}. inputShape=${e17} outputShape= ${t}`;
}
function eV(e17, t) {
  let n = ot(e17), a = ot(t);
  return `Input to reshape is a tensor with ${n} dense values, but the requested shape has ${a}. inputShape=${e17} outputShape=${t}`;
}
function tV() {
  return "segment ids must be >= 0";
}
function nV() {
  return "segment ids are not increasing";
}
function aV(e17, t) {
  return `Segment id ${e17} out of range [0, ${t}), possibly because segmentIds input is not sorted.`;
}
function rV(e17, t, n) {
  return `Bad: indices[${e17}] == ${t} out of range [0, ${n})`;
}
var r2 = {};
_e(r2, { collectGatherOpShapeInfo: () => oV, computeOutShape: () => iV, segOpComputeOptimalWindowSize: () => sV });
function sV(e17, t) {
  let n = false, a;
  for (e17 <= Jw ? (a = e17, n = true) : a = Gh(e17, Math.floor(Math.sqrt(e17))); !n; ) a > t || a === e17 ? n = true : a = Gh(e17, a + 1);
  return a;
}
function iV(e17, t, n) {
  let a = [], r = e17.length;
  for (let s = 0; s < r; s++) s !== t ? a.push(e17[s]) : a.push(n);
  return a;
}
function oV(e17, t, n, a) {
  let r = t.shape.length, s = e17.shape.length;
  if (a !== 0 && (a < -r || a > r)) throw new Error(`Expect batchDims in the range of [-${r}, ${r}], but got ${a}`);
  if (a < 0 && (a += r), a > s) throw new Error(`batchDims (${a}) must be less than rank(x) (
    ${s}).`);
  if (n < a) throw new Error(`batchDims (${a}) must be less than or equal to axis (${n}).`);
  for (let d = 0; d < a; ++d) if (e17.shape[d] !== t.shape[d]) throw new Error(`x.shape[${d}]: ${e17.shape[d]} should be equal to indices.shape[${d}]: ${t.shape[d]}.`);
  let i = e17.shape[n], o = [], l = 1, u = 1, p = 1;
  for (let d = 0; d < a; ++d) o.push(e17.shape[d]), l *= e17.shape[d];
  for (let d = a; d < n; d++) o.push(e17.shape[d]), u *= e17.shape[d];
  for (let d = a; d < r; d++) o.push(t.shape[d]);
  for (let d = n + 1; d < s; d++) o.push(e17.shape[d]), p *= e17.shape[d];
  return { batchSize: l, sliceSize: p, outerSize: u, dimSize: i, outputShape: o };
}
function lV(e17) {
  try {
    return e17.map((t) => qh(t));
  } catch (t) {
    throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${t}`);
  }
}
function uV(e17) {
  return e17.map((t) => nd(t));
}
var mr = {};
_e(mr, { nonMaxSuppressionV3Impl: () => ST, nonMaxSuppressionV4Impl: () => NT, nonMaxSuppressionV5Impl: () => TT, whereImpl: () => hT });
TB();
var s2 = { kernelName: Yl, inputsToSave: ["x"], gradFunc: (e17, t) => {
  let [n] = t;
  return { x: () => z(e17, jo(re(n, "float32"), -1)) };
} };
var pV = { kernelName: Ni, inputsToSave: ["x"], gradFunc: (e17, t) => {
  let [n] = t;
  return { x: () => {
    let a = pt(re(n, "float32")), r = rn(pe(xe(1), a));
    return yt(he(e17, r));
  } };
} };
var cV = { kernelName: Ti, inputsToSave: ["x"], gradFunc: (e17, t) => {
  let [n] = t;
  return { x: () => {
    let a = rn(pe(pt(re(n, "float32")), 1));
    return he(e17, a);
  } };
} };
var dV = { kernelName: vs, inputsToSave: ["a", "b"], gradFunc: (e17, t) => {
  let [n, a] = t, r = ct(n.shape, a.shape);
  return { a: () => {
    let s = e17, i = Bt(n.shape, r);
    return i.length > 0 && (s = fe(s, i)), W(s, n.shape);
  }, b: () => {
    let s = e17, i = Bt(a.shape, r);
    return i.length > 0 && (s = fe(s, i)), W(s, a.shape);
  } };
} };
var hV = { kernelName: Ci, saveAllInputs: true, gradFunc: (e17, t) => {
  let n = {};
  return t.forEach((a, r) => {
    n[r] = () => e17.clone();
  }), n;
} };
var mV = { kernelName: Ql, inputsToSave: ["x"], gradFunc: (e17, t) => {
  let [n] = t;
  return { x: () => qe(n) };
} };
var fV = { kernelName: eu, inputsToSave: ["x"], gradFunc: (e17, t) => {
  let [n] = t;
  return { x: () => qe(n) };
} };
var gV = { kernelName: Ei, inputsToSave: ["x"], gradFunc: (e17, t) => {
  let [n] = t;
  return { x: () => he(e17, rn(pe(xe(1), pt(re(n, "float32"))))) };
} };
var bV = { kernelName: _i, inputsToSave: ["x"], gradFunc: (e17, t) => {
  let [n] = t;
  return { x: () => {
    let a = rn(X(xe(1), pt(re(n, "float32"))));
    return he(e17, a);
  } };
} };
var yV = { kernelName: $i, inputsToSave: ["a", "b"], gradFunc: (e17, t) => {
  let [n, a] = t, r = ct(n.shape, a.shape);
  return { a: () => {
    let s = X(pt(n), pt(a)), i = z(e17, he(a, s)), o = Bt(n.shape, r);
    return o.length > 0 && (i = fe(i, o)), W(i, n.shape);
  }, b: () => {
    let s = X(pt(n), pt(a)), i = yt(z(e17, he(n, s))), o = Bt(a.shape, r);
    return o.length > 0 && (i = fe(i, o)), W(i, a.shape);
  } };
} };
var xV = { kernelName: Ai, inputsToSave: ["x"], gradFunc: (e17, t) => {
  let [n] = t;
  return { x: () => he(e17, X(pt(re(n, "float32")), 1)) };
} };
var vV = { kernelName: Fi, inputsToSave: ["x"], gradFunc: (e17, t) => {
  let [n] = t;
  return { x: () => he(e17, pe(xe(1), pt(re(n, "float32")))) };
} };
function wV(e17, t, n, a, r, s) {
  let i = E(e17, "dy", "avgPool3dGrad"), o = E(t, "input", "avgPool3dGrad"), l = i, u = o, p = false;
  o.rank === 4 && (p = true, l = W(i, [1, i.shape[0], i.shape[1], i.shape[2], i.shape[3]]), u = W(o, [1, o.shape[0], o.shape[1], o.shape[2], o.shape[3]])), A(l.rank === 5, () => `Error in avgPool3dGrad: dy must be rank 5 but got rank ${l.rank}.`), A(u.rank === 5, () => `Error in avgPool3dGrad: input must be rank 5 but got rank ${u.rank}.`), Tn("avgPool3dGrad", r, s);
  let d = { dy: l, input: u }, c = { filterSize: n, strides: a, pad: r, dimRoundingMode: s }, h = P.runKernel(Rc, d, c);
  return p ? W(h, [h.shape[1], h.shape[2], h.shape[3], h.shape[4]]) : h;
}
var kV = L({ avgPool3dGrad_: wV });
var IV = { kernelName: tu, inputsToSave: ["x"], gradFunc: (e17, t, n) => {
  let [a] = t, { filterSize: r, strides: s, pad: i, dimRoundingMode: o } = n;
  return { x: () => kV(e17, a, r, s, i, o) };
} };
function SV(e17, t, n, a, r) {
  let s = E(e17, "dy", "avgPoolGrad"), i = E(t, "input", "avgPoolGrad");
  A(i.rank === s.rank, () => `Rank of input (${i.rank}) does not match rank of dy (${s.rank})`);
  let o = i, l = s, u = false;
  i.rank === 3 && (u = true, o = W(i, [1, i.shape[0], i.shape[1], i.shape[2]]), l = W(s, [1, s.shape[0], s.shape[1], s.shape[2]])), A(l.rank === 4, () => `Error in avgPoolGrad: dy must be rank 4 but got rank ${l.rank}.`), A(o.rank === 4, () => `Error in avgPoolGrad: input must be rank 4 but got rank ${o.rank}.`);
  let p = { dy: l, input: o }, d = { filterSize: n, strides: a, pad: r }, c = P.runKernel(Dc, p, d);
  return u ? W(c, [c.shape[1], c.shape[2], c.shape[3]]) : c;
}
var NV = L({ avgPoolGrad_: SV });
var TV = { kernelName: Di, inputsToSave: ["x"], gradFunc: (e17, t, n) => {
  let [a] = t, { filterSize: r, strides: s, pad: i } = n;
  return { x: () => NV(e17, a, r, s, i) };
} };
var CV = { kernelName: Ri, inputsToSave: ["a", "b"], gradFunc: (e17, t, n) => {
  let [a, r] = t, { transposeA: s, transposeB: i } = n;
  return !s && !i ? { a: () => $e(e17, r, false, true), b: () => $e(a, e17, true, false) } : !s && i ? { a: () => $e(e17, r, false, false), b: () => $e(e17, a, true, false) } : s && !i ? { a: () => $e(r, e17, false, true), b: () => $e(a, e17, false, false) } : { a: () => $e(r, e17, true, true), b: () => $e(e17, a, true, true) };
} };
var EV = { kernelName: nu, gradFunc: (e17, t, n) => {
  let { blockShape: a, crops: r } = n;
  return { x: () => md(e17, a, r) };
} };
var _V = { kernelName: HS, gradFunc: (e17, t, n) => {
  let a = n, r = a.inputShape, s = a.shape, i = Array.from(s);
  for (let l = r.length - 1; l >= 0; l--) if (r[l] === s[l]) i[l] = 1;
  else if (r[l] !== 1) throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${s}].`);
  let o = [];
  for (let l = 0; l < i.length; l++) i[l] > 1 && o.push(l);
  return { x: () => fe(e17, o, true) };
} };
var AV = { kernelName: Mi, gradFunc: (e17) => ({ x: () => e17.clone() }) };
var FV = { kernelName: Oi, gradFunc: (e17) => ({ x: () => qe(e17) }) };
var $V = { kernelName: ws, inputsToSave: ["x"], gradFunc: (e17, t, n) => {
  let [a] = t, { clipValueMin: r, clipValueMax: s } = n;
  return { x: () => nn(_a($r(a, r), Cs(a, s)), e17, qe(e17)) };
} };
var DV = { kernelName: Oc, inputsToSave: ["x"], gradFunc: s2.gradFunc };
var RV = { kernelName: su, saveAllInputs: true, gradFunc: (e17, t, n) => {
  let a = t.map((o) => o.shape), { axis: r } = n, s = Aa(r, t[0].shape)[0], i = a.map((o) => o[s]);
  return Ln(e17, i, s).map((o) => () => o);
} };
var MV = { kernelName: Pi, inputsToSave: ["x", "filter"], gradFunc: (e17, t, n) => {
  let [a, r] = t, { dilations: s, strides: i, pad: o, dataFormat: l } = n;
  return A(ps(s), () => `Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`), { x: () => nw(a.shape, e17, r, i, o, l), filter: () => zw(a, e17, r.shape, i, o, l) };
} };
var OV = { kernelName: Li, inputsToSave: ["dy", "filter"], gradFunc: (e17, t, n) => {
  let [a, r] = t, { strides: s, pad: i, dataFormat: o, dimRoundingMode: l } = n;
  return { dy: () => $t(e17, r, s, i, o, 1, l), filter: () => zw(e17, a, r.shape, s, i, o, l) };
} };
function PV(e17, t, n, a, r) {
  let s = e17;
  e17.rank === 4 && (s = W(e17, [1, e17.shape[0], e17.shape[1], e17.shape[2], e17.shape[3]]));
  let i = t;
  i.rank === 4 && (i = W(t, [1, t.shape[0], t.shape[1], t.shape[2], t.shape[3]])), A(s.rank === 5, () => `Error in conv3dDerFilter: input must be rank 5, but got shape ${s.shape}.`), A(i.rank === 5, () => `Error in conv3dDerFilter: dy must be rank 5, but got shape ${i.shape}.`), A(n.length === 5, () => `Error in conv3dDerFilter: filterShape must be length 5, but got ${n}.`), A(s.shape[4] === n[3], () => `Error in conv3dDerFilter: depth of input ${s.shape[4]}) must match input depth in filter (${n[3]}.`), A(i.shape[4] === n[4], () => `Error in conv3dDerFilter: depth of dy (${i.shape[4]}) must match output depth for filter (${n[4]}).`);
  let o = { x: s, dy: i }, l = { strides: a, pad: r, filterShape: n };
  return P.runKernel(iu, o, l);
}
var LV = L({ conv3DBackpropFilter_: PV });
var zV = { kernelName: zi, inputsToSave: ["x", "filter"], gradFunc: (e17, t, n) => {
  let { dilations: a, strides: r, pad: s } = n;
  A(ps(a), () => `Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`);
  let [i, o] = t;
  return { x: () => CN(i.shape, e17, o, r, s), filter: () => LV(i, e17, o.shape, r, s) };
} };
var WV = { kernelName: Wi, inputsToSave: ["x"], gradFunc: (e17, t) => {
  let [n] = t;
  return { x: () => z(yt(ef(re(n, "float32"))), e17) };
} };
var BV = { kernelName: Bi, inputsToSave: ["x"], gradFunc: (e17, t) => {
  let [n] = t;
  return { x: () => z(tf(re(n, "float32")), e17) };
} };
var VV = { kernelName: Vi, inputsToSave: ["x"], gradFunc: (e17, t, n) => {
  let [a] = t, { axis: r, exclusive: s, reverse: i } = n;
  return { x: () => {
    let o = DN([r], a.rank), l = Vm(e17, r, s, !i);
    return o != null && (l = De(l, o)), l;
  } };
} };
var UV = { kernelName: Ui, inputsToSave: ["x", "filter"], gradFunc: (e17, t, n) => {
  let { dilations: a, strides: r, pad: s, dimRoundingMode: i } = n, o = a == null ? [1, 1] : a;
  A(ps(o), () => `Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${o}'`);
  let [l, u] = t;
  return A(l.rank === 4, () => `Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${l.rank}.`), A(u.rank === 4, () => `Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${u.rank}.`), A(l.shape[3] === u.shape[2], () => `Error in gradient of depthwiseConv2d: number of input channels (${l.shape[3]}) must match the inChannels dimension in filter ${u.shape[2]}.`), A(dr(r, o), () => `Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${r} and dilations '${o}'.`), Tn("depthwiseConv2d", s, i), { x: () => wT(l.shape, e17, u, r, s, o, i), filter: () => vT(l, e17, u.shape, r, s, o, i) };
} };
var GV = { kernelName: Gi, inputsToSave: ["x", "filter"], gradFunc: (e17, t, n) => {
  let [a, r] = t, s = { x: a, filter: r, dy: e17 }, i = { x: a, filter: r, dy: e17 };
  return { x: () => P.runKernel(Dl, s, n), filter: () => P.runKernel(Rl, i, n) };
} };
var HV = { kernelName: ji, outputsToSave: [true], gradFunc: (e17, t) => {
  let [n] = t, a = { dy: e17, y: n };
  return { x: () => P.runKernel(cu, a) };
} };
var jV = { kernelName: qi, inputsToSave: ["x"], gradFunc: (e17, t) => {
  let [n] = t, a = z(dn(yt(pt(n))), 2 / Math.sqrt(Math.PI));
  return { x: () => z(e17, a) };
} };
var qV = { kernelName: Ki, outputsToSave: [true], gradFunc: (e17, t) => {
  let [n] = t;
  return { x: () => z(e17, n) };
} };
var KV = { kernelName: hu, inputsToSave: ["input"], gradFunc: (e17, t) => {
  let [n] = t;
  return { input: () => W(e17, n.shape) };
} };
var XV = { kernelName: Xi, inputsToSave: ["x"], gradFunc: (e17, t) => {
  let [n] = t;
  return { x: () => z(e17, dn(n)) };
} };
var YV = { kernelName: Yi, gradFunc: (e17) => ({ x: () => qe(e17) }) };
var ZV = { kernelName: Zi, inputsToSave: ["a", "b"], gradFunc: (e17, t) => {
  let [n, a] = t, r = ct(n.shape, a.shape);
  return { a: () => {
    let s = he(e17, re(a, "float32")), i = Bt(n.shape, r);
    return i.length > 0 ? W(fe(s, i), n.shape) : s;
  }, b: () => {
    let s = z(e17, re(n, "float32")), i = Bt(a.shape, r);
    i.length > 0 && (s = W(fe(s, i), a.shape));
    let o = pt(a);
    return yt(he(s, re(o, "float32")));
  } };
} };
var JV = { kernelName: Ji, inputsToSave: ["x", "mean", "variance", "scale"], gradFunc: (e17, t, n) => {
  let { varianceEpsilon: a } = n, [r, s, i, o] = t, l = o == null ? xe(1) : o, u = Bt(s.shape, r.shape), p = [];
  if (s.rank === 1) {
    for (let f = 0; f < r.shape.length - 1; ++f) p.push(r.shape[f]);
    p.push(1);
  }
  let d = pe(r, s), c = z(e17, l), h = Jm(X(i, xe(a))), m = z(z(z(h, h), h), xe(-0.5));
  return { x: () => s.rank === 1 ? W(z(z(e17, On(W(h, [1, 1, 1, s.shape[0]]), p)), l), r.shape) : W(z(z(e17, h), l), r.shape), mean: () => {
    let f = z(z(h, xe(-1)), c);
    return s.rank === 1 && (f = fe(f, u)), W(f, s.shape);
  }, variance: () => {
    let f = z(z(m, d), c);
    return s.rank === 1 && (f = fe(f, u)), W(f, s.shape);
  }, scale: () => {
    let f = z(d, h), g = z(e17, f);
    return s.rank === 1 && (g = fe(g, u)), W(g, s.shape);
  }, offset: () => {
    let f = e17;
    return s.rank === 1 && (f = fe(f, u)), W(f, s.shape);
  } };
} };
var QV = { kernelName: fu, inputsToSave: ["x", "indices"], gradFunc: (e17, t, n) => {
  let [a, r] = t, { axis: s, batchDims: i } = n, o = Aa(s, a.shape)[0], l = (u, p, d) => () => {
    let c = u.shape, h = p.size, m = c.slice(0, o), f = m.length, g = c.slice(s, c.length).slice(1), b = g.length, y = uI(0, f), x = uI(f + 1, f + 1 + b), v = pI([m, [h], g]), I = W(d, v), N = W(p, [h]), C = pI([[f], y, x]), _ = De(I, C), F = uf(_, N, u.shape[o]), D = pw(C);
    return F = De(F, D), F;
  };
  if (i === 1) {
    let u = a.shape[0], p = a.split(u, 0);
    return { x: () => At(p.map((d, c) => l(d, r.slice(c, 1), e17.slice(c, 1))())).reshape(a.shape), indices: () => r };
  } else return { x: l(a, r, e17), indices: () => r };
} };
function uI(e17, t) {
  let n = [];
  for (let a = e17; a < t; ++a) n.push(a);
  return n;
}
function pI(e17) {
  let t = [];
  for (let n = 0; n < e17.length; ++n) for (let a = 0; a < e17[n].length; ++a) t.push(e17[n][a]);
  return t;
}
var eU = { kernelName: Qi, inputsToSave: ["a", "b"], gradFunc: (e17, t) => {
  let [n, a] = t;
  return { a: () => qe(n), b: () => qe(a) };
} };
var tU = { kernelName: eo, gradFunc: (e17) => ({ x: () => re(e17, "float32") }) };
var nU = { kernelName: to, gradFunc: (e17) => ({ x: () => qe(e17) }) };
var aU = { kernelName: no, gradFunc: (e17) => ({ x: () => qe(e17) }) };
var rU = { kernelName: ao, gradFunc: (e17) => ({ x: () => qe(e17) }) };
var sU = { kernelName: ro, inputsToSave: ["x"], gradFunc: (e17, t, n) => {
  let [a] = t, { alpha: r } = n, s = Cn(a, 0);
  return { x: () => nn(s, e17, z(e17, r)) };
} };
var iU = { kernelName: io, inputsToSave: ["x"], gradFunc: (e17, t) => {
  let [n] = t;
  return { x: () => he(e17, X(n, 1)) };
} };
var oU = { kernelName: so, inputsToSave: ["x"], gradFunc: (e17, t) => {
  let [n] = t;
  return { x: () => he(e17, re(n, "float32")) };
} };
var lU = { kernelName: qS, inputsToSave: [], outputsToSave: [true], gradFunc: (e17, t, n) => {
  let [a] = t, { axis: r } = n;
  return { logits: () => {
    let s = dn(a);
    return pe(e17, z(fe(e17, r, true), s));
  } };
} };
function uU(e17, t, n, a = 5, r = 1, s = 1, i = 0.5) {
  let o = { x: e17, y: t, dy: n }, l = { depthRadius: a, bias: r, alpha: s, beta: i };
  return P.runKernel(Su, o, l);
}
var pU = L({ localResponseNormalizationBackprop_: uU });
var cU = { kernelName: oo, inputsToSave: ["x"], outputsToSave: [true], gradFunc: (e17, t, n) => {
  let [a, r] = t, { depthRadius: s, bias: i, alpha: o, beta: l } = n;
  return { x: () => pU(a, r, e17, s, i, o, l) };
} };
function i2(e17, t, n, a) {
  return t.rank < n.rank && (t = W(t, mi(t.shape, a))), e17.rank < n.rank && (e17 = W(e17, mi(e17.shape, a))), { x: () => z(e17, re(Jn(n, t), e17.dtype)) };
}
var cI = { kernelName: lo, inputsToSave: ["x"], outputsToSave: [true], gradFunc: (e17, t, n) => {
  let a = n, { reductionIndices: r } = a, s = t[0], i = t[1], o = Aa(r, s.shape), l = i2(e17, i, s, o);
  return { x: () => l.x() };
} };
var dU = { kernelName: uo, inputsToSave: ["a", "b"], gradFunc: (e17, t) => {
  let [n, a] = t;
  return { a: () => z(e17, re($r(n, a), "float32")), b: () => z(e17, re(Pl(n, a), "float32")) };
} };
function hU(e17, t, n, a, r, s, i) {
  let o = E(e17, "dy", "maxPool3dGrad"), l = E(t, "input", "maxPool3dGrad"), u = E(n, "output", "maxPool3dGrad"), p = o, d = l, c = u, h = false;
  l.rank === 4 && (h = true, p = W(o, [1, o.shape[0], o.shape[1], o.shape[2], o.shape[3]]), d = W(l, [1, l.shape[0], l.shape[1], l.shape[2], l.shape[3]]), c = W(u, [1, u.shape[0], u.shape[1], u.shape[2], u.shape[3]])), A(p.rank === 5, () => `Error in maxPool3dGrad: dy must be rank 5 but got rank ${p.rank}.`), A(d.rank === 5, () => `Error in maxPool3dGrad: input must be rank 5 but got rank ${d.rank}.`), A(c.rank === 5, () => `Error in maxPool3dGrad: output must be rank 5 but got rank ${c.rank}.`), Tn("maxPool3dGrad", s, i);
  let m = { dy: p, input: d, output: c }, f = { filterSize: a, strides: r, pad: s, dimRoundingMode: i }, g = P.runKernel(Bc, m, f);
  return h ? W(g, [g.shape[1], g.shape[2], g.shape[3], g.shape[4]]) : g;
}
var mU = L({ maxPool3dGrad_: hU });
var fU = { kernelName: Nu, inputsToSave: ["x"], outputsToSave: [true], gradFunc: (e17, t, n) => {
  let [a, r] = t, { filterSize: s, strides: i, pad: o, dimRoundingMode: l } = n;
  return { x: () => mU(e17, a, r, s, i, o, l) };
} };
function gU(e17, t, n, a, r, s, i) {
  let o = E(e17, "dy", "maxPoolGrad"), l = E(t, "input", "maxPoolGrad"), u = E(n, "output", "maxPoolGrad");
  A(l.rank === o.rank, () => `Rank of input (${l.rank}) does not match rank of dy (${o.rank})`), A(o.rank === 4, () => `Error in maxPoolGrad: dy must be rank 4 but got rank ${o.rank}.`), A(l.rank === 4, () => `Error in maxPoolGrad: input must be rank 4 but got rank ${l.rank}.`), Tn("maxPoolGrad", s, i);
  let p = { dy: o, input: l, output: u }, d = { filterSize: a, strides: r, pad: s, dimRoundingMode: i };
  return P.runKernel(Wc, p, d);
}
var bU = L({ maxPoolGrad_: gU });
var yU = { kernelName: po, inputsToSave: ["x"], outputsToSave: [true], gradFunc: (e17, t, n) => {
  let [a, r] = t, { filterSize: s, strides: i, pad: o } = n;
  return { x: () => bU(e17, a, r, s, i, o) };
} };
var xU = { kernelName: co, inputsToSave: ["x"], gradFunc: (e17, t, n) => {
  let [a] = t, { axis: r } = n, s = Aa(r, a.shape), i = $N(a.shape, s)[1], o = ot(i);
  return { x: () => {
    let l = a.shape.slice();
    s.forEach((p) => {
      l[p] = 1;
    });
    let u = W(e17, l);
    return he(z(u, Pn(a.shape, "float32")), o);
  } };
} };
var vU = { kernelName: ho, inputsToSave: ["x"], outputsToSave: [true], gradFunc: (e17, t, n) => {
  let a = n, { axis: r } = a, [s, i] = t, o = Aa(r, s.shape), l = i2(e17, i, s, o);
  return { x: () => l.x() };
} };
var wU = { kernelName: mo, inputsToSave: ["a", "b"], gradFunc: (e17, t) => {
  let [n, a] = t;
  return { a: () => z(e17, re(Cs(n, a), "float32")), b: () => z(e17, re(Cn(n, a), "float32")) };
} };
var kU = { kernelName: fo, inputsToSave: ["x"], gradFunc: (e17, t, n) => {
  let a = t[0], { paddings: r } = n, s = r.map((i) => i[0]);
  return { x: () => Ve(e17, s, a.shape) };
} };
var IU = { kernelName: go, inputsToSave: ["a", "b"], gradFunc: (e17, t) => {
  let [n, a] = t, r = ct(n.shape, a.shape);
  return { a: () => {
    let s = Bt(n.shape, r);
    return s.length > 0 ? W(fe(e17, s), n.shape) : e17;
  }, b: () => {
    let s = z(e17, yt(tp(he(n, a)))), i = Bt(a.shape, r);
    return i.length > 0 ? W(fe(s, i), a.shape) : s;
  } };
} };
var SU = { kernelName: bo, inputsToSave: ["a", "b"], gradFunc: (e17, t) => {
  let [n, a] = t, r = ct(n.shape, a.shape);
  return { a: () => {
    let s = z(e17, re(a, "float32")), i = Bt(n.shape, r);
    return i.length > 0 ? W(fe(s, i), n.shape) : s;
  }, b: () => {
    let s = z(e17, re(n, "float32")), i = Bt(a.shape, r);
    return i.length > 0 ? W(fe(s, i), a.shape) : s;
  } };
} };
var NU = { kernelName: Cu, gradFunc: (e17) => ({ x: () => yt(e17) }) };
var TU = { kernelName: yo, inputsToSave: ["indices"], gradFunc: (e17, t) => {
  let n = t[0];
  return { indices: () => It(n.shape, "float32") };
} };
var CU = { kernelName: $u, gradFunc: (e17) => ({ x: () => qe(e17) }) };
var EU = { kernelName: Du, saveAllInputs: true, gradFunc: (e17, t, n) => {
  let { axis: a } = n;
  return dt(e17, a).map((r) => () => r);
} };
var dI = { kernelName: xo, inputsToSave: ["x"], gradFunc: (e17, t, n) => {
  let a = t[0], { paddings: r } = n, s = r.map((i) => i[0]);
  return { x: () => Ve(e17, s, a.shape) };
} };
var _U = { kernelName: vo, inputsToSave: ["a", "b"], outputsToSave: [true], gradFunc: (e17, t) => {
  let [n, a, r] = t, s = n, i = a, o = ct(s.shape, i.shape);
  return { a: () => {
    let l = re(i, "float32"), u = z(e17, z(l, ur(s, pe(l, xe(1))))), p = Bt(s.shape, o);
    return p.length > 0 && (u = fe(u, p)), W(u, s.shape);
  }, b: () => {
    let l = Cn(s, 0), u = nn(l, Qn(s), qe(s)), p = z(e17, z(r, u)), d = Bt(i.shape, o);
    return d.length > 0 && (p = fe(p, d)), W(p, i.shape);
  } };
} };
var AU = { kernelName: wo, inputsToSave: ["x", "alpha"], gradFunc: (e17, t) => {
  let [n, a] = t, r = Cn(n, 0);
  return { x: () => nn(r, e17, z(e17, a)), alpha: () => {
    let s = nn(r, qe(e17), z(e17, n)), i = Bt(a.shape, e17.shape);
    return i.length > 0 && (s = fe(s, i)), W(s, a.shape);
  } };
} };
function FU(e17, t, n) {
  let a = e17.shape.slice();
  a[n] = 1;
  let r = W(t, a), s = wc(e17, n, true, false), i = wc(e17, n, true, true), o = z(s, i);
  return z(r, o);
}
function $U(e17, t, n) {
  let a = e17.shape.length, r = a - n.length, s = T.getAxesPermutation(n, a), i = e17;
  s != null && (i = De(e17, s));
  let o = i.shape.slice(), l = o.splice(a - n.length, n.length).reduce((d, c) => d * c, 1);
  o.push(l);
  let u = i.reshape(o), p = FU(u, t, r);
  if (p = p.reshape(i.shape), s != null) {
    let d = T.getUndoAxesPermutation(s);
    p = De(p, d);
  }
  return p;
}
var DU = { kernelName: ko, inputsToSave: ["x"], gradFunc: (e17, t, n) => {
  let [a] = t, { axis: r } = n, s = [];
  return r == null ? s = a.shape.map((i, o) => o) : typeof r == "number" ? s = [r] : s = r, { x: () => $U(a, e17, s) };
} };
var RU = { kernelName: Hi, inputsToSave: ["a", "b"], gradFunc: (e17, t) => {
  let [n, a] = t, r = ct(n.shape, a.shape);
  return { a: () => {
    let s = he(e17, re(a, "float32")), i = Bt(n.shape, r);
    return i.length > 0 ? W(fe(s, i), n.shape) : s;
  }, b: () => {
    let s = z(e17, re(n, "float32")), i = Bt(a.shape, r);
    i.length > 0 && (s = W(fe(s, i), a.shape));
    let o = pt(a);
    return yt(he(s, re(o, "float32")));
  } };
} };
var MU = { kernelName: Io, inputsToSave: ["x"], gradFunc: (e17, t) => {
  let [n] = t;
  return { x: () => he(e17, yt(pt(n))) };
} };
var OU = { kernelName: Co, inputsToSave: ["x"], gradFunc: (e17, t) => {
  let [n] = t, a = z(Cs(n, 6), jo(n));
  return { x: () => z(e17, re(a, "float32")) };
} };
var PU = { kernelName: So, inputsToSave: ["x"], gradFunc: (e17, t) => {
  let [n] = t;
  return { x: () => z(e17, re(jo(n), "float32")) };
} };
var LU = { kernelName: Ru, inputsToSave: ["x"], gradFunc: (e17, t) => {
  let [n] = t;
  return { x: () => W(e17, n.shape) };
} };
var zU = { kernelName: To, inputsToSave: ["images"], gradFunc: (e17, t, n) => {
  let [a] = t, r = { dy: e17, images: a };
  return { images: () => P.runKernel(Ou, r, n) };
} };
var WU = { kernelName: No, inputsToSave: ["images"], gradFunc: (e17, t, n) => {
  let [a] = t, r = { dy: e17, images: a };
  return { images: () => P.runKernel(Mu, r, n) };
} };
var BU = { kernelName: Eo, gradFunc: (e17, t, n) => {
  let { dims: a } = n, r = Aa(a, e17.shape);
  return { x: () => ba(e17, r) };
} };
var VU = { kernelName: _o, gradFunc: (e17) => ({ x: () => qe(e17) }) };
var UU = { kernelName: Ao, inputsToSave: ["x"], gradFunc: (e17, t) => {
  let [n] = t;
  return { x: () => yt(he(e17, z(ur(n, 1.5), 2))) };
} };
var GU = { kernelName: Wu, inputsToSave: ["condition"], gradFunc: (e17, t) => {
  let [n] = t;
  return { condition: () => re(qe(n), "float32"), t: () => z(e17, re(n, e17.dtype)), e: () => z(e17, re(dd(n), e17.dtype)) };
} };
var HU = { kernelName: Fo, inputsToSave: ["x"], gradFunc: (e17, t) => {
  let [n] = t;
  return { x: () => {
    let a = Cn(n, xe(0)), r = xe(n2), s = xe(a2), i = z(e17, s), o = z(z(e17, r), dn(re(n, "float32")));
    return nn(a, i, o);
  } };
} };
var jU = { kernelName: Mo, outputsToSave: [true], gradFunc: (e17, t) => {
  let [n] = t;
  return { x: () => z(e17, z(n, pe(xe(1), n))) };
} };
var qU = { kernelName: Ro, gradFunc: (e17) => ({ x: () => qe(e17) }) };
var KU = { kernelName: $o, inputsToSave: ["x"], gradFunc: (e17, t) => {
  let [n] = t;
  return { x: () => z(od(re(n, "float32")), e17) };
} };
var XU = { kernelName: Do, inputsToSave: ["x"], gradFunc: (e17, t) => {
  let [n] = t;
  return { x: () => z(Bm(re(n, "float32")), e17) };
} };
var YU = { kernelName: Bu, inputsToSave: ["x"], gradFunc: (e17, t, n) => {
  let [a] = t, { begin: r, size: s } = n, i = a.shape, [o, l] = e2(a, r, s), u = [];
  for (let p = 0; p < e17.rank; p++) u.push([o[p], i[p] - o[p] - l[p]]);
  return { x: () => xa(e17, u) };
} };
var ZU = { kernelName: zo, outputsToSave: [true], gradFunc: (e17, t, n) => {
  let [a] = t, { dim: r } = n, s = true, i = z(e17, a);
  return { logits: () => pe(i, z(fe(i, [r], s), a)) };
} };
var JU = { kernelName: Oo, inputsToSave: ["x"], gradFunc: (e17, t) => {
  let [n] = t;
  return { x: () => z(e17, ha(n)) };
} };
var hI = { kernelName: Vu, gradFunc: (e17, t, n) => {
  let { blockShape: a, paddings: r } = n;
  return { x: () => id(e17, a, r) };
} };
var mI = { kernelName: Uu, gradFunc: (e17, t, n) => {
  let { axis: a } = n;
  return { x: () => et(e17, a) };
} };
var QU = { kernelName: Po, inputsToSave: ["x"], gradFunc: (e17, t) => {
  let [n] = t;
  return { x: () => he(e17, z(rn(re(n, "float32")), 2)) };
} };
var eG = { kernelName: qc, inputsToSave: ["x"], gradFunc: (e17, t) => {
  let [n] = t;
  return { x: () => z(e17, z(re(n, "float32"), 2)) };
} };
var tG = { kernelName: Wo, inputsToSave: ["a", "b"], gradFunc: (e17, t) => {
  let [n, a] = t, r = xe(2);
  return { a: () => z(e17, z(r, pe(n, a))), b: () => z(e17, z(r, pe(a, n))) };
} };
var nG = { kernelName: Is, gradFunc: (e17) => ({ x: () => qe(e17) }) };
var aG = { kernelName: Bo, inputsToSave: ["a", "b"], gradFunc: (e17, t) => {
  let [n, a] = t, r = ct(n.shape, a.shape);
  return { a: () => {
    let s = e17, i = Bt(n.shape, r);
    return i.length > 0 && (s = fe(s, i)), W(s, n.shape);
  }, b: () => {
    let s = e17, i = Bt(a.shape, r);
    return i.length > 0 && (s = fe(s, i)), W(yt(s), a.shape);
  } };
} };
var rG = { kernelName: Lo, inputsToSave: ["x"], gradFunc: (e17, t, n) => {
  let [a] = t, r = a.shape.slice(), { axis: s } = n;
  Aa(s, a.shape).forEach((l) => {
    r[l] = 1;
  });
  let i = W(e17, r), o = z(i, Pn(a.shape, "float32"));
  return { x: () => o };
} };
var sG = { kernelName: Vo, inputsToSave: ["x"], gradFunc: (e17, t) => {
  let [n] = t;
  return { x: () => he(e17, pt(od(n))) };
} };
var iG = { kernelName: Uo, outputsToSave: [true], gradFunc: (e17, t) => {
  let [n] = t;
  return { x: () => z(pe(xe(1), pt(n)), e17) };
} };
var oG = { kernelName: ks, inputsToSave: ["x"], gradFunc: (e17, t, n) => {
  let [a] = t, { reps: r } = n;
  return { x: () => {
    let s = qe(a);
    if (a.rank === 1) for (let i = 0; i < r[0]; ++i) s = X(s, Ve(e17, [i * a.shape[0]], [a.shape[0]]));
    else if (a.rank === 2) for (let i = 0; i < r[0]; ++i) for (let o = 0; o < r[1]; ++o) s = X(s, Ve(e17, [i * a.shape[0], o * a.shape[1]], [a.shape[0], a.shape[1]]));
    else if (a.rank === 3) for (let i = 0; i < r[0]; ++i) for (let o = 0; o < r[1]; ++o) for (let l = 0; l < r[2]; ++l) s = X(s, Ve(e17, [i * a.shape[0], o * a.shape[1], l * a.shape[2]], [a.shape[0], a.shape[1], a.shape[2]]));
    else if (a.rank === 4) for (let i = 0; i < r[0]; ++i) for (let o = 0; o < r[1]; ++o) for (let l = 0; l < r[2]; ++l) for (let u = 0; u < r[3]; ++u) s = X(s, Ve(e17, [i * a.shape[0], o * a.shape[1], l * a.shape[2], u * a.shape[3]], [a.shape[0], a.shape[1], a.shape[2], a.shape[3]]));
    else throw new Error(`Gradient for tile operation is not implemented for rank-${a.rank} tensors yet.`);
    return s;
  } };
} };
var lG = { kernelName: Cr, gradFunc: (e17, t, n) => {
  let a = n, { perm: r } = a, s = pw(r);
  return { x: () => De(e17, s) };
} };
var uG = { kernelName: Xu, gradFunc: (e17, t, n) => {
  let a = n, { axis: r } = a;
  return { value: () => At(e17, r) };
} };
var pG = { kernelName: Qc, inputsToSave: ["segmentIds"], gradFunc: (e17, t) => {
  let [n] = t;
  return { x: () => cG(e17, n) };
} };
function cG(e17, t) {
  let n = hr(t, qe(t)), a = np(e17, n), r = $r(t, xe(0, "int32")), s = a.rank - r.rank;
  for (let o = 0; o < s; ++o) r = Gt(r, o + 1);
  r = _a(r, Pn(a.shape, "bool"));
  let i = qe(a);
  return nn(r, a, i);
}
var dG = { kernelName: Yu, gradFunc: (e17) => ({ x: () => qe(e17) }) };
var hG = [s2, pV, cV, dV, hV, mV, fV, gV, bV, yV, xV, vV, IV, TV, CV, EV, _V, AV, FV, $V, DV, RV, OV, MV, zV, WV, BV, VV, UV, GV, RU, HV, jV, qV, KV, XV, ZV, YV, JV, QV, eU, tU, nU, aU, rU, sU, iU, oU, lU, cU, cI, cI, dU, fU, yU, xU, vU, wU, kU, IU, SU, NU, TU, CU, EU, dI, dI, _U, AU, DU, MU, OU, PU, LU, zU, WU, BU, VU, UU, GU, HU, jU, qU, KU, XU, YU, ZU, JU, hI, hI, mI, mI, QU, tG, eG, nG, aG, rG, sG, iG, oG, lG, uG, pG, dG];
for (let e17 of hG) KS(e17);
Q().prototype.abs = function() {
  return this.throwIfDisposed(), Lt(this);
};
Q().prototype.acos = function() {
  return this.throwIfDisposed(), Pv(this);
};
Q().prototype.acosh = function() {
  return this.throwIfDisposed(), Lv(this);
};
Q().prototype.add = function(e17) {
  return this.throwIfDisposed(), X(this, e17);
};
Q().prototype.all = function(e17, t) {
  return this.throwIfDisposed(), Lm(this, e17, t);
};
Q().prototype.any = function(e17, t) {
  return this.throwIfDisposed(), yc(this, e17, t);
};
Q().prototype.argMax = function(e17) {
  return this.throwIfDisposed(), di(this, e17);
};
Q().prototype.argMin = function(e17) {
  return this.throwIfDisposed(), zv(this, e17);
};
Q().prototype.asScalar = function() {
  return this.throwIfDisposed(), A(this.size === 1, () => "The array must have only 1 element."), W(this, []);
};
Q().prototype.asType = function(e17) {
  return this.throwIfDisposed(), re(this, e17);
};
Q().prototype.as1D = function() {
  return this.throwIfDisposed(), W(this, [this.size]);
};
Q().prototype.as2D = function(e17, t) {
  return this.throwIfDisposed(), W(this, [e17, t]);
};
Q().prototype.as3D = function(e17, t, n) {
  return this.throwIfDisposed(), W(this, [e17, t, n]);
};
Q().prototype.as4D = function(e17, t, n, a) {
  return this.throwIfDisposed(), W(this, [e17, t, n, a]);
};
Q().prototype.as5D = function(e17, t, n, a, r) {
  return this.throwIfDisposed(), W(this, [e17, t, n, a, r]);
};
Q().prototype.asin = function() {
  return this.throwIfDisposed(), Wv(this);
};
Q().prototype.asinh = function() {
  return this.throwIfDisposed(), Bv(this);
};
Q().prototype.atan = function() {
  return this.throwIfDisposed(), Vv(this);
};
Q().prototype.atan2 = function(e17) {
  return this.throwIfDisposed(), Uv(this, e17);
};
Q().prototype.atanh = function() {
  return this.throwIfDisposed(), Gv(this);
};
Q().prototype.avgPool = function(e17, t, n, a) {
  return this.throwIfDisposed(), ya(this, e17, t, n, a);
};
Q().prototype.batchToSpaceND = function(e17, t) {
  return this.throwIfDisposed(), id(this, e17, t);
};
Q().prototype.batchNorm = function(e17, t, n, a, r) {
  return this.throwIfDisposed(), Ns(this, e17, t, n, a, r);
};
Q().prototype.broadcastTo = function(e17) {
  return this.throwIfDisposed(), ai(this, e17);
};
Q().prototype.cast = function(e17) {
  return this.throwIfDisposed(), re(this, e17);
};
Q().prototype.ceil = function() {
  return this.throwIfDisposed(), Zv(this);
};
Q().prototype.clipByValue = function(e17, t) {
  return this.throwIfDisposed(), an(this, e17, t);
};
Q().prototype.concat = function(e17, t) {
  return this.throwIfDisposed(), e17 instanceof Ce && (e17 = [e17]), et([this, ...e17], t);
};
Q().prototype.conv1d = function(e17, t, n, a, r, s) {
  return this.throwIfDisposed(), zm(this, e17, t, n, a, r, s);
};
Q().prototype.conv2dTranspose = function(e17, t, n, a, r) {
  return this.throwIfDisposed(), Wm(this, e17, t, n, a, r);
};
Q().prototype.conv2d = function(e17, t, n, a, r, s) {
  return this.throwIfDisposed(), $t(this, e17, t, n, a, r, s);
};
Q().prototype.cos = function() {
  return this.throwIfDisposed(), od(this);
};
Q().prototype.cosh = function() {
  return this.throwIfDisposed(), Bm(this);
};
Q().prototype.cumprod = function(e17, t, n) {
  return this.throwIfDisposed(), wc(this, e17, t, n);
};
Q().prototype.cumsum = function(e17, t, n) {
  return this.throwIfDisposed(), Vm(this, e17, t, n);
};
Q().prototype.depthToSpace = function(e17, t) {
  return this.throwIfDisposed(), sw(this, e17, t);
};
Q().prototype.depthwiseConv2d = function(e17, t, n, a, r, s) {
  return this.throwIfDisposed(), Ts(this, e17, t, n, a, r, s);
};
Q().prototype.dilation2d = function(e17, t, n, a, r) {
  return this.throwIfDisposed(), iw(this, e17, t, n, a, r);
};
Q().prototype.divNoNan = function(e17) {
  return this.throwIfDisposed(), ow(this, e17);
};
Q().prototype.div = function(e17) {
  return this.throwIfDisposed(), he(this, e17);
};
Q().prototype.dot = function(e17) {
  return this.throwIfDisposed(), lw(this, e17);
};
Q().prototype.elu = function() {
  return this.throwIfDisposed(), Qu(this);
};
Q().prototype.equal = function(e17) {
  return this.throwIfDisposed(), Jn(this, e17);
};
Q().prototype.erf = function() {
  return this.throwIfDisposed(), Um(this);
};
Q().prototype.euclideanNorm = function(e17, t) {
  return this.throwIfDisposed(), cw(this, e17, t);
};
Q().prototype.exp = function() {
  return this.throwIfDisposed(), dn(this);
};
Q().prototype.expandDims = function(e17) {
  return this.throwIfDisposed(), Gt(this, e17);
};
Q().prototype.expm1 = function() {
  return this.throwIfDisposed(), dw(this);
};
Q().prototype.fft = function() {
  return this.throwIfDisposed(), bd(this);
};
Q().prototype.flatten = function() {
  return this.throwIfDisposed(), W(this, [this.size]);
};
Q().prototype.floor = function() {
  return this.throwIfDisposed(), tp(this);
};
Q().prototype.floorDiv = function(e17) {
  return this.throwIfDisposed(), Pm(this, e17);
};
Q().prototype.gather = function(e17, t, n) {
  return this.throwIfDisposed(), np(this, e17, t, n);
};
Q().prototype.greaterEqual = function(e17) {
  return this.throwIfDisposed(), $r(this, e17);
};
Q().prototype.greater = function(e17) {
  return this.throwIfDisposed(), Cn(this, e17);
};
Q().prototype.ifft = function() {
  return this.throwIfDisposed(), Bl(this);
};
Q().prototype.irfft = function() {
  return this.throwIfDisposed(), af(this);
};
Q().prototype.isFinite = function() {
  return this.throwIfDisposed(), hw(this);
};
Q().prototype.isInf = function() {
  return this.throwIfDisposed(), mw(this);
};
Q().prototype.isNaN = function() {
  return this.throwIfDisposed(), fw(this);
};
Q().prototype.leakyRelu = function(e17) {
  return this.throwIfDisposed(), ud(this, e17);
};
Q().prototype.lessEqual = function(e17) {
  return this.throwIfDisposed(), Cs(this, e17);
};
Q().prototype.less = function(e17) {
  return this.throwIfDisposed(), Pl(this, e17);
};
Q().prototype.localResponseNormalization = function(e17, t, n, a) {
  return this.throwIfDisposed(), gw(this, e17, t, n, a);
};
Q().prototype.logSigmoid = function() {
  return this.throwIfDisposed(), bw(this);
};
Q().prototype.logSoftmax = function(e17) {
  return this.throwIfDisposed(), jm(this, e17);
};
Q().prototype.logSumExp = function(e17, t) {
  return this.throwIfDisposed(), cd(this, e17, t);
};
Q().prototype.log = function() {
  return this.throwIfDisposed(), Qn(this);
};
Q().prototype.log1p = function() {
  return this.throwIfDisposed(), pd(this);
};
Q().prototype.logicalAnd = function(e17) {
  return this.throwIfDisposed(), _a(this, e17);
};
Q().prototype.logicalNot = function() {
  return this.throwIfDisposed(), dd(this);
};
Q().prototype.logicalOr = function(e17) {
  return this.throwIfDisposed(), qm(this, e17);
};
Q().prototype.logicalXor = function(e17) {
  return this.throwIfDisposed(), yw(this, e17);
};
Q().prototype.matMul = function(e17, t, n) {
  return this.throwIfDisposed(), $e(this, e17, t, n);
};
Q().prototype.maxPool = function(e17, t, n, a) {
  return this.throwIfDisposed(), Dt(this, e17, t, n, a);
};
Q().prototype.max = function(e17, t) {
  return this.throwIfDisposed(), ma(this, e17, t);
};
Q().prototype.maximum = function(e17) {
  return this.throwIfDisposed(), hr(this, e17);
};
Q().prototype.mean = function(e17, t) {
  return this.throwIfDisposed(), Ct(this, e17, t);
};
Q().prototype.min = function(e17, t) {
  return this.throwIfDisposed(), Ol(this, e17, t);
};
Q().prototype.minimum = function(e17) {
  return this.throwIfDisposed(), ds(this, e17);
};
Q().prototype.mirrorPad = function(e17, t) {
  return this.throwIfDisposed(), vw(this, e17, t);
};
Q().prototype.mod = function(e17) {
  return this.throwIfDisposed(), ww(this, e17);
};
Q().prototype.mul = function(e17) {
  return this.throwIfDisposed(), z(this, e17);
};
Q().prototype.neg = function() {
  return this.throwIfDisposed(), yt(this);
};
Q().prototype.norm = function(e17, t, n) {
  return this.throwIfDisposed(), ep(this, e17, t, n);
};
Q().prototype.notEqual = function(e17) {
  return this.throwIfDisposed(), fi(this, e17);
};
Q().prototype.oneHot = function(e17, t = 1, n = 0) {
  return this.throwIfDisposed(), Ll(this, e17, t, n);
};
Q().prototype.onesLike = function() {
  return this.throwIfDisposed(), ea(this);
};
Q().prototype.pad = function(e17, t) {
  return this.throwIfDisposed(), xa(this, e17, t);
};
Q().prototype.pool = function(e17, t, n, a, r, s) {
  return this.throwIfDisposed(), kw(this, e17, t, n, a, r, s);
};
Q().prototype.pow = function(e17) {
  return this.throwIfDisposed(), ur(this, e17);
};
Q().prototype.prelu = function(e17) {
  return this.throwIfDisposed(), fd(this, e17);
};
Q().prototype.prod = function(e17, t) {
  return this.throwIfDisposed(), Iw(this, e17, t);
};
Q().prototype.reciprocal = function() {
  return this.throwIfDisposed(), Ew(this);
};
Q().prototype.relu = function() {
  return this.throwIfDisposed(), Ke(this);
};
Q().prototype.relu6 = function() {
  return this.throwIfDisposed(), Ym(this);
};
Q().prototype.reshapeAs = function(e17) {
  return this.throwIfDisposed(), W(this, e17.shape);
};
Q().prototype.reshape = function(e17) {
  return this.throwIfDisposed(), W(this, e17);
};
Q().prototype.resizeBilinear = function(e17, t, n) {
  return this.throwIfDisposed(), CT(this, e17, t, n);
};
Q().prototype.resizeNearestNeighbor = function(e17, t, n) {
  return this.throwIfDisposed(), ET(this, e17, t, n);
};
Q().prototype.reverse = function(e17) {
  return this.throwIfDisposed(), ba(this, e17);
};
Q().prototype.rfft = function() {
  return this.throwIfDisposed(), yd(this);
};
Q().prototype.round = function() {
  return this.throwIfDisposed(), Zm(this);
};
Q().prototype.rsqrt = function() {
  return this.throwIfDisposed(), Jm(this);
};
Q().prototype.selu = function() {
  return this.throwIfDisposed(), Qm(this);
};
Q().prototype.separableConv2d = function(e17, t, n, a, r, s) {
  return this.throwIfDisposed(), _s(this, e17, t, n, a, r, s);
};
Q().prototype.sigmoid = function() {
  return this.throwIfDisposed(), ha(this);
};
Q().prototype.sign = function() {
  return this.throwIfDisposed(), _w(this);
};
Q().prototype.sin = function() {
  return this.throwIfDisposed(), ef(this);
};
Q().prototype.sinh = function() {
  return this.throwIfDisposed(), tf(this);
};
Q().prototype.slice = function(e17, t) {
  return this.throwIfDisposed(), Ve(this, e17, t);
};
Q().prototype.softmax = function(e17) {
  return this.throwIfDisposed(), qa(this, e17);
};
Q().prototype.softplus = function() {
  return this.throwIfDisposed(), Go(this);
};
Q().prototype.spaceToBatchND = function(e17, t) {
  return this.throwIfDisposed(), md(this, e17, t);
};
Q().prototype.split = function(e17, t) {
  return this.throwIfDisposed(), Ln(this, e17, t);
};
Q().prototype.sqrt = function() {
  return this.throwIfDisposed(), rn(this);
};
Q().prototype.square = function() {
  return this.throwIfDisposed(), pt(this);
};
Q().prototype.squaredDifference = function(e17) {
  return this.throwIfDisposed(), rf(this, e17);
};
Q().prototype.squeeze = function(e17) {
  return this.throwIfDisposed(), As(this, e17);
};
Q().prototype.stack = function(e17, t) {
  this.throwIfDisposed();
  let n = e17 instanceof Ce ? [this, e17] : [this, ...e17];
  return At(n, t);
};
Q().prototype.step = function(e17) {
  return this.throwIfDisposed(), jo(this, e17);
};
Q().prototype.stridedSlice = function(e17, t, n, a, r, s, i, o) {
  return this.throwIfDisposed(), Aw(this, e17, t, n, a, r, s, i, o);
};
Q().prototype.sub = function(e17) {
  return this.throwIfDisposed(), pe(this, e17);
};
Q().prototype.sum = function(e17, t) {
  return this.throwIfDisposed(), fe(this, e17, t);
};
Q().prototype.tan = function() {
  return this.throwIfDisposed(), Fw(this);
};
Q().prototype.tanh = function() {
  return this.throwIfDisposed(), cs(this);
};
Q().prototype.tile = function(e17) {
  return this.throwIfDisposed(), On(this, e17);
};
Q().prototype.toBool = function() {
  return this.throwIfDisposed(), re(this, "bool");
};
Q().prototype.toFloat = function() {
  return this.throwIfDisposed(), re(this, "float32");
};
Q().prototype.toInt = function() {
  return this.throwIfDisposed(), re(this, "int32");
};
Q().prototype.topk = function(e17, t) {
  return this.throwIfDisposed(), Dw(this, e17, t);
};
Q().prototype.transpose = function(e17) {
  return this.throwIfDisposed(), De(this, e17);
};
Q().prototype.unique = function(e17) {
  return this.throwIfDisposed(), Rw(this, e17);
};
Q().prototype.unsortedSegmentSum = function(e17, t) {
  return this.throwIfDisposed(), uf(this, e17, t);
};
Q().prototype.unstack = function(e17) {
  return this.throwIfDisposed(), dt(this, e17);
};
Q().prototype.where = function(e17, t) {
  return this.throwIfDisposed(), nn(e17, this, t);
};
Q().prototype.zerosLike = function() {
  return this.throwIfDisposed(), qe(this);
};
var Xr = class o2 extends Error {
  constructor(t) {
    super(t), Object.setPrototypeOf(this, o2.prototype);
  }
};
var ar = class l2 extends Error {
  constructor(t) {
    super(t), Object.setPrototypeOf(this, l2.prototype);
  }
};
var V = class u2 extends Error {
  constructor(t) {
    super(t), Object.setPrototypeOf(this, u2.prototype);
  }
};
var ze = class p2 extends Error {
  constructor(t) {
    super(t), Object.setPrototypeOf(this, p2.prototype);
  }
};
var mG = class c2 extends Error {
  constructor(t) {
    super(t), Object.setPrototypeOf(this, c2.prototype);
  }
};
var d2 = class {
  constructor(e17) {
    this.maxEntries = e17 || 100, this.cache = /* @__PURE__ */ new Map();
  }
  get(e17) {
    let t;
    return this.cache.has(e17) && (t = this.cache.get(e17), this.cache.delete(e17), this.cache.set(e17, t)), t;
  }
  put(e17, t) {
    if (this.cache.has(e17)) this.cache.delete(e17);
    else if (this.cache.size >= this.maxEntries) {
      let n = this.cache.keys().next().value;
      this.cache.delete(n);
    }
    this.cache.set(e17, t);
  }
  getMaxEntries() {
    return this.maxEntries;
  }
  setMaxEntries(e17) {
    if (e17 < 0) throw new Error(`The maxEntries of LRU caches must be at least 0, but got ${e17}.`);
    if (this.maxEntries > e17) for (let t = 0; t < this.maxEntries - e17; t++) {
      let n = this.cache.keys().next().value;
      this.cache.delete(n);
    }
    this.maxEntries = e17;
  }
};
function bi(e17, t) {
  if (Array.isArray(e17)) {
    let n = [];
    for (let a = 0; a < t; a++) n = n.concat(e17);
    return n;
  } else {
    let n = new Array(t);
    return n.fill(e17), n;
  }
}
function tr(e17, t) {
  if (!e17) throw new mG(t);
}
function fI(e17, t) {
  let n = 0;
  for (let a of e17) a === t && n++;
  return n;
}
function Mn(e17) {
  return e17.length === 1 ? e17[0] : e17;
}
function it(e17) {
  return Array.isArray(e17) ? e17 : [e17];
}
function Ir(e17) {
  let t = e17.replace(/(.)([A-Z][a-z0-9]+)/g, "$1_$2").replace(/([a-z])([A-Z])/g, "$1_$2").toLowerCase();
  return t[0] !== "_" ? t : "private" + t;
}
function Js(e17) {
  return e17.length <= 1 || e17.indexOf("_") === -1 ? e17 : e17.replace(/[_]+(\w|$)/g, (t, n) => n.toUpperCase());
}
var Sa = {};
function Qw(e17) {
  if (e17 == null) return null;
  let t = {};
  return t.className = e17.getClassName(), t.config = e17.getConfig(), t;
}
function zx(e17) {
  if (!(e17 == null || typeof e17 != "object")) if (Array.isArray(e17)) e17.forEach((t) => zx(t));
  else {
    let t = Object.keys(e17);
    for (let n of t) {
      let a = e17[n];
      a != null && typeof a == "object" && (!Array.isArray(a) && a.type === "ndarray" && typeof a.value == "number" ? e17[n] = a.value : zx(a));
    }
  }
}
function vd(e17, t = {}, n = {}, a = "object", r = false) {
  if (typeof e17 == "string") {
    let s = e17, i;
    if (s in n) i = n[s];
    else if (s in Sa) i = Sa[s];
    else if (i = t[s], i == null) throw new V(`Unknown ${a}: ${e17}. This may be due to one of the following reasons:
1. The ${a} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.
2. The custom ${a} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);
    return i;
  } else {
    let s = e17;
    if (s.className == null || s.config == null) throw new V(`${a}: Improper config format: ${JSON.stringify(s)}.
'className' and 'config' must set.`);
    let i = s.className, o, l;
    if (i in n ? [o, l] = n[i] : i in Sa ? [o, l] = Sa.className : i in t && ([o, l] = t[i]), o == null) throw new V(`Unknown ${a}: ${i}. This may be due to one of the following reasons:
1. The ${a} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.
2. The custom ${a} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);
    if (l != null) {
      let u = {};
      for (let h of Object.keys(Sa)) u[h] = Sa[h];
      for (let h of Object.keys(n)) u[h] = n[h];
      let p = s.config;
      p.customObjects = u;
      let d = Object.assign({}, Sa);
      for (let h of Object.keys(n)) Sa[h] = n[h];
      zx(s.config);
      let c = l(o, s.config, n, r);
      return Sa = Object.assign({}, d), c;
    } else {
      let u = Object.assign({}, Sa);
      for (let d of Object.keys(n)) Sa[d] = n[d];
      let p = new o(s.config);
      return Sa = Object.assign({}, u), p;
    }
  }
}
function fG(e17, t) {
  return e17 < t ? -1 : e17 > t ? 1 : 0;
}
function wh(e17, t) {
  return -1 * fG(e17, t);
}
function as(e17) {
  if (e17 == null) return e17;
  let t = [];
  for (let n of e17) t.indexOf(n) === -1 && t.push(n);
  return t;
}
function gG(e17) {
  if (e17 == null) throw new V(`Invalid value in obj: ${JSON.stringify(e17)}`);
  for (let t in e17) if (e17.hasOwnProperty(t)) return false;
  return true;
}
function Ko(e17, t, n) {
  if (n != null && e17.indexOf(n) < 0) throw new V(`${n} is not a valid ${t}.  Valid values are ${e17} or null/undefined.`);
}
function e0(e17, t, n = 0, a = 1 / 0) {
  return tr(n >= 0), tr(a >= n), Array.isArray(e17) && e17.length >= n && e17.length <= a && e17.every((r) => typeof r === t);
}
function tn(e17, t) {
  Array.isArray(e17) ? (w.assert(e17.length > 0, () => `${t} is unexpectedly an empty array.`), e17.forEach((n, a) => tn(n, `element ${a + 1} of ${t}`))) : w.assert(Number.isInteger(e17) && e17 > 0, () => `Expected ${t} to be a positive integer, but got ${h2(e17)}.`);
}
function h2(e17) {
  return e17 === null ? "null" : Array.isArray(e17) ? "[" + e17.map((t) => h2(t)).join(",") + "]" : typeof e17 == "string" ? `"${e17}"` : `${e17}`;
}
function bG(e17, t, n) {
  let a = n != null ? n() : w.now(), r;
  return (...s) => {
    let i = n != null ? n() : w.now();
    return i - a < t || (a = i, r = e17(...s)), r;
  };
}
function m2(e17) {
  return e17 === "relu" ? "relu" : e17 === "linear" ? "linear" : e17 === "elu" ? "elu" : null;
}
var yG = 0;
function f2() {
  return yG++;
}
var kh = {};
function gf(e17 = "") {
  return e17 in kh || (kh[e17] = 0), kh[e17] += 1, e17 + kh[e17].toString();
}
var xG = ["channelsFirst", "channelsLast"];
var vG = ["nearest", "bilinear"];
var wG = ["valid", "same", "causal"];
var kG = ["max", "avg"];
var IG = ["sum", "mul", "concat", "ave"];
var kl = /* @__PURE__ */ new Map();
function Rt(e17) {
  Ko(xG, "DataFormat", e17);
}
function SG(e17) {
  Ko(vG, "InterpolationFormat", e17);
}
function va(e17) {
  Ko(wG, "PaddingMode", e17);
}
function g2(e17) {
  Ko(kG, "PoolMode", e17);
}
var pc = [];
var gI = "/";
function ri(e17, t) {
  pc.push(e17);
  try {
    let n = t();
    return pc.pop(), n;
  } catch (n) {
    throw pc.pop(), n;
  }
}
function NG() {
  return pc.length === 0 ? "" : pc.join(gI) + gI;
}
function b2(e17) {
  if (!x2(e17)) throw new Error("Not a valid tensor name: '" + e17 + "'");
  return NG() + e17;
}
function y2(e17) {
  if (!x2(e17)) throw new Error("Not a valid tensor name: '" + e17 + "'");
  kl.has(e17) || kl.set(e17, 0);
  let t = kl.get(e17);
  if (kl.set(e17, kl.get(e17) + 1), t > 0) {
    let n = `${e17}_${t}`;
    return kl.set(n, 1), n;
  } else return e17;
}
var TG = new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);
function x2(e17) {
  return !!e17.match(TG);
}
function CG(e17) {
  return e17 === parseInt(e17.toString(), 10);
}
function rs(e17, t, n) {
  t == null && (t = 0), n == null && (n = e17.length);
  let a = 1;
  for (let r = t; r < n; ++r) a *= e17[r];
  return a;
}
function Ul(e17) {
  if (e17.length === 0) return Number.NaN;
  let t = Number.POSITIVE_INFINITY;
  for (let n = 0; n < e17.length; n++) {
    let a = e17[n];
    a < t && (t = a);
  }
  return t;
}
function hs(e17) {
  if (e17.length === 0) return Number.NaN;
  let t = Number.NEGATIVE_INFINITY;
  for (let n = 0; n < e17.length; n++) {
    let a = e17[n];
    a > t && (t = a);
  }
  return t;
}
function Ua(e17, t) {
  if (t < e17) throw new V(`end (${t}) < begin (${e17}) is forbidden.`);
  let n = [];
  for (let a = e17; a < t; ++a) n.push(a);
  return n;
}
var px;
function qt() {
  return px == null && (px = Dv().epsilon()), px;
}
function Ga() {
  return "channelsLast";
}
function ir(e17, t) {
  return re(e17, t);
}
function wd(e17, t = -1) {
  let n = e17.shape.slice();
  return t < 0 && (t = n.length + t + 1), n.splice(t, 0, 1), W(e17, n);
}
function EG(e17, t) {
  return O(() => {
    if (e17.shape.length !== 2) throw new V(`repeat() expects a rank-2 tensor, but received a rank-${e17.shape.length} tensor.`);
    let n = wd(e17, 1);
    return Wx(n, [1, t, 1]);
  });
}
function _G(e17) {
  let t = [rs(e17.shape)];
  return W(e17, t);
}
function AG(e17) {
  if (e17.rank <= 1) throw new V(`batchFlatten requires a minimum rank of 2. Got rank: ${e17.rank}.`);
  let t = [e17.shape[0], rs(e17.shape, 1)];
  return W(e17, t);
}
function si(e17, t, n) {
  return O(() => {
    switch (e17.rank) {
      case 1:
        return gd(e17, t, n);
      case 2:
        return nf(e17, [t, 0], [n, e17.shape[1]]);
      case 3:
        return Ho(e17, [t, 0, 0], [n, e17.shape[1], e17.shape[2]]);
      case 4:
        return Wl(e17, [t, 0, 0, 0], [n, e17.shape[1], e17.shape[2], e17.shape[3]]);
      case 5:
        return Ve(e17, [t, 0, 0, 0, 0], [n, e17.shape[1], e17.shape[2], e17.shape[3], e17.shape[4]]);
      case 6:
        return Ve(e17, [t, 0, 0, 0, 0, 0], [n, e17.shape[1], e17.shape[2], e17.shape[3], e17.shape[4], e17.shape[5]]);
      default:
        throw new V(`sliceAlongFirstAxis() received an unsupported tensor rank: ${e17.rank}`);
    }
  });
}
function cx(e17, t, n) {
  return O(() => {
    switch (e17.rank) {
      case 1:
        return gd(e17, t, n);
      case 2:
        return nf(e17, [0, t], [e17.shape[0], n]);
      case 3:
        return Ho(e17, [0, 0, t], [e17.shape[0], e17.shape[1], n]);
      case 4:
        return Wl(e17, [0, 0, 0, t], [e17.shape[0], e17.shape[1], e17.shape[2], n]);
      default:
        throw new V(`sliceAlongLastAxis() received an unsupported tensor rank: ${e17.rank}`);
    }
  });
}
function Ih(e17, t, n, a) {
  return O(() => {
    switch (e17.rank) {
      case 1:
        return gd(e17, t, n);
      case 2:
        switch (a) {
          case 1:
            return si(e17, t, n);
          case 2:
            return cx(e17, t, n);
          default:
            throw new V(`The axis is not within the rank of the tensor ${a}`);
        }
      case 3:
        switch (a) {
          case 1:
            return si(e17, t, n);
          case 2:
            return Ho(e17, [0, t, 0], [e17.shape[0], n, e17.shape[2]]);
          case 3:
            return cx(e17, t, n);
          default:
            throw new V(`The axis is not within the rank of the tensor ${a}`);
        }
      case 4:
        switch (a) {
          case 1:
            return si(e17, t, n);
          case 2:
            return Wl(e17, [0, t, 0, 0], [e17.shape[0], n, e17.shape[2], e17.shape[3]]);
          case 3:
            return Wl(e17, [0, 0, t, 0], [e17.shape[0], e17.shape[1], n, e17.shape[3]]);
          case 4:
            return cx(e17, t, n);
          default:
            throw new V(`The axis is not within the rank of the tensor ${a}`);
        }
      default:
        throw new V(`sliceAlongLastAxis() received an unsupported tensor rank: ${e17.rank}`);
    }
  });
}
function t0(e17, t = -1) {
  let n;
  return t < 0 && (n = e17[0].rank, n !== 0 ? t = n : t = 0), t === e17[0].rank && (t = -1), et(e17, t);
}
function bI(e17, t) {
  switch (e17.rank) {
    case 1:
      return Jv([e17, t]);
    case 2:
      return Qv([e17, t], 0);
    case 3:
      return ew([e17, t], 0);
    case 4:
      return tw([e17, t], 0);
    default:
      throw new V(`concatAlongFirstAxis() received an unsupported tensor rank: ${e17.rank}`);
  }
}
function Wx(e17, t) {
  if (Array.isArray(t) || (t = [t]), e17.rank !== t.length) throw new V(`The length of input n (${t.length}) does not match the number of dimensions in input x (${e17.rank})`);
  return On(e17, t);
}
function bf(e17, t = 0, n = 1, a, r) {
  return Xm(e17, t, n, a, r);
}
function or(e17, t, n, a) {
  if (e17.rank < 2 || t.rank < 2) throw new ze(`dot requires both inputs to be rank >= 2 but got x shape = ${e17.shape} and y shape = ${t.shape}`);
  if (t.rank >= 3) {
    let r = e17.shape.slice(-1)[0], s = t.shape.slice(-2)[0];
    if (r !== s) throw new ze(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${e17.shape} and  y shape = ${t.shape}`);
  }
  if (e17.rank === 2 && t.rank === 2) return Vl.matMul({ a: e17, b: t, transposeA: false, transposeB: false, bias: a ? Bx(e17.rank, a, Ga()) : null, activation: n });
  {
    let r = e17.shape.slice(), s = r.pop();
    e17 = W(e17, [-1, s]);
    let i = t.shape.slice(), o = i.pop(), l = i.pop(), u = [...i, o], p = Array.from({ length: t.rank }, (c, h) => h === 0 ? t.rank - 2 : h <= t.rank - 2 ? h - 1 : h);
    t = W(De(t, p), [l, -1]);
    let d = [...r, ...u];
    return W(Vl.matMul({ a: e17, b: t, transposeA: false, transposeB: false, bias: a ? Bx(e17.rank, a, Ga()) : null, activation: n }), d);
  }
}
function v2(e17, t, n) {
  return O(() => (Array.isArray(t) ? t = je(t, "int32") : t = re(t, "int32"), np(e17, t, n)));
}
function kd(e17) {
  return z(e17, e17);
}
function Bx(e17, t, n) {
  let a = t.shape;
  if (t.rank !== 1 && t.rank !== e17) throw new V(`Unexpected bias dimensions: ${t.rank}; expected it to be 1 or ${e17}`);
  if (e17 === 5) {
    if (n === "channelsFirst") return a.length === 1 ? W(t, [1, a[0], 1, 1, 1]) : W(t, [1, a[3], a[0], a[1], a[2]]);
    if (n === "channelsLast") return a.length === 1 ? W(t, [1, 1, 1, 1, a[0]]) : W(t, [1].concat(a));
  } else if (e17 === 4) {
    if (n === "channelsFirst") return a.length === 1 ? W(t, [1, a[0], 1, 1]) : W(t, [1, a[2], a[0], a[1]]);
    if (n === "channelsLast") return a.length === 1 ? W(t, [1, 1, 1, a[0]]) : W(t, [1].concat(a));
  } else if (e17 === 3) {
    if (n === "channelsFirst") return a.length === 1 ? W(t, [1, a[0], 1]) : W(t, [1, a[1], a[0]]);
    if (n === "channelsLast") return a.length === 1 ? W(t, [1, 1, a[0]]) : W(t, [1].concat(a));
  } else if (e17 < 3) return t;
  throw new V(`Unsupported input rank by biasAdd: ${t.rank}`);
}
function Ka(e17, t, n) {
  return O(() => (n == null && (n = Ga()), Rt(n), X(e17, Bx(e17.rank, t, n))));
}
function FG(e17, t = 1) {
  if (t !== 1) throw new ze(`Support for alpha values other than 1 (${t}) is not implemented yet.`);
  return Qu(e17);
}
function $G(e17) {
  return O(() => he(e17, X(Lt(e17), 1)));
}
function w2(e17, t, n, a) {
  return O(() => Pw(e17, t, n, a));
}
function DG(e17) {
  return O(() => {
    let t = X(0.5, z(0.2, e17));
    return an(t, 0, 1);
  });
}
function Id(e17, t, n = false) {
  return n ? e17() : t();
}
var RG = ["fanIn", "fanOut", "fanAvg"];
var MG = ["normal", "uniform", "truncatedNormal"];
function OG(e17) {
  Ko(RG, "FanMode", e17);
}
function PG(e17) {
  Ko(MG, "Distribution", e17);
}
var $a = class extends ne.Serializable {
  fromConfigUsesCustomObjects() {
    return false;
  }
  getConfig() {
    return {};
  }
};
var n0 = class extends $a {
  apply(e17, t) {
    return It(e17, t);
  }
};
n0.className = "Zeros";
ne.registerClass(n0);
var yf = class extends $a {
  apply(e17, t) {
    return Pn(e17, t);
  }
};
yf.className = "Ones";
ne.registerClass(yf);
var a0 = class extends $a {
  constructor(e17) {
    if (super(), typeof e17 != "object") throw new V(`Expected argument of type ConstantConfig but got ${e17}`);
    if (e17.value === void 0) throw new V(`config must have value set but got ${e17}`);
    this.value = e17.value;
  }
  apply(e17, t) {
    return O(() => z(xe(this.value), Pn(e17, t)));
  }
  getConfig() {
    return { value: this.value };
  }
};
a0.className = "Constant";
ne.registerClass(a0);
var r0 = class extends $a {
  constructor(e17) {
    super(), this.DEFAULT_MINVAL = -0.05, this.DEFAULT_MAXVAL = 0.05, this.minval = e17.minval || this.DEFAULT_MINVAL, this.maxval = e17.maxval || this.DEFAULT_MAXVAL, this.seed = e17.seed;
  }
  apply(e17, t) {
    return Es(e17, this.minval, this.maxval, t, this.seed);
  }
  getConfig() {
    return { minval: this.minval, maxval: this.maxval, seed: this.seed };
  }
};
r0.className = "RandomUniform";
ne.registerClass(r0);
var s0 = class extends $a {
  constructor(e17) {
    super(), this.DEFAULT_MEAN = 0, this.DEFAULT_STDDEV = 0.05, this.mean = e17.mean || this.DEFAULT_MEAN, this.stddev = e17.stddev || this.DEFAULT_STDDEV, this.seed = e17.seed;
  }
  apply(e17, t) {
    if (t = t || "float32", t !== "float32" && t !== "int32") throw new ze(`randomNormal does not support dType ${t}.`);
    return bf(e17, this.mean, this.stddev, t, this.seed);
  }
  getConfig() {
    return { mean: this.mean, stddev: this.stddev, seed: this.seed };
  }
};
s0.className = "RandomNormal";
ne.registerClass(s0);
var i0 = class extends $a {
  constructor(e17) {
    super(), this.DEFAULT_MEAN = 0, this.DEFAULT_STDDEV = 0.05, this.mean = e17.mean || this.DEFAULT_MEAN, this.stddev = e17.stddev || this.DEFAULT_STDDEV, this.seed = e17.seed;
  }
  apply(e17, t) {
    if (t = t || "float32", t !== "float32" && t !== "int32") throw new ze(`truncatedNormal does not support dType ${t}.`);
    return lf(e17, this.mean, this.stddev, t, this.seed);
  }
  getConfig() {
    return { mean: this.mean, stddev: this.stddev, seed: this.seed };
  }
};
i0.className = "TruncatedNormal";
ne.registerClass(i0);
var o0 = class extends $a {
  constructor(e17) {
    super(), this.gain = e17.gain != null ? e17.gain : 1;
  }
  apply(e17, t) {
    return O(() => {
      if (e17.length !== 2 || e17[0] !== e17[1]) throw new V("Identity matrix initializer can only be used for 2D square matrices.");
      return z(this.gain, Gm(e17[0]));
    });
  }
  getConfig() {
    return { gain: this.gain };
  }
};
o0.className = "Identity";
ne.registerClass(o0);
function LG(e17, t = "channelsLast") {
  let n, a;
  if (Rt(t), e17.length === 2) n = e17[0], a = e17[1];
  else if ([3, 4, 5].indexOf(e17.length) !== -1) {
    if (t === "channelsFirst") {
      let r = rs(e17, 2);
      n = e17[1] * r, a = e17[0] * r;
    } else if (t === "channelsLast") {
      let r = rs(e17, 0, e17.length - 2);
      n = e17[e17.length - 2] * r, a = e17[e17.length - 1] * r;
    }
  } else {
    let r = rs(e17);
    n = Math.sqrt(r), a = Math.sqrt(r);
  }
  return [n, a];
}
var Bn = class extends $a {
  constructor(e17) {
    if (super(), e17.scale < 0) throw new V(`scale must be a positive float. Got: ${e17.scale}`);
    this.scale = e17.scale == null ? 1 : e17.scale, this.mode = e17.mode == null ? "fanIn" : e17.mode, OG(this.mode), this.distribution = e17.distribution == null ? "normal" : e17.distribution, PG(this.distribution), this.seed = e17.seed;
  }
  apply(e17, t) {
    let n = LG(e17), a = n[0], r = n[1], s = this.scale;
    if (this.mode === "fanIn" ? s /= Math.max(1, a) : this.mode === "fanOut" ? s /= Math.max(1, r) : s /= Math.max(1, (a + r) / 2), this.distribution === "normal") {
      let i = Math.sqrt(s);
      if (t = t || "float32", t !== "float32" && t !== "int32") throw new ze(`${this.getClassName()} does not support dType ${t}.`);
      return lf(e17, 0, i, t, this.seed);
    } else {
      let i = Math.sqrt(3 * s);
      return Es(e17, -i, i, t, this.seed);
    }
  }
  getConfig() {
    return { scale: this.scale, mode: this.mode, distribution: this.distribution, seed: this.seed };
  }
};
Bn.className = "VarianceScaling";
ne.registerClass(Bn);
var xf = class extends Bn {
  constructor(e17) {
    super({ scale: 1, mode: "fanAvg", distribution: "uniform", seed: e17 == null ? null : e17.seed });
  }
  getClassName() {
    return Bn.className;
  }
};
xf.className = "GlorotUniform";
ne.registerClass(xf);
var vf = class extends Bn {
  constructor(e17) {
    super({ scale: 1, mode: "fanAvg", distribution: "normal", seed: e17 == null ? null : e17.seed });
  }
  getClassName() {
    return Bn.className;
  }
};
vf.className = "GlorotNormal";
ne.registerClass(vf);
var wf = class extends Bn {
  constructor(e17) {
    super({ scale: 2, mode: "fanIn", distribution: "normal", seed: e17 == null ? null : e17.seed });
  }
  getClassName() {
    return Bn.className;
  }
};
wf.className = "HeNormal";
ne.registerClass(wf);
var kf = class extends Bn {
  constructor(e17) {
    super({ scale: 2, mode: "fanIn", distribution: "uniform", seed: e17 == null ? null : e17.seed });
  }
  getClassName() {
    return Bn.className;
  }
};
kf.className = "HeUniform";
ne.registerClass(kf);
var If = class extends Bn {
  constructor(e17) {
    super({ scale: 1, mode: "fanIn", distribution: "normal", seed: e17 == null ? null : e17.seed });
  }
  getClassName() {
    return Bn.className;
  }
};
If.className = "LeCunNormal";
ne.registerClass(If);
var Sf = class extends Bn {
  constructor(e17) {
    super({ scale: 1, mode: "fanIn", distribution: "uniform", seed: e17 == null ? null : e17.seed });
  }
  getClassName() {
    return Bn.className;
  }
};
Sf.className = "LeCunUniform";
ne.registerClass(Sf);
var l0 = class extends $a {
  constructor(e17) {
    super(), this.DEFAULT_GAIN = 1, this.ELEMENTS_WARN_SLOW = 2e3, this.gain = e17.gain == null ? this.DEFAULT_GAIN : e17.gain, this.seed = e17.seed;
  }
  apply(e17, t) {
    return O(() => {
      if (e17.length < 2) throw new ze("Shape must be at least 2D.");
      if (t !== "int32" && t !== "float32" && t !== void 0) throw new TypeError(`Unsupported data type ${t}.`);
      t = t;
      let n = w.sizeFromShape(e17.slice(0, -1)), a = e17[e17.length - 1], r = n * a;
      r > this.ELEMENTS_WARN_SLOW && console.warn(`Orthogonal initializer is being called on a matrix with more than ${this.ELEMENTS_WARN_SLOW} (${r}) elements: Slowness may result.`);
      let s = [Math.max(a, n), Math.min(a, n)], i = bf(s, 0, 1, t, this.seed), o = Bw.qr(i, false), l = o[0], u = o[1].flatten().stridedSlice([0], [Math.min(a, n) * Math.min(a, n)], [Math.min(a, n) + 1]);
      return l = z(l, u.sign()), n < a && (l = l.transpose()), z(xe(this.gain), l.reshape(e17));
    });
  }
  getConfig() {
    return { gain: this.gain, seed: this.seed };
  }
};
l0.className = "Orthogonal";
ne.registerClass(l0);
var yI = { constant: "Constant", glorotNormal: "GlorotNormal", glorotUniform: "GlorotUniform", heNormal: "HeNormal", heUniform: "HeUniform", identity: "Identity", leCunNormal: "LeCunNormal", leCunUniform: "LeCunUniform", ones: "Ones", orthogonal: "Orthogonal", randomNormal: "RandomNormal", randomUniform: "RandomUniform", truncatedNormal: "TruncatedNormal", varianceScaling: "VarianceScaling", zeros: "Zeros" };
function xI(e17, t = {}) {
  return vd(e17, ne.SerializationMap.getMap().classNameMap, t, "initializer");
}
function Et(e17) {
  return Qw(e17);
}
function St(e17) {
  if (typeof e17 == "string") {
    let t = e17 in yI ? yI[e17] : e17;
    if (t === "GlorotNormal") return new vf();
    if (t === "GlorotUniform") return new xf();
    if (t === "HeNormal") return new wf();
    if (t === "HeUniform") return new kf();
    if (t === "LeCunNormal") return new If();
    if (t === "LeCunUniform") return new Sf();
    {
      let n = {};
      return n.className = t, n.config = {}, xI(n);
    }
  } else return e17 instanceof $a ? e17 : xI(e17);
}
function Vx(e17) {
  return Array.isArray(e17) && Array.isArray(e17[0]);
}
function Zh(e17) {
  return e17.length === 0 ? [] : Array.isArray(e17[0]) ? e17 : [e17];
}
function Te(e17) {
  let t;
  if (Array.isArray(e17)) {
    if (e17.length !== 1) throw new V(`Expected Tensor length to be 1; got ${e17.length}`);
    t = e17[0];
  } else t = e17;
  return t;
}
function Je(e17) {
  if (Array.isArray(e17) && Array.isArray(e17[0])) {
    if (e17.length === 1) return e17 = e17, e17[0];
    throw new V(`Expected exactly 1 Shape; got ${e17.length}`);
  } else return e17;
}
function Jh(e17) {
  let t = 0;
  for (let n of e17) n.shape.length === 0 ? t += 1 : t += n.shape.reduce((a, r) => a * r);
  return t;
}
var vI = "Variable";
var k2 = class {
  constructor(e17, t = "float32", n = vI, a = true, r = null) {
    this.dtype = t == null ? "float32" : t, this.shape = e17.shape, this.id = f2(), n = n == null ? vI : n, this.originalName = b2(n), this.name = y2(this.originalName), this.trainable_ = a, this.constraint = r, this.val = Mw(e17, this.trainable_, this.name, this.dtype);
  }
  read() {
    return this.assertNotDisposed(), this.val;
  }
  write(e17) {
    return this.assertNotDisposed(), zG(this.val, e17), this.val.id !== e17.id && (this.val.assign(e17), this.constraint != null && this.val.assign(this.constraint.apply(this.val))), this;
  }
  dispose() {
    this.assertNotDisposed(), this.val.dispose();
  }
  assertNotDisposed() {
    if (this.val.isDisposed) throw new Error(`LayersVariable ${this.name} is already disposed.`);
  }
  get trainable() {
    return this.trainable_;
  }
  set trainable(e17) {
    this.trainable_ = e17, this.val.trainable = e17;
  }
};
function zG(e17, t) {
  if (e17.shape.toString() !== t.shape.toString()) throw new Error("Shape mismatch: " + JSON.stringify(e17.shape) + " vs. " + JSON.stringify(t.shape));
}
function Ux(e17) {
  return e17.map((t) => t.read());
}
function u0(e17) {
  e17.forEach((t) => {
    t[0].write(t[1]);
  });
}
var zt = class {
  constructor(e17) {
    this.dtype = e17.dtype, this.shape = e17.shape, e17.shape != null ? this.ndim = e17.shape.length : this.ndim = e17.ndim, this.maxNDim = e17.maxNDim, this.minNDim = e17.minNDim, this.axes = e17.axes || {};
  }
};
var Ha = class {
  constructor(e17, t, n, a, r, s, i) {
    this.dtype = e17, this.shape = t, this.sourceLayer = n, this.inputs = a, this.callArgs = r, this.outputTensorIndex = i, this.id = f2(), s != null && (this.originalName = b2(s), this.name = y2(this.originalName)), this.rank = t.length;
  }
};
var WG = 0;
var Nf = class {
  constructor(e17, t) {
    this.callArgs = t, this.id = WG++, this.outboundLayer = e17.outboundLayer, this.inboundLayers = e17.inboundLayers, this.nodeIndices = e17.nodeIndices, this.tensorIndices = e17.tensorIndices, this.inputTensors = e17.inputTensors, this.outputTensors = e17.outputTensors, this.inputMasks = e17.inputMasks, this.outputMasks = e17.outputMasks, this.inputShapes = e17.inputShapes, this.outputShapes = e17.outputShapes;
    for (let n of e17.inboundLayers) n != null && n.outboundNodes.push(this);
    e17.outboundLayer.inboundNodes.push(this);
  }
  getConfig() {
    let e17 = [];
    for (let t of this.inboundLayers) t != null ? e17.push(t.name) : e17.push(null);
    return { outboundLayer: this.outboundLayer ? this.outboundLayer.name : null, inboundLayers: e17, nodeIndices: this.nodeIndices, tensorIndices: this.tensorIndices };
  }
};
var BG = 0;
var We = class extends ne.Serializable {
  constructor(e17 = {}) {
    super(), this._callHook = null, this._addedWeightNames = [], this._stateful = false, this.id = BG++, this.activityRegularizer = null, this.inputSpec = null, this.supportsMasking = false, this._trainableWeights = [], this._nonTrainableWeights = [], this._losses = [], this._updates = [], this._built = false, this.inboundNodes = [], this.outboundNodes = [];
    let t = e17.name;
    if (!t) {
      let n = this.getClassName();
      t = Ir(n) + "_" + gf(n);
    }
    if (this.name = t, this.trainable_ = e17.trainable == null ? true : e17.trainable, e17.inputShape != null || e17.batchInputShape != null) {
      let n;
      if (e17.batchInputShape != null) n = e17.batchInputShape;
      else if (e17.inputShape != null) {
        let r = null;
        e17.batchSize != null && (r = e17.batchSize), n = [r].concat(e17.inputShape);
      }
      this.batchInputShape = n;
      let a = e17.dtype;
      a == null && (a = e17.inputDType), a == null && (a = "float32"), this.dtype = a;
    }
    e17.weights != null ? this.initialWeights = e17.weights : this.initialWeights = null, this._refCount = null, this.fastWeightInitDuringBuild = false;
  }
  static nodeKey(e17, t) {
    return e17.name + "_ib-" + t.toString();
  }
  getNodeAtIndex(e17, t) {
    if (this.inboundNodes.length === 0) throw new ar(`The layer has never been called and thus has no defined ${t}.`);
    if (this.inboundNodes.length <= e17) throw new V(`Asked to get ${t} at node ${e17}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);
    return this.inboundNodes[e17];
  }
  getInputAt(e17) {
    return Mn(this.getNodeAtIndex(e17, "input").inputTensors);
  }
  getOutputAt(e17) {
    return Mn(this.getNodeAtIndex(e17, "output").outputTensors);
  }
  get input() {
    if (this.inboundNodes.length > 1) throw new Xr(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use \`getInputAt(nodeIndex)\` instead.`);
    if (this.inboundNodes.length === 0) throw new Xr(`Layer ${this.name} is not connected, no input to return.`);
    return Mn(this.getNodeAtIndex(0, "input").inputTensors);
  }
  get output() {
    if (this.inboundNodes.length === 0) throw new Xr(`Layer ${this.name} has no inbound nodes.`);
    if (this.inboundNodes.length > 1) throw new Xr(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use \`getOutputAt(nodeIndex)\` instead.`);
    return Mn(this.getNodeAtIndex(0, "output").outputTensors);
  }
  get losses() {
    return this._losses;
  }
  calculateLosses() {
    return this.losses.map((e17) => e17());
  }
  get updates() {
    return this._updates;
  }
  get built() {
    return this._built;
  }
  set built(e17) {
    this._built = e17;
  }
  get trainable() {
    return this.trainable_;
  }
  set trainable(e17) {
    this._trainableWeights.forEach((t) => t.trainable = e17), this.trainable_ = e17;
  }
  get trainableWeights() {
    return this.trainable_ ? this._trainableWeights.filter((e17) => e17.trainable) : [];
  }
  set trainableWeights(e17) {
    this._trainableWeights = e17;
  }
  get nonTrainableWeights() {
    return this.trainable ? this._trainableWeights.filter((e17) => !e17.trainable).concat(this._nonTrainableWeights) : this._trainableWeights.concat(this._nonTrainableWeights);
  }
  set nonTrainableWeights(e17) {
    this._nonTrainableWeights = e17;
  }
  get weights() {
    return this.trainableWeights.concat(this.nonTrainableWeights);
  }
  get stateful() {
    return this._stateful;
  }
  resetStates() {
    if (!this.stateful) throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.");
  }
  assertInputCompatibility(e17) {
    let t = it(e17);
    if (this.inputSpec == null || this.inputSpec.length === 0) return;
    let n = it(this.inputSpec);
    if (t.length !== n.length) throw new V(`Layer ${this.name} expects ${n.length} inputs, but it received ${t.length} input tensors. Input received: ${e17}`);
    for (let a = 0; a < t.length; a++) {
      let r = t[a], s = n[a];
      if (s == null) continue;
      let i = r.rank;
      if (s.ndim != null && i !== s.ndim) throw new V(`Input ${a} is incompatible with layer ${this.name}: expected ndim=${s.ndim}, found ndim=${i}`);
      if (s.maxNDim != null && i > s.maxNDim) throw new V(`Input ${a} is incompatible with layer ${this.name}: expected max_ndim=${s.maxNDim}, found ndim=${i}`);
      if (s.minNDim != null && i < s.minNDim) throw new V(`Input ${a} is incompatible with layer ${this.name}: expected min_ndim=${s.minNDim}, found ndim=${i}.`);
      if (s.dtype != null && r.dtype !== s.dtype) throw new V(`Input ${a} is incompatible with layer ${this.name} : expected dtype=${s.dtype}, found dtype=${r.dtype}.`);
      if (s.axes) {
        let o = r.shape;
        for (let l in s.axes) {
          let u = Number(l), p = s.axes[l], d = u >= 0 ? o[u] : o[o.length + u];
          if (p != null && [p, null].indexOf(d) === -1) throw new V(`Input ${a} is incompatible with layer ${this.name}: expected axis ${u} of input shape to have value ${p} but got shape ${o}.`);
        }
      }
      if (s.shape != null) for (let o = 0; o < s.shape.length; ++o) {
        let l = s.shape[o], u = r.shape[o];
        if (l != null && u != null && l !== u) throw new V(`Input ${a} is incompatible with layer ${this.name}: expected shape=${s.shape}, found shape=${r.shape}.`);
      }
    }
  }
  call(e17, t) {
    return e17;
  }
  invokeCallHook(e17, t) {
    this._callHook != null && this._callHook(e17, t);
  }
  setCallHook(e17) {
    this._callHook = e17;
  }
  clearCallHook() {
    this._callHook = null;
  }
  apply(e17, t) {
    t = t || {}, this.assertNotDisposed();
    let n = it(e17), a = GG(e17), r = HG(e17);
    if (a === r) throw new V("Arguments to apply() must be all SymbolicTensors or all Tensors");
    return ri(this.name, () => {
      if (!this.built) {
        this.assertInputCompatibility(e17);
        let s = [];
        for (let i of it(e17)) s.push(i.shape);
        this.build(Mn(s)), this.built = true, this.initialWeights && this.setWeights(this.initialWeights), this._refCount === null && r && (this._refCount = 1);
      }
      if (this.assertInputCompatibility(e17), r) {
        let s = this.call(e17, t);
        this.supportsMasking && this.setMaskMetadata(e17, s);
        let i = it(s), o = [];
        for (let l of i) n.indexOf(l) !== -1 && (l = l.clone()), o.push(l);
        if (s = Mn(o), this.activityRegularizer != null) throw new ze("Layer invocation in the presence of activity regularizer(s) is not supported yet.");
        return s;
      } else {
        let s = VG(e17), i = this.computeOutputShape(s), o, l = UG(e17);
        if (this.warnOnIncompatibleInputShape(Array.isArray(e17) ? s[0] : s), i != null && i.length > 0 && Array.isArray(i[0]) ? o = i.map((u, p) => new Ha(l, u, this, it(e17), t, this.name, p)) : o = new Ha(l, i, this, it(e17), t, this.name), this.addInboundNode(e17, o, null, null, s, i, t), this._refCount++, this.activityRegularizer != null) throw new ze("Layer invocation in the presence of activity regularizer(s) is not supported yet.");
        return o;
      }
    });
  }
  warnOnIncompatibleInputShape(e17) {
    if (this.batchInputShape != null) if (e17.length !== this.batchInputShape.length) console.warn(`The rank of the input tensor provided (shape: ${JSON.stringify(e17)}) does not match that of the batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer ${this.name}`);
    else {
      let t = false;
      this.batchInputShape.forEach((n, a) => {
        n != null && e17[a] != null && e17[a] !== n && (t = true);
      }), t && console.warn(`The shape of the input tensor (${JSON.stringify(e17)}) does not match the expectation of layer ${this.name}: ${JSON.stringify(this.batchInputShape)}`);
    }
  }
  get outputShape() {
    if (this.inboundNodes == null || this.inboundNodes.length === 0) throw new Xr(`The layer ${this.name} has never been called and thus has no defined output shape.`);
    let e17 = [];
    for (let t of this.inboundNodes) {
      let n = JSON.stringify(t.outputShapes);
      e17.indexOf(n) === -1 && e17.push(n);
    }
    if (e17.length === 1) {
      let t = this.inboundNodes[0].outputShapes;
      return Array.isArray(t) && Array.isArray(t[0]) && t.length === 1 ? t[0] : t;
    } else throw new Xr(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`);
  }
  countParams() {
    if (!this.built) throw new ar(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);
    return Jh(this.weights);
  }
  build(e17) {
    this.built = true;
  }
  getWeights(e17 = false) {
    return Ux(e17 ? this.trainableWeights : this.weights);
  }
  setWeights(e17) {
    O(() => {
      let t = this.weights;
      if (t.length !== e17.length) throw new V(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${e17.length}, but the layer was expecting ${t.length} weights. Provided weights: ${e17}...`);
      if (t.length === 0) return;
      let n = [], a = Ux(t);
      for (let r = 0; r < a.length; ++r) {
        let s = a[r], i = t[r], o = e17[r];
        if (!w.arraysEqual(s.shape, o.shape)) throw new V(`Layer weight shape ${s.shape} not compatible with provided weight shape ${o.shape}`);
        n.push([i, o]);
      }
      u0(n);
    });
  }
  addWeight(e17, t, n, a, r, s, i, o) {
    if (this._addedWeightNames.indexOf(e17) !== -1) throw new V(`Duplicate weight name ${e17} for layer ${this.name}`);
    this._addedWeightNames.push(e17), n == null && (n = "float32"), this.fastWeightInitDuringBuild && (a = o != null ? o() : St("zeros"));
    let l = a.apply(t, n), u = new k2(l, n, e17, s, i);
    return l.dispose(), r != null && this.addLoss(() => r.apply(u.read())), s == null && (s = true), s ? this._trainableWeights.push(u) : this._nonTrainableWeights.push(u), u;
  }
  setFastWeightInitDuringBuild(e17) {
    this.fastWeightInitDuringBuild = e17;
  }
  addLoss(e17) {
    e17 == null || Array.isArray(e17) && e17.length === 0 || (e17 = it(e17), this._losses !== void 0 && this._losses !== null && this.losses.push(...e17));
  }
  computeOutputShape(e17) {
    return e17;
  }
  computeMask(e17, t) {
    if (!this.supportsMasking) {
      if (t != null) if (Array.isArray(t)) t.forEach((n) => {
        if (n != null) throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);
      });
      else throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);
      return null;
    }
    return t;
  }
  setMaskMetadata(e17, t, n) {
    if (!this.supportsMasking) return;
    let a = this.computeMask(e17, n), r = it(t), s = it(a);
    if (r.length !== s.length) throw new Error(`${this.name} outputs ${r.length} tensors but ${r.length} masks for those tensors`);
    for (let i = 0; i < r.length; i++) r[i].kerasMask = s[i];
  }
  addInboundNode(e17, t, n, a, r, s, i = null) {
    let o = it(e17);
    t = it(t), n = it(n), a = it(a), r = Zh(r), s = Zh(s);
    let l = [], u = [], p = [];
    for (let d of o) l.push(d.sourceLayer), u.push(d.nodeIndex), p.push(d.tensorIndex);
    new Nf({ outboundLayer: this, inboundLayers: l, nodeIndices: u, tensorIndices: p, inputTensors: o, outputTensors: t, inputMasks: n, outputMasks: a, inputShapes: r, outputShapes: s }, i);
    for (let d = 0; d < t.length; d++) t[d].sourceLayer = this, t[d].nodeIndex = this.inboundNodes.length - 1, t[d].tensorIndex = d;
  }
  getConfig() {
    let e17 = { name: this.name, trainable: this.trainable };
    return this.batchInputShape != null && (e17.batchInputShape = this.batchInputShape), this.dtype != null && (e17.dtype = this.dtype), e17;
  }
  disposeWeights() {
    return this.weights.forEach((e17) => e17.dispose()), this.weights.length;
  }
  assertNotDisposed() {
    if (this._refCount === 0) throw new Error(`Layer '${this.name}' is already disposed.`);
  }
  dispose() {
    if (!this.built) throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);
    if (this._refCount === null) throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);
    this.assertNotDisposed();
    let e17 = 0;
    return --this._refCount === 0 && (e17 = this.disposeWeights()), { refCountAfterDispose: this._refCount, numDisposedVariables: e17 };
  }
};
function VG(e17) {
  e17 = it(e17);
  let t = [];
  for (let n of e17) t.push(n.shape);
  return Mn(t);
}
function UG(e17) {
  return "float32";
}
function I2(e17, t, n) {
  if ((t == null || n != null && n > 0) && (t = e17.sourceLayer, n = e17.nodeIndex), t.inboundNodes.length === 0) return [e17];
  {
    let a = t.inboundNodes[n];
    if (a.inboundLayers.length === 0) return a.inputTensors;
    {
      let r = [];
      for (let s = 0; s < a.inboundLayers.length; s++) {
        let i = a.inputTensors[s], o = a.inboundLayers[s], l = a.nodeIndices[s], u = I2(i, o, l);
        for (let p of u) r.indexOf(p) === -1 && r.push(p);
      }
      return r;
    }
  }
}
function GG(e17) {
  let t = true;
  for (let n of it(e17)) if (!(n instanceof Ha)) {
    t = false;
    break;
  }
  return t;
}
function HG(e17) {
  let t = true;
  for (let n of it(e17)) if (n instanceof Ha) {
    t = false;
    break;
  }
  return t;
}
var rp = class extends We {
  constructor(e17) {
    if (super({ dtype: e17.dtype, name: e17.name != null ? e17.name : gf("input").toString() }), e17.batchSize == null && (e17.batchSize = null), e17.sparse == null && (e17.sparse = false), this.trainable = false, this.built = true, this.sparse = e17.sparse, e17.inputShape != null && e17.batchInputShape != null) throw new V("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");
    let t = e17.batchInputShape;
    if (t == null) {
      if (e17.inputShape == null) throw new V("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");
      t = [e17.batchSize].concat(e17.inputShape);
    } else if (e17.batchSize != null) throw new V("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");
    let n = e17.dtype || "float32";
    this.batchInputShape = t, this.dtype = n, this.inputSpec = [{ shape: t }];
    let a = new Ha(this.dtype, this.batchInputShape, this, [], {}, this.name);
    a.nodeIndex = 0, a.tensorIndex = 0, new Nf({ outboundLayer: this, inboundLayers: [], nodeIndices: [], tensorIndices: [], inputTensors: [a], outputTensors: [a], inputMasks: [null], outputMasks: [null], inputShapes: [t], outputShapes: [t] });
  }
  apply(e17, t) {
    throw new V(`Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`);
  }
  dispose() {
    return { refCountAfterDispose: this._refCount, numDisposedVariables: 0 };
  }
  getConfig() {
    return { batchInputShape: this.batchInputShape, dtype: this.dtype, sparse: this.sparse, name: this.name };
  }
};
rp.className = "InputLayer";
ne.registerClass(rp);
function S2(e17) {
  if (e17.batchShape == null && e17.shape == null) throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");
  if (e17.batchShape != null && e17.shape != null) throw new V("Please provide either a `shape` or `batchShape` argument to Input, but not both.");
  let t = e17.batchShape;
  e17.shape != null && t == null && (t = [null].concat(e17.shape));
  let n = e17.dtype;
  return n == null && (n = "float32"), new rp({ batchInputShape: t, name: e17.name, dtype: n, sparse: e17.sparse }).inboundNodes[0].outputTensors[0];
}
function jG(e17, t) {
  if (e17.dtype == null || e17.dtype === t.dtype) return t;
  try {
    return re(t, e17.dtype);
  } catch (n) {
    throw new V(`The dtype of the feed (${t.dtype}) can not be cast to the dtype of the key '${e17.name}' (${e17.dtype}).`);
  }
}
var Cl = class N2 {
  constructor(t) {
    if (this.id2Value = {}, this.id2Mask = {}, this.name2Id = {}, t instanceof N2) for (let n in t.id2Value) this.id2Value[n] = t.id2Value[n], n in t.id2Mask && (this.id2Mask[n] = t.id2Mask[n]);
    else {
      if (t == null) return;
      for (let n of t) this.add(n.key, n.value);
    }
  }
  add(t, n, a) {
    if (this.id2Value[t.id] == null) this.id2Value[t.id] = jG(t, n), this.name2Id[t.name] = t.id, a != null && (this.id2Mask[t.id] = a);
    else throw new V(`Duplicate key: name=${t.name}, id=${t.id}`);
    return this;
  }
  addFeed(t) {
    this.add(t.key, t.value);
  }
  hasKey(t) {
    return this.id2Value[t.id] != null;
  }
  names() {
    return Object.keys(this.name2Id);
  }
  getValue(t) {
    if (t instanceof Ha) {
      if (this.id2Value[t.id] == null) throw new V(`Nonexistent key: ${t.name}`);
      return this.id2Value[t.id];
    } else {
      let n = this.name2Id[t];
      if (n == null) throw new V(`Feed dict has no SymbolicTensor name: ${t}`);
      return this.id2Value[n];
    }
  }
  getMask(t) {
    if (t instanceof Ha) {
      if (this.id2Value[t.id] == null) throw new V(`Nonexistent key: ${t.name}`);
      return this.id2Mask[t.id];
    } else {
      let n = this.name2Id[t];
      if (n == null) throw new V(`Feed dict has no SymbolicTensor name: ${t}`);
      return this.id2Mask[n];
    }
  }
  disposeMasks() {
    this.id2Mask != null && Ee(this.id2Mask);
  }
};
var Qh = new d2();
var em = new d2();
function qG(e17) {
  Qh != null && Qh.setMaxEntries(e17), em != null && em.setMaxEntries(e17);
}
function tc(e17, t, n, a) {
  let r = n == null ? false : n.training, s = Array.isArray(e17), i = s ? e17 : [e17], o = i.map((m) => m.name), l = [], u = t.names();
  for (let m of o) u.indexOf(m) !== -1 ? l.push(t.getValue(m)) : l.push(null);
  a != null && (a.maxNumTensors = -1 / 0, a.minNumTensors = 1 / 0);
  let p = o.join(",") + "|" + t.names().sort().join(","), d = Qh.get(p), c;
  if (d == null) {
    let m = KG(i, t);
    d = m.sorted, c = m.recipientCounts, Qh.put(p, d), em.put(p, c);
  }
  c = {}, r || Object.assign(c, em.get(p));
  let h = new Cl(t);
  for (let m = 0; m < d.length; ++m) {
    if (a != null) {
      let F = Kh().numTensors;
      F > a.maxNumTensors && (a.maxNumTensors = F), F < a.minNumTensors && (a.minNumTensors = F);
    }
    let f = d[m], g = f.sourceLayer;
    if (g instanceof rp) continue;
    let b = [], y = [], x = [], v = false;
    for (let F of f.inputs) {
      let D = h.getValue(F), $ = h.getMask(F);
      b.push(D), y.push($), $ != null && (v = true), r || (c[F.name]--, c[F.name] === 0 && !t.hasKey(F) && o.indexOf(F.name) === -1 && !D.isDisposed && F.sourceLayer.stateful !== true && x.push(D));
    }
    v && (n = n || {}, n.mask = y[0]);
    let I = it(g.apply(b, n)), N = null;
    g.supportsMasking && (N = g.computeMask(b, y));
    let C = YG(f), _ = Array.isArray(C) ? C : [C];
    for (let F = 0; F < _.length; ++F) {
      h.hasKey(_[F]) || h.add(_[F], I[F], Array.isArray(N) ? N[0] : N);
      let D = o.indexOf(_[F].name);
      D !== -1 && (l[D] = I[F]);
    }
    r || Ee(x);
  }
  return h.disposeMasks(), s ? l : l[0];
}
function KG(e17, t) {
  w.assert(e17 != null && e17.length > 0, () => "Expected at least one fetch, got none");
  let n = [], a = {};
  if (e17.length === 1) {
    let r = wI(e17[0], t);
    n = r.sorted, a = r.recipientMap;
  } else {
    let r = /* @__PURE__ */ new Set();
    for (let s of e17) {
      let { sorted: i, recipientMap: o } = wI(s, t);
      for (let l of i) r.has(l.name) || (n.push(l), r.add(l.name));
      for (let l in o) a[l] == null && (a[l] = /* @__PURE__ */ new Set()), o[l].forEach((u) => a[l].add(u));
    }
  }
  return { sorted: n, recipientCounts: XG(a) };
}
function XG(e17) {
  let t = {};
  for (let n in e17) t[n] = e17[n].size;
  return t;
}
function wI(e17, t) {
  let n = /* @__PURE__ */ new Set(), a = [], r = {};
  for (let o of t.names()) n.add(o);
  let s = [], i = [];
  for (s.push(e17); s.length > 0; ) {
    let o = s[s.length - 1];
    if (n.has(o.name)) {
      s.pop();
      continue;
    }
    let l = i[i.length - 1] === s.length - 1;
    if (o.inputs.length === 0 || l) s.pop(), a.push(o), n.add(o.name), l && i.pop();
    else {
      i.push(s.length - 1);
      for (let u of o.inputs) r[u.name] == null && (r[u.name] = /* @__PURE__ */ new Set()), r[u.name].add(o.name), !n.has(u.name) && s.push(u);
    }
  }
  return { sorted: a, recipientMap: r };
}
function YG(e17) {
  let t;
  if (e17.sourceLayer.inboundNodes.length === 1) t = e17.sourceLayer.output;
  else {
    let n = null;
    for (let a = 0; a < e17.sourceLayer.inboundNodes.length; ++a) for (let r of e17.sourceLayer.inboundNodes[a].outputTensors) if (r.id === e17.id) {
      n = a;
      break;
    }
    t = e17.sourceLayer.getOutputAt(n);
  }
  return t;
}
var ZG = G();
ZG.registerFlag("TOPOLOGICAL_SORT_CACHE_MAX_ENTRIES", () => 100, qG);
var T2 = {};
_e(T2, { maxNorm: () => JG, minMaxNorm: () => tH, nonNeg: () => eH, unitNorm: () => QG });
function p0(e17, t) {
  return O(() => rn(fe(z(e17, e17), t, true)));
}
var Sd = class extends ne.Serializable {
  getConfig() {
    return {};
  }
};
var c0 = class extends Sd {
  constructor(e17) {
    super(), this.defaultMaxValue = 2, this.defaultAxis = 0, this.maxValue = e17.maxValue != null ? e17.maxValue : this.defaultMaxValue, this.axis = e17.axis != null ? e17.axis : this.defaultAxis;
  }
  apply(e17) {
    return O(() => {
      let t = p0(e17, this.axis), n = an(t, 0, this.maxValue);
      return z(e17, he(n, X(qt(), t)));
    });
  }
  getConfig() {
    return { maxValue: this.maxValue, axis: this.axis };
  }
};
c0.className = "MaxNorm";
ne.registerClass(c0);
var d0 = class extends Sd {
  constructor(e17) {
    super(), this.defaultAxis = 0, this.axis = e17.axis != null ? e17.axis : this.defaultAxis;
  }
  apply(e17) {
    return O(() => he(e17, X(qt(), p0(e17, this.axis))));
  }
  getConfig() {
    return { axis: this.axis };
  }
};
d0.className = "UnitNorm";
ne.registerClass(d0);
var h0 = class extends Sd {
  apply(e17) {
    return Ke(e17);
  }
};
h0.className = "NonNeg";
ne.registerClass(h0);
var m0 = class extends Sd {
  constructor(e17) {
    super(), this.defaultMinValue = 0, this.defaultMaxValue = 1, this.defaultRate = 1, this.defaultAxis = 0, this.minValue = e17.minValue != null ? e17.minValue : this.defaultMinValue, this.maxValue = e17.maxValue != null ? e17.maxValue : this.defaultMaxValue, this.rate = e17.rate != null ? e17.rate : this.defaultRate, this.axis = e17.axis != null ? e17.axis : this.defaultAxis;
  }
  apply(e17) {
    return O(() => {
      let t = p0(e17, this.axis), n = X(z(this.rate, an(t, this.minValue, this.maxValue)), z(1 - this.rate, t));
      return z(e17, he(n, X(qt(), t)));
    });
  }
  getConfig() {
    return { minValue: this.minValue, maxValue: this.maxValue, rate: this.rate, axis: this.axis };
  }
};
m0.className = "MinMaxNorm";
ne.registerClass(m0);
var kI = { maxNorm: "MaxNorm", minMaxNorm: "MinMaxNorm", nonNeg: "NonNeg", unitNorm: "UnitNorm" };
function Xt(e17) {
  return Qw(e17);
}
function II(e17, t = {}) {
  return vd(e17, ne.SerializationMap.getMap().classNameMap, t, "constraint");
}
function Yt(e17) {
  if (e17 == null) return null;
  if (typeof e17 == "string") {
    let t = { className: e17 in kI ? kI[e17] : e17, config: {} };
    return II(t);
  } else return e17 instanceof Sd ? e17 : II(e17);
}
function JG(e17) {
  return new c0(e17);
}
function QG(e17) {
  return new d0(e17);
}
function eH() {
  return new h0();
}
function tH(e17) {
  return new m0(e17);
}
var C2 = {};
_e(C2, { constant: () => rH, glorotNormal: () => cH, glorotUniform: () => pH, heNormal: () => dH, heUniform: () => hH, identity: () => lH, leCunNormal: () => mH, leCunUniform: () => fH, ones: () => aH, orthogonal: () => gH, randomNormal: () => iH, randomUniform: () => sH, truncatedNormal: () => oH, varianceScaling: () => uH, zeros: () => nH });
function nH() {
  return new n0();
}
function aH() {
  return new yf();
}
function rH(e17) {
  return new a0(e17);
}
function sH(e17) {
  return new r0(e17);
}
function iH(e17) {
  return new s0(e17);
}
function oH(e17) {
  return new i0(e17);
}
function lH(e17) {
  return new o0(e17);
}
function uH(e17) {
  return new Bn(e17);
}
function pH(e17) {
  return new xf(e17);
}
function cH(e17) {
  return new vf(e17);
}
function dH(e17) {
  return new wf(e17);
}
function hH(e17) {
  return new kf(e17);
}
function mH(e17) {
  return new If(e17);
}
function fH(e17) {
  return new Sf(e17);
}
function gH(e17) {
  return new l0(e17);
}
var E2 = {};
_e(E2, { Layer: () => We, RNN: () => Mr, RNNCell: () => Td, activation: () => qj, add: () => n6, alphaDropout: () => z6, average: () => a6, averagePooling1d: () => T1, averagePooling2d: () => C1, averagePooling3d: () => E1, avgPool1d: () => d6, avgPool2d: () => m6, avgPool3d: () => g6, avgPooling1d: () => h6, avgPooling2d: () => f6, avgPooling3d: () => b6, batchNormalization: () => u6, bidirectional: () => F6, categoryEncoding: () => G6, centerCrop: () => V6, concatenate: () => r6, conv1d: () => Lj, conv2d: () => zj, conv2dTranspose: () => Wj, conv3d: () => Bj, conv3dTranspose: () => Vj, convLstm2d: () => C6, convLstm2dCell: () => E6, cropping2D: () => Gj, dense: () => Kj, depthwiseConv2d: () => jj, dot: () => l6, dropout: () => Xj, elu: () => $j, embedding: () => t6, flatten: () => Zj, gaussianDropout: () => L6, gaussianNoise: () => P6, globalAveragePooling1d: () => y6, globalAveragePooling2d: () => x6, globalMaxPool1d: () => D6, globalMaxPool2d: () => R6, globalMaxPooling1d: () => AC, globalMaxPooling2d: () => FC, gru: () => w6, gruCell: () => k6, input: () => j2, inputLayer: () => Fj, layerNormalization: () => p6, leakyReLU: () => Rj, lstm: () => I6, lstmCell: () => S6, masking: () => W6, maxPool1d: () => M6, maxPool2d: () => O6, maxPooling1d: () => $C, maxPooling2d: () => DC, maxPooling3d: () => v6, maximum: () => s6, minimum: () => i6, multiply: () => o6, permute: () => e6, prelu: () => Mj, randomWidth: () => H6, reLU: () => Dj, repeatVector: () => Jj, rescaling: () => B6, reshape: () => Qj, resizing: () => U6, rnn: () => _6, separableConv2d: () => Uj, simpleRNN: () => N6, simpleRNNCell: () => T6, softmax: () => Oj, spatialDropout1d: () => Yj, stackedRNNCells: () => A6, thresholdedReLU: () => Pj, timeDistributed: () => $6, upSampling2d: () => Hj, zeroPadding2d: () => c6 });
async function Kr(e17) {
  if (e17 == null) return;
  let t = [], n = [], a = [];
  for (let r in e17) {
    let s = e17[r];
    if (typeof s != "number") {
      let i = s;
      t.push(i.data()), n.push(r), a.push(i);
    }
  }
  if (t.length > 0) {
    let r = await Promise.all(t);
    for (let s = 0; s < r.length; ++s) e17[n[s]] = r[s][0];
    Ee(a);
  }
}
function _2(e17) {
  if (e17 != null) for (let t in e17) {
    let n = e17[t];
    typeof n != "number" && n.dispose();
  }
}
var SI;
(function(e17) {
  e17[e17.SILENT = 0] = "SILENT", e17[e17.VERBOSE = 1] = "VERBOSE";
})(SI || (SI = {}));
var bH = 125;
var Gl = class {
  constructor() {
    this.validationData = null;
  }
  setParams(e17) {
    this.params = e17;
  }
  async onEpochBegin(e17, t) {
  }
  async onEpochEnd(e17, t) {
  }
  async onBatchBegin(e17, t) {
  }
  async onBatchEnd(e17, t) {
  }
  async onTrainBegin(e17) {
  }
  async onTrainEnd(e17) {
  }
  setModel(e17) {
  }
};
var A2 = class {
  constructor(e17, t = 10) {
    e17 == null && (e17 = []), this.callbacks = e17, this.queueLength = t;
  }
  append(e17) {
    this.callbacks.push(e17);
  }
  setParams(e17) {
    for (let t of this.callbacks) t.setParams(e17);
  }
  setModel(e17) {
    for (let t of this.callbacks) t.setModel(e17);
  }
  async onEpochBegin(e17, t) {
    t == null && (t = {});
    for (let n of this.callbacks) await n.onEpochBegin(e17, t);
  }
  async onEpochEnd(e17, t) {
    t == null && (t = {});
    for (let n of this.callbacks) await n.onEpochEnd(e17, t);
  }
  async onBatchBegin(e17, t) {
    t == null && (t = {});
    for (let n of this.callbacks) await n.onBatchBegin(e17, t);
  }
  async onBatchEnd(e17, t) {
    t == null && (t = {});
    for (let n of this.callbacks) await n.onBatchEnd(e17, t);
  }
  async onTrainBegin(e17) {
    e17 == null && (e17 = {});
    for (let t of this.callbacks) await t.onTrainBegin(e17);
  }
  async onTrainEnd(e17) {
    e17 == null && (e17 = {});
    for (let t of this.callbacks) await t.onTrainEnd(e17);
  }
};
var yH = class extends Gl {
  constructor() {
    super();
  }
  async onEpochBegin(e17) {
    this.seen = 0, this.totals = {};
  }
  async onBatchEnd(e17, t) {
    t == null && (t = {});
    let n = t.size == null ? 0 : t.size;
    this.seen += n;
    for (let a in t) {
      let r = t[a];
      if (typeof r == "number") this.totals.hasOwnProperty(a) || (this.totals[a] = 0), this.totals[a] = this.totals[a] + r * n;
      else {
        let s;
        a in this.totals ? s = this.totals[a] : this.totals[a] = 0;
        let i = O(() => X(this.totals[a], z(r, n)));
        this.totals[a] = i, s != null && s.dispose();
      }
    }
  }
  async onEpochEnd(e17, t) {
    if (t != null) for (let n of this.params.metrics) this.totals[n] != null && (typeof this.totals[n] == "number" ? t[n] = this.totals[n] / this.seen : O(() => {
      let a = z(he(1, this.seen), this.totals[n]);
      t[n] = a, this.totals[n].dispose(), Ht(t[n]);
    }));
  }
};
var F2 = class extends Gl {
  async onTrainBegin(e17) {
    this.epoch = [], this.history = {};
  }
  async onEpochEnd(e17, t) {
    t == null && (t = {}), this.epoch.push(e17);
    for (let n in t) this.history[n] == null && (this.history[n] = []), this.history[n].push(t[n]);
  }
  async syncData() {
    let e17 = [], t = [], n = [];
    for (let r in this.history) {
      let s = this.history[r];
      for (let i = 0; i < s.length; ++i) if (typeof s[i] != "number") {
        let o = s[i];
        e17.push(o.data()), t.push(r), n.push(i);
      }
    }
    let a = await Promise.all(e17);
    for (let r = 0; r < a.length; ++r) this.history[t[r]][n[r]].dispose(), this.history[t[r]][n[r]] = a[r][0];
  }
};
var $2 = class extends Gl {
  constructor(e17, t) {
    if (super(), this.currentEpoch = 0, this.nowFunc = e17.nowFunc, this.nextFrameFunc = e17.nextFrameFunc || Zw, this.yieldEvery = t || "auto", this.yieldEvery === "auto" && (this.yieldEvery = bH), this.yieldEvery === "never" && e17.onYield != null) throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");
    w.isNumber(this.yieldEvery) && (this.maybeWait = bG(this.maybeWait.bind(this), this.yieldEvery, this.nowFunc)), this.trainBegin = e17.onTrainBegin, this.trainEnd = e17.onTrainEnd, this.epochBegin = e17.onEpochBegin, this.epochEnd = e17.onEpochEnd, this.batchBegin = e17.onBatchBegin, this.batchEnd = e17.onBatchEnd, this.yield = e17.onYield;
  }
  async maybeWait(e17, t, n) {
    let a = [];
    this.yield != null && (await Kr(n), a.push(this.yield(e17, t, n))), a.push(this.nextFrameFunc()), await Promise.all(a);
  }
  async onEpochBegin(e17, t) {
    this.currentEpoch = e17, this.epochBegin != null && (await Kr(t), await this.epochBegin(e17, t));
  }
  async onEpochEnd(e17, t) {
    let n = [];
    this.epochEnd != null && (await Kr(t), n.push(this.epochEnd(e17, t))), this.yieldEvery === "epoch" && n.push(this.nextFrameFunc()), await Promise.all(n);
  }
  async onBatchBegin(e17, t) {
    this.batchBegin != null && (await Kr(t), await this.batchBegin(e17, t));
  }
  async onBatchEnd(e17, t) {
    let n = [];
    this.batchEnd != null && (await Kr(t), n.push(this.batchEnd(e17, t))), this.yieldEvery === "batch" ? n.push(this.nextFrameFunc()) : w.isNumber(this.yieldEvery) && n.push(this.maybeWait(this.currentEpoch, e17, t)), await Promise.all(n);
  }
  async onTrainBegin(e17) {
    this.trainBegin != null && (await Kr(e17), await this.trainBegin(e17));
  }
  async onTrainEnd(e17) {
    this.trainEnd != null && (await Kr(e17), await this.trainEnd(e17));
  }
};
function D2(e17, t) {
  return e17 == null && (e17 = {}), e17 instanceof Gl ? [e17] : Array.isArray(e17) && e17[0] instanceof Gl ? e17 : it(e17).map((n) => new $2(n, t));
}
var f0 = class Ja {
  constructor() {
  }
  static registerCallbackConstructor(t, n) {
    w.assert(t >= 0 && Number.isInteger(t), () => `Verbosity level is expected to be an integer >= 0, but got ${t}`), Ja.checkForDuplicate(n), Ja.constructors[t] == null && (Ja.constructors[t] = []), Ja.constructors[t].push(n);
  }
  static checkForDuplicate(t) {
    for (let n in Ja.constructors) Ja.constructors[+n].forEach((a) => {
      if (a === t) throw new V("Duplicate callback constructor.");
    });
  }
  static clear() {
    Ja.constructors = {};
  }
  static createCallbacks(t) {
    let n = [];
    for (let a in Ja.constructors) {
      let r = +a;
      t >= r && n.push(...Ja.constructors[r]);
    }
    return n.map((a) => new a());
  }
};
f0.constructors = {};
function R2(e17, t, n, a, r, s, i, o, l) {
  let u = new F2(), p = [new yH(), ...f0.createCallbacks(t)];
  e17 != null && p.push(...e17), p.push(u);
  let d = new A2(p);
  return d.setParams({ epochs: n, initialEpoch: a, samples: r, steps: s, batchSize: i, verbose: t, doValidation: o, metrics: l }), { callbackList: d, history: u };
}
function Ba(e17, t = {}, n = false) {
  return vd(e17, ne.SerializationMap.getMap().classNameMap, t, "layer", n);
}
function tm(e17, t) {
  return O(() => {
    e17.dtype !== "float32" && (e17 = re(e17, "float32"));
    let n = fe(kd(e17), t, true), a = yn(n.shape, qt()), r = rn(hr(n, a));
    return he(e17, r);
  });
}
function Xo(e17, t) {
  return O(() => Ct(kd(pe(t, e17)), -1));
}
function Tf(e17, t) {
  return O(() => Ct(Lt(pe(t, e17)), -1));
}
function sp(e17, t) {
  return O(() => {
    let n = pe(e17, t), a = an(Lt(e17), qt(), Number.MAX_VALUE), r = Lt(he(n, a));
    return z(100, Ct(r, -1));
  });
}
function xH(e17, t) {
  return O(() => {
    let n = an(t, qt(), Number.MAX_VALUE), a = Qn(X(1, n)), r = an(e17, qt(), Number.MAX_VALUE), s = Qn(X(1, r));
    return Ct(kd(pe(a, s)), -1);
  });
}
function vH(e17, t) {
  return O(() => {
    let n = hr(0, pe(1, z(e17, t)));
    return Ct(kd(n), -1);
  });
}
function wH(e17, t) {
  return O(() => {
    let n = hr(0, pe(1, z(e17, t)));
    return Ct(n, -1);
  });
}
function kH(e17, t) {
  return O(() => {
    let n = fe(z(e17, t), -1), a = ma(z(pe(1, e17), t), -1);
    return hr(0, X(1, pe(a, n)));
  });
}
function IH(e17, t) {
  return O(() => {
    let n = Math.log(2), a = pe(t, e17), r = pe(X(a, Go(z(-2, a))), n);
    return Ct(r, -1);
  });
}
function kc(e17, t, n = false) {
  return O(() => {
    if (n) t = qa(t);
    else {
      let a = fe(t, t.shape.length - 1, true);
      t = he(t, a);
    }
    return t = an(t, qt(), 1 - qt()), yt(fe(z(re(e17, "float32"), Qn(t)), t.shape.length - 1));
  });
}
function nm(e17, t, n = false) {
  return O(() => {
    let a = re(tp(_G(e17)), "int32");
    t = an(t, qt(), 1 - qt());
    let r = t.shape, s = W(Ll(a, r[r.length - 1]), r);
    return kc(s, t, n);
  });
}
function SH(e17, t) {
  if (!w.arraysEqual(e17.shape, t.shape)) throw new V(`logits and labels must have the same shape, but got shapes ${JSON.stringify(e17.shape)} and ${JSON.stringify(t.shape)}`);
  return O(() => {
    let n = Ke(t), a = yt(Lt(t));
    return X(pe(n, z(t, e17)), pd(dn(a)));
  });
}
function Cf(e17, t) {
  return O(() => {
    let n;
    return n = an(t, qt(), 1 - qt()), n = Qn(he(n, pe(1, n))), Ct(SH(e17, n), -1);
  });
}
function NH(e17, t) {
  return O(() => {
    let n = an(e17, qt(), 1), a = an(t, qt(), 1);
    return fe(z(e17, Qn(he(n, a))), -1);
  });
}
function TH(e17, t) {
  return O(() => {
    let n = Qn(X(qt(), t));
    return Ct(pe(t, z(e17, n)), -1);
  });
}
function g0(e17, t) {
  return O(() => {
    let n = tm(e17, -1), a = tm(t, -1), r = z(n, a);
    return yt(fe(r, -1));
  });
}
var am = { meanSquaredError: Xo, meanAbsoluteError: Tf, meanAbsolutePercentageError: sp, meanSquaredLogarithmicError: xH, squaredHinge: vH, hinge: wH, categoricalHinge: kH, logcosh: IH, categoricalCrossentropy: kc, sparseCategoricalCrossentropy: nm, binaryCrossentropy: Cf, kullbackLeiblerDivergence: NH, poisson: TH, cosineProximity: g0 };
function dx(e17) {
  if (typeof e17 == "string") {
    if (e17 in am) return am[e17];
    let t = `Unknown loss ${e17}`;
    throw e17.toLowerCase().includes("softmaxcrossentropy") && (t = `Unknown loss ${e17}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`), new V(t);
  } else return e17;
}
function b0(e17, t) {
  return O(() => {
    let n = z(0.5, ea(t)), a = ir(Cn(t, n), e17.dtype);
    return Ct(Jn(e17, a), -1);
  });
}
function y0(e17, t) {
  return O(() => ir(Jn(di(e17, -1), di(t, -1)), "float32"));
}
function M2(e17, t) {
  return O(() => re(fe(_a(Jn(e17, 1), Jn(t, 1))), "float32"));
}
function CH(e17, t) {
  return O(() => re(fe(_a(Jn(e17, 1), Jn(t, 0))), "float32"));
}
function EH(e17, t) {
  return O(() => re(fe(_a(Jn(e17, 0), Jn(t, 1))), "float32"));
}
function O2(e17, t) {
  return O(() => {
    let n = M2(e17, t), a = EH(e17, t), r = X(n, a);
    return re(nn(Cn(r, 0), he(n, r), 0), "float32");
  });
}
function _H(e17, t) {
  return O(() => {
    let n = M2(e17, t), a = CH(e17, t), r = X(n, a);
    return re(nn(Cn(r, 0), he(n, r), 0), "float32");
  });
}
function P2(e17, t) {
  return Cf(e17, t);
}
function L2(e17, t) {
  return e17.rank === t.rank && (e17 = As(e17, [e17.rank - 1])), t = di(t, -1), t.dtype !== e17.dtype && (t = re(t, e17.dtype)), re(Jn(e17, t), "float32");
}
function AH(e17, t) {
  return O(() => {
    let n = e17.sub(t).square().sum(), a = e17.sub(e17.mean()).square().sum();
    return xe(1).sub(n.div(a));
  });
}
var FH = Xo;
var $H = Xo;
var DH = Tf;
var RH = Tf;
var MH = sp;
var OH = sp;
var x0 = kc;
var PH = g0;
var z2 = nm;
var rm = { binaryAccuracy: b0, categoricalAccuracy: y0, precision: O2, categoricalCrossentropy: x0, sparseCategoricalCrossentropy: z2, mse: FH, MSE: $H, mae: DH, MAE: RH, mape: MH, MAPE: OH, cosine: PH };
function LH(e17) {
  if (typeof e17 == "string" && e17 in rm) return rm[e17];
  if (typeof e17 != "string" && e17 != null) return e17;
  throw new V(`Unknown metric ${e17}`);
}
function Sh(e17) {
  if (tr(e17 !== null, `Unknown LossOrMetricFn ${e17}`), typeof e17 == "string") return e17;
  {
    let t;
    for (let n of Object.keys(am)) if (am[n] === e17) {
      t = n;
      break;
    }
    if (t !== void 0) return t;
    for (let n of Object.keys(rm)) if (rm[n] === e17) {
      t = n;
      break;
    }
    return t !== void 0 ? t : e17.name;
  }
}
function zH(e17) {
  let t = { Adagrad: () => Xs.adagrad(0.01), Adadelta: () => Xs.adadelta(1, 0.95, qt()), Adam: () => Xs.adam(1e-3, 0.9, 0.999, qt()), Adamax: () => Xs.adamax(2e-3, 0.9, 0.999, qt(), 0), RMSProp: () => Xs.rmsprop(1e-3, 0.9, 0, qt()), SGD: () => Xs.sgd(0.01) };
  if (t.adagrad = t.Adagrad, t.adadelta = t.Adadelta, t.adam = t.Adam, t.adamax = t.Adamax, t.rmsprop = t.RMSProp, t.sgd = t.SGD, e17 in t) return t[e17]();
  throw new V(`Unknown Optimizer ${e17}`);
}
function NI(e17, t, n = false) {
  if (e17 == null || typeof e17 != "object" || Object.getPrototypeOf(e17) !== Object.prototype || !Gx(e17)) throw new Error("User-defined metadata is expected to be a JSON object, but is not.");
  if (n) {
    let a = JSON.stringify(e17);
    a.length > 1048576 && console.warn(`User-defined metadata of model "${t}" is too large in size (length=${a.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= 1048576.`);
  }
}
function Gx(e17) {
  if (e17 === null) return true;
  if (typeof e17 == "object") if (Object.getPrototypeOf(e17) === Object.prototype) {
    let t = Object.keys(e17);
    for (let n of t) if (typeof n != "string" || !Gx(e17[n])) return false;
    return true;
  } else if (Array.isArray(e17)) {
    for (let t of e17) if (!Gx(t)) return false;
    return true;
  } else return false;
  else {
    let t = typeof e17;
    return t === "string" || t === "number" || t === "boolean";
  }
}
function WH(e17, t, n, a = console.log) {
  let r = VH(e17), s = ["Layer (type)", "Input Shape", "Output shape", "Param #"];
  r ? (t = t || 90, n = n || [0.32, 0.61, 0.89, 1]) : (t = t || 115, n = n || [0.24, 0.48, 0.7, 0.8, 1]), n[n.length - 1] <= 1 && (n = n.map((p) => Math.floor(t * p)));
  let i;
  if (!r) {
    s.push("Receives inputs"), i = [];
    for (let p in e17.nodesByDepth) i.push(...e17.nodesByDepth[p]);
  }
  a("_".repeat(t)), sm(s, n, a), a("=".repeat(t));
  let o = e17.layers;
  for (let p = 0; p < o.length; ++p) r ? UH(o[p], n, a) : GH(o[p], n, i, a), a((p === o.length - 1 ? "=" : "_").repeat(t));
  e17.checkTrainableWeightsConsistency();
  let l = BH(e17), u = Jh(e17.nonTrainableWeights);
  a(`Total params: ${l + u}`), a(`Trainable params: ${l}`), a(`Non-trainable params: ${u}`), a("_".repeat(t));
}
function BH(e17) {
  let t;
  return e17.collectedTrainableWeights != null ? t = Jh(e17.collectedTrainableWeights) : t = Jh(e17.trainableWeights), t;
}
function VH(e17) {
  let t = true, n = [], a = [];
  for (let r in e17.nodesByDepth) n.push(e17.nodesByDepth[r]);
  for (let r of n) {
    if (r.length > 1 || r.length === 1 && r[0].inboundLayers.length > 1) {
      t = false;
      break;
    }
    a.push(...r);
  }
  if (t) for (let r of e17.layers) {
    let s = false;
    for (let i of r.inboundNodes) if (a.indexOf(i) !== -1) if (s) {
      t = false;
      break;
    } else s = true;
    if (!t) break;
  }
  return t;
}
function sm(e17, t, n = console.log) {
  let a = "";
  for (let r = 0; r < e17.length; ++r) r > 0 && (a = a.slice(0, a.length - 1) + " "), a += e17[r], a = a.slice(0, t[r]), a += " ".repeat(t[r] - a.length);
  n(a);
}
function UH(e17, t, n) {
  let a, r;
  try {
    r = e17.inboundNodes.map((l) => JSON.stringify(l.inputShapes)).join(",");
  } catch (l) {
    r = "multiple";
  }
  try {
    a = JSON.stringify(e17.outputShape);
  } catch (l) {
    a = "multiple";
  }
  let s = e17.name, i = e17.getClassName(), o = [`${s} (${i})`, r, a, e17.countParams().toString()];
  sm(o, t, n);
}
function GH(e17, t, n, a) {
  let r, s;
  try {
    s = e17.inboundNodes.map((d) => JSON.stringify(d.inputShapes)).join(",");
  } catch (d) {
    s = "multiple";
  }
  try {
    r = JSON.stringify(e17.outputShape);
  } catch (d) {
    r = "multiple";
  }
  let i = [];
  for (let d of e17.inboundNodes) if (!(n != null && n.length > 0 && n.indexOf(d) === -1)) for (let c = 0; c < d.inboundLayers.length; ++c) {
    let h = d.inboundLayers[c].name, m = d.nodeIndices[c], f = d.tensorIndices[c];
    i.push(`${h}[${m}][${f}]`);
  }
  let o = e17.name, l = e17.getClassName(), u = i.length === 0 ? "" : i[0], p = [`${o} (${l})`, s, r, e17.countParams().toString(), u];
  sm(p, t, a);
  for (let d = 1; d < i.length; ++d) sm(["", "", "", "", i[d]], t, a);
}
function W2(e17, t, n) {
  return (e17 === "inboundNodes" || e17 === "outputLayers" || e17 === "inputLayers") && t === 0 && typeof n == "string";
}
function Ic(e17, t) {
  if (e17 === null) return null;
  if (typeof e17 == "string") return Js(e17);
  if (typeof e17 == "number" || typeof e17 == "boolean") return e17;
  if (e17 instanceof Array) {
    let n = [], a = e17.length;
    for (let r = 0; r < a; ++r) {
      let s = e17[r];
      W2(t, r, s) ? n.push(s) : n.push(Ic(s, t));
    }
    return n;
  } else {
    let n = {};
    for (let a of Object.keys(e17)) {
      let r = e17[a];
      if (a === "name" && typeof r == "string") n[a] = r;
      else {
        let s = Js(a);
        n[s] = Ic(r, s);
      }
    }
    return n;
  }
}
function Hx(e17, t) {
  if (e17 == null) return null;
  if (typeof e17 == "string") return Ir(e17);
  if (typeof e17 == "number" || typeof e17 == "boolean") return e17;
  if (e17 instanceof Array) {
    let n = [], a = e17.length;
    for (let r = 0; r < a; ++r) {
      let s = e17[r];
      W2(t, r, s) ? n.push(s) : n.push(Hx(s, t));
    }
    return n;
  } else {
    let n = {};
    for (let a of Object.keys(e17)) {
      let r = e17[a], s = Ir(a);
      (a === "name" || a === "className") && typeof r == "string" ? n[s] = r : n[s] = Hx(r, a);
    }
    return n;
  }
}
var v0 = "4.22.0";
var HH = (e17) => {
  let t = Object.keys(e17);
  if (t.length === 0) return false;
  let n = t[0].split("/");
  return !isNaN(parseInt(n[n.length - 1], 10));
};
var jH = class Qa extends We {
  constructor(t) {
    if (super({}), this.containerNodes = /* @__PURE__ */ new Set(), this.name = t.name, this.name == null) {
      let y = this.getClassName().toLowerCase();
      this.name = gf(y);
    }
    if (this.supportsMasking = false, this.trainable_ = true, Array.isArray(t.inputs) ? this.inputs = t.inputs.slice() : this.inputs = [t.inputs], Array.isArray(t.outputs) ? this.outputs = t.outputs.slice() : this.outputs = [t.outputs], as(this.inputs).length !== this.inputs.length) throw new V(`The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map((y) => y.name)}`);
    as(this.outputs).length !== this.outputs.length && console.warn(`The list of outputs passed to the model is redundant. All outputs should only appear once. Found: ${this.outputs.map((y) => y.name)}`), this.inputLayers = [], this.inputLayersNodeIndices = [], this.inputLayersTensorIndices = [], this.outputLayers = [], this.outputLayersNodeIndices = [], this.outputLayersTensorIndices = [], this.layers = [], this.internalContainerRefs = [];
    for (let y of this.outputs) {
      let x = y.sourceLayer, v = y.nodeIndex, I = y.tensorIndex;
      this.outputLayers.push(x), this.outputLayersNodeIndices.push(v), this.outputLayersTensorIndices.push(I);
    }
    for (let y of this.inputs) {
      let x = y.sourceLayer, v = y.nodeIndex, I = y.tensorIndex;
      tr(v === 0, "input layer has >1 nodes"), tr(I === 0, "input layer has >1 tensors"), this.inputLayers.push(x), this.inputLayersNodeIndices.push(v), this.inputLayersTensorIndices.push(I);
    }
    this.inputNames = [], this.outputNames = [], this.feedInputShapes = [], this.feedInputNames = [], this.feedOutputNames = [];
    for (let y = 0; y < this.inputLayers.length; y++) {
      let x = this.inputLayers[y];
      if (!(x instanceof rp)) throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${t.inputs}. Input ${y} (0-based) originates from layer type ${x.getClassName()}.`);
      this.inputNames.push(x.name), this.feedInputShapes.push(x.batchInputShape), this.feedInputNames.push(x.name);
    }
    for (let y of this.outputLayers) this.outputNames.push(y.name);
    this.internalInputShapes = this.inputs.map((y) => y.shape), this.internalOutputShapes = this.outputs.map((y) => y.shape);
    let n = {}, a = {}, r = {}, s = {}, i = {}, o = [], l = (y, x, v, I, N, C) => {
      (I == null || N == null || C == null) && (I = y.sourceLayer, N = y.nodeIndex, C = y.tensorIndex);
      let _ = I.inboundNodes[N];
      if (v.indexOf(_) !== -1) throw new ar(`The tensor ${y.name} at layer "${I.name}" is part of a cycle.`);
      if (x.indexOf(_) !== -1) return;
      this.containerNodes.add(Qa.nodeKey(I, N)), I.id in i || (i[I.id] = Object.keys(i).length), v.indexOf(_) === -1 && v.push(_);
      let F = _.inboundLayers.length;
      for (let D = 0; D < F; D++) {
        let $ = _.inputTensors[D], S = _.inboundLayers[D], M = _.nodeIndices[D], B = _.tensorIndices[D];
        l($, x, v, S, M, B);
      }
      for (x.push(_); v.indexOf(_) >= 0; ) v.splice(v.indexOf(_), 1);
      o.push(_);
    }, u = [], p = [];
    for (let y of this.outputs) l(y, u, p);
    let d = o.slice().reverse();
    for (let y of d) {
      a[y.id] = y, y.id in n || (n[y.id] = 0);
      let x = n[y.id], v = r[y.outboundLayer.id] == null ? 0 : r[y.outboundLayer.id];
      x = Math.max(x, v), r[y.outboundLayer.id] = x, s[y.outboundLayer.id] = y.outboundLayer, n[y.id] = x;
      for (let I = 0; I < y.inboundLayers.length; I++) {
        let N = y.inboundLayers[I], C = y.nodeIndices[I], _ = N.inboundNodes[C], F = n[_.id] == null ? 0 : n[_.id];
        n[_.id] = Math.max(x + 1, F), a[_.id] = _;
      }
    }
    let c = {};
    for (let y in n) {
      let x = n[y];
      x in c || (c[x] = []), c[x].push(a[y]);
    }
    let h = {};
    for (let y in r) {
      let x = r[y];
      x in h || (h[x] = []), h[x].push(s[y]);
    }
    let m = Object.keys(h).map((y) => parseInt(y, 10)).sort(wh);
    this.layers = [];
    for (let y of m) {
      let x = h[y];
      x.sort((v, I) => {
        let N = i[v.id], C = i[I.id];
        return N < C ? -1 : N > C ? 1 : 0;
      });
      for (let v of x) v instanceof Qa && this.internalContainerRefs.push(v), this.layers.push(v);
    }
    this.layersByDepth = h, m = Object.keys(c).map((y) => parseInt(y, 10)).sort(wh);
    let f = this.inputs.slice(), g = [];
    for (let y of m) for (let x of c[y]) {
      let v = x.outboundLayer;
      if (v != null) {
        for (let I of x.inputTensors) if (f.indexOf(I) === -1) throw new ar(`Graph disconnected: cannot obtain value for tensor ${I} at layer "${v.name}". The following previous layers were accessed without issue: ${g}`);
        for (let I of x.outputTensors) f.push(I);
        g.push(v.name);
      }
    }
    this.nodesByDepth = c;
    let b = this.layers.map((y) => y.name);
    for (let y of b) {
      let x = b.filter((v) => v === y).length;
      if (x !== 1) throw new ar(`The name "${y}" is used ${x} times in the model. All layer names should be unique. Layer names: ` + JSON.stringify(b));
    }
    this.outboundNodes = [], this.inboundNodes = [], new Nf({ outboundLayer: this, inboundLayers: [], nodeIndices: [], tensorIndices: [], inputTensors: this.inputs, outputTensors: this.outputs, inputMasks: this.inputs.map((y) => null), outputMasks: this.outputs.map((y) => null), inputShapes: this.inputs.map((y) => y.shape), outputShapes: this.outputs.map((y) => y.shape) }), this.built = true, this._refCount = 1;
  }
  assertNotDisposed() {
    if (this._refCount === 0) throw new Error(`Container '${this.name}' is already disposed.`);
  }
  dispose() {
    this.assertNotDisposed();
    let t = { refCountAfterDispose: null, numDisposedVariables: 0 };
    if (--this._refCount === 0) {
      for (let n of this.layers) t.numDisposedVariables += n.dispose().numDisposedVariables;
      for (let n of this.internalContainerRefs) t.numDisposedVariables += n.dispose().numDisposedVariables;
    }
    return t.refCountAfterDispose = this._refCount, t;
  }
  get trainable() {
    return this.trainable_;
  }
  set trainable(t) {
    this.layers.forEach((n) => {
      n._trainableWeights.forEach((a) => a.trainable = t);
    }), this.trainable_ = t;
  }
  get trainableWeights() {
    if (this._trainableWeights.length > 0) throw new V("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");
    if (!this.trainable) return [];
    let t = [];
    for (let n of this.layers) t = t.concat(n.trainableWeights);
    return t;
  }
  get nonTrainableWeights() {
    let t = [];
    for (let n of this.layers) t.push(...n.nonTrainableWeights);
    if (!this.trainable) {
      let n = [];
      for (let a of this.layers) n.push(...a.trainableWeights);
      return n.concat(t);
    }
    return t;
  }
  get weights() {
    return this.trainableWeights.concat(this.nonTrainableWeights);
  }
  loadWeights(t, n = true) {
    let a = {}, r = 0, s = HH(t);
    s && this.parseWeights(t);
    for (let o of this.layers) for (let [l, u] of o.weights.entries()) {
      let p = s ? `${u.name.split("/").slice(0, -1).join("/") + "/"}${l}` : u.originalName;
      if (a[p] != null) throw new V(`Duplicate weight name: ${p}`);
      a[p] = u, r++;
    }
    let i = [];
    for (let o in t) {
      let l = o;
      if (a[o] == null) {
        let u = o.split("/");
        l = u.slice(0, -2).concat([u[u.length - 1]]).join("/");
      }
      if (a[l] != null) i.push([a[l], t[o]]);
      else if (n) throw new V(`Provided weight data has no target variable: ${o}`);
      delete a[l];
    }
    if (n) {
      let o = [];
      for (let l in a) o.push(l);
      if (o.length > 0) throw new V(`${o.length} of ${r} weights are not set: ${o}`);
    }
    u0(i);
  }
  parseWeights(t) {
    for (let n in Object.keys(t)) {
      let a = n.split("/"), r = ["vars", "layer_checkpoint_dependencies"], s = a.map((i) => i.startsWith("_") ? i.slice(1) : i).filter((i) => !r.includes(i)).join("/");
      s !== n && (t[s] = t[n], delete t[n]);
    }
  }
  updatedConfig() {
    let t = this.getConfig(), n = {};
    return n.className = this.getClassName(), n.config = t, n.kerasVersion = `tfjs-layers ${v0}`, n.backend = "TensorFlow.js", n;
  }
  toJSON(t, n = true) {
    let a = Hx(this.updatedConfig());
    return n ? JSON.stringify(a) : a;
  }
  call(t, n) {
    return O(() => {
      t = it(t);
      let a = new Cl();
      for (let r = 0; r < this.inputs.length; ++r) a.add(this.inputs[r], t[r]);
      return tc(this.outputs, a, n);
    });
  }
  computeMask(t, n) {
    return O(() => {
      t = it(t);
      let a;
      return n == null ? a = bi(null, t.length) : a = it(n), this.runInternalGraph(t, a)[1];
    });
  }
  computeOutputShape(t) {
    let n = Zh(t);
    if (n.length !== this.inputLayers.length) throw new V(`Invalid inputShape argument ${t}: model has ${this.inputLayers.length} tensor inputs.`);
    let a = {};
    for (let o = 0; o < n.length; o++) {
      let l = this.inputLayers[o], u = n[o], p = l.name + "_0_0";
      a[p] = u;
    }
    let r = Object.keys(this.nodesByDepth).map((o) => parseInt(o, 10)).sort(wh);
    if (r.length > 1) for (let o of r) {
      let l = this.nodesByDepth[o];
      for (let u of l) {
        let p = u.outboundLayer;
        if (this.inputLayers.map((f) => f.id).indexOf(p.id) !== -1) continue;
        let d = [];
        for (let f = 0; f < u.inboundLayers.length; f++) {
          let g = u.inboundLayers[f], b = u.nodeIndices[f], y = u.tensorIndices[f], x = `${g.name}_${b}_${y}`, v = a[x];
          d.push(v);
        }
        let c = p.computeOutputShape(Mn(d)), h = Zh(c), m = p.inboundNodes.indexOf(u);
        for (let f = 0; f < h.length; f++) {
          let g = `${p.name}_${m}_${f}`;
          a[g] = h[f];
        }
      }
    }
    let s = [], i = [];
    for (let o = 0; o < this.outputLayers.length; o++) {
      let l = this.outputLayers[o], u = this.outputLayersNodeIndices[o], p = this.outputLayersTensorIndices[o], d = `${l.name}_${u}_${p}`;
      i.push(d);
    }
    for (let o = 0; o < i.length; o++) {
      let l = i[o];
      tr(l in a), s.push(a[l]);
    }
    return Mn(s);
  }
  runInternalGraph(t, n) {
    n == null && (n = bi(null, t.length));
    let a = {};
    for (let l = 0; l < this.inputs.length; ++l) {
      let u = this.inputs[l], p = t[l], d = n[l];
      a[u.id] = [p, d];
    }
    let r = Object.keys(this.nodesByDepth).map((l) => parseInt(l, 10)).sort(wh);
    for (let l of r) {
      let u = this.nodesByDepth[l];
      for (let p of u) {
        let d = p.outboundLayer, c = p.inputTensors, h = p.outputTensors, m = new Array();
        for (let f of c) f.id in a && m.push(a[f.id]);
        if (m.length === c.length) {
          let f = {}, g, b, y, x;
          if (p.callArgs != null && (f = p.callArgs), m.length === 1) {
            let [v, I] = m[0];
            f.mask == null && (f.mask = I), y = it(d.call(v, f)), x = it(d.computeMask(v, I)), g = [v], b = [I];
          } else g = m.map((v) => v[0]), b = m.map((v) => v[1]), f.mask == null && (f.mask = b), y = it(d.call(g, f)), x = it(d.computeMask(g, b));
          if (d.activityRegularizer) throw new ze("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");
          for (let v = 0; v < h.length; ++v) {
            let I = h[v], N = y[v], C = x[v];
            a[I.id] = [N, C];
          }
        }
      }
    }
    let s = [], i = [], o = [];
    for (let l of this.outputs) {
      tr(l.id in a, `Could not compute output ${l.name} : ${l.id}`);
      let [u, p] = a[l.id];
      o.push(u.shape), s.push(u), i.push(p);
    }
    return [s, i, o];
  }
  buildNodeConversionMap(t) {
    let n = {}, a;
    for (let r of this.layers) {
      a = r instanceof Qa ? 1 : 0;
      for (let s = 0; s < r.inboundNodes.length; s++) {
        let i = Qa.nodeKey(r, s);
        this.containerNodes.has(i) && (n[i] = a, a += 1);
      }
    }
    return n;
  }
  getLayer(t, n) {
    if (n != null) return this.findLayer(n);
    if (t == null) throw new V("Provide either a layer name or layer index");
    if (typeof t == "number") return this.findLayer(t);
    for (let a of this.layers) if (a.name === t) return a;
    throw new V(`No such layer: ${t}`);
  }
  findLayer(t) {
    if (this.layers.length <= t) throw new V(`Was asked to retrieve layer at index ${t}, but model only has ${this.layers.length} layer(s).`);
    return this.layers[t];
  }
  calculateLosses() {
    return O(() => {
      let t = [];
      for (let n of this.layers) for (let a = 0; a < n.inboundNodes.length; ++a) {
        let r = Qa.nodeKey(n, a);
        this.containerNodes.has(r) && t.push(...n.calculateLosses());
      }
      return t;
    });
  }
  getConfig() {
    let t = { name: this.name }, n = this.buildNodeConversionMap(this.layers), a = [];
    for (let i of this.layers) {
      let o = i.getClassName(), l = i.getConfig(), u = [];
      for (let d = 0; d < i.inboundNodes.length; d++) {
        let c = i.inboundNodes[d], h = Qa.nodeKey(i, d), m = {};
        if (this.containerNodes.has(h)) {
          if (c.callArgs) try {
            JSON.stringify(c.callArgs), m = c.callArgs;
          } catch (f) {
            console.warn(`Layer ${i.name} was passed non-serializable keyword arguments: ${c.callArgs}. They will not be included in the serialized model (and thus will be missing at deserialization time).`), m = {};
          }
          if (c.inboundLayers.length > 0) {
            let f = [];
            for (let g = 0; g < c.inboundLayers.length; g++) {
              let b = c.inboundLayers[g], y = c.nodeIndices[g], x = c.tensorIndices[g], v = Qa.nodeKey(b, y), I = n[v];
              I == null && (I = 0), f.push([b.name, I, x, m]);
            }
            u.push(f);
          }
        }
      }
      let p = {};
      p.name = i.name, p.className = o, p.config = l, p.inboundNodes = u, a.push(p);
    }
    t.layers = a;
    let r = [];
    for (let i = 0; i < this.inputLayers.length; i++) {
      let o = this.inputLayers[i], l = this.inputLayersNodeIndices[i], u = Qa.nodeKey(o, l);
      if (!this.containerNodes.has(u)) continue;
      let p = n[u];
      p == null && (p = 0);
      let d = this.inputLayersTensorIndices[i];
      r.push([o.name, p, d]);
    }
    t.inputLayers = r;
    let s = [];
    for (let i = 0; i < this.outputLayers.length; i++) {
      let o = this.outputLayers[i], l = this.outputLayersNodeIndices[i], u = Qa.nodeKey(o, l);
      if (!this.containerNodes.has(u)) continue;
      let p = n[u];
      p == null && (p = 0);
      let d = this.outputLayersTensorIndices[i];
      s.push([o.name, p, d]);
    }
    return t.outputLayers = s, t;
  }
  static fromConfig(t, n, a = {}, r = false) {
    let s = {}, i = {};
    function o(g, b) {
      g.name in i ? i[g.name].push(b) : i[g.name] = [b];
    }
    function l(g, b) {
      let y = [], x;
      for (let v of b) {
        let I = v[0], N = v[1], C = v[2];
        if (x = v[3] == null ? {} : v[3], !(I in s)) {
          o(g, b);
          return;
        }
        let _ = s[I];
        if (_.inboundNodes.length <= N) {
          o(g, b);
          return;
        }
        let F = _.inboundNodes[N];
        y.push(F.outputTensors[C]);
      }
      y.length > 0 && g.apply(Mn(y), x);
    }
    function u(g) {
      let b = g.name, y = Ba(g, n.customObjects != null ? n.customObjects : {});
      y.setFastWeightInitDuringBuild(r), s[b] = y, g.inboundNodes.forEach((x) => {
        if (!(x instanceof Array)) throw new V(`Corrupted configuration, expected array for nodeData: ${x}`);
        o(y, x);
      });
    }
    let p = n.name, d = n.layers;
    for (let g of d) u(g);
    for (; !gG(i); ) for (let g of d) {
      let b = s[g.name];
      if (b.name in i) {
        let y = i[b.name];
        delete i[b.name];
        for (let x of y) l(b, x);
      }
    }
    let c = [], h = [], m = n.inputLayers;
    for (let g of m) {
      let b = g[0], y = g[1], x = g[2];
      tr(b in s);
      let v = s[b].inboundNodes[y].outputTensors;
      c.push(v[x]);
    }
    let f = n.outputLayers;
    for (let g of f) {
      let b = g[0], y = g[1], x = g[2];
      tr(b in s);
      let v = s[b].inboundNodes[y].outputTensors;
      h.push(v[x]);
    }
    return new t({ inputs: c, outputs: h, name: p });
  }
  get stateful() {
    if (this._stateful) throw new V("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");
    for (let t of this.layers) if (t.stateful) return true;
    return false;
  }
  resetStates() {
    O(() => {
      this.layers.forEach((t) => {
        t.stateful && t.resetStates();
      });
    });
  }
};
function qH(e17, t, n) {
  let a = t.length;
  if (e17 == null || Array.isArray(e17) && e17.length === 0) return t.map((r) => null);
  if (a === 1) return Array.isArray(e17) && e17.length === 1 ? e17 : typeof e17 == "object" && t[0] in e17 ? [e17[t[0]]] : [e17];
  if (Array.isArray(e17)) {
    if (e17.length !== a) throw new Error(`Provided ${n} is an array of ${e17.length} element(s), but the model has ${a} outputs. Make sure a set of weights is provided for each model output.`);
    return e17;
  } else if (typeof e17 == "object" && Object.keys(e17).length > 0 && typeof e17[Object.keys(e17)[0]] == "object") {
    let r = [];
    return t.forEach((s) => {
      s in e17 ? r.push(e17[s]) : r.push(null);
    }), r;
  } else throw new Error(`The model has multiple (${a}) outputs, so ${n} must be either an array with ${a} elements or an object with ${t} keys. Provided ${n} not understood: ${JSON.stringify(e17)}`);
}
function B2(e17, t) {
  return qH(e17, t, "classWeight");
}
async function V2(e17, t, n, a) {
  if (t != null || a != null) throw new Error("Support sampleWeight is not implemented yet");
  if (n != null) {
    let r = O(() => {
      if (e17.shape.length === 1) return sr(e17);
      if (e17.shape.length === 2) {
        if (e17.shape[1] > 1) return di(e17, 1);
        if (e17.shape[1] === 1) return W(e17, [e17.shape[0]]);
        throw new Error(`Encountered unexpected last-dimension size (${e17.shape[1]}) during handling of class weights. The size is expected to be >= 1.`);
      } else throw new Error(`Unexpected rank of target (y) tensor (${e17.rank}) during handling of class weights. The rank is expected to be 1 or 2.`);
    }), s = Array.from(await r.data());
    Ee(r);
    let i = [];
    return s.forEach((o) => {
      if (n[o] == null) throw new Error(`classWeight must contain all classes in the training data. The class ${o} exists in the data but not in classWeight`);
      i.push(n[o]);
    }), je(i, "float32");
  } else return null;
}
function KH(e17, t) {
  return z(e17, t);
}
var XH = 32;
function U2(e17, t) {
  let n, a, r = t;
  n = r.xs, a = r.ys, w.assert(n != null && a != null, () => `A Dataset iterator for fitDataset() is expected to generate objects of the form \`{xs: xVal, ys: yVal}\`, where the two values may be \`tf.Tensor\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${t}`);
  let s = TI("input", e17.inputNames, n), i = TI("output", e17.outputNames, a), o = s[0].shape[0];
  w.assert(s.length === e17.inputs.length, () => `LayersModel has ${e17.inputs.length} inputs, but the dataset provides ${s.length} inputs.  (Expected input keys: ${JSON.stringify(e17.inputNames)})`), w.assert(i.length === e17.outputs.length, () => `LayersModel has ${e17.outputs.length} outputs, but the dataset provides ${i.length} outputs.  (Expected output keys: ${JSON.stringify(e17.outputNames)})`);
  for (let l = 0; l < s.length; l++) w.assert(s[l].shape[0] === o, () => `Batch size mismatch: input ${e17.inputNames[l]} has ${s[l].shape[0]}; expected  ${o} based on input ${e17.inputNames[0]}.`);
  for (let l = 0; l < i.length; l++) w.assert(i[l].shape[0] === o, () => `Batch size mismatch: output ${e17.outputNames[l]} has ${i[l].shape[0]}; expected  ${o} based on input ${e17.inputNames[0]}.`);
  return { xs: s, ys: i };
}
function TI(e17, t, n) {
  if (n instanceof Ce) return [n];
  if (Array.isArray(n)) return w.assert(n.length === t.length, () => `Received an array of ${n.length} Tensors, but expected ${t.length} to match the ${e17} keys ${t}.`), n;
  {
    let a = [];
    for (let r of t) {
      if (n[r] == null) throw new V(`The feature data generated by the dataset lacks the required ${e17} key '${r}'.`);
      a.push(n[r]);
    }
    return a;
  }
}
function YH(e17) {
  if (e17.length === 3) throw new ze("Validation with sample weights is not implemented yet.");
  return { xs: e17[0], ys: e17[1] };
}
async function ZH(e17, t, n) {
  let a = n.batchesPerEpoch != null;
  if (w.assert(e17.optimizer != null, () => "You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig)."), w.assert(n != null, () => "For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call."), w.assert(n.epochs != null && n.epochs > 0 && Number.isInteger(n.epochs), () => `For fitDataset(), config.epochs is expected to be a positive integer, but got ${n.epochs}`), w.assert(!a || n.batchesPerEpoch > 0 && Number.isInteger(n.batchesPerEpoch), () => `For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${n.batchesPerEpoch}`), w.assert(n.validationSplit == null, () => "`validationSplit` is not supported by `fitDataset()`. Use validationData instead."), e17.isTraining) throw new Error("Cannot start training because another fit() call is ongoing.");
  e17.isTraining = true;
  try {
    let r = n.validationData != null, s, i;
    if (r) if (CI(n.validationData)) w.assert(n.validationBatches == null || n.validationBatches > 0 && Number.isInteger(n.validationBatches), () => `For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${n.validationBatches}`);
    else {
      let g = YH(n.validationData);
      s = g.xs, i = g.ys;
    }
    let o = e17.makeTrainFunction(), l = e17.getDedupedMetricsNames(), u;
    r ? u = l.slice().concat(l.map((g) => "val_" + g)) : u = l.slice();
    let p = D2(n.callbacks, n.yieldEvery), d = n.verbose == null ? 1 : n.verbose, { callbackList: c, history: h } = R2(p, d, n.epochs, null, null, JH(t, n), null, r, u);
    c.setModel(e17), e17.history = h, await c.onTrainBegin(), e17.stopTraining_ = false;
    let m = n.initialEpoch == null ? 0 : n.initialEpoch, f = await t.iterator();
    for (; m < n.epochs; ) {
      let g = {};
      await c.onEpochBegin(m);
      let b = 0, y = 0;
      for (a || (f = await t.iterator()); !a || b < n.batchesPerEpoch; ) {
        let x = await f.next();
        if (a && x.done) {
          console.warn(`You provided \`batchesPerEpoch\` as ${n.batchesPerEpoch}, but your dataset iterator ran out of data after ${b} batches; interrupting training. Make sure that your dataset can generate at least \`batchesPerEpoch * epochs\` batches (in this case, ${n.batchesPerEpoch * n.epochs} batches). You may need to use the repeat() function when building your dataset.`);
          break;
        }
        if (x.value != null) {
          let { xs: v, ys: I } = U2(e17, x.value), N = {};
          N.batch = y, N.size = v[0].shape[0], await c.onBatchBegin(y, N);
          let C = [];
          if (n.classWeight != null) {
            let D = B2(n.classWeight, e17.outputNames);
            for (let $ = 0; $ < D.length; ++$) C.push(await V2(I[$], null, D[$]));
          }
          let _ = v.concat(I).concat(C), F = o(_);
          Ee(_);
          for (let D = 0; D < l.length; ++D) {
            let $ = l[D], S = F[D];
            N[$] = S, Ht(S);
          }
          await c.onBatchEnd(y, N), _2(N), y++, b++;
        }
        if (a ? b >= n.batchesPerEpoch : x.done) {
          if (r) {
            let v;
            CI(n.validationData) ? v = it(await e17.evaluateDataset(n.validationData, { batches: n.validationBatches })) : v = it(e17.evaluate(s, i, { batchSize: n.validationBatchSize == null ? XH : n.validationBatchSize, verbose: 0 }));
            for (let I = 0; I < e17.metricsNames.length; ++I) g[`val_${e17.metricsNames[I]}`] = v[I];
          }
          break;
        }
        if (e17.stopTraining_) break;
      }
      if (await c.onEpochEnd(m, g), m++, e17.stopTraining_) break;
    }
    return await c.onTrainEnd(), await e17.history.syncData(), e17.history;
  } finally {
    e17.isTraining = false;
  }
}
function JH(e17, t) {
  let n = null;
  return t.batchesPerEpoch != null ? n = t.batchesPerEpoch : Number.isFinite(e17.size) && (n = e17.size), n;
}
function CI(e17) {
  return typeof e17.iterator == "function";
}
function QH(e17) {
  return typeof e17.next == "function";
}
async function ej(e17, t, n) {
  n = n || {};
  let a = n.batches != null, r = e17.testFunction, s = [];
  if (n.verbose > 0) throw new ze("Verbose mode is not implemented yet.");
  w.assert(!a || n.batches > 0 && Number.isInteger(n.batches), () => `Test loop expects \`batches\` to be a positive integer, but received ${JSON.stringify(n.batches)}`);
  let i = QH(t) ? t : await t.iterator(), o = 0, l = 0;
  for (; !a || l < n.batches; ) {
    let u = await i.next();
    if (s = O(() => {
      if (u.value) {
        let { xs: p, ys: d } = U2(e17, u.value), c = p.concat(d), h = O(() => r(c));
        if (Ee(c), l === 0) for (let f = 0; f < h.length; ++f) s.push(xe(0));
        let m = c[0].shape[0];
        for (let f = 0; f < h.length; ++f) {
          let g = h[f], b = s[f];
          s[f] = O(() => X(s[f], z(m, g))), l > 0 && Ee(b);
        }
        Ee(h), o += m, ++l;
      }
      return s;
    }), u.done) {
      a && console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${n.batches} batches). You may need to use the repeat() function when building your dataset.`);
      break;
    }
  }
  for (let u = 0; u < s.length; ++u) {
    let p = s[u];
    s[u] = he(s[u], o), Ee(p);
  }
  return Mn(s);
}
function hx(e17) {
  w.assert(e17 > 0 && Number.isInteger(e17), () => `batchSize is required to be a positive integer, but got ${e17}`);
}
function Xp(e17, t, n) {
  return e17 == null ? [null] : Array.isArray(e17) ? e17.map((a) => si(a, t, n - t)) : si(e17, t, n - t);
}
function jx(e17, t) {
  return O(() => e17 == null ? null : Array.isArray(e17) ? e17.map((n) => jx(n, t)) : v2(e17, t.dtype === "int32" ? t : re(t, "int32")));
}
function mx(e17, t) {
  let n = [], a = 0, r = null;
  for (; a < e17; ) r = a + t, r >= e17 && (r = e17), n.push([a, r]), a = r;
  return n;
}
function G2(e17) {
  let t = [];
  e17 instanceof Ce && (e17 = [e17]);
  for (let n = 0; n < e17.length; ++n) {
    let a = e17[n];
    if (a.rank === 1) t.push(wd(a, 1));
    else {
      if (a.rank === 0) throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");
      t.push(a);
    }
  }
  return t;
}
function Pa(e17, t) {
  if (e17 == null) return;
  let n = [];
  if (t instanceof Ce) n.push(t.id);
  else if (Array.isArray(t)) t.forEach((r) => n.push(r.id));
  else if (t != null) for (let r in t) {
    let s = t[r];
    n.push(s.id);
  }
  let a = [];
  if (e17 instanceof Ce) n.indexOf(e17.id) === -1 && a.push(e17);
  else if (Array.isArray(e17)) e17.forEach((r) => {
    n.indexOf(r.id) === -1 && a.push(r);
  });
  else if (e17 != null) for (let r in e17) {
    let s = e17[r];
    n.indexOf(s.id) === -1 && a.push(s);
  }
  a.forEach((r) => {
    r.isDisposed || r.dispose();
  });
}
function tj(e17) {
  return e17 instanceof Ce;
}
function qx(e17) {
  return Array.isArray(e17);
}
function EI(e17) {
  return !tj(e17) && !qx(e17);
}
function _I(e17, t, n, a = true, r = "") {
  if (t == null || t.length === 0) {
    if (e17 != null) {
      let i = false;
      if (qx(e17) && e17.length > 0) i = true;
      else if (EI(e17)) {
        for (let o in e17) if (e17.hasOwnProperty(o)) {
          i = true;
          break;
        }
      } else i = true;
      if (i) throw new V(`Error when checking model ${r} expected no data, but got ${e17}`);
    }
    return [];
  }
  if (e17 == null) return t.map((i) => null);
  let s;
  if (EI(e17)) {
    e17 = e17, s = [];
    for (let i of t) {
      if (e17[i] == null) throw new V(`No data provided for "${i}". Need data for each key in: ${t}`);
      s.push(e17[i]);
    }
  } else if (qx(e17)) {
    if (e17 = e17, e17.length !== t.length) throw new V(`Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${t.length} Tensor(s), but instead got the following list of Tensor(s): ${e17}`);
    s = e17;
  } else {
    if (e17 = e17, t.length > 1) throw new V(`The model ${r} expects ${t.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${e17.shape}`);
    s = [e17];
  }
  if (s = G2(s), n != null) for (let i = 0; i < t.length; ++i) {
    if (n[i] == null) continue;
    let o = s[i];
    if (o.shape.length !== n[i].length) throw new V(`Error when checking ${r}: expected ${t[i]} to have ${n[i].length} dimension(s). but got array with shape ${o.shape}`);
    for (let l = 0; l < n[i].length; ++l) {
      if (l === 0 && !a) continue;
      let u = o.shape[l], p = n[i][l];
      if (p != null && p >= 0 && u !== p) throw new V(`${r} expected a batch of elements where each example has shape [${n[i].slice(1, n[i].length)}] (i.e.,tensor shape [*,${n[i].slice(1, n[i].length)}]) but the ${r} received an input with ${o.shape[0]} examples, each with shape [${o.shape.slice(1, o.shape.length)}] (tensor shape [${o.shape}])`);
    }
  }
  return s;
}
function nj(e17, t, n) {
  let a = as(e17.map((s) => s.shape[0]));
  a.sort();
  let r = as(t.map((s) => s.shape[0]));
  if (r.sort(), a.length > 1) throw new V(`All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(e17.map((s) => s.shape))}`);
  if (r.length > 1) throw new V(`All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(t.map((s) => s.shape))}`);
  if (a.length > 0 && r.length > 0 && !w.arraysEqual(a, r)) throw new V(`Input Tensors should have the same number of samples as target Tensors. Found ${a[0]} input sample(s) and ${r[0]} target sample(s).`);
}
function aj(e17, t, n) {
  let a = [Xo, Cf, kc];
  for (let r = 0; r < e17.length; ++r) {
    let s = e17[r], i = t[r], o = n[r];
    if (i != null) {
      if (i === kc && s.shape[s.shape.length - 1] === 1) throw new V(`You are passing a target array of shape ${s.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);
      if (a.indexOf(i) !== -1) {
        let l = s.shape.slice(1), u = o.slice(1);
        for (let p = 0; p < l.length; ++p) {
          let d = l[p], c = u[p];
          if (c != null && d !== c) throw new V(`A target Tensor with shape ${s.shape} was passed for an output of shape ${o}, while using a loss function that expects targets to have the same shape as the output.`);
        }
      }
    }
  }
}
function AI(e17, t, n, a = true, r = "") {
  let s;
  if (Array.isArray(e17)) {
    if (e17.length !== t.length) throw new V(`Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${t.length} Tensor(s), but instead got ${e17.length} Tensors(s).`);
    s = e17;
  } else {
    if (t.length > 1) throw new V(`The model expects ${t.length} ${r} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(e17.shape)}.`);
    s = [e17];
  }
  if (n != null) for (let i = 0; i < t.length; ++i) {
    if (n[i] == null) continue;
    let o = s[i];
    if (o.shape.length !== n[i].length) throw new V(`Error when checking ${r}: expected ${t[i]} to have ${n[i].length} dimension(s), but got array with shape ${JSON.stringify(o.shape)}`);
    for (let l = 0; l < n[i].length; ++l) {
      if (l === 0 && !a) continue;
      let u = o.shape[l], p = n[i][l];
      if (p != null && p !== u) throw new V(`Error when checking ${r}: expected ${t[i]} to have shape ${JSON.stringify(n[i])} but got array with shape ${JSON.stringify(o.shape)}.`);
    }
  }
}
function rj(e17, t) {
  if (e17 == null || Array.isArray(e17) && e17.length === 0) return t.map((a) => []);
  let n;
  if (typeof e17 == "string" || typeof e17 == "function") n = [e17];
  else if (Array.isArray(e17) || typeof e17 == "object") n = e17;
  else throw new TypeError(`Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${e17}`);
  if (Array.isArray(n)) return t.map((a) => n);
  {
    let a = [];
    for (let r of t) {
      let s = n.hasOwnProperty(r) ? n[r] : [];
      Array.isArray(s) || (s = [s]), a.push(s);
    }
    return a;
  }
}
var sj = "layers-model";
var Er = class extends jH {
  constructor(e17) {
    super(e17), this.isTraining = false;
  }
  summary(e17, t, n = console.log) {
    if (!this.built) throw new V("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");
    WH(this, e17, t, n);
  }
  compile(e17) {
    if (e17.loss == null && (e17.loss = []), this.loss = e17.loss, typeof e17.optimizer == "string") this.optimizer_ = zH(e17.optimizer), this.isOptimizerOwned = true;
    else {
      if (!(e17.optimizer instanceof Rr)) throw new V("User-defined optimizer must be an instance of tf.Optimizer.");
      this.optimizer_ = e17.optimizer, this.isOptimizerOwned = false;
    }
    let t = [];
    if (!Array.isArray(e17.loss) && typeof e17.loss != "string" && typeof e17.loss != "function") {
      e17.loss = e17.loss;
      for (let s in e17.loss) if (this.outputNames.indexOf(s) === -1) throw new V(`Unknown entry in loss dictionary: "${s}". Only expected the following keys: ${this.outputNames}`);
      for (let s of this.outputNames) e17.loss[s] == null && console.warn(`Output "${s}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${s} during training`), t.push(dx(e17.loss[s]));
    } else if (Array.isArray(e17.loss)) {
      if (e17.loss.length !== this.outputs.length) throw new V(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${e17.loss}.`);
      t = e17.loss.map((s) => dx(s));
    } else {
      let s = dx(e17.loss);
      this.outputs.forEach((i) => {
        t.push(s);
      });
    }
    this.lossFunctions = t, this.feedOutputNames = [], this.feedOutputShapes = [], this.feedLossFns = [];
    for (let s = 0; s < this.outputs.length; ++s) {
      let i = this.internalOutputShapes[s], o = this.outputNames[s];
      this.feedOutputNames.push(o), this.feedOutputShapes.push(i), this.feedLossFns.push(this.lossFunctions[s]);
    }
    let n = [];
    this.metrics = e17.metrics, this.metricsNames = ["loss"], this.metricsTensors = [], ri("loss", () => {
      for (let s = 0; s < this.outputs.length; ++s) {
        if (n.indexOf(s) !== -1) continue;
        let i = this.lossFunctions[s];
        this.outputs.length > 1 && (this.metricsTensors.push([i, s]), this.metricsNames.push(this.outputNames[s] + "_loss"));
      }
    });
    let a = rj(e17.metrics, this.outputNames), r = (s, i, o) => {
      this.outputNames.length > 1 && (i = this.outputNames[s] + "_" + i), this.metricsNames.push(i), this.metricsTensors.push([o, s]);
    };
    ri("metric", () => {
      for (let s = 0; s < this.outputs.length; ++s) {
        if (n.indexOf(s) !== -1) continue;
        let i = a[s];
        ((o) => {
          let l = "", u, p, d;
          for (let c of o) {
            if (typeof c == "string" && ["accuracy", "acc", "crossentropy", "ce"].indexOf(c) !== -1) {
              let m = this.internalOutputShapes[s];
              m[m.length - 1] === 1 || this.lossFunctions[s] === Cf ? ["accuracy", "acc"].indexOf(c) !== -1 ? p = b0 : ["crossentropy", "ce"].indexOf(c) !== -1 && (p = P2) : this.lossFunctions[s] === nm ? ["accuracy", "acc"].indexOf(c) !== -1 ? p = L2 : ["crossentropy", "ce"].indexOf(c) !== -1 && (p = z2) : ["accuracy", "acc"].indexOf(c) !== -1 ? p = y0 : ["crossentropy", "ce"].indexOf(c) !== -1 && (p = x0);
              let f;
              ["accuracy", "acc"].indexOf(c) !== -1 ? f = "acc" : ["crossentropy", "ce"].indexOf(c) !== -1 && (f = "ce"), d = p, u = l + f;
            } else d = LH(c), u = l + Sh(c);
            let h;
            ri(u, () => {
              h = d;
            }), r(s, u, h);
          }
        })(i);
      }
    }), this.collectedTrainableWeights = this.trainableWeights;
  }
  checkTrainableWeightsConsistency() {
    this.collectedTrainableWeights != null && this.trainableWeights.length !== this.collectedTrainableWeights.length && console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?");
  }
  evaluate(e17, t, n = {}) {
    let a = n.batchSize == null ? 32 : n.batchSize;
    hx(a);
    let r = this.standardizeUserDataXY(e17, t, true, a);
    try {
      let s = r[0].concat(r[1]);
      this.makeTestFunction();
      let i = this.testFunction, o = this.testLoop(i, s, a, n.verbose, n.steps);
      return Mn(o);
    } finally {
      Pa(r[0], e17), Pa(r[1], t);
    }
  }
  async evaluateDataset(e17, t) {
    return this.makeTestFunction(), ej(this, e17, t);
  }
  checkNumSamples(e17, t, n, a = "steps") {
    let r;
    if (n != null) {
      if (r = null, t != null) throw new V(`If ${a} is set, batchSize must be null or undefined.Got batchSize = ${t}`);
    } else if (e17 != null) Array.isArray(e17) ? r = e17[0].shape[0] : r = e17.shape[0];
    else throw new V(`Either the input data should have a defined shape, or ${a} shoud be specified.`);
    return r;
  }
  execute(e17, t) {
    if (Array.isArray(t) && t.length === 0) throw new V("`outputs` is an empty Array, which is not allowed.");
    let n = Array.isArray(t), a = n ? t : [t], r = this.retrieveSymbolicTensors(a), s = new Cl();
    if (e17 instanceof Ce && (e17 = [e17]), Array.isArray(e17)) {
      if (e17.length !== this.inputs.length) throw new V(`The number of inputs provided (${e17.length}) does not match the number of inputs of this model (${this.inputs.length}).`);
      for (let o = 0; o < this.inputs.length; ++o) s.add(this.inputs[o], e17[o]);
    } else for (let o of this.inputs) {
      let l = e17[o.name];
      if (l == null) throw new V(`No value is provided for the model's input ${o.name}`);
      s.add(o, l);
    }
    let i = tc(r, s);
    return n ? i : i[0];
  }
  retrieveSymbolicTensors(e17) {
    let t = bi(null, e17.length), n = e17.length;
    for (let a of this.layers) {
      let r = Array.isArray(a.output) ? a.output : [a.output], s = r.map((i) => i.name);
      for (let i = 0; i < e17.length; ++i) {
        let o = s.indexOf(e17[i]);
        if (o !== -1 && (t[i] = r[o], n--), n === 0) break;
      }
      if (n === 0) break;
    }
    if (n > 0) {
      let a = [];
      throw t.forEach((r, s) => {
        r == null && a.push(e17[s]);
      }), new V(`Cannot find SymbolicTensors for output name(s): ${JSON.stringify(a)}`);
    }
    return t;
  }
  predictLoop(e17, t = 32, n = false) {
    return O(() => {
      let a = this.checkNumSamples(e17);
      if (n) throw new ze("Verbose predictLoop() is not implemented yet.");
      let r = mx(a, t), s = this.outputs.map((i) => []);
      for (let i = 0; i < r.length; ++i) O(() => {
        let o = r[i][0], l = r[i][1], u = Xp(e17, o, l), p = [];
        if (Array.isArray(u)) for (let c = 0; c < u.length; ++c) p.push({ key: this.inputs[c], value: u[c] });
        else p.push({ key: this.inputs[0], value: u });
        let d = new Cl(p);
        return tc(this.outputs, d);
      }).forEach((o, l) => s[l].push(o));
      return Mn(s.map((i) => et(i, 0)));
    });
  }
  predict(e17, t = {}) {
    let n = G2(e17);
    AI(n, this.inputNames, this.feedInputShapes, false);
    try {
      let a = t.batchSize == null ? 32 : t.batchSize;
      return hx(a), this.predictLoop(n, a);
    } finally {
      Pa(n, e17);
    }
  }
  predictOnBatch(e17) {
    AI(e17, this.inputNames, this.feedInputShapes, true);
    let t = (Array.isArray(e17) ? e17[0] : e17).shape[0];
    return this.predictLoop(e17, t);
  }
  standardizeUserDataXY(e17, t, n = true, a) {
    if (this.optimizer_ == null) throw new ar("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");
    let r = [];
    for (let s = 0; s < this.feedOutputShapes.length; ++s) {
      let i = this.feedOutputShapes[s];
      this.feedLossFns[s] === nm ? r.push(i.slice(0, i.length - 1).concat([1])) : r.push(i);
    }
    if (e17 = _I(e17, this.feedInputNames, this.feedInputShapes, false, "input"), t = _I(t, this.feedOutputNames, r, false, "target"), nj(e17, t, null), aj(t, this.feedLossFns, this.feedOutputShapes), this.stateful && a != null && a > 0 && e17[0].shape[0] % a !== 0) throw new V(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${a}. Found: ${e17[0].shape[0]} sample(s).`);
    return [e17, t];
  }
  async standardizeUserData(e17, t, n, a, r = true, s) {
    let [i, o] = this.standardizeUserDataXY(e17, t, r, s);
    if (n != null) throw new Error("sample weight is not supported yet.");
    let l = null;
    if (a != null) {
      let u = B2(a, this.outputNames);
      l = [];
      for (let p = 0; p < u.length; ++p) l.push(await V2(o[p], null, u[p]));
    }
    return [i, o, l];
  }
  testLoop(e17, t, n, a = 0, r) {
    return O(() => {
      let s = this.checkNumSamples(t, n, r, "steps"), i = [];
      if (a > 0) throw new ze("Verbose mode is not implemented yet.");
      if (r != null) throw new ze("steps mode in testLoop() is not implemented yet");
      {
        let o = mx(s, n), l = je(Ua(0, s));
        for (let u = 0; u < o.length; ++u) {
          let p = o[u][0], d = o[u][1], c = si(l, p, d - p), h = jx(t, c), m = e17(h);
          if (u === 0) for (let f = 0; f < m.length; ++f) i.push(xe(0));
          for (let f = 0; f < m.length; ++f) {
            let g = m[f];
            i[f] = X(i[f], z(d - p, g));
          }
        }
        for (let u = 0; u < i.length; ++u) i[u] = he(i[u], s);
      }
      return i;
    });
  }
  getDedupedMetricsNames() {
    let e17 = this.metricsNames, t = [];
    for (let n = 0; n < e17.length; ++n) {
      let a = e17[n], r = a;
      if (fI(e17, a) > 1) {
        let s = fI(e17.slice(0, n), a);
        r += `_${s}`;
      }
      t.push(r);
    }
    return t;
  }
  makeTrainFunction() {
    return (e17) => {
      let t = [], n = e17.slice(0, this.inputs.length), a = e17.slice(this.inputs.length, this.inputs.length + this.outputs.length), r = e17.slice(this.inputs.length + this.outputs.length, this.inputs.length + this.outputs.length * 2), s = [], i = () => {
        let l = [];
        for (let c = 0; c < this.inputs.length; ++c) l.push({ key: this.inputs[c], value: n[c] });
        let u = new Cl(l), p = tc(this.outputs, u, { training: true }), d;
        for (let c = 0; c < this.lossFunctions.length; ++c) {
          let h = this.lossFunctions[c], m = h(a[c], p[c]);
          r[c] != null && (m = KH(m, r[c]));
          let f = Ct(m);
          t.push(f), c === 0 ? d = m : d = X(d, m);
        }
        for (let c = 0; c < this.metricsTensors.length; ++c) {
          let h;
          if (this.outputs.length > 1 && c < this.outputs.length) h = t[c];
          else {
            let m = this.metricsTensors[c][0], f = this.metricsTensors[c][1];
            h = Ct(m(a[f], p[f]));
          }
          Ht(h), s.push(h);
        }
        return d = Ct(d), this.calculateLosses().forEach((c) => {
          d = X(d, c);
        }), d;
      }, o = this.collectedTrainableWeights.map((l) => l.read());
      return [this.optimizer_.minimize(i, true, o)].concat(s);
    };
  }
  makeTestFunction() {
    this.testFunction = (e17) => O(() => {
      let t = [], n, a = e17.slice(0, this.inputs.length), r = e17.slice(this.inputs.length, this.inputs.length + this.outputs.length), s = [];
      for (let l = 0; l < this.inputs.length; ++l) s.push({ key: this.inputs[l], value: a[l] });
      let i = new Cl(s), o = tc(this.outputs, i);
      for (let l = 0; l < this.lossFunctions.length; ++l) {
        let u = this.lossFunctions[l], p = Ct(u(r[l], o[l]));
        l === 0 ? n = p : n = X(n, p), t.push(n);
      }
      for (let l = 0; l < this.metricsTensors.length; ++l) {
        let u = this.metricsTensors[l][0], p = this.metricsTensors[l][1], d = Ct(u(r[p], o[p]));
        t.push(d);
      }
      return t;
    });
  }
  async fit(e17, t, n = {}) {
    if (this.isTraining) throw new Error("Cannot start training because another fit() call is ongoing.");
    this.isTraining = true;
    let a, r, s, i, o, l, u, p, d;
    try {
      let c = n.batchSize == null ? 32 : n.batchSize;
      hx(c);
      let h = await this.standardizeUserData(e17, t, n.sampleWeight, n.classWeight, false, c);
      a = h[0], r = h[1], d = h[2];
      let m = false, f;
      if (n.validationData != null && n.validationData.length > 0) {
        if (m = true, n.validationData.length === 2) o = n.validationData[0], l = n.validationData[1];
        else throw n.validationData.length === 3 ? new ze("validationData including sample weights is not supported yet.") : new V(`When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${n.validationData} is invalid.`);
        let N = await this.standardizeUserData(o, l, null, null, true, c);
        u = N[0], p = N[1], f = u.concat(p);
      } else if (n.validationSplit != null && n.validationSplit > 0 && n.validationSplit < 1) {
        m = true;
        let N = Math.floor(a[0].shape[0] * (1 - n.validationSplit)), C = a[0].shape[0];
        u = Xp(a, N, C), s = a, a = Xp(a, 0, N), p = Xp(r, N, C), i = r, r = Xp(r, 0, N), f = u.concat(p);
      } else n.validationSteps != null && (m = true);
      let g = a.concat(r).concat(d);
      this.checkTrainableWeightsConsistency();
      let b = this.makeTrainFunction(), y = this.getDedupedMetricsNames(), x, v;
      m ? (this.makeTestFunction(), x = this.testFunction, v = y.slice().concat(y.map((N) => "val_" + N))) : (x = null, f = [], v = y.slice());
      let I = D2(n.callbacks, n.yieldEvery);
      return await this.fitLoop(b, g, y, c, n.epochs, n.verbose, I, x, f, n.shuffle, v, n.initialEpoch, null, null);
    } finally {
      this.isTraining = false, Pa(a, e17), Pa(r, t), Pa(s, e17), Pa(i, t), Pa(u, o), Pa(p, l), d != null && Ee(d);
    }
  }
  async fitLoop(e17, t, n, a, r, s, i, o, l, u, p, d, c, h) {
    a == null && (a = 32), r == null && (r = 1), u == null && (u = true), d == null && (d = 0);
    let m = false;
    if (o != null && l != null && (m = true), h != null && (m = true, c == null)) throw new V("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");
    let f = this.checkNumSamples(t, a, c, "steps_per_epoch"), g;
    f != null && (g = Ua(0, f)), s == null && (s = 1);
    let { callbackList: b, history: y } = R2(i, s, r, d, f, c, a, m, p);
    b.setModel(this), this.history = y, await b.onTrainBegin(), this.stopTraining_ = false;
    for (let x = d; x < r; ++x) {
      await b.onEpochBegin(x);
      let v = {};
      if (c != null) throw new ze("stepsPerEpoch mode is not implemented yet.");
      {
        if (u === "batch") throw new ze("batch shuffling is not implemneted yet");
        u && w.shuffle(g);
        let I = je(g), N = mx(f, a);
        for (let C = 0; C < N.length; ++C) {
          let _ = {};
          if (await b.onBatchBegin(C, _), O(() => {
            let F = N[C][0], D = N[C][1], $ = si(I, F, D - F);
            _.batch = C, _.size = D - F;
            let S = jx(t, $), M = e17(S);
            for (let B = 0; B < n.length; ++B) {
              let U = n[B], H = M[B];
              _[U] = H, Ht(H);
            }
            if (C === N.length - 1 && m) {
              let B = this.testLoop(o, l, a);
              for (let U = 0; U < n.length; ++U) {
                let H = n[U], q = B[U];
                Ht(q), v["val_" + H] = q;
              }
            }
          }), await b.onBatchEnd(C, _), _2(_), this.stopTraining_) break;
        }
        I.dispose();
      }
      if (await b.onEpochEnd(x, v), this.stopTraining_) break;
    }
    return await b.onTrainEnd(), await this.history.syncData(), this.history;
  }
  async fitDataset(e17, t) {
    return ZH(this, e17, t);
  }
  async trainOnBatch(e17, t) {
    let n = await this.standardizeUserData(e17, t), a = n[0], r = n[1], s = this.makeTrainFunction()(a.concat(r)), i = [];
    for (let o of s) {
      let l = await o.data();
      i.push(l[0]);
    }
    return Ee(s), Pa(n[0], e17), Pa(n[1], t), Mn(i);
  }
  getNamedWeights(e17) {
    let t = [], n = e17 != null && e17.trainableOnly, a = n ? this.trainableWeights : this.weights, r = this.getWeights(n);
    for (let s = 0; s < a.length; ++s) n && !a[s].trainable || t.push({ name: a[s].originalName, tensor: r[s] });
    return t;
  }
  set stopTraining(e17) {
    this.stopTraining_ = e17;
  }
  get stopTraining() {
    return this.stopTraining_;
  }
  get optimizer() {
    return this.optimizer_;
  }
  set optimizer(e17) {
    this.optimizer_ !== e17 && (this.optimizer_ = e17, this.isOptimizerOwned = false);
  }
  dispose() {
    let e17 = super.dispose();
    if (e17.refCountAfterDispose === 0 && this.optimizer != null && this.isOptimizerOwned) {
      let t = Kh().numTensors;
      this.optimizer_.dispose(), e17.numDisposedVariables += t - Kh().numTensors;
    }
    return e17;
  }
  getLossIdentifiers() {
    let e17;
    if (typeof this.loss == "string") e17 = Ir(this.loss);
    else if (Array.isArray(this.loss)) {
      for (let t of this.loss) if (typeof t != "string") throw new Error("Serialization of non-string loss is not supported.");
      e17 = this.loss.map((t) => Ir(t));
    } else {
      let t = Object.keys(this.loss);
      e17 = {};
      let n = this.loss;
      for (let a of t) if (typeof n[a] == "string") e17[a] = Ir(n[a]);
      else throw new Error("Serialization of non-string loss is not supported.");
    }
    return e17;
  }
  getMetricIdentifiers() {
    if (typeof this.metrics == "string" || typeof this.metrics == "function") return [Ir(Sh(this.metrics))];
    if (Array.isArray(this.metrics)) return this.metrics.map((e17) => Ir(Sh(e17)));
    {
      let e17 = {};
      for (let t in this.metrics) e17[t] = Ir(Sh(this.metrics[t]));
      return e17;
    }
  }
  getTrainingConfig() {
    return { loss: this.getLossIdentifiers(), metrics: this.getMetricIdentifiers(), optimizer_config: { class_name: this.optimizer.getClassName(), config: this.optimizer.getConfig() } };
  }
  loadTrainingConfig(e17) {
    if (e17.weighted_metrics != null) throw new Error("Loading weight_metrics is not supported yet.");
    if (e17.loss_weights != null) throw new Error("Loading loss_weights is not supported yet.");
    if (e17.sample_weight_mode != null) throw new Error("Loading sample_weight_mode is not supported yet.");
    let t = Ic(e17.optimizer_config), n = Ba(t), a;
    if (typeof e17.loss == "string") a = Js(e17.loss);
    else if (Array.isArray(e17.loss)) a = e17.loss.map((s) => Js(s));
    else if (e17.loss != null) {
      a = {};
      for (let s in e17.loss) a[s] = Js(e17.loss[s]);
    }
    let r;
    if (Array.isArray(e17.metrics)) r = e17.metrics.map((s) => Js(s));
    else if (e17.metrics != null) {
      r = {};
      for (let s in e17.metrics) r[s] = Js(e17.metrics[s]);
    }
    this.compile({ loss: a, metrics: r, optimizer: n });
  }
  async save(e17, t) {
    if (typeof e17 == "string") {
      let r = jt.getSaveHandlers(e17);
      if (r.length === 0) throw new V(`Cannot find any save handlers for URL '${e17}'`);
      if (r.length > 1) throw new V(`Found more than one (${r.length}) save handlers for URL '${e17}'`);
      e17 = r[0];
    }
    if (e17.save == null) throw new V("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");
    let n = await jt.encodeWeights(this.getNamedWeights(t)), a = { modelTopology: this.toJSON(null, false), format: sj, generatedBy: `TensorFlow.js tfjs-layers v${v0}`, convertedBy: null };
    if (t != null && t.includeOptimizer && this.optimizer != null) {
      a.trainingConfig = this.getTrainingConfig();
      let r = "optimizer", { data: s, specs: i } = await jt.encodeWeights(await this.optimizer.getWeights(), r);
      n.specs.push(...i), n.data = jt.concatenateArrayBuffers([n.data, s]);
    }
    return this.userDefinedMetadata != null && (NI(this.userDefinedMetadata, this.name, true), a.userDefinedMetadata = this.userDefinedMetadata), a.weightData = n.data, a.weightSpecs = n.specs, e17.save(a);
  }
  setUserDefinedMetadata(e17) {
    NI(e17, this.name), this.userDefinedMetadata = e17;
  }
  getUserDefinedMetadata() {
    return this.userDefinedMetadata;
  }
};
Er.className = "Model";
ne.registerClass(Er);
var H2 = class extends Er {
};
H2.className = "Functional";
ne.registerClass(H2);
async function ij(e17, t) {
  "modelTopology" in e17 || (e17 = { modelTopology: e17 }), e17 = e17;
  let n = e17.modelTopology;
  n.model_config != null && (n = n.model_config);
  let a = Ic(n), r = Ba(a, t);
  if (e17.weightsManifest != null) {
    let s = await jt.loadWeights(e17.weightsManifest, e17.pathPrefix, r.weights.map((o) => o.originalName)), i = {};
    for (let o of r.weights) i[o.originalName] = s[o.originalName];
    r.loadWeights(i), Ee(s);
  }
  return r;
}
async function oj(e17, t) {
  if (t == null && (t = {}), typeof e17 == "string") {
    let n = jt.getLoadHandlers(e17, t);
    if (n.length === 0) n.push(jt.browserHTTPRequest(e17, t));
    else if (n.length > 1) throw new V(`Found more than one (${n.length}) load handlers for URL '${e17}'`);
    e17 = n[0];
  }
  return lj(e17, void 0, t);
}
async function lj(e17, t, n) {
  if (n == null && (n = {}), e17.load == null) throw new V("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");
  let a = await e17.load(), r = a.modelTopology;
  r.model_config != null && (r = r.model_config);
  let s = n.strict == null ? true : n.strict, i = a.weightData != null && a.weightSpecs != null && s, o = Ba(Ic(r), t, i), l = a.trainingConfig;
  if (l != null && o.loadTrainingConfig(l), a.userDefinedMetadata != null && o.setUserDefinedMetadata(a.userDefinedMetadata), a.weightData != null) {
    if (a.weightSpecs == null) throw new V("LayersModel artifacts contains weight data, but not weight specs. Therefore loading of weights cannot proceed.");
    let { modelWeights: u, optimizerWeights: p } = uj(a.weightData, a.weightSpecs);
    o.loadWeights(u, s), o.optimizer != null && p.length > 0 && await o.optimizer.setWeights(p), Ee(u), Ee(p.map((d) => d.tensor));
  }
  return o;
}
function uj(e17, t) {
  let n = jt.decodeWeights(e17, t), a = {}, r = [];
  return t.forEach((s) => {
    s.group === "optimizer" ? r.push({ name: s.name, tensor: n[s.name] }) : a[s.name] = n[s.name];
  }), { modelWeights: a, optimizerWeights: r };
}
var Ef = class Kx extends Er {
  constructor(t) {
    if (super({ inputs: [], outputs: [] }), t = t || {}, this.trainable = true, this.built = false, this.name = t.name != null ? t.name : gf("sequential_"), t.layers != null) for (let n of t.layers) this.add(n);
  }
  checkShape(t) {
    if (t.inboundNodes[0].outputTensors[0].shape.some((n) => n < 0)) throw new V(`Negative dimension size caused by adding layer ${t.name} with input shape [${t.inboundNodes[0].inputTensors[0].shape}]`);
  }
  add(t) {
    let n = t instanceof Kx || t instanceof Er, a;
    if (n) {
      if (a = t, a.outputs.length !== 1) throw new V("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");
      if (a.inputs.length !== 1) throw new V("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.");
    }
    if (this.outputs.length === 0) {
      if (t.inboundNodes.length === 0) {
        if (t.batchInputShape == null) throw new V("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");
        let r = S2({ batchShape: t.batchInputShape, dtype: t.dtype, name: t.name + "_input" });
        t.apply(r);
      }
      if (n) this.outputs = a.outputs, this.inputs = a.inputs;
      else {
        if (t.inboundNodes.length !== 1) throw new V(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${t.name} which has ${t.inboundNodes.length} pre-existing inbound connections.`);
        if (t.inboundNodes[0].outputTensors.length !== 1) throw new V("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");
        this.checkShape(t), this.outputs = [t.inboundNodes[0].outputTensors[0]], this.inputs = I2(this.outputs[0]);
      }
      this.inboundNodes = [], new Nf({ outboundLayer: this, inboundLayers: [], nodeIndices: [], tensorIndices: [], inputTensors: this.inputs, outputTensors: this.outputs, inputMasks: bi(null, this.inputs.length), outputMasks: [null], inputShapes: this.inputs.map((r) => r.shape), outputShapes: this.outputs[0].shape });
    } else {
      let r = t.apply(this.outputs[0]);
      if (Array.isArray(r)) throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");
      this.checkShape(t), this.outputs = [r], this.inboundNodes[0].outputTensors = this.outputs, this.inboundNodes[0].outputShapes = [this.outputs[0].shape];
    }
    this.layers.push(t), this.built = false;
  }
  pop() {
    if (this.layers.length === 0) throw new TypeError("There are no layers in the model.");
    if (this.layers.pop(), this.layers.length === 0) this.outputs = [], this.inboundNodes = [], this.outboundNodes = [];
    else {
      let t = this.layers.length - 1;
      this.layers[t].outboundNodes = [], this.outputs = [this.layers[t].output], this.inboundNodes[0].outputTensors = this.outputs, this.inboundNodes[0].outputShapes = [this.outputs[0].shape];
    }
  }
  call(t, n) {
    return this.model == null && this.build(), this.model.call(t, n);
  }
  build(t) {
    if (Je(t), this.inputs.length === 0 || this.outputs.length === 0) throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");
    this.model = new Er({ inputs: this.inputs, outputs: this.outputs[0], name: this.name + "_model" }), this.model.trainable = this.trainable, this.supportsMasking = this.model.supportsMasking, this.inputLayers = this.model.inputLayers, this.inputLayersNodeIndices = this.model.inputLayersNodeIndices, this.inputLayersTensorIndices = this.model.inputLayersTensorIndices, this.outputLayers = this.model.outputLayers, this.outputLayersNodeIndices = this.model.outputLayersNodeIndices, this.outputLayersTensorIndices = this.model.outputLayersTensorIndices, this.nodesByDepth = this.model.nodesByDepth, this.containerNodes = this.model.containerNodes, this.outputNames = this.model.outputNames, this.inputNames = this.model.inputNames, this.built = true;
  }
  countParams() {
    return this.built || this.build(), super.countParams();
  }
  summary(t, n, a = console.log) {
    this.built || this.build(), super.summary(t, n, a);
  }
  setWeights(t) {
    this.model == null && this.build(), this.model.setWeights(t);
  }
  evaluate(t, n, a = {}) {
    if (!this.built) throw new ar("The model needs to be compiled before being used.");
    return this.model.evaluate(t, n, a);
  }
  async evaluateDataset(t, n) {
    if (!this.built) throw new ar("The model needs to be compiled before being used.");
    return this.model.evaluateDataset(t, n);
  }
  predict(t, n = {}) {
    return this.model == null && this.build(), this.model.predict(t, n);
  }
  predictOnBatch(t) {
    return this.model == null && this.build(), this.model.predictOnBatch(t);
  }
  compile(t) {
    this.build(), this.model.compile(t), this.optimizer_ = this.model.optimizer, this.isOptimizerOwned = this.model.isOptimizerOwned, this.loss = this.model.loss, this.metrics = this.model.metrics, this.metricsTensors = this.model.metricsTensors, this.metricsNames = this.model.metricsNames;
  }
  get optimizer() {
    return this.model == null ? void 0 : this.model.optimizer;
  }
  set optimizer(t) {
    this.model.optimizer = t;
  }
  async fit(t, n, a = {}) {
    if (!this.built) throw new ar("The model needs to be compiled before being used.");
    return this.model.fit(t, n, a);
  }
  async fitDataset(t, n) {
    if (!this.built) throw new ar("The model needs to be compiled before being used.");
    return this.model.fitDataset(t, n);
  }
  async trainOnBatch(t, n) {
    return this.model.trainOnBatch(t, n);
  }
  static fromConfig(t, n, a = {}, r = false) {
    let s, i = {};
    if (n instanceof Array) {
      if (n[0].className == null || n[0].className === "Merge") throw new V("Legacy serialization format not supported yet.");
      s = n;
    } else w.assert(n.layers != null, () => "When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field."), s = n.layers, delete n.layers, i = n;
    let o = new t(i);
    if (!(o instanceof Kx)) throw new ze(`Sequential.fromConfig called on non-Sequential input: ${o}`);
    for (let l of s) {
      let u = Ba(l, void 0, r);
      r && u.setFastWeightInitDuringBuild(true), o.add(u);
    }
    return o;
  }
  set stopTraining(t) {
    if (this.model == null) throw new V("Cannot set the stopTraining property of a sequential model before it is compiled.");
    this.model.stopTraining = t;
  }
  get stopTraining() {
    if (this.model == null) throw new V("Cannot get the stopTraining property of a sequential model before it is compiled.");
    return this.model.stopTraining;
  }
  getConfig() {
    let t = [];
    for (let n of this.layers) {
      let a = {};
      a.className = n.getClassName(), a.config = n.getConfig(), t.push(a);
    }
    return { name: this.name, layers: t };
  }
};
Ef.className = "Sequential";
ne.registerClass(Ef);
function pj(e17) {
  return new Er(e17);
}
function cj(e17) {
  return new Ef(e17);
}
function j2(e17) {
  return S2(e17);
}
function dj(e17, t) {
  f0.registerCallbackConstructor(e17, t);
}
var xn = class extends ne.Serializable {
  getConfig() {
    return {};
  }
};
var q2 = class extends xn {
  apply(e17, t = 1) {
    return FG(e17, t);
  }
};
q2.className = "elu";
ne.registerClass(q2);
var K2 = class extends xn {
  apply(e17) {
    return Qm(e17);
  }
};
K2.className = "selu";
ne.registerClass(K2);
var X2 = class extends xn {
  apply(e17) {
    return Ke(e17);
  }
};
X2.className = "relu";
ne.registerClass(X2);
var Y2 = class extends xn {
  apply(e17) {
    return O(() => ds(6, Ke(e17)));
  }
};
Y2.className = "relu6";
ne.registerClass(Y2);
var Z2 = class extends xn {
  apply(e17) {
    return e17;
  }
};
Z2.className = "linear";
ne.registerClass(Z2);
var J2 = class extends xn {
  apply(e17) {
    return ha(e17);
  }
};
J2.className = "sigmoid";
ne.registerClass(J2);
var Q2 = class extends xn {
  apply(e17) {
    return DG(e17);
  }
};
Q2.className = "hardSigmoid";
ne.registerClass(Q2);
var eC = class extends xn {
  apply(e17) {
    return Go(e17);
  }
};
eC.className = "softplus";
ne.registerClass(eC);
var tC = class extends xn {
  apply(e17) {
    return $G(e17);
  }
};
tC.className = "softsign";
ne.registerClass(tC);
var nC = class extends xn {
  apply(e17) {
    return cs(e17);
  }
};
nC.className = "tanh";
ne.registerClass(nC);
var w0 = class extends xn {
  apply(e17, t = -1) {
    return qa(e17, t);
  }
};
w0.className = "softmax";
ne.registerClass(w0);
var aC = class extends xn {
  apply(e17, t = -1) {
    return jm(e17, t);
  }
};
aC.className = "logSoftmax";
ne.registerClass(aC);
var rC = class extends xn {
  apply(e17) {
    return O(() => O(() => {
      let t = Math.sqrt(2), n = z(0.5, X(1, Um(he(e17, t))));
      return z(e17, n);
    }));
  }
};
rC.className = "gelu";
ne.registerClass(rC);
var sC = class extends xn {
  apply(e17) {
    return O(() => z(0.5, z(e17, X(1, cs(z(rn(he(2, Math.PI)), X(e17, z(0.044715, ur(e17, 3)))))))));
  }
};
sC.className = "gelu_new";
ne.registerClass(sC);
var iC = class extends xn {
  apply(e17) {
    return O(() => z(e17, cs(Go(e17))));
  }
};
iC.className = "mish";
ne.registerClass(iC);
var oC = class extends xn {
  apply(e17, t = 1) {
    return O(() => z(ha(z(e17, t)), e17));
  }
};
oC.className = "swish";
ne.registerClass(oC);
function ms(e17) {
  return e17.getClassName();
}
function fx(e17, t = {}) {
  return vd(e17, ne.SerializationMap.getMap().classNameMap, t, "activation");
}
function fs(e17) {
  if (e17 == null) {
    let t = {};
    return t.className = "linear", t.config = {}, fx(t);
  }
  if (typeof e17 == "string") {
    let t = {};
    return t.className = e17, t.config = {}, fx(t);
  } else return e17 instanceof xn ? e17 : fx(e17);
}
function k0(e17) {
  if (e17 != null && typeof e17 != "object") throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${e17}`);
}
var lC = class extends ne.Serializable {
};
var Nd = class extends lC {
  constructor(e17) {
    super(), k0(e17), this.l1 = e17 == null || e17.l1 == null ? 0.01 : e17.l1, this.l2 = e17 == null || e17.l2 == null ? 0.01 : e17.l2, this.hasL1 = this.l1 !== 0, this.hasL2 = this.l2 !== 0;
  }
  apply(e17) {
    return O(() => {
      let t = It([1]);
      return this.hasL1 && (t = X(t, fe(z(this.l1, Lt(e17))))), this.hasL2 && (t = X(t, fe(z(this.l2, kd(e17))))), W(t, []);
    });
  }
  getConfig() {
    return { l1: this.l1, l2: this.l2 };
  }
  static fromConfig(e17, t) {
    return new e17({ l1: t.l1, l2: t.l2 });
  }
};
Nd.className = "L1L2";
ne.registerClass(Nd);
function hj(e17) {
  return k0(e17), new Nd({ l1: e17 != null ? e17.l1 : null, l2: 0 });
}
function mj(e17) {
  return k0(e17), new Nd({ l2: e17 != null ? e17.l2 : null, l1: 0 });
}
var FI = { l1l2: "L1L2" };
function ft(e17) {
  return Qw(e17);
}
function $I(e17, t = {}) {
  return vd(e17, ne.SerializationMap.getMap().classNameMap, t, "regularizer");
}
function Nt(e17) {
  if (e17 == null) return null;
  if (typeof e17 == "string") {
    let t = { className: e17 in FI ? FI[e17] : e17, config: {} };
    return $I(t);
  } else return e17 instanceof lC ? e17 : $I(e17);
}
var I0 = class extends We {
  constructor(e17) {
    super(e17 == null ? {} : e17), this.supportsMasking = true, e17 != null && (this.maxValue = e17.maxValue);
  }
  call(e17, t) {
    e17 = Te(e17);
    let n = Ke(e17);
    return this.maxValue != null && (n = an(n, 0, this.maxValue)), n;
  }
  computeOutputShape(e17) {
    return e17;
  }
  getConfig() {
    let e17 = { maxValue: this.maxValue }, t = super.getConfig();
    return Object.assign(e17, t), e17;
  }
};
I0.className = "ReLU";
ne.registerClass(I0);
var S0 = class extends We {
  constructor(e17) {
    super(e17 == null ? {} : e17), this.DEFAULT_ALPHA = 0.3, e17 == null && (e17 = {}), this.alpha = e17.alpha == null ? this.DEFAULT_ALPHA : e17.alpha;
  }
  call(e17, t) {
    let n = Te(e17);
    return ud(n, this.alpha);
  }
  computeOutputShape(e17) {
    return e17;
  }
  getConfig() {
    let e17 = { alpha: this.alpha }, t = super.getConfig();
    return Object.assign(e17, t), e17;
  }
};
S0.className = "LeakyReLU";
ne.registerClass(S0);
var N0 = class extends We {
  constructor(e17) {
    if (super(e17 == null ? {} : e17), this.DEFAULT_ALPHA_INITIALIZER = "zeros", e17 == null && (e17 = {}), this.supportsMasking = true, this.alphaInitializer = St(e17.alphaInitializer || this.DEFAULT_ALPHA_INITIALIZER), this.alphaRegularizer = Nt(e17.alphaRegularizer), this.alphaConstraint = Yt(e17.alphaConstraint), e17.sharedAxes == null) this.sharedAxes = null;
    else if (Array.isArray(e17.sharedAxes)) this.sharedAxes = e17.sharedAxes;
    else if (typeof e17.sharedAxes == "number") this.sharedAxes = [e17.sharedAxes];
    else throw new V(`Expected sharedAxes to be a number or an array of numbers, but got ${e17.sharedAxes}`);
  }
  build(e17) {
    e17 = Je(e17);
    let t = e17.slice(1);
    if (this.sharedAxes != null) for (let a of this.sharedAxes) t[a - 1] = 1;
    this.alpha = this.addWeight("alpha", t, "float32", this.alphaInitializer, this.alphaRegularizer, true, this.alphaConstraint);
    let n = {};
    if (this.sharedAxes != null) for (let a = 1; a < e17.length; ++a) n[a] = e17[a];
    this.inputSpec = [new zt({ ndim: e17.length, axes: n })], this.built = true;
  }
  call(e17, t) {
    return e17 = Te(e17), fd(e17, this.alpha.read());
  }
  getConfig() {
    let e17 = { alphaInitializer: Et(this.alphaInitializer), alphaRegularizer: ft(this.alphaRegularizer), alphaConstraint: Xt(this.alphaConstraint), sharedAxes: this.sharedAxes }, t = super.getConfig();
    return Object.assign(e17, t), e17;
  }
};
N0.className = "PReLU";
ne.registerClass(N0);
var T0 = class extends We {
  constructor(e17) {
    if (super(e17 == null ? {} : e17), this.DEFAULT_ALPHA = 1, e17 == null && (e17 = {}), e17.alpha != null && e17.alpha !== this.DEFAULT_ALPHA) throw new ze(`Non-default alpha value (${e17.alpha}) is not supported by the ELU layer yet.`);
    this.alpha = e17.alpha == null ? this.DEFAULT_ALPHA : e17.alpha;
  }
  call(e17, t) {
    let n = Te(e17);
    return Qu(n);
  }
  computeOutputShape(e17) {
    return e17;
  }
  getConfig() {
    let e17 = { alpha: this.alpha }, t = super.getConfig();
    return Object.assign(e17, t), e17;
  }
};
T0.className = "ELU";
ne.registerClass(T0);
var C0 = class extends We {
  constructor(e17) {
    super(e17 == null ? {} : e17), this.DEFAULT_THETA = 1, e17 == null && (e17 = {}), this.theta = e17.theta == null ? this.DEFAULT_THETA : e17.theta;
  }
  call(e17, t) {
    let n = Te(e17);
    return z(n, re(Cn(n, this.theta), "float32"));
  }
  computeOutputShape(e17) {
    return e17;
  }
  getConfig() {
    let e17 = { theta: this.theta }, t = super.getConfig();
    return Object.assign(e17, t), e17;
  }
};
C0.className = "ThresholdedReLU";
ne.registerClass(C0);
var E0 = class extends We {
  constructor(e17) {
    super(e17 == null ? {} : e17), this.DEFAULT_AXIS = 1, e17 == null && (e17 = {}), this.softmax = new w0().apply, this.axis = e17.axis == null ? this.DEFAULT_AXIS : e17.axis;
  }
  call(e17, t) {
    return O(() => {
      let n = Te(e17), a = t.mask;
      if (a != null) {
        let r = z(pe(Pn(n.shape), re(a, n.dtype)), xe(-1e9));
        n = X(n, r);
      }
      return this.axis instanceof Array ? this.axis.length > 1 ? dn(pe(n, cd(n, this.axis, true))) : this.softmax(n, this.axis[0]) : this.softmax(n, this.axis);
    });
  }
  computeOutputShape(e17) {
    return e17;
  }
  getConfig() {
    let e17 = { axis: this.axis }, t = super.getConfig();
    return Object.assign(e17, t), e17;
  }
};
E0.className = "Softmax";
ne.registerClass(E0);
function Fl(e17, t, n) {
  if (typeof e17 == "number") return bi(e17, t);
  if (e17.length !== t) throw new V(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${e17.length} elements.`);
  for (let a = 0; a < t; ++a) {
    let r = e17[a];
    if (!CG(r)) throw new V(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${JSON.stringify(e17)} including a non-integer number ${r}`);
  }
  return e17;
}
function Va(e17, t, n, a, r = 1) {
  if (e17 == null) return e17;
  let s = t + (t - 1) * (r - 1), i;
  return n === "same" ? i = e17 : i = e17 - s + 1, Math.floor((i + a - 1) / a);
}
function nr(e17, t, n, a) {
  if (e17 == null) return null;
  if (a === "valid") e17 = e17 * t + hs([n - t, 0]);
  else if (a === "same") e17 = e17 * t;
  else throw new V(`Unsupport padding mode: ${a}.`);
  return e17;
}
function _0(e17, t) {
  return O(() => (Rt(t), t === "channelsFirst" ? De(e17, [0, 2, 3, 1]) : e17));
}
function uC(e17, t) {
  return O(() => (Rt(t), t === "channelsFirst" ? De(e17, [0, 2, 3, 4, 1]) : e17));
}
function fj(e17, t, n, a = 1, r = "valid", s, i = 1) {
  return O(() => {
    if (s == null && (s = Ga()), Rt(s), e17.shape.length !== 3) throw new V(`The input of a conv1dWithBias operation should be 3, but is ${e17.shape.length} instead.`);
    if (t.shape.length !== 3) throw new V(`The kernel for a conv1dWithBias operation should be 3, but is ${t.shape.length} instead`);
    if (n != null && n.shape.length !== 1) throw new V(`The bias for a conv1dWithBias operation should be 1, but is ${n.shape.length} instead`);
    if (s === "channelsFirst" && (e17 = De(e17, [0, 2, 1])), r === "causal") throw new ze("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");
    let o = zm(e17, t, a, r === "same" ? "same" : "valid", "NWC", i);
    return n != null && (o = Ka(o, n)), o;
  });
}
function DI(e17, t, n, a = [1, 1], r = "valid", s, i, o = null) {
  return O(() => {
    if (s == null && (s = Ga()), Rt(s), e17.rank !== 3 && e17.rank !== 4) throw new V(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${e17.rank}.`);
    if (t.rank !== 3 && t.rank !== 4) throw new V(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${e17.rank}.`);
    let l = _0(e17, s);
    if (r === "causal") throw new ze("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");
    return l = Vl.conv2d({ x: l, filter: t, strides: a, pad: r === "same" ? "same" : "valid", dilations: i, dataFormat: "NHWC", bias: n, activation: o }), s === "channelsFirst" && (l = De(l, [0, 3, 1, 2])), l;
  });
}
function gj(e17, t, n, a = [1, 1, 1], r = "valid", s, i) {
  return O(() => {
    if (s == null && (s = Ga()), Rt(s), e17.rank !== 4 && e17.rank !== 5) throw new V(`conv3dWithBias expects input to be of rank 4 or 5, but received ${e17.rank}.`);
    if (t.rank !== 4 && t.rank !== 5) throw new V(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ${e17.rank}.`);
    let o = uC(e17, s);
    if (r === "causal") throw new ze("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");
    return o = aw(o, t, a, r === "same" ? "same" : "valid", "NDHWC", i), n != null && (o = Ka(o, n)), s === "channelsFirst" && (o = De(o, [0, 4, 1, 2, 3])), o;
  });
}
var pC = class cC extends We {
  constructor(t, n) {
    if (super(n), this.bias = null, this.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", this.DEFAULT_BIAS_INITIALIZER = "zeros", cC.verifyArgs(n), this.rank = t, tn(this.rank, "rank"), this.rank !== 1 && this.rank !== 2 && this.rank !== 3) throw new ze(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);
    if (this.kernelSize = Fl(n.kernelSize, t, "kernelSize"), this.strides = Fl(n.strides == null ? 1 : n.strides, t, "strides"), this.padding = n.padding == null ? "valid" : n.padding, va(this.padding), this.dataFormat = n.dataFormat == null ? "channelsLast" : n.dataFormat, Rt(this.dataFormat), this.activation = fs(n.activation), this.useBias = n.useBias == null ? true : n.useBias, this.biasInitializer = St(n.biasInitializer || this.DEFAULT_BIAS_INITIALIZER), this.biasConstraint = Yt(n.biasConstraint), this.biasRegularizer = Nt(n.biasRegularizer), this.activityRegularizer = Nt(n.activityRegularizer), this.dilationRate = Fl(n.dilationRate == null ? 1 : n.dilationRate, t, "dilationRate"), this.rank === 1 && Array.isArray(this.dilationRate) && this.dilationRate.length !== 1) throw new V(`dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(this.dilationRate)}`);
    if (this.rank === 2) {
      if (typeof this.dilationRate == "number") this.dilationRate = [this.dilationRate, this.dilationRate];
      else if (this.dilationRate.length !== 2) throw new V(`dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(this.dilationRate)}`);
    } else if (this.rank === 3) {
      if (typeof this.dilationRate == "number") this.dilationRate = [this.dilationRate, this.dilationRate, this.dilationRate];
      else if (this.dilationRate.length !== 3) throw new V(`dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(this.dilationRate)}`);
    }
  }
  static verifyArgs(t) {
    if (tr("kernelSize" in t, "required key 'kernelSize' not in config"), typeof t.kernelSize != "number" && !e0(t.kernelSize, "number", 1, 3)) throw new V(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(t.kernelSize)}.`);
  }
  getConfig() {
    let t = { kernelSize: this.kernelSize, strides: this.strides, padding: this.padding, dataFormat: this.dataFormat, dilationRate: this.dilationRate, activation: ms(this.activation), useBias: this.useBias, biasInitializer: Et(this.biasInitializer), biasRegularizer: ft(this.biasRegularizer), activityRegularizer: ft(this.activityRegularizer), biasConstraint: Xt(this.biasConstraint) }, n = super.getConfig();
    return Object.assign(t, n), t;
  }
};
var _f = class dC extends pC {
  constructor(t, n) {
    super(t, n), this.kernel = null, dC.verifyArgs(n), this.filters = n.filters, tn(this.filters, "filters"), this.kernelInitializer = St(n.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER), this.kernelConstraint = Yt(n.kernelConstraint), this.kernelRegularizer = Nt(n.kernelRegularizer);
  }
  build(t) {
    t = Je(t);
    let n = this.dataFormat === "channelsFirst" ? 1 : t.length - 1;
    if (t[n] == null) throw new V(`The channel dimension of the input should be defined. Found ${t[n]}`);
    let a = t[n], r = this.kernelSize.concat([a, this.filters]);
    this.kernel = this.addWeight("kernel", r, null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint), this.useBias && (this.bias = this.addWeight("bias", [this.filters], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint)), this.inputSpec = [{ ndim: this.rank + 2, axes: { [n]: a } }], this.built = true;
  }
  call(t, n) {
    return O(() => {
      t = Te(t);
      let a, r = this.bias == null ? null : this.bias.read(), s = m2(this.activation.getClassName());
      if (s != null && this.rank === 2) a = DI(t, this.kernel.read(), r, this.strides, this.padding, this.dataFormat, this.dilationRate, s);
      else {
        if (this.rank === 1) a = fj(t, this.kernel.read(), r, this.strides[0], this.padding, this.dataFormat, this.dilationRate[0]);
        else if (this.rank === 2) a = DI(t, this.kernel.read(), r, this.strides, this.padding, this.dataFormat, this.dilationRate);
        else if (this.rank === 3) a = gj(t, this.kernel.read(), r, this.strides, this.padding, this.dataFormat, this.dilationRate);
        else throw new ze("convolutions greater than 3D are not implemented yet.");
        this.activation != null && (a = this.activation.apply(a));
      }
      return a;
    });
  }
  computeOutputShape(t) {
    t = Je(t);
    let n = [], a = this.dataFormat === "channelsLast" ? t.slice(1, t.length - 1) : t.slice(2);
    for (let s = 0; s < a.length; ++s) {
      let i = Va(a[s], this.kernelSize[s], this.padding, this.strides[s], typeof this.dilationRate == "number" ? this.dilationRate : this.dilationRate[s]);
      n.push(i);
    }
    let r = [t[0]];
    return this.dataFormat === "channelsLast" ? (r = r.concat(n), r.push(this.filters)) : (r.push(this.filters), r = r.concat(n)), r;
  }
  getConfig() {
    let t = { filters: this.filters, kernelInitializer: Et(this.kernelInitializer), kernelRegularizer: ft(this.kernelRegularizer), kernelConstraint: Xt(this.kernelConstraint) }, n = super.getConfig();
    return Object.assign(t, n), t;
  }
  static verifyArgs(t) {
    if (!("filters" in t) || typeof t.filters != "number" || t.filters < 1) throw new V(`Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(t.filters)}`);
  }
};
var Af = class hC extends _f {
  constructor(t) {
    super(2, t), hC.verifyArgs(t);
  }
  getConfig() {
    let t = super.getConfig();
    return delete t.rank, t;
  }
  static verifyArgs(t) {
    if (typeof t.kernelSize != "number" && !e0(t.kernelSize, "number", 1, 2)) throw new V(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(t.kernelSize)}.`);
  }
};
Af.className = "Conv2D";
ne.registerClass(Af);
var Ff = class mC extends _f {
  constructor(t) {
    super(3, t), mC.verifyArgs(t);
  }
  getConfig() {
    let t = super.getConfig();
    return delete t.rank, t;
  }
  static verifyArgs(t) {
    if (typeof t.kernelSize != "number" && !(Array.isArray(t.kernelSize) && (t.kernelSize.length === 1 || t.kernelSize.length === 3))) throw new V(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(t.kernelSize)}.`);
  }
};
Ff.className = "Conv3D";
ne.registerClass(Ff);
var A0 = class extends Af {
  constructor(e17) {
    if (super(e17), this.inputSpec = [new zt({ ndim: 4 })], this.padding !== "same" && this.padding !== "valid") throw new V(`Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`);
  }
  build(e17) {
    if (e17 = Je(e17), e17.length !== 4) throw new V("Input should have rank 4; Received input shape: " + JSON.stringify(e17));
    let t = this.dataFormat === "channelsFirst" ? 1 : e17.length - 1;
    if (e17[t] == null) throw new V("The channel dimension of the inputs should be defined. Found `None`.");
    let n = e17[t], a = this.kernelSize.concat([this.filters, n]);
    this.kernel = this.addWeight("kernel", a, "float32", this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint), this.useBias && (this.bias = this.addWeight("bias", [this.filters], "float32", this.biasInitializer, this.biasRegularizer, true, this.biasConstraint)), this.inputSpec = [new zt({ ndim: 4, axes: { [t]: n } })], this.built = true;
  }
  call(e17, t) {
    return O(() => {
      let n = Te(e17);
      if (n.shape.length !== 4) throw new V(`Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${n.shape.length}`);
      let a = n.shape, r = a[0], s, i;
      this.dataFormat === "channelsFirst" ? (s = 2, i = 3) : (s = 1, i = 2);
      let o = a[s], l = a[i], u = this.kernelSize[0], p = this.kernelSize[1], d = this.strides[0], c = this.strides[1], h = nr(o, d, u, this.padding), m = nr(l, c, p, this.padding), f = [r, h, m, this.filters];
      this.dataFormat !== "channelsLast" && (n = De(n, [0, 2, 3, 1]));
      let g = Wm(n, this.kernel.read(), f, this.strides, this.padding);
      return this.dataFormat !== "channelsLast" && (g = De(g, [0, 3, 1, 2])), this.bias != null && (g = Ka(g, this.bias.read(), this.dataFormat)), this.activation != null && (g = this.activation.apply(g)), g;
    });
  }
  computeOutputShape(e17) {
    e17 = Je(e17);
    let t = e17.slice(), n, a, r;
    this.dataFormat === "channelsFirst" ? (n = 1, a = 2, r = 3) : (n = 3, a = 1, r = 2);
    let s = this.kernelSize[0], i = this.kernelSize[1], o = this.strides[0], l = this.strides[1];
    return t[n] = this.filters, t[a] = nr(t[a], o, s, this.padding), t[r] = nr(t[r], l, i, this.padding), t;
  }
  getConfig() {
    let e17 = super.getConfig();
    return delete e17.dilationRate, e17;
  }
};
A0.className = "Conv2DTranspose";
ne.registerClass(A0);
var F0 = class extends Ff {
  constructor(e17) {
    if (super(e17), this.inputSpec = [new zt({ ndim: 5 })], this.padding !== "same" && this.padding !== "valid") throw new V(`Conv3DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`);
  }
  build(e17) {
    if (e17 = Je(e17), e17.length !== 5) throw new V("Input should have rank 5; Received input shape: " + JSON.stringify(e17));
    let t = this.dataFormat === "channelsFirst" ? 1 : e17.length - 1;
    if (e17[t] == null) throw new V("The channel dimension of the inputs should be defined. Found `None`.");
    let n = e17[t], a = this.kernelSize.concat([this.filters, n]);
    this.kernel = this.addWeight("kernel", a, "float32", this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint), this.useBias && (this.bias = this.addWeight("bias", [this.filters], "float32", this.biasInitializer, this.biasRegularizer, true, this.biasConstraint)), this.inputSpec = [new zt({ ndim: 5, axes: { [t]: n } })], this.built = true;
  }
  call(e17, t) {
    return O(() => {
      let n = Te(e17);
      if (n.shape.length !== 5) throw new V(`Conv3DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${n.shape.length}`);
      let a = n.shape, r = a[0], s, i, o;
      this.dataFormat === "channelsFirst" ? (o = 2, s = 3, i = 4) : (o = 1, s = 2, i = 3);
      let l = a[o], u = a[s], p = a[i], d = this.kernelSize[0], c = this.kernelSize[1], h = this.kernelSize[2], m = this.strides[0], f = this.strides[1], g = this.strides[2], b = nr(l, m, d, this.padding), y = nr(u, f, c, this.padding), x = nr(p, g, h, this.padding), v = [r, b, y, x, this.filters];
      this.dataFormat !== "channelsLast" && (n = De(n, [0, 2, 3, 4, 1]));
      let I = rw(n, this.kernel.read(), v, this.strides, this.padding);
      return this.dataFormat !== "channelsLast" && (I = De(I, [0, 4, 1, 2, 3])), this.bias !== null && (I = Ka(I, this.bias.read(), this.dataFormat)), this.activation !== null && (I = this.activation.apply(I)), I;
    });
  }
  computeOutputShape(e17) {
    e17 = Je(e17);
    let t = e17.slice(), n, a, r, s;
    this.dataFormat === "channelsFirst" ? (n = 1, a = 2, r = 3, s = 4) : (n = 4, a = 1, r = 2, s = 3);
    let i = this.kernelSize[0], o = this.kernelSize[1], l = this.kernelSize[2], u = this.strides[0], p = this.strides[1], d = this.strides[2];
    return t[n] = this.filters, t[a] = nr(t[a], u, i, this.padding), t[r] = nr(t[r], p, o, this.padding), t[s] = nr(t[s], d, l, this.padding), t;
  }
  getConfig() {
    let e17 = super.getConfig();
    return delete e17.dilationRate, e17;
  }
};
F0.className = "Conv3DTranspose";
ne.registerClass(F0);
var fC = class extends _f {
  constructor(e17, t) {
    if (super(e17, t), this.DEFAULT_DEPTHWISE_INITIALIZER = "glorotUniform", this.DEFAULT_POINTWISE_INITIALIZER = "glorotUniform", this.depthwiseKernel = null, this.pointwiseKernel = null, t.filters == null) throw new V("The `filters` configuration field is required by SeparableConv, but is unspecified.");
    if (t.kernelInitializer != null || t.kernelRegularizer != null || t.kernelConstraint != null) throw new V("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");
    if (t.padding != null && t.padding !== "same" && t.padding !== "valid") throw new V(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(t.padding)}`);
    this.depthMultiplier = t.depthMultiplier == null ? 1 : t.depthMultiplier, this.depthwiseInitializer = St(t.depthwiseInitializer || this.DEFAULT_DEPTHWISE_INITIALIZER), this.depthwiseRegularizer = Nt(t.depthwiseRegularizer), this.depthwiseConstraint = Yt(t.depthwiseConstraint), this.pointwiseInitializer = St(t.depthwiseInitializer || this.DEFAULT_POINTWISE_INITIALIZER), this.pointwiseRegularizer = Nt(t.pointwiseRegularizer), this.pointwiseConstraint = Yt(t.pointwiseConstraint);
  }
  build(e17) {
    if (e17 = Je(e17), e17.length < this.rank + 2) throw new V(`Inputs to SeparableConv${this.rank}D should have rank ${this.rank + 2}, but received input shape: ${JSON.stringify(e17)}`);
    let t = this.dataFormat === "channelsFirst" ? 1 : e17.length - 1;
    if (e17[t] == null || e17[t] < 0) throw new V(`The channel dimension of the inputs should be defined, but found ${JSON.stringify(e17[t])}`);
    let n = e17[t], a = this.kernelSize.concat([n, this.depthMultiplier]), r = [];
    for (let i = 0; i < this.rank; ++i) r.push(1);
    r.push(n * this.depthMultiplier, this.filters);
    let s = true;
    this.depthwiseKernel = this.addWeight("depthwise_kernel", a, "float32", this.depthwiseInitializer, this.depthwiseRegularizer, s, this.depthwiseConstraint), this.pointwiseKernel = this.addWeight("pointwise_kernel", r, "float32", this.pointwiseInitializer, this.pointwiseRegularizer, s, this.pointwiseConstraint), this.useBias ? this.bias = this.addWeight("bias", [this.filters], "float32", this.biasInitializer, this.biasRegularizer, s, this.biasConstraint) : this.bias = null, this.inputSpec = [new zt({ ndim: this.rank + 2, axes: { [t]: n } })], this.built = true;
  }
  call(e17, t) {
    return O(() => {
      e17 = Te(e17);
      let n;
      if (this.rank === 1) throw new ze("1D separable convolution is not implemented yet.");
      return this.rank === 2 && (this.dataFormat === "channelsFirst" && (e17 = De(e17, [0, 2, 3, 1])), n = _s(e17, this.depthwiseKernel.read(), this.pointwiseKernel.read(), this.strides, this.padding, this.dilationRate, "NHWC")), this.useBias && (n = Ka(n, this.bias.read(), this.dataFormat)), this.activation != null && (n = this.activation.apply(n)), this.dataFormat === "channelsFirst" && (n = De(n, [0, 3, 1, 2])), n;
    });
  }
  getConfig() {
    let e17 = super.getConfig();
    return delete e17.rank, delete e17.kernelInitializer, delete e17.kernelRegularizer, delete e17.kernelConstraint, e17.depthwiseInitializer = Et(this.depthwiseInitializer), e17.pointwiseInitializer = Et(this.pointwiseInitializer), e17.depthwiseRegularizer = ft(this.depthwiseRegularizer), e17.pointwiseRegularizer = ft(this.pointwiseRegularizer), e17.depthwiseConstraint = Xt(this.depthwiseConstraint), e17.pointwiseConstraint = Xt(this.pointwiseConstraint), e17;
  }
};
fC.className = "SeparableConv";
var $0 = class extends fC {
  constructor(e17) {
    super(2, e17);
  }
};
$0.className = "SeparableConv2D";
ne.registerClass($0);
var D0 = class gC extends _f {
  constructor(t) {
    super(1, t), gC.verifyArgs(t), this.inputSpec = [{ ndim: 3 }];
  }
  getConfig() {
    let t = super.getConfig();
    return delete t.rank, delete t.dataFormat, t;
  }
  static verifyArgs(t) {
    if (typeof t.kernelSize != "number" && !e0(t.kernelSize, "number", 1, 1)) throw new V(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(t.kernelSize)}.`);
  }
};
D0.className = "Conv1D";
ne.registerClass(D0);
var R0 = class extends We {
  constructor(e17) {
    super(e17), typeof e17.cropping == "number" ? this.cropping = [[e17.cropping, e17.cropping], [e17.cropping, e17.cropping]] : typeof e17.cropping[0] == "number" ? this.cropping = [[e17.cropping[0], e17.cropping[0]], [e17.cropping[1], e17.cropping[1]]] : this.cropping = e17.cropping, this.dataFormat = e17.dataFormat === void 0 ? "channelsLast" : e17.dataFormat, this.inputSpec = [{ ndim: 4 }];
  }
  computeOutputShape(e17) {
    return this.dataFormat === "channelsFirst" ? [e17[0], e17[1], e17[2] - this.cropping[0][0] - this.cropping[0][1], e17[3] - this.cropping[1][0] - this.cropping[1][1]] : [e17[0], e17[1] - this.cropping[0][0] - this.cropping[0][1], e17[2] - this.cropping[1][0] - this.cropping[1][1], e17[3]];
  }
  call(e17, t) {
    return O(() => {
      if (e17 = Te(e17), this.dataFormat === "channelsLast") {
        let n = Ih(e17, this.cropping[0][0], e17.shape[1] - this.cropping[0][0] - this.cropping[0][1], 2);
        return Ih(n, this.cropping[1][0], e17.shape[2] - this.cropping[1][1] - this.cropping[1][0], 3);
      } else {
        let n = Ih(e17, this.cropping[0][0], e17.shape[2] - this.cropping[0][0] - this.cropping[0][1], 3);
        return Ih(n, this.cropping[1][0], e17.shape[3] - this.cropping[1][1] - this.cropping[1][0], 4);
      }
    });
  }
  getConfig() {
    let e17 = { cropping: this.cropping, dataFormat: this.dataFormat }, t = super.getConfig();
    return Object.assign(e17, t), e17;
  }
};
R0.className = "Cropping2D";
ne.registerClass(R0);
var M0 = class extends We {
  constructor(e17) {
    super(e17), this.DEFAULT_SIZE = [2, 2], this.inputSpec = [{ ndim: 4 }], this.size = e17.size == null ? this.DEFAULT_SIZE : e17.size, this.dataFormat = e17.dataFormat == null ? "channelsLast" : e17.dataFormat, Rt(this.dataFormat), this.interpolation = e17.interpolation == null ? "nearest" : e17.interpolation, SG(this.interpolation);
  }
  computeOutputShape(e17) {
    if (this.dataFormat === "channelsFirst") {
      let t = e17[2] == null ? null : this.size[0] * e17[2], n = e17[3] == null ? null : this.size[1] * e17[3];
      return [e17[0], e17[1], t, n];
    } else {
      let t = e17[1] == null ? null : this.size[0] * e17[1], n = e17[2] == null ? null : this.size[1] * e17[2];
      return [e17[0], t, n, e17[3]];
    }
  }
  call(e17, t) {
    return O(() => {
      let n = Te(e17), a = n.shape;
      if (this.dataFormat === "channelsFirst") {
        n = De(n, [0, 2, 3, 1]);
        let r = this.size[0] * a[2], s = this.size[1] * a[3], i = this.interpolation === "nearest" ? Zn.resizeNearestNeighbor(n, [r, s]) : Zn.resizeBilinear(n, [r, s]);
        return De(i, [0, 3, 1, 2]);
      } else {
        let r = this.size[0] * a[1], s = this.size[1] * a[2];
        return this.interpolation === "nearest" ? Zn.resizeNearestNeighbor(n, [r, s]) : Zn.resizeBilinear(n, [r, s]);
      }
    });
  }
  getConfig() {
    let e17 = { size: this.size, dataFormat: this.dataFormat, interpolation: this.interpolation }, t = super.getConfig();
    return Object.assign(e17, t), e17;
  }
};
M0.className = "UpSampling2D";
ne.registerClass(M0);
function bj(e17, t, n = [1, 1], a = "valid", r, s) {
  return O(() => {
    r == null && (r = Ga()), Rt(r);
    let i = _0(e17, r);
    if (e17.rank !== 4) throw new V(`Input for depthwiseConv2d is required to be 4-D, but is instead ${e17.rank}-D`);
    if (t.rank !== 4) throw new V(`depthwiseKernel is required to be 4-D, but is instead ${t.rank}-D`);
    return i = Ts(i, t, n, a === "same" ? "same" : "valid", "NHWC", s), r === "channelsFirst" && (i = De(i, [0, 3, 1, 2])), i;
  });
}
var O0 = class extends pC {
  constructor(e17) {
    super(2, e17), this.depthwiseKernel = null, this.depthMultiplier = e17.depthMultiplier == null ? 1 : e17.depthMultiplier, this.depthwiseInitializer = St(e17.depthwiseInitializer || this.DEFAULT_KERNEL_INITIALIZER), this.depthwiseConstraint = Yt(e17.depthwiseConstraint), this.depthwiseRegularizer = Nt(e17.depthwiseRegularizer);
  }
  build(e17) {
    if (e17 = Je(e17), e17.length < 4) throw new V(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(e17)}.`);
    let t = this.dataFormat === "channelsFirst" ? 1 : 3;
    if (e17[t] == null || e17[t] < 0) throw new V(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${e17[t]}).`);
    let n = e17[t], a = [this.kernelSize[0], this.kernelSize[1], n, this.depthMultiplier];
    this.depthwiseKernel = this.addWeight("depthwise_kernel", a, null, this.depthwiseInitializer, this.depthwiseRegularizer, true, this.depthwiseConstraint), this.useBias ? this.bias = this.addWeight("bias", [n * this.depthMultiplier], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint) : this.bias = null, this.built = true;
  }
  call(e17, t) {
    return O(() => {
      e17 = Te(e17);
      let n = bj(e17, this.depthwiseKernel.read(), this.strides, this.padding, this.dataFormat, null);
      return this.useBias && (n = Ka(n, this.bias.read(), this.dataFormat)), this.activation != null && (n = this.activation.apply(n)), n;
    });
  }
  computeOutputShape(e17) {
    e17 = Je(e17);
    let t = this.dataFormat === "channelsFirst" ? e17[2] : e17[1], n = this.dataFormat === "channelsFirst" ? e17[3] : e17[2], a = this.dataFormat === "channelsFirst" ? e17[1] * this.depthMultiplier : e17[3] * this.depthMultiplier, r = Va(t, this.kernelSize[0], this.padding, this.strides[0]), s = Va(n, this.kernelSize[1], this.padding, this.strides[1]);
    return this.dataFormat === "channelsFirst" ? [e17[0], a, r, s] : [e17[0], r, s, a];
  }
  getConfig() {
    let e17 = super.getConfig();
    return e17.depthMultiplier = this.depthMultiplier, e17.depthwiseInitializer = Et(this.depthwiseInitializer), e17.depthwiseRegularizer = ft(this.depthwiseRegularizer), e17.depthwiseConstraint = Xt(this.depthwiseRegularizer), e17;
  }
};
O0.className = "DepthwiseConv2D";
ne.registerClass(O0);
function bC(e17, t, n, a) {
  if (Array.isArray(e17)) {
    if (t != null || n != null) throw new V("When inputs is an array, neither initialState or constants should be provided");
    a != null && (n = e17.slice(e17.length - a, e17.length), e17 = e17.slice(0, e17.length - a)), e17.length > 1 && (t = e17.slice(1, e17.length)), e17 = e17[0];
  }
  function r(s) {
    return s == null || Array.isArray(s) ? s : [s];
  }
  return t = r(t), n = r(n), { inputs: e17, initialState: t, constants: n };
}
function yC(e17, t, n, a = false, r, s, i = false, o = false) {
  return O(() => {
    let l = t.shape.length;
    if (l < 3) throw new V(`Input should be at least 3D, but is ${l}D.`);
    let u = [1, 0].concat(Ua(2, l));
    if (t = De(t, u), s != null) throw new ze("The rnn() functoin of the deeplearn.js backend does not support constants yet.");
    i && console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."), r != null && (r = re(re(r, "bool"), "float32"), r.rank === l - 1 && (r = Gt(r, -1)), r = De(r, u)), a && (t = ba(t, 0), r != null && (r = ba(r, 0)));
    let p = [], d, c = n, h = t.shape[0], m = dt(t), f;
    r != null && (f = dt(r));
    for (let b = 0; b < h; ++b) {
      let y = m[b], x = O(() => e17(y, c));
      if (r == null) d = x[0], c = x[1];
      else {
        let v = O(() => {
          let I = f[b], N = pe(ea(I), I), C = X(z(x[0], I), z(c[0], N)), _ = c.map((F, D) => X(z(x[1][D], I), z(F, N)));
          return { output: C, newStates: _ };
        });
        d = v.output, c = v.newStates;
      }
      o && p.push(d);
    }
    let g;
    return o && (g = At(p, 1)), [d, g, c];
  });
}
var Mr = class xC extends We {
  constructor(t) {
    super(t);
    let n;
    if (t.cell == null) throw new V("cell property is missing for the constructor of RNN.");
    if (Array.isArray(t.cell) ? n = new Rf({ cells: t.cell }) : n = t.cell, n.stateSize == null) throw new V("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");
    this.cell = n, this.returnSequences = t.returnSequences == null ? false : t.returnSequences, this.returnState = t.returnState == null ? false : t.returnState, this.goBackwards = t.goBackwards == null ? false : t.goBackwards, this._stateful = t.stateful == null ? false : t.stateful, this.unroll = t.unroll == null ? false : t.unroll, this.supportsMasking = true, this.inputSpec = [new zt({ ndim: 3 })], this.stateSpec = null, this.states_ = null, this.numConstants = null, this.keptStates = [];
  }
  getStates() {
    if (this.states_ == null) {
      let t = Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1;
      return Ua(0, t).map((n) => null);
    } else return this.states_;
  }
  setStates(t) {
    this.states_ = t;
  }
  computeOutputShape(t) {
    Vx(t) && (t = t[0]), t = t;
    let n = this.cell.stateSize;
    Array.isArray(n) || (n = [n]);
    let a = n[0], r;
    if (this.returnSequences ? r = [t[0], t[1], a] : r = [t[0], a], this.returnState) {
      let s = [];
      for (let i of n) s.push([t[0], i]);
      return [r].concat(s);
    } else return r;
  }
  computeMask(t, n) {
    return O(() => {
      Array.isArray(n) && (n = n[0]);
      let a = this.returnSequences ? n : null;
      if (this.returnState) {
        let r = this.states.map((s) => null);
        return [a].concat(r);
      } else return a;
    });
  }
  get states() {
    if (this.states_ == null) {
      let t = Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1, n = [];
      for (let a = 0; a < t; ++a) n.push(null);
      return n;
    } else return this.states_;
  }
  set states(t) {
    this.states_ = t;
  }
  build(t) {
    if (this.numConstants != null) throw new ze("Constants support is not implemented in RNN yet.");
    Vx(t) && (t = t[0]), t = t;
    let n = this.stateful ? t[0] : null, a = t.slice(2);
    this.inputSpec[0] = new zt({ shape: [n, null, ...a] });
    let r = [t[0]].concat(t.slice(2));
    this.cell.build(r);
    let s;
    if (Array.isArray(this.cell.stateSize) ? s = this.cell.stateSize : s = [this.cell.stateSize], this.stateSpec != null) {
      if (!w.arraysEqual(this.stateSpec.map((i) => i.shape[i.shape.length - 1]), s)) throw new V(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`);
    } else this.stateSpec = s.map((i) => new zt({ shape: [null, i] }));
    this.stateful && this.resetStates();
  }
  resetStates(t, n = false) {
    O(() => {
      if (!this.stateful) throw new Xr("Cannot call resetStates() on an RNN Layer that is not stateful.");
      let a = this.inputSpec[0].shape[0];
      if (a == null) throw new V("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");
      if (this.states_ == null) Array.isArray(this.cell.stateSize) ? this.states_ = this.cell.stateSize.map((r) => It([a, r])) : this.states_ = [It([a, this.cell.stateSize])];
      else if (t == null) Ee(this.states_), this.keptStates != null && (Ee(this.keptStates), this.keptStates = []), Array.isArray(this.cell.stateSize) ? this.states_ = this.cell.stateSize.map((r) => It([a, r])) : this.states_[0] = It([a, this.cell.stateSize]);
      else {
        if (Array.isArray(t) || (t = [t]), t.length !== this.states_.length) throw new V(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${t.length} state value(s). Input received: ${t}`);
        n === true ? this.keptStates.push(this.states_.slice()) : Ee(this.states_);
        for (let r = 0; r < this.states_.length; ++r) {
          let s = t[r], i = Array.isArray(this.cell.stateSize) ? this.cell.stateSize[r] : this.cell.stateSize, o = [a, i];
          if (!w.arraysEqual(s.shape, o)) throw new V(`State ${r} is incompatible with layer ${this.name}: expected shape=${o}, received shape=${s.shape}`);
          this.states_[r] = s;
        }
      }
      this.states_ = this.states_.map((r) => Ht(r.clone()));
    });
  }
  apply(t, n) {
    let a = n == null ? null : n.initialState, r = n == null ? null : n.constants;
    n == null && (n = {});
    let s = bC(t, a, r, this.numConstants);
    t = s.inputs, a = s.initialState, r = s.constants;
    let i = [], o = [];
    if (a != null) {
      n.initialState = a, i = i.concat(a), this.stateSpec = [];
      for (let l of a) this.stateSpec.push(new zt({ shape: l.shape }));
      o = o.concat(this.stateSpec);
    }
    if (r != null && (n.constants = r, i = i.concat(r), this.numConstants = r.length), i[0] instanceof Ha) {
      let l = [t].concat(i), u = this.inputSpec.concat(o), p = this.inputSpec;
      this.inputSpec = u;
      let d = super.apply(l, n);
      return this.inputSpec = p, d;
    } else return super.apply(t, n);
  }
  call(t, n) {
    return O(() => {
      let a = n == null ? null : n.mask, r = n == null ? null : n.training, s = n == null ? null : n.initialState;
      t = Te(t), s == null && (this.stateful ? s = this.states_ : s = this.getInitialState(t));
      let i = Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1;
      if (s.length !== i) throw new V(`RNN Layer has ${i} state(s) but was passed ${s.length} initial state(s).`);
      this.unroll && console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");
      let o = { training: r }, l = yC((h, m) => {
        let f = this.cell.call([h].concat(m), o);
        return [f[0], f.slice(1)];
      }, t, s, this.goBackwards, a, null, this.unroll, this.returnSequences), u = l[0], p = l[1], d = l[2];
      this.stateful && this.resetStates(d, r);
      let c = this.returnSequences ? p : u;
      return this.returnState ? [c].concat(d) : c;
    });
  }
  getInitialState(t) {
    return O(() => {
      let n = It(t.shape);
      return n = fe(n, [1, 2]), n = wd(n), Array.isArray(this.cell.stateSize) ? this.cell.stateSize.map((a) => a > 1 ? Wx(n, [1, a]) : n) : this.cell.stateSize > 1 ? [Wx(n, [1, this.cell.stateSize])] : [n];
    });
  }
  get trainableWeights() {
    return this.trainable ? this.cell.trainableWeights : [];
  }
  get nonTrainableWeights() {
    return this.trainable ? this.cell.nonTrainableWeights : this.cell.weights;
  }
  setFastWeightInitDuringBuild(t) {
    super.setFastWeightInitDuringBuild(t), this.cell != null && this.cell.setFastWeightInitDuringBuild(t);
  }
  getConfig() {
    let t = super.getConfig(), n = { returnSequences: this.returnSequences, returnState: this.returnState, goBackwards: this.goBackwards, stateful: this.stateful, unroll: this.unroll };
    this.numConstants != null && (n.numConstants = this.numConstants);
    let a = this.cell.getConfig();
    return this.getClassName() === xC.className && (n.cell = { className: this.cell.getClassName(), config: a }), Object.assign(Object.assign(Object.assign({}, a), t), n);
  }
  static fromConfig(t, n, a = {}) {
    let r = n.cell, s = Ba(r, a);
    return new t(Object.assign(n, { cell: s }));
  }
};
Mr.className = "RNN";
ne.registerClass(Mr);
var Td = class extends We {
};
var $f = class extends Td {
  constructor(e17) {
    super(e17), this.DEFAULT_ACTIVATION = "tanh", this.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", this.DEFAULT_RECURRENT_INITIALIZER = "orthogonal", this.DEFAULT_BIAS_INITIALIZER = "zeros", this.units = e17.units, tn(this.units, "units"), this.activation = fs(e17.activation == null ? this.DEFAULT_ACTIVATION : e17.activation), this.useBias = e17.useBias == null ? true : e17.useBias, this.kernelInitializer = St(e17.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER), this.recurrentInitializer = St(e17.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER), this.biasInitializer = St(e17.biasInitializer || this.DEFAULT_BIAS_INITIALIZER), this.kernelRegularizer = Nt(e17.kernelRegularizer), this.recurrentRegularizer = Nt(e17.recurrentRegularizer), this.biasRegularizer = Nt(e17.biasRegularizer), this.kernelConstraint = Yt(e17.kernelConstraint), this.recurrentConstraint = Yt(e17.recurrentConstraint), this.biasConstraint = Yt(e17.biasConstraint), this.dropout = Ul([1, hs([0, e17.dropout == null ? 0 : e17.dropout])]), this.recurrentDropout = Ul([1, hs([0, e17.recurrentDropout == null ? 0 : e17.recurrentDropout])]), this.dropoutFunc = e17.dropoutFunc, this.stateSize = this.units, this.dropoutMask = null, this.recurrentDropoutMask = null;
  }
  build(e17) {
    e17 = Je(e17), this.kernel = this.addWeight("kernel", [e17[e17.length - 1], this.units], null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint), this.recurrentKernel = this.addWeight("recurrent_kernel", [this.units, this.units], null, this.recurrentInitializer, this.recurrentRegularizer, true, this.recurrentConstraint), this.useBias ? this.bias = this.addWeight("bias", [this.units], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint) : this.bias = null, this.built = true;
  }
  call(e17, t) {
    return O(() => {
      if (e17 = e17, e17.length !== 2) throw new V(`SimpleRNNCell expects 2 input Tensors, got ${e17.length}.`);
      let n = e17[1];
      e17 = e17[0];
      let a = t.training == null ? false : t.training;
      0 < this.dropout && this.dropout < 1 && this.dropoutMask == null && (this.dropoutMask = gs({ ones: () => ea(e17), rate: this.dropout, training: a, dropoutFunc: this.dropoutFunc })), 0 < this.recurrentDropout && this.recurrentDropout < 1 && this.recurrentDropoutMask == null && (this.recurrentDropoutMask = gs({ ones: () => ea(n), rate: this.recurrentDropout, training: a, dropoutFunc: this.dropoutFunc }));
      let r, s = this.dropoutMask, i = this.recurrentDropoutMask;
      s != null ? r = or(z(e17, s), this.kernel.read()) : r = or(e17, this.kernel.read()), this.bias != null && (r = Ka(r, this.bias.read())), i != null && (n = z(n, i));
      let o = X(r, or(n, this.recurrentKernel.read()));
      return this.activation != null && (o = this.activation.apply(o)), [o, o];
    });
  }
  getConfig() {
    let e17 = super.getConfig(), t = { units: this.units, activation: ms(this.activation), useBias: this.useBias, kernelInitializer: Et(this.kernelInitializer), recurrentInitializer: Et(this.recurrentInitializer), biasInitializer: Et(this.biasInitializer), kernelRegularizer: ft(this.kernelRegularizer), recurrentRegularizer: ft(this.recurrentRegularizer), biasRegularizer: ft(this.biasRegularizer), activityRegularizer: ft(this.activityRegularizer), kernelConstraint: Xt(this.kernelConstraint), recurrentConstraint: Xt(this.recurrentConstraint), biasConstraint: Xt(this.biasConstraint), dropout: this.dropout, recurrentDropout: this.recurrentDropout };
    return Object.assign(Object.assign({}, e17), t);
  }
};
$f.className = "SimpleRNNCell";
ne.registerClass($f);
var P0 = class extends Mr {
  constructor(e17) {
    e17.cell = new $f(e17), super(e17);
  }
  call(e17, t) {
    return O(() => {
      this.cell.dropoutMask != null && (Ee(this.cell.dropoutMask), this.cell.dropoutMask = null), this.cell.recurrentDropoutMask != null && (Ee(this.cell.recurrentDropoutMask), this.cell.recurrentDropoutMask = null);
      let n = t == null ? null : t.mask, a = t == null ? null : t.training, r = t == null ? null : t.initialState;
      return super.call(e17, { mask: n, training: a, initialState: r });
    });
  }
  static fromConfig(e17, t) {
    return new e17(t);
  }
};
P0.className = "SimpleRNN";
ne.registerClass(P0);
var Df = class extends Td {
  constructor(e17) {
    if (super(e17), this.DEFAULT_ACTIVATION = "tanh", this.DEFAULT_RECURRENT_ACTIVATION = "hardSigmoid", this.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", this.DEFAULT_RECURRENT_INITIALIZER = "orthogonal", this.DEFAULT_BIAS_INITIALIZER = "zeros", e17.resetAfter) throw new V("GRUCell does not support reset_after parameter set to true.");
    this.units = e17.units, tn(this.units, "units"), this.activation = fs(e17.activation === void 0 ? this.DEFAULT_ACTIVATION : e17.activation), this.recurrentActivation = fs(e17.recurrentActivation === void 0 ? this.DEFAULT_RECURRENT_ACTIVATION : e17.recurrentActivation), this.useBias = e17.useBias == null ? true : e17.useBias, this.kernelInitializer = St(e17.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER), this.recurrentInitializer = St(e17.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER), this.biasInitializer = St(e17.biasInitializer || this.DEFAULT_BIAS_INITIALIZER), this.kernelRegularizer = Nt(e17.kernelRegularizer), this.recurrentRegularizer = Nt(e17.recurrentRegularizer), this.biasRegularizer = Nt(e17.biasRegularizer), this.kernelConstraint = Yt(e17.kernelConstraint), this.recurrentConstraint = Yt(e17.recurrentConstraint), this.biasConstraint = Yt(e17.biasConstraint), this.dropout = Ul([1, hs([0, e17.dropout == null ? 0 : e17.dropout])]), this.recurrentDropout = Ul([1, hs([0, e17.recurrentDropout == null ? 0 : e17.recurrentDropout])]), this.dropoutFunc = e17.dropoutFunc, this.implementation = e17.implementation, this.stateSize = this.units, this.dropoutMask = null, this.recurrentDropoutMask = null;
  }
  build(e17) {
    e17 = Je(e17);
    let t = e17[e17.length - 1];
    this.kernel = this.addWeight("kernel", [t, this.units * 3], null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint), this.recurrentKernel = this.addWeight("recurrent_kernel", [this.units, this.units * 3], null, this.recurrentInitializer, this.recurrentRegularizer, true, this.recurrentConstraint), this.useBias ? this.bias = this.addWeight("bias", [this.units * 3], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint) : this.bias = null, this.built = true;
  }
  call(e17, t) {
    return O(() => {
      if (e17 = e17, e17.length !== 2) throw new V(`GRUCell expects 2 input Tensors (inputs, h, c), got ${e17.length}.`);
      let n = t.training == null ? false : t.training, a = e17[1];
      e17 = e17[0], 0 < this.dropout && this.dropout < 1 && this.dropoutMask == null && (this.dropoutMask = gs({ ones: () => ea(e17), rate: this.dropout, training: n, count: 3, dropoutFunc: this.dropoutFunc })), 0 < this.recurrentDropout && this.recurrentDropout < 1 && this.recurrentDropoutMask == null && (this.recurrentDropoutMask = gs({ ones: () => ea(a), rate: this.recurrentDropout, training: n, count: 3, dropoutFunc: this.dropoutFunc }));
      let r = this.dropoutMask, s = this.recurrentDropoutMask, i, o, l;
      0 < this.dropout && this.dropout < 1 && (e17 = z(e17, r[0]));
      let u = or(e17, this.kernel.read());
      this.useBias && (u = Ka(u, this.bias.read())), 0 < this.recurrentDropout && this.recurrentDropout < 1 && (a = z(a, s[0]));
      let p = this.recurrentKernel.read(), [d, c] = Ln(p, [2 * this.units, this.units], p.rank - 1), h = or(a, d), [m, f, g] = Ln(u, 3, u.rank - 1), [b, y] = Ln(h, 2, h.rank - 1);
      i = this.recurrentActivation.apply(X(m, b)), o = this.recurrentActivation.apply(X(f, y));
      let x = or(z(o, a), c);
      l = this.activation.apply(X(g, x));
      let v = X(z(i, a), z(X(1, yt(i)), l));
      return [v, v];
    });
  }
  getConfig() {
    let e17 = super.getConfig(), t = { units: this.units, activation: ms(this.activation), recurrentActivation: ms(this.recurrentActivation), useBias: this.useBias, kernelInitializer: Et(this.kernelInitializer), recurrentInitializer: Et(this.recurrentInitializer), biasInitializer: Et(this.biasInitializer), kernelRegularizer: ft(this.kernelRegularizer), recurrentRegularizer: ft(this.recurrentRegularizer), biasRegularizer: ft(this.biasRegularizer), activityRegularizer: ft(this.activityRegularizer), kernelConstraint: Xt(this.kernelConstraint), recurrentConstraint: Xt(this.recurrentConstraint), biasConstraint: Xt(this.biasConstraint), dropout: this.dropout, recurrentDropout: this.recurrentDropout, implementation: this.implementation, resetAfter: false };
    return Object.assign(Object.assign({}, e17), t);
  }
};
Df.className = "GRUCell";
ne.registerClass(Df);
var L0 = class extends Mr {
  constructor(e17) {
    e17.implementation === 0 && console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."), e17.cell = new Df(e17), super(e17);
  }
  call(e17, t) {
    return O(() => {
      this.cell.dropoutMask != null && (Ee(this.cell.dropoutMask), this.cell.dropoutMask = null), this.cell.recurrentDropoutMask != null && (Ee(this.cell.recurrentDropoutMask), this.cell.recurrentDropoutMask = null);
      let n = t == null ? null : t.mask, a = t == null ? null : t.training, r = t == null ? null : t.initialState;
      return super.call(e17, { mask: n, training: a, initialState: r });
    });
  }
  static fromConfig(e17, t) {
    return t.implmentation === 0 && (t.implementation = 1), new e17(t);
  }
};
L0.className = "GRU";
ne.registerClass(L0);
var Cd = class extends Td {
  constructor(e17) {
    super(e17), this.DEFAULT_ACTIVATION = "tanh", this.DEFAULT_RECURRENT_ACTIVATION = "hardSigmoid", this.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", this.DEFAULT_RECURRENT_INITIALIZER = "orthogonal", this.DEFAULT_BIAS_INITIALIZER = "zeros", this.units = e17.units, tn(this.units, "units"), this.activation = fs(e17.activation === void 0 ? this.DEFAULT_ACTIVATION : e17.activation), this.recurrentActivation = fs(e17.recurrentActivation === void 0 ? this.DEFAULT_RECURRENT_ACTIVATION : e17.recurrentActivation), this.useBias = e17.useBias == null ? true : e17.useBias, this.kernelInitializer = St(e17.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER), this.recurrentInitializer = St(e17.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER), this.biasInitializer = St(e17.biasInitializer || this.DEFAULT_BIAS_INITIALIZER), this.unitForgetBias = e17.unitForgetBias, this.kernelRegularizer = Nt(e17.kernelRegularizer), this.recurrentRegularizer = Nt(e17.recurrentRegularizer), this.biasRegularizer = Nt(e17.biasRegularizer), this.kernelConstraint = Yt(e17.kernelConstraint), this.recurrentConstraint = Yt(e17.recurrentConstraint), this.biasConstraint = Yt(e17.biasConstraint), this.dropout = Ul([1, hs([0, e17.dropout == null ? 0 : e17.dropout])]), this.recurrentDropout = Ul([1, hs([0, e17.recurrentDropout == null ? 0 : e17.recurrentDropout])]), this.dropoutFunc = e17.dropoutFunc, this.implementation = e17.implementation, this.stateSize = [this.units, this.units], this.dropoutMask = null, this.recurrentDropoutMask = null;
  }
  build(e17) {
    var t;
    e17 = Je(e17);
    let n = e17[e17.length - 1];
    this.kernel = this.addWeight("kernel", [n, this.units * 4], null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint), this.recurrentKernel = this.addWeight("recurrent_kernel", [this.units, this.units * 4], null, this.recurrentInitializer, this.recurrentRegularizer, true, this.recurrentConstraint);
    let a;
    if (this.useBias) {
      if (this.unitForgetBias) {
        let r = this.biasInitializer, s = this.units;
        a = new (t = class extends $a {
          apply(i, o) {
            let l = r.apply([s]), u = new yf().apply([s]), p = r.apply([s * 2]);
            return bI(bI(l, u), p);
          }
        }, t.className = "CustomInit", t)();
      } else a = this.biasInitializer;
      this.bias = this.addWeight("bias", [this.units * 4], null, a, this.biasRegularizer, true, this.biasConstraint);
    } else this.bias = null;
    this.built = true;
  }
  call(e17, t) {
    return O(() => {
      let n = t.training == null ? false : t.training;
      if (e17 = e17, e17.length !== 3) throw new V(`LSTMCell expects 3 input Tensors (inputs, h, c), got ${e17.length}.`);
      let a = e17[1], r = e17[2];
      e17 = e17[0], 0 < this.dropout && this.dropout < 1 && this.dropoutMask == null && (this.dropoutMask = gs({ ones: () => ea(e17), rate: this.dropout, training: n, count: 4, dropoutFunc: this.dropoutFunc })), 0 < this.recurrentDropout && this.recurrentDropout < 1 && this.recurrentDropoutMask == null && (this.recurrentDropoutMask = gs({ ones: () => ea(a), rate: this.recurrentDropout, training: n, count: 4, dropoutFunc: this.dropoutFunc }));
      let s = this.dropoutMask, i = this.recurrentDropoutMask, o, l, u, p;
      0 < this.dropout && this.dropout < 1 && (e17 = z(e17, s[0]));
      let d = or(e17, this.kernel.read());
      0 < this.recurrentDropout && this.recurrentDropout < 1 && (a = z(a, i[0])), d = X(d, or(a, this.recurrentKernel.read())), this.useBias && (d = Ka(d, this.bias.read()));
      let [c, h, m, f] = Ln(d, 4, d.rank - 1);
      o = this.recurrentActivation.apply(c), l = this.recurrentActivation.apply(h), u = X(z(l, r), z(o, this.activation.apply(m))), p = this.recurrentActivation.apply(f);
      let g = z(p, this.activation.apply(u));
      return [g, g, u];
    });
  }
  getConfig() {
    let e17 = super.getConfig(), t = { units: this.units, activation: ms(this.activation), recurrentActivation: ms(this.recurrentActivation), useBias: this.useBias, kernelInitializer: Et(this.kernelInitializer), recurrentInitializer: Et(this.recurrentInitializer), biasInitializer: Et(this.biasInitializer), unitForgetBias: this.unitForgetBias, kernelRegularizer: ft(this.kernelRegularizer), recurrentRegularizer: ft(this.recurrentRegularizer), biasRegularizer: ft(this.biasRegularizer), activityRegularizer: ft(this.activityRegularizer), kernelConstraint: Xt(this.kernelConstraint), recurrentConstraint: Xt(this.recurrentConstraint), biasConstraint: Xt(this.biasConstraint), dropout: this.dropout, recurrentDropout: this.recurrentDropout, implementation: this.implementation };
    return Object.assign(Object.assign({}, e17), t);
  }
};
Cd.className = "LSTMCell";
ne.registerClass(Cd);
var z0 = class extends Mr {
  constructor(e17) {
    e17.implementation === 0 && console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."), e17.cell = new Cd(e17), super(e17);
  }
  call(e17, t) {
    return O(() => {
      this.cell.dropoutMask != null && (Ee(this.cell.dropoutMask), this.cell.dropoutMask = null), this.cell.recurrentDropoutMask != null && (Ee(this.cell.recurrentDropoutMask), this.cell.recurrentDropoutMask = null);
      let n = t == null ? null : t.mask, a = t == null ? null : t.training, r = t == null ? null : t.initialState;
      return super.call(e17, { mask: n, training: a, initialState: r });
    });
  }
  static fromConfig(e17, t) {
    return t.implmentation === 0 && (t.implementation = 1), new e17(t);
  }
};
z0.className = "LSTM";
ne.registerClass(z0);
var Rf = class extends Td {
  constructor(e17) {
    super(e17), this.cells = e17.cells;
  }
  get stateSize() {
    let e17 = [];
    for (let t of this.cells.slice().reverse()) Array.isArray(t.stateSize) ? e17.push(...t.stateSize) : e17.push(t.stateSize);
    return e17;
  }
  call(e17, t) {
    return O(() => {
      e17 = e17;
      let n = e17.slice(1), a = [];
      for (let i of this.cells.slice().reverse()) Array.isArray(i.stateSize) ? a.push(n.splice(0, i.stateSize.length)) : a.push(n.splice(0, 1));
      a.reverse();
      let r = [], s;
      for (let i = 0; i < this.cells.length; ++i) {
        let o = this.cells[i];
        n = a[i], i === 0 ? s = [e17[0]].concat(n) : s = [s[0]].concat(n), s = o.call(s, t), r.push(s.slice(1));
      }
      n = [];
      for (let i of r.slice().reverse()) n.push(...i);
      return [s[0]].concat(n);
    });
  }
  build(e17) {
    Vx(e17) && (e17 = e17[0]), e17 = e17;
    let t;
    this.cells.forEach((n, a) => {
      ri(`RNNCell_${a}`, () => {
        n.build(e17), Array.isArray(n.stateSize) ? t = n.stateSize[0] : t = n.stateSize, e17 = [e17[0], t];
      });
    }), this.built = true;
  }
  getConfig() {
    let e17 = super.getConfig(), t = (a) => ({ className: a.getClassName(), config: a.getConfig() }), n = { cells: this.cells.map(t) };
    return Object.assign(Object.assign({}, e17), n);
  }
  static fromConfig(e17, t, n = {}) {
    let a = [];
    for (let r of t.cells) a.push(Ba(r, n));
    return new e17({ cells: a });
  }
  get trainableWeights() {
    if (!this.trainable) return [];
    let e17 = [];
    for (let t of this.cells) e17.push(...t.trainableWeights);
    return e17;
  }
  get nonTrainableWeights() {
    let e17 = [];
    for (let t of this.cells) e17.push(...t.nonTrainableWeights);
    if (!this.trainable) {
      let t = [];
      for (let n of this.cells) t.push(...n.trainableWeights);
      return t.concat(e17);
    }
    return e17;
  }
  getWeights() {
    let e17 = [];
    for (let t of this.cells) e17.push(...t.weights);
    return Ux(e17);
  }
  setWeights(e17) {
    let t = [];
    for (let n of this.cells) {
      let a = n.weights.length, r = e17.splice(a);
      for (let s = 0; s < n.weights.length; ++s) t.push([n.weights[s], r[s]]);
    }
    u0(t);
  }
};
Rf.className = "StackedRNNCells";
ne.registerClass(Rf);
function gs(e17) {
  let { ones: t, rate: n, training: a = false, count: r = 1, dropoutFunc: s } = e17, i = () => s != null ? s(t(), n) : w2(t(), n), o = () => Id(i, t, a);
  return !r || r <= 1 ? Ht(o().clone()) : Array(r).fill(void 0).map(o).map((l) => Ht(l.clone()));
}
var yj = function(e17, t) {
  var n = {};
  for (var a in e17) Object.prototype.hasOwnProperty.call(e17, a) && t.indexOf(a) < 0 && (n[a] = e17[a]);
  if (e17 != null && typeof Object.getOwnPropertySymbols == "function") for (var r = 0, a = Object.getOwnPropertySymbols(e17); r < a.length; r++) t.indexOf(a[r]) < 0 && Object.prototype.propertyIsEnumerable.call(e17, a[r]) && (n[a[r]] = e17[a[r]]);
  return n;
};
var vC = class extends Mr {
  constructor(e17) {
    if (e17.unroll) throw new ze("Unrolling is not possible with convolutional RNNs.");
    if (Array.isArray(e17.cell)) throw new ze("It is not possible at the moment to stack convolutional cells.");
    super(e17), this.inputSpec = [new zt({ ndim: 5 })];
  }
  call(e17, t) {
    return O(() => {
      if (this.cell.dropoutMask != null && (Ee(this.cell.dropoutMask), this.cell.dropoutMask = null), this.cell.recurrentDropoutMask != null && (Ee(this.cell.recurrentDropoutMask), this.cell.recurrentDropoutMask = null), t && t.constants) throw new V("ConvRNN2D cell does not support constants");
      let n = t == null ? null : t.mask, a = t == null ? null : t.training, r = t == null ? null : t.initialState;
      return super.call(e17, { mask: n, training: a, initialState: r });
    });
  }
  computeOutputShape(e17) {
    let t = this.computeSingleOutputShape(e17);
    return this.returnSequences || (t = [t[0], ...t.slice(2)]), this.returnState && (t = [t, ...Array(2).fill([e17[0], ...t.slice(-3)])]), t;
  }
  getInitialState(e17) {
    return O(() => {
      let { stateSize: t } = this.cell, n = e17.shape, a = this.computeSingleOutputShape(n), r = [a[0], ...a.slice(2)], s = It(r);
      return Array.isArray(t) ? Array(t.length).fill(s) : [s];
    });
  }
  resetStates(e17, t = false) {
    O(() => {
      if (!this.stateful) throw new Xr("Cannot call resetStates() on an RNN Layer that is not stateful.");
      let n = this.inputSpec[0].shape, a = this.computeSingleOutputShape(n), r = [a[0], ...a.slice(2)];
      if (n[0] == null) throw new V("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");
      if (this.getStates() == null) Array.isArray(this.cell.stateSize) ? this.states_ = this.cell.stateSize.map(() => It(r)) : this.states_ = [It(r)];
      else if (e17 == null) Ee(this.states_), this.keptStates != null && (Ee(this.keptStates), this.keptStates = []), Array.isArray(this.cell.stateSize) ? this.states_ = this.cell.stateSize.map(() => It(r)) : this.states_[0] = It(r);
      else {
        if (Array.isArray(e17) || (e17 = [e17]), e17.length !== this.states_.length) throw new V(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e17.length} state value(s). Input received: ${e17}`);
        t ? this.keptStates.push(this.states_.slice()) : Ee(this.states_);
        for (let s = 0; s < this.states_.length; ++s) {
          let i = e17[s], o = r;
          if (!w.arraysEqual(i.shape, o)) throw new V(`State ${s} is incompatible with layer ${this.name}: expected shape=${o}, received shape=${i.shape}`);
          this.states_[s] = i;
        }
      }
      this.states_ = this.states_.map((s) => Ht(s.clone()));
    });
  }
  computeSingleOutputShape(e17) {
    let { dataFormat: t, filters: n, kernelSize: a, padding: r, strides: s, dilationRate: i } = this.cell, o = t === "channelsFirst", l = e17[o ? 3 : 2], u = e17[o ? 4 : 3], p = Va(l, a[0], r, s[0], i[0]), d = Va(u, a[1], r, s[1], i[1]);
    return [...e17.slice(0, 2), ...o ? [n, p, d] : [p, d, n]];
  }
};
vC.className = "ConvRNN2D";
var Mf = class extends Cd {
  constructor(e17) {
    let { filters: t, kernelSize: n, strides: a, padding: r, dataFormat: s, dilationRate: i } = e17;
    super(Object.assign(Object.assign({}, e17), { units: t })), this.filters = t, tn(this.filters, "filters"), this.kernelSize = Fl(n, 2, "kernelSize"), this.kernelSize.forEach((o) => tn(o, "kernelSize")), this.strides = Fl(a || 1, 2, "strides"), this.strides.forEach((o) => tn(o, "strides")), this.padding = r || "valid", va(this.padding), this.dataFormat = s || "channelsLast", Rt(this.dataFormat), this.dilationRate = Fl(i || 1, 2, "dilationRate"), this.dilationRate.forEach((o) => tn(o, "dilationRate"));
  }
  build(e17) {
    var t;
    e17 = Je(e17);
    let n = this.dataFormat === "channelsFirst" ? 1 : e17.length - 1;
    if (e17[n] == null) throw new V(`The channel dimension of the input should be defined. Found ${e17[n]}`);
    let a = e17[n], r = 4, s = this.kernelSize.concat([a, this.filters * r]);
    this.kernel = this.addWeight("kernel", s, null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);
    let i = this.kernelSize.concat([this.filters, this.filters * r]);
    if (this.recurrentKernel = this.addWeight("recurrent_kernel", i, null, this.recurrentInitializer, this.recurrentRegularizer, true, this.recurrentConstraint), this.useBias) {
      let o;
      if (this.unitForgetBias) {
        let l = this.biasInitializer, u = this.filters;
        o = new (t = class extends $a {
          apply(p, d) {
            let c = l.apply([u]), h = Pn([u]), m = l.apply([u * 2]);
            return t0([c, h, m]);
          }
        }, t.className = "CustomInit", t)();
      } else o = this.biasInitializer;
      this.bias = this.addWeight("bias", [this.filters * r], null, o, this.biasRegularizer, true, this.biasConstraint);
    }
    this.built = true;
  }
  call(e17, t) {
    return O(() => {
      if (e17.length !== 3) throw new V(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${e17.length}.`);
      let n = t.training || false, a = e17[0], r = e17[1], s = e17[2], i = 4;
      0 < this.dropout && this.dropout < 1 && this.dropoutMask == null && (this.dropoutMask = gs({ ones: () => ea(a), rate: this.dropout, training: n, count: i, dropoutFunc: this.dropoutFunc }));
      let o = this.dropoutMask, l = (Z, J, ee) => !J || !J[ee] ? Z : z(J[ee], Z), u = l(a, o, 0), p = l(a, o, 1), d = l(a, o, 2), c = l(a, o, 3);
      0 < this.recurrentDropout && this.recurrentDropout < 1 && this.recurrentDropoutMask == null && (this.recurrentDropoutMask = gs({ ones: () => ea(r), rate: this.recurrentDropout, training: n, count: i, dropoutFunc: this.dropoutFunc }));
      let h = this.recurrentDropoutMask, m = l(r, h, 0), f = l(r, h, 1), g = l(r, h, 2), b = l(r, h, 3), y = 3, [x, v, I, N] = Ln(this.kernel.read(), i, y), [C, _, F, D] = this.useBias ? Ln(this.bias.read(), i) : [null, null, null, null];
      u = this.inputConv(u, x, C, this.padding), p = this.inputConv(p, v, _, this.padding), d = this.inputConv(d, I, F, this.padding), c = this.inputConv(c, N, D, this.padding);
      let [$, S, M, B] = Ln(this.recurrentKernel.read(), i, y);
      m = this.recurrentConv(m, $), f = this.recurrentConv(f, S), g = this.recurrentConv(g, M), b = this.recurrentConv(b, B);
      let U = this.recurrentActivation.apply(X(u, m)), H = this.recurrentActivation.apply(X(p, f)), q = X(z(H, s), z(U, this.activation.apply(X(d, g)))), K = z(this.recurrentActivation.apply(X(c, b)), this.activation.apply(q));
      return [K, K, q];
    });
  }
  getConfig() {
    let e17 = super.getConfig(), { units: t } = e17, n = yj(e17, ["units"]), a = { filters: this.filters, kernelSize: this.kernelSize, padding: this.padding, dataFormat: this.dataFormat, dilationRate: this.dilationRate, strides: this.strides };
    return Object.assign(Object.assign({}, n), a);
  }
  inputConv(e17, t, n, a) {
    let r = $t(e17, t, this.strides, a || "valid", this.dataFormat === "channelsFirst" ? "NCHW" : "NHWC", this.dilationRate);
    return n ? Ka(r, n, this.dataFormat) : r;
  }
  recurrentConv(e17, t) {
    return $t(e17, t, 1, "same", this.dataFormat === "channelsFirst" ? "NCHW" : "NHWC");
  }
};
Mf.className = "ConvLSTM2DCell";
ne.registerClass(Mf);
var W0 = class extends vC {
  constructor(e17) {
    let t = new Mf(e17);
    super(Object.assign(Object.assign({}, e17), { cell: t }));
  }
  static fromConfig(e17, t) {
    return new e17(t);
  }
};
W0.className = "ConvLSTM2D";
ne.registerClass(W0);
var Of = class extends We {
  constructor(e17) {
    super(e17), this.rate = Math.max(Math.min(e17.rate, 1), 0), this.noiseShape = e17.noiseShape, this.seed = e17.seed, this.supportsMasking = true;
  }
  getNoiseShape(e17) {
    if (this.noiseShape == null) return this.noiseShape;
    let t = e17.shape, n = [];
    for (let a = 0; a < this.noiseShape.length; ++a) n.push(this.noiseShape[a] == null ? t[a] : this.noiseShape[a]);
    return n;
  }
  call(e17, t) {
    return O(() => {
      this.invokeCallHook(e17, t);
      let n = Te(e17);
      if (0 < this.rate && this.rate < 1) {
        let a = t.training == null ? false : t.training, r = this.getNoiseShape(n);
        return Id(() => w2(n, this.rate, r, this.seed), () => n, a);
      }
      return e17;
    });
  }
  getConfig() {
    let e17 = { rate: this.rate, noiseShape: this.noiseShape, seed: this.seed }, t = super.getConfig();
    return Object.assign(e17, t), e17;
  }
  dispose() {
    return super.dispose();
  }
};
Of.className = "Dropout";
ne.registerClass(Of);
var B0 = class extends Of {
  constructor(e17) {
    super(e17), this.inputSpec = [{ ndim: 3 }];
  }
  getNoiseShape(e17) {
    let t = e17.shape;
    return [t[0], 1, t[2]];
  }
};
B0.className = "SpatialDropout1D";
ne.registerClass(B0);
var V0 = class extends We {
  constructor(e17) {
    if (super(e17), this.activation = null, this.useBias = true, this.kernel = null, this.bias = null, this.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", this.DEFAULT_BIAS_INITIALIZER = "zeros", e17.batchInputShape == null && e17.inputShape == null && e17.inputDim != null) {
      let t = null;
      e17.batchSize != null && (t = e17.batchSize), this.batchInputShape = [t, e17.inputDim];
    }
    this.units = e17.units, tn(this.units, "units"), this.activation = fs(e17.activation), e17.useBias != null && (this.useBias = e17.useBias), this.kernelInitializer = St(e17.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER), this.biasInitializer = St(e17.biasInitializer || this.DEFAULT_BIAS_INITIALIZER), this.kernelConstraint = Yt(e17.kernelConstraint), this.biasConstraint = Yt(e17.biasConstraint), this.kernelRegularizer = Nt(e17.kernelRegularizer), this.biasRegularizer = Nt(e17.biasRegularizer), this.activityRegularizer = Nt(e17.activityRegularizer), this.supportsMasking = true, this.inputSpec = [{ minNDim: 2 }];
  }
  build(e17) {
    e17 = Je(e17);
    let t = e17[e17.length - 1];
    this.kernel == null && (this.kernel = this.addWeight("kernel", [t, this.units], null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint), this.useBias && (this.bias = this.addWeight("bias", [this.units], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint))), this.inputSpec = [{ minNDim: 2, axes: { [-1]: t } }], this.built = true;
  }
  computeOutputShape(e17) {
    e17 = Je(e17);
    let t = e17.slice();
    return t[t.length - 1] = this.units, t;
  }
  call(e17, t) {
    return O(() => {
      this.invokeCallHook(e17, t);
      let n = Te(e17), a = m2(this.activation.getClassName()), r;
      return a != null ? r = or(n, this.kernel.read(), a, this.bias ? this.bias.read() : null) : (r = or(n, this.kernel.read()), this.bias != null && (r = Ka(r, this.bias.read())), this.activation != null && (r = this.activation.apply(r))), r;
    });
  }
  getConfig() {
    let e17 = { units: this.units, activation: ms(this.activation), useBias: this.useBias, kernelInitializer: Et(this.kernelInitializer), biasInitializer: Et(this.biasInitializer), kernelRegularizer: ft(this.kernelRegularizer), biasRegularizer: ft(this.biasRegularizer), activityRegularizer: ft(this.activityRegularizer), kernelConstraint: Xt(this.kernelConstraint), biasConstraint: Xt(this.biasConstraint) }, t = super.getConfig();
    return Object.assign(e17, t), e17;
  }
};
V0.className = "Dense";
ne.registerClass(V0);
var U0 = class extends We {
  constructor(e17) {
    e17 = e17 || {}, super(e17), this.inputSpec = [{ minNDim: 3 }], this.dataFormat = e17.dataFormat;
  }
  computeOutputShape(e17) {
    e17 = Je(e17);
    for (let t of e17.slice(1)) if (t == null) throw new V(`The shape of the input to "Flatten" is not fully defined (got ${e17.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);
    return [e17[0], rs(e17, 1)];
  }
  call(e17, t) {
    return O(() => {
      this.invokeCallHook(e17, t);
      let n = Te(e17);
      if (this.dataFormat === "channelsFirst" && n.rank > 1) {
        let a = [0];
        for (let r = 2; r < n.rank; ++r) a.push(r);
        a.push(1), n = De(n, a);
      }
      return AG(n);
    });
  }
  getConfig() {
    let e17 = {};
    this.dataFormat != null && (e17.dataFormat = this.dataFormat);
    let t = super.getConfig();
    return Object.assign(e17, t), e17;
  }
};
U0.className = "Flatten";
ne.registerClass(U0);
var G0 = class extends We {
  constructor(e17) {
    super(e17), this.supportsMasking = true, this.activation = fs(e17.activation);
  }
  call(e17, t) {
    return O(() => {
      this.invokeCallHook(e17, t);
      let n = Te(e17);
      return this.activation.apply(n);
    });
  }
  getConfig() {
    let e17 = { activation: ms(this.activation) }, t = super.getConfig();
    return Object.assign(e17, t), e17;
  }
};
G0.className = "Activation";
ne.registerClass(G0);
var H0 = class extends We {
  constructor(e17) {
    super(e17), this.n = e17.n, this.inputSpec = [{ ndim: 2 }];
  }
  computeOutputShape(e17) {
    return [e17[0], this.n, e17[1]];
  }
  call(e17, t) {
    return O(() => (e17 = Te(e17), EG(e17, this.n)));
  }
  getConfig() {
    let e17 = { n: this.n }, t = super.getConfig();
    return Object.assign(e17, t), e17;
  }
};
H0.className = "RepeatVector";
ne.registerClass(H0);
var j0 = class extends We {
  constructor(e17) {
    super(e17), this.targetShape = e17.targetShape;
    for (let t = 0; t < this.targetShape.length; ++t) this.isUnknown(this.targetShape[t]) && (this.targetShape[t] = null);
  }
  isUnknown(e17) {
    return e17 < 0 || e17 == null;
  }
  fixUnknownDimension(e17, t) {
    let n = "Total size of new array must be unchanged.", a = t.slice(), r = 1, s = null;
    for (let o = 0; o < a.length; ++o) {
      let l = a[o];
      if (this.isUnknown(l)) if (s === null) s = o;
      else throw new V("Can only specifiy one unknown dimension.");
      else r *= l;
    }
    let i = rs(e17);
    if (s !== null) {
      if (r === 0 || i % r !== 0) throw new V(n);
      a[s] = i / r;
    } else if (i !== r) throw new V(n);
    return a;
  }
  computeOutputShape(e17) {
    let t = false;
    for (let n = 0; n < e17.length; ++n) if (this.isUnknown(e17[n])) {
      t = true;
      break;
    }
    return t ? e17.slice(0, 1).concat(this.targetShape) : e17.slice(0, 1).concat(this.fixUnknownDimension(e17.slice(1), this.targetShape));
  }
  call(e17, t) {
    return O(() => {
      this.invokeCallHook(e17, t);
      let n = Te(e17), a = n.shape, r = a.slice(0, 1).concat(this.fixUnknownDimension(a.slice(1), this.targetShape));
      return W(n, r);
    });
  }
  getConfig() {
    let e17 = { targetShape: this.targetShape }, t = super.getConfig();
    return Object.assign(e17, t), e17;
  }
};
j0.className = "Reshape";
ne.registerClass(j0);
var q0 = class extends We {
  constructor(e17) {
    if (super(e17), e17.dims == null) throw new Error("Required configuration field `dims` is missing during Permute constructor call.");
    if (!Array.isArray(e17.dims)) throw new Error(`Permute constructor requires \`dims\` to be an Array, but received ${e17.dims} instead.`);
    let t = Ua(1, e17.dims.length + 1);
    if (!w.arraysEqual(e17.dims.slice().sort(), t)) throw new Error("Invalid permutation `dims`: " + JSON.stringify(e17.dims) + " `dims` must contain consecutive integers starting from 1.");
    this.dims = e17.dims, this.dimsIncludingBatch = [0].concat(this.dims), this.inputSpec = [new zt({ ndim: this.dims.length + 1 })];
  }
  computeOutputShape(e17) {
    e17 = Je(e17);
    let t = e17.slice();
    return this.dims.forEach((n, a) => {
      t[a + 1] = e17[n];
    }), t;
  }
  call(e17, t) {
    return De(Te(e17), this.dimsIncludingBatch);
  }
  getConfig() {
    let e17 = { dims: this.dims }, t = super.getConfig();
    return Object.assign(e17, t), e17;
  }
};
q0.className = "Permute";
ne.registerClass(q0);
var K0 = class extends We {
  constructor(e17) {
    super(e17 == null ? {} : e17), this.supportsMasking = true, e17 != null ? this.maskValue = e17.maskValue == null ? 0 : e17.maskValue : this.maskValue = 0;
  }
  computeOutputShape(e17) {
    return e17;
  }
  getConfig() {
    let e17 = super.getConfig(), t = { maskValue: this.maskValue };
    return Object.assign(t, e17), t;
  }
  computeMask(e17, t) {
    let n = Te(e17);
    return yc(fi(n, this.maskValue), -1);
  }
  call(e17, t) {
    return O(() => {
      this.invokeCallHook(e17, t);
      let n = Te(e17), a = yc(fi(n, this.maskValue), -1, true);
      return z(n, re(a, n.dtype));
    });
  }
};
K0.className = "Masking";
ne.registerClass(K0);
var X0 = class extends We {
  constructor(e17) {
    if (super(e17), this.embeddings = null, this.DEFAULT_EMBEDDINGS_INITIALIZER = "randomUniform", e17.batchInputShape == null && e17.inputShape == null) {
      let t = null;
      e17.batchSize != null && (t = e17.batchSize), e17.inputLength == null ? this.batchInputShape = [t, null] : this.batchInputShape = [t].concat(it(e17.inputLength));
    }
    this.inputDim = e17.inputDim, tn(this.inputDim, "inputDim"), this.outputDim = e17.outputDim, tn(this.outputDim, "outputDim"), this.embeddingsInitializer = St(e17.embeddingsInitializer || this.DEFAULT_EMBEDDINGS_INITIALIZER), this.embeddingsRegularizer = Nt(e17.embeddingsRegularizer), this.activityRegularizer = Nt(e17.activityRegularizer), this.embeddingsConstraint = Yt(e17.embeddingsConstraint), this.maskZero = e17.maskZero, this.supportsMasking = e17.maskZero, this.inputLength = e17.inputLength;
  }
  build(e17) {
    this.embeddings = this.addWeight("embeddings", [this.inputDim, this.outputDim], this.dtype, this.embeddingsInitializer, this.embeddingsRegularizer, true, this.embeddingsConstraint), this.built = true;
  }
  warnOnIncompatibleInputShape(e17) {
  }
  computeMask(e17, t) {
    return O(() => this.maskZero ? (e17 = Te(e17), fi(e17, qe(e17))) : null);
  }
  computeOutputShape(e17) {
    if (e17 = Je(e17), this.inputLength == null) return [...e17, this.outputDim];
    let t = it(this.inputLength);
    if (t.length !== e17.length - 1) throw new V(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e17}`);
    {
      let n = 0;
      for (let a = 0; a < t.length; ++a) {
        let r = t[a], s = e17[a + 1];
        if (r != null && s != null && r !== s) throw new V(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e17}`);
        r == null && (t[n] = s), n++;
      }
    }
    return [e17[0], ...t, this.outputDim];
  }
  call(e17, t) {
    return O(() => {
      this.invokeCallHook(e17, t);
      let n = Te(e17);
      n.dtype !== "int32" && (n = ir(n, "int32"));
      let a = v2(this.embeddings.read(), W(n, [n.size]));
      return W(a, Je(this.computeOutputShape(n.shape)));
    });
  }
  getConfig() {
    let e17 = { inputDim: this.inputDim, outputDim: this.outputDim, embeddingsInitializer: Et(this.embeddingsInitializer), embeddingsRegularizer: ft(this.embeddingsRegularizer), activityRegularizer: ft(this.activityRegularizer), embeddingsConstraint: Xt(this.embeddingsConstraint), maskZero: this.maskZero, inputLength: this.inputLength }, t = super.getConfig();
    return Object.assign(e17, t), e17;
  }
};
X0.className = "Embedding";
ne.registerClass(X0);
var Yo = class extends We {
  constructor(e17) {
    super(e17 || {}), this.supportsMasking = true;
  }
  mergeFunction(e17) {
    throw new ze();
  }
  computeElementwiseOpOutputShape(e17, t) {
    if (e17 == null || t == null) return null;
    if (e17.length < t.length) return this.computeElementwiseOpOutputShape(t, e17);
    if (t.length === 0) return e17;
    let n = e17.slice(0, e17.length - t.length);
    for (let a = 0; a < t.length; ++a) {
      let r = e17[e17.length - t.length + a], s = t[a];
      if (r == null || s == null || r < 0 || s < 0) n.push(null);
      else if (r === 1) n.push(s);
      else if (s === 1) n.push(r);
      else {
        if (r !== s) throw new V("Operands could not be broadcast together with shapes " + JSON.stringify(e17) + " " + JSON.stringify(t));
        n.push(r);
      }
    }
    return n;
  }
  build(e17) {
    if (Array.isArray(e17) && !Array.isArray(e17[0]) && (e17 = [Je(e17)]), e17 = e17, e17.length < 2) throw new V(`A merge layer should be called on an Array of at least 2 inputs. Got ${e17.length} input(s).`);
    let t = [];
    for (let r of e17) r != null && r[0] !== null && t.push(r[0]);
    if (t = as(t), t.length > 1) throw new V(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(e17)}.`);
    let n = e17[0] == null ? null : e17[0].slice(1);
    for (let r = 1; r < e17.length; ++r) {
      let s = e17[r] == null ? null : e17[r].slice(1);
      n = this.computeElementwiseOpOutputShape(n, s);
    }
    let a = e17.map((r) => r.length);
    e17.indexOf(null) === -1 && as(a).length === 1 ? this.reshapeRequired = false : this.reshapeRequired = true;
  }
  call(e17, t) {
    return O(() => {
      if (e17 = e17, this.reshapeRequired) {
        let n = [], a = e17.map((r) => r.rank);
        if (a.indexOf(null) === -1) {
          let r = hs(a);
          for (let s of e17) {
            let i = s.rank;
            for (let o = 0; o < r - i; ++o) s = wd(s, 1);
            n.push(s);
          }
          return this.mergeFunction(n);
        } else {
          let r = false;
          for (let o of e17) {
            let l = o.rank;
            if (l == null) {
              let u = o.shape, p = u[0], d = u.slice(1).concat([p]), c = W(o, [p].concat(rs(u.slice(1))));
              c = De(c, [1, 0]), c = W(c, d), n.push(c), r = true;
            } else if (l > 1) {
              let u = Ua(1, l).concat([0]);
              n.push(De(o, u)), r = true;
            } else n.push(o);
          }
          let s = this.mergeFunction(n), i = s.rank;
          if (r) {
            if (i == null) {
              let o = s.shape, l = o.length, u = o[l - 1], p = [u].concat(o.slice(0, o.length - 1));
              s = W(De(W(s, [-1, u]), [1, 0]), p);
            } else if (i > 1) {
              let o = [i - 1].concat(Ua(0, i - 1));
              s = De(s, o);
            }
          }
          return s;
        }
      } else return this.mergeFunction(e17);
    });
  }
  computeOutputShape(e17) {
    e17 = e17;
    let t;
    e17[0] == null ? t = null : t = e17[0].slice(1);
    for (let a = 1; a < e17.length; ++a) {
      let r = e17[a] == null ? null : e17[a].slice(1);
      t = this.computeElementwiseOpOutputShape(t, r);
    }
    let n = [];
    for (let a of e17) a != null && a[0] !== null && n.push(a[0]);
    return n = as(n), n.length === 1 ? t = n.concat(t) : t = [null].concat(t), t;
  }
  computeMask(e17, t) {
    return O(() => {
      if (t == null) return null;
      if (!Array.isArray(t)) throw new V("`mask` should be an Array");
      if (!Array.isArray(e17)) throw new V("`inputs` should be an Array");
      if (t.length !== e17.length) throw new V(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${e17.length} vs ${t.length})`);
      if (t.every((a) => a == null)) return null;
      t = t.map((a) => a == null ? a : Gt(a, 0));
      let n = t[0];
      for (let a = 1; a < t.length - 1; ++a) n = _a(n, t[a]);
      return n;
    });
  }
};
var Y0 = class extends Yo {
  constructor(e17) {
    super(e17);
  }
  mergeFunction(e17) {
    return O(() => {
      let t = e17[0].clone();
      for (let n = 1; n < e17.length; ++n) t = X(t, e17[n]);
      return t;
    });
  }
};
Y0.className = "Add";
ne.registerClass(Y0);
var Z0 = class extends Yo {
  constructor(e17) {
    super(e17);
  }
  mergeFunction(e17) {
    return O(() => {
      let t = e17[0].clone();
      for (let n = 1; n < e17.length; ++n) t = z(t, e17[n]);
      return t;
    });
  }
};
Z0.className = "Multiply";
ne.registerClass(Z0);
var J0 = class extends Yo {
  constructor(e17) {
    super(e17);
  }
  mergeFunction(e17) {
    return O(() => {
      let t = e17[0].clone();
      for (let n = 1; n < e17.length; ++n) t = X(t, e17[n]);
      return z(1 / e17.length, t);
    });
  }
};
J0.className = "Average";
ne.registerClass(J0);
var Q0 = class extends Yo {
  constructor(e17) {
    super(e17);
  }
  mergeFunction(e17) {
    return O(() => {
      let t = e17[0];
      for (let n = 1; n < e17.length; ++n) t = hr(t, e17[n]);
      return t;
    });
  }
};
Q0.className = "Maximum";
ne.registerClass(Q0);
var e1 = class extends Yo {
  constructor(e17) {
    super(e17);
  }
  mergeFunction(e17) {
    return O(() => {
      let t = e17[0];
      for (let n = 1; n < e17.length; ++n) t = ds(t, e17[n]);
      return t;
    });
  }
};
e1.className = "Minimum";
ne.registerClass(e1);
var t1 = class extends Yo {
  constructor(e17) {
    super(e17), this.DEFAULT_AXIS = -1, e17 == null && (e17 = {}), this.axis = e17.axis == null ? this.DEFAULT_AXIS : e17.axis, this.supportsMasking = true, this.reshapeRequired = false;
  }
  build(e17) {
    if (!(Array.isArray(e17) && Array.isArray(e17[0])) || e17.length === 1) throw new V("A `Concatenate` layer should be called on a list of at least 2 inputs");
    e17 = e17;
    let t = true;
    for (let a of e17) if (a != null) {
      t = false;
      break;
    }
    if (t) return;
    let n = [];
    for (let a = 0; a < e17.length; ++a) {
      let r = e17[a].slice();
      r.splice(this.axis, 1);
      let s = false;
      for (let i of n) if (w.arraysEqual(i, r)) {
        s = true;
        break;
      }
      s || n.push(r);
    }
    if (n.length > 1) throw new V("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: " + JSON.stringify(e17));
  }
  mergeFunction(e17) {
    return O(() => t0(e17, this.axis));
  }
  computeOutputShape(e17) {
    if (!(Array.isArray(e17) && Array.isArray(e17[0]))) throw new V("A `Concatenate` layer should be called on a list of inputs.");
    let t = e17, n = t[0].slice(), a = this.axis < 0 ? n.length + this.axis : this.axis;
    for (let r of t.slice(1)) {
      if (n[a] == null || r[a] == null) {
        n[a] = null;
        break;
      }
      n[a] += r[a];
    }
    return n;
  }
  computeMask(e17, t) {
    if (t == null) return null;
    if (!Array.isArray(t)) throw new V("`mask` should be an array for Concatenate");
    if (!Array.isArray(e17)) throw new V("`inputs` should be an array for Concatenate");
    if (t.length !== e17.length) throw new V(`Mismatch in the length of mask (${t.length}) and the legnth of inputs (${e17.length})`);
    return O(() => {
      let n = true;
      if (t.forEach((s) => {
        if (s != null) {
          n = false;
          return;
        }
      }), n) return null;
      let a = [];
      for (let s = 0; s < e17.length; ++s) t[s] == null ? a.push(re(ea(e17[s]), "bool")) : t[s].rank < e17[s].rank ? a.push(Gt(t[s], -1)) : a.push(t[s]);
      let r = et(a, this.axis);
      return Lm(r, -1, false);
    });
  }
  getConfig() {
    let e17 = { axis: this.axis }, t = super.getConfig();
    return Object.assign(e17, t), e17;
  }
};
t1.className = "Concatenate";
ne.registerClass(t1);
function Yp(e17, t) {
  for (; e17 < 0; ) e17 += t;
  return e17;
}
function xj(e17, t, n) {
  if (e17.shape.length > 3 || t.shape.length > 3) throw new ze("batchDot is not implemented for tensors of 4D or higher rank yet");
  if (w.assert(e17.shape.length >= 2, () => `batchDot requires the rank of x to be >= 2, but got ${e17.shape.length}`), w.assert(e17.shape.length >= 2, () => `batchDot requires the rank of y to be >= 2, but got ${t.shape.length}`), typeof n == "number" && (n = [n, n]), e17.dtype === "complex64" || t.dtype === "complex64") throw new ze("batchDot is not implemented for complex64-type Tensors yet.");
  let a = e17.shape.length, r = t.shape.length;
  n == null && (n = [a - 1, r - 2]);
  let s = n;
  return O(() => {
    let i;
    if (a > r) {
      i = a - r;
      let l = [];
      for (let u = 0; u < i; ++u) l.push(1);
      t = W(t, t.shape.concat(l));
    } else if (r > a) {
      i = r - a;
      let l = [];
      for (let u = 0; u < i; ++u) l.push(1);
      e17 = W(e17, e17.shape.concat(l));
    } else i = 0;
    let o;
    if (e17.shape.length === 2 && t.shape.length === 2) s[0] === s[1] ? o = fe(z(e17, t), s[0]) : o = fe(z(De(e17, [1, 0]), t), s[1]);
    else {
      let l = s[0] !== e17.shape.length - 1, u = s[1] === t.shape.length - 1;
      o = $e(e17, t, l, u);
    }
    if (i > 0) {
      let l;
      a > r ? l = a + r - 3 : l = a - 1;
      let u = [];
      for (let p = l; p < l + i; ++p) u.push(p);
      o = As(o, u);
    }
    return o.shape.length === 1 && (o = Gt(o, 1)), o;
  });
}
var n1 = class extends Yo {
  constructor(e17) {
    super(e17), this.axes = e17.axes, this.normalize = e17.normalize == null ? false : e17.normalize, this.supportsMasking = true, this.reshapeRequired = false;
  }
  build(e17) {
    w.assert(Array.isArray(e17) && e17.length === 2 && Array.isArray(e17[0]) && Array.isArray(e17[1]), () => "A `Dot` layer should be called on a list of exactly 2 inputs.");
    let t = e17[0], n = e17[1];
    if (t.length > 3 || n.length > 3) throw new ze("Dot layer does not support tensors of 4D or higher rank yet.");
    let a = this.interpretAxes(t, n);
    if (t[a[0]] !== n[a[1]]) throw new V(`Dimension incompatibility: ${t[a[0]]} !== ${n[a[1]]}`);
  }
  mergeFunction(e17) {
    if (e17.length !== 2) throw new V(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${e17.length} input(s).`);
    let t = e17[0], n = e17[1], a;
    return Array.isArray(this.axes) ? a = this.axes.map((r, s) => Yp(r, e17[s].shape.length)) : a = [Yp(this.axes, t.shape.length), Yp(this.axes, n.shape.length)], this.normalize && (t = tm(t, a[0]), n = tm(n, a[1])), xj(t, n, a);
  }
  interpretAxes(e17, t) {
    let n;
    return Array.isArray(this.axes) ? n = this.axes : n = [Yp(this.axes, e17.length), Yp(this.axes, t.length)], n;
  }
  computeOutputShape(e17) {
    w.assert(Array.isArray(e17) && e17.length === 2 && Array.isArray(e17[0]) && Array.isArray(e17[1]), () => "A `Dot` layer should be called on a list of exactly 2 inputs.");
    let t = e17[0].slice(), n = e17[1].slice();
    if (t.length > 3 || n.length > 3) throw new ze("Dot layer does not support tensors of 4D or higher rank yet.");
    let a = this.interpretAxes(t, n);
    t.splice(a[0], 1), n.splice(a[1], 1), n.splice(0, 1);
    let r = t.concat(n);
    return r.length === 1 && r.push(1), r;
  }
  computeMask(e17, t) {
    return null;
  }
  getConfig() {
    let e17 = { axes: this.axes, normalize: this.normalize }, t = super.getConfig();
    return Object.assign(e17, t), e17;
  }
};
n1.className = "Dot";
ne.registerClass(n1);
var a1 = class extends We {
  constructor(e17) {
    super(e17), this.supportsMasking = true, this.stddev = e17.stddev;
  }
  computeOutputShape(e17) {
    return e17;
  }
  getConfig() {
    let e17 = super.getConfig(), t = { stddev: this.stddev };
    return Object.assign(t, e17), t;
  }
  call(e17, t) {
    return O(() => {
      this.invokeCallHook(e17, t);
      let n = Te(e17);
      return Id(() => X(bf(n.shape, 0, this.stddev), n), () => n, t.training || false);
    });
  }
};
a1.className = "GaussianNoise";
ne.registerClass(a1);
var r1 = class extends We {
  constructor(e17) {
    super(e17), this.supportsMasking = true, this.rate = e17.rate;
  }
  computeOutputShape(e17) {
    return e17;
  }
  getConfig() {
    let e17 = super.getConfig(), t = { rate: this.rate };
    return Object.assign(t, e17), t;
  }
  call(e17, t) {
    return O(() => {
      this.invokeCallHook(e17, t);
      let n = Te(e17);
      return this.rate > 0 && this.rate < 1 ? Id(() => {
        let a = Math.sqrt(this.rate / (1 - this.rate));
        return z(n, bf(n.shape, 1, a));
      }, () => n, t.training || false) : n;
    });
  }
};
r1.className = "GaussianDropout";
ne.registerClass(r1);
var s1 = class extends We {
  constructor(e17) {
    super(e17), this.supportsMasking = true, this.rate = e17.rate, this.noiseShape = e17.noiseShape;
  }
  _getNoiseShape(e17) {
    return this.noiseShape || Te(e17).shape;
  }
  computeOutputShape(e17) {
    return e17;
  }
  getConfig() {
    let e17 = super.getConfig(), t = { rate: this.rate };
    return Object.assign(t, e17), t;
  }
  call(e17, t) {
    return O(() => {
      if (this.rate < 1 && this.rate > 0) {
        let n = this._getNoiseShape(e17);
        return Id(() => {
          let a = Te(e17), r = -1.6732632423543772 * 1.0507009873554805, s = $r(Es(n), this.rate);
          s = ir(s, "float32");
          let i = ((1 - this.rate) * (1 + this.rate * r ** 2)) ** -0.5, o = -i * r * this.rate, l = X(z(a, s), z(X(s, -1), r));
          return X(z(l, i), o);
        }, () => Te(e17), t.training || false);
      }
      return e17;
    });
  }
};
s1.className = "AlphaDropout";
ne.registerClass(s1);
function Sc(e17, t, n, a, r, s = 1e-3) {
  let i;
  if (e17.rank === 2) i = qv(e17, t, n, a, r, s);
  else if (e17.rank === 3) i = Kv(e17, t, n, a, r, s);
  else if (e17.rank === 4) i = Xv(e17, t, n, a, r, s);
  else throw new ze(`batchNormalization is not implemented for array of rank ${e17.rank} yet`);
  return i;
}
function vj(e17, t, n, a, r = 1e-3) {
  return O(() => {
    let s = hd(e17, a), i = s.mean, o = s.variance;
    return [Sc(e17, i, o, n, t, r), i, o];
  });
}
function wj(e17, t, n, a, r = 1e-3) {
  return O(() => {
    let s = hd(e17, a), i = s.mean, o = s.variance, l = [];
    for (let h of Ua(0, e17.rank)) a.indexOf(h) !== -1 ? l.push(1) : l.push(e17.shape[h]);
    let u = W(i, l), p = W(o, l), d = t == null ? null : W(t, l), c = n == null ? null : W(n, l);
    return [Sc(e17, u, p, c, d, r), i, o];
  });
}
function kj(e17, t, n, a, r = 1e-3) {
  return w.arraysEqual(a.slice().sort(), Ua(0, e17.rank - 1)) ? vj(e17, t, n, a, r) : wj(e17, t, n, a, r);
}
var i1 = class extends We {
  constructor(e17) {
    e17 == null && (e17 = {}), super(e17), this.supportsMasking = true, this.axis = e17.axis == null ? -1 : e17.axis, this.momentum = e17.momentum == null ? 0.99 : e17.momentum, this.epsilon = e17.epsilon == null ? 1e-3 : e17.epsilon, this.center = e17.center == null ? true : e17.center, this.scale = e17.scale == null ? true : e17.scale, this.betaInitializer = St(e17.betaInitializer || "zeros"), this.gammaInitializer = St(e17.gammaInitializer || "ones"), this.movingMeanInitializer = St(e17.movingMeanInitializer || "zeros"), this.movingVarianceInitializer = St(e17.movingVarianceInitializer || "ones"), this.betaConstraint = Yt(e17.betaConstraint), this.gammaConstraint = Yt(e17.gammaConstraint), this.betaRegularizer = Nt(e17.betaRegularizer), this.gammaRegularizer = Nt(e17.gammaRegularizer);
  }
  build(e17) {
    e17 = Je(e17);
    let t = this.axis >= 0 ? this.axis : this.axis + e17.length, n = e17[t];
    if (n == null) throw new V(`Axis ${t} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(e17)}.`);
    this.inputSpec = [new zt({ ndim: e17.length, axes: { [t]: n } })];
    let a = [n];
    this.scale && (this.gamma = this.addWeight("gamma", a, null, this.gammaInitializer, this.gammaRegularizer, true, this.gammaConstraint)), this.center && (this.beta = this.addWeight("beta", a, null, this.betaInitializer, this.betaRegularizer, true, this.betaConstraint)), this.movingMean = this.addWeight("moving_mean", a, null, this.movingMeanInitializer, null, false), this.movingVariance = this.addWeight("moving_variance", a, null, this.movingVarianceInitializer, null, false), this.built = true;
  }
  call(e17, t) {
    return O(() => {
      let n = t.training == null ? false : t.training, a = Te(e17), r = a.shape, s = r.length, i = Ua(0, s), o = this.axis >= 0 ? this.axis : this.axis + s;
      i.splice(o, 1);
      let l = bi(1, s);
      l[o] = r[o];
      let u = i.slice();
      u.sort();
      let p = !w.arraysEqual(u, Ua(0, s).slice(0, s - 1)), d = () => {
        if (p) {
          let g = W(this.movingMean.read(), l), b = W(this.movingVariance.read(), l), y = this.center ? W(this.beta.read(), l) : null, x = this.scale ? W(this.gamma.read(), l) : null;
          return Sc(a, g, b, y, x, this.epsilon);
        } else return Sc(a, this.movingMean.read(), this.movingVariance.read(), this.beta == null ? null : this.beta.read(), this.gamma == null ? null : this.gamma.read(), this.epsilon);
      };
      if (!n) return d();
      let [c, h, m] = kj(a, this.gamma.read(), this.beta.read(), i, this.epsilon), f = (g, b, y) => {
        O(() => {
          let x = 1 - y, v = g.read(), I = z(pe(v, b), x);
          g.write(pe(v, I));
        });
      };
      return f(this.movingMean, h, this.momentum), f(this.movingVariance, m, this.momentum), c;
    });
  }
  getConfig() {
    let e17 = { axis: this.axis, momentum: this.momentum, epsilon: this.epsilon, center: this.center, scale: this.scale, betaInitializer: Et(this.betaInitializer), gammaInitializer: Et(this.gammaInitializer), movingMeanInitializer: Et(this.movingMeanInitializer), movingVarianceInitializer: Et(this.movingVarianceInitializer), betaRegularizer: ft(this.betaRegularizer), gammaRegularizer: ft(this.gammaRegularizer), betaConstraint: Xt(this.betaConstraint), gammaConstraint: Xt(this.gammaConstraint) }, t = super.getConfig();
    return Object.assign(e17, t), e17;
  }
};
i1.className = "BatchNormalization";
ne.registerClass(i1);
var o1 = class extends We {
  constructor(e17) {
    if (e17 == null && (e17 = {}), super(e17), this.axis = e17.axis == null ? -1 : e17.axis, typeof this.axis == "number") {
      if (!Number.isInteger(this.axis)) throw new Error(`Expected axis to be an integer, but received ${this.axis}`);
    } else if (Array.isArray(this.axis)) {
      for (let t of this.axis) if (!Number.isInteger(t)) throw new Error(`Expected axis to be an array of integers, but received ${JSON.stringify(this.axis)}`);
    } else throw new Error(`Expected axis to be an integer or an array of integers, but received ${JSON.stringify(this.axis)}`);
    this.epsilon = e17.epsilon == null ? 1e-3 : e17.epsilon, this.center = e17.center == null ? true : e17.center, this.scale = e17.scale == null ? true : e17.scale, this.betaInitializer = St(e17.betaInitializer || "zeros"), this.gammaInitializer = St(e17.gammaInitializer || "ones"), this.betaRegularizer = Nt(e17.betaRegularizer), this.gammaRegularizer = Nt(e17.gammaRegularizer), this.supportsMasking = true;
  }
  build(e17) {
    e17 = Je(e17);
    let t = e17.length;
    typeof this.axis == "number" && (this.axis = [this.axis]);
    for (let r = 0; r < this.axis.length; ++r) this.axis[r] < 0 && (this.axis[r] += t);
    for (let r of this.axis) if (r < 0 || r >= t) throw new Error(`Invalid axis: ${r}`);
    if (this.axis.length !== as(this.axis).length) throw new Error(`Found duplicate axes in: ${this.axis}`);
    let n = this.axis.map((r) => e17[r]), a = true;
    this.scale ? this.gamma = this.addWeight("gamma", n, "float32", this.gammaInitializer, this.gammaRegularizer, a) : this.gamma = null, this.center ? this.beta = this.addWeight("beta", n, "float32", this.betaInitializer, this.betaRegularizer, a) : this.beta = null, this.built = true;
  }
  call(e17, t) {
    let n = Te(e17), a = n.shape, r = a.length;
    return O(() => {
      let { mean: s, variance: i } = hd(n, this.axis, true), o = bi(1, r);
      for (let h of this.axis) o[h] = a[h];
      let l = (h) => h != null && h.shape.length !== r ? W(h, o) : h, u = this.scale ? l(this.gamma.read()) : null, p = this.center ? l(this.beta.read()) : null, d = [], c = [];
      for (let h = 0; h < r; ++h) this.axis.indexOf(h) !== -1 ? (d.push(a[h]), c.push(1)) : (d.push(1), c.push(a[h]));
      return s = On(s, d), i = On(i, d), u != null && (u = On(u, c)), p != null && (p = On(p, c)), Sc(n, s, i, p, u, this.epsilon);
    });
  }
  getConfig() {
    let e17 = { axis: this.axis, epsilon: this.epsilon, center: this.center, scale: this.scale, betaInitializer: Et(this.betaInitializer), gammaInitializer: Et(this.gammaInitializer), betaRegularizer: ft(this.betaRegularizer), gammaRegularizer: ft(this.gammaRegularizer) }, t = super.getConfig();
    return Object.assign(e17, t), e17;
  }
};
o1.className = "LayerNormalization";
ne.registerClass(o1);
function Ij(e17, t, n) {
  return O(() => {
    if (e17.rank !== 4) throw new V(`temporalPadding expects input tensor to be 4-D, but received a ${e17.rank}-D tensor.`);
    if (t == null && (t = [[1, 1], [1, 1]]), t.length !== 2 || t[0].length !== 2 || t[1].length !== 2) throw new V("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");
    if (n == null && (n = Ga()), n !== "channelsLast" && n !== "channelsFirst") throw new V(`Unknown data format: ${n}. Supported data formats are 'channelsLast' and 'channelsFirst.`);
    let a;
    return n === "channelsFirst" ? a = [[0, 0], [0, 0], t[0], t[1]] : a = [[0, 0], t[0], t[1], [0, 0]], xa(e17, a);
  });
}
var l1 = class extends We {
  constructor(e17) {
    if (e17 == null && (e17 = {}), super(e17), this.dataFormat = e17.dataFormat == null ? Ga() : e17.dataFormat, e17.padding == null) this.padding = [[1, 1], [1, 1]];
    else if (typeof e17.padding == "number") this.padding = [[e17.padding, e17.padding], [e17.padding, e17.padding]];
    else {
      if (e17.padding = e17.padding, e17.padding.length !== 2) throw new V(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${e17.padding.length} array.`);
      let t, n;
      if (typeof e17.padding[0] == "number") t = [e17.padding[0], e17.padding[0]], n = [e17.padding[1], e17.padding[1]];
      else {
        if (e17.padding = e17.padding, e17.padding[0].length !== 2) throw new V(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${e17.padding[0].length} array.`);
        if (t = e17.padding[0], e17.padding[1].length !== 2) throw new V(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${e17.padding[1].length} array.`);
        n = e17.padding[1];
      }
      this.padding = [t, n];
    }
    this.inputSpec = [new zt({ ndim: 4 })];
  }
  computeOutputShape(e17) {
    e17 = Je(e17);
    let t, n;
    return this.dataFormat === "channelsFirst" ? (e17[2] != null && e17[2] >= 0 ? t = e17[2] + this.padding[0][0] + this.padding[0][1] : t = null, e17[3] != null && e17[3] >= 0 ? n = e17[3] + this.padding[1][0] + this.padding[1][1] : n = null, [e17[0], e17[1], t, n]) : (e17[1] != null && e17[1] >= 0 ? t = e17[1] + this.padding[0][0] + this.padding[0][1] : t = null, e17[2] != null && e17[2] >= 0 ? n = e17[2] + this.padding[1][0] + this.padding[1][1] : n = null, [e17[0], t, n, e17[3]]);
  }
  call(e17, t) {
    return O(() => Ij(Te(e17), this.padding, this.dataFormat));
  }
  getConfig() {
    let e17 = { padding: this.padding, dataFormat: this.dataFormat }, t = super.getConfig();
    return Object.assign(e17, t), e17;
  }
};
l1.className = "ZeroPadding2D";
ne.registerClass(l1);
function Pf(e17, t, n, a, r, s) {
  return O(() => {
    Rt(r), g2(s), va(a), n == null && (n = [1, 1]), a == null && (a = "valid"), r == null && (r = Ga()), s == null && (s = "max"), e17 = _0(e17, r);
    let i, o = a === "same" ? "same" : "valid";
    return s === "max" ? i = Dt(e17, t, n, o) : i = ya(e17, t, n, o), r === "channelsFirst" && (i = De(i, [0, 3, 1, 2])), i;
  });
}
function wC(e17, t, n, a, r, s) {
  return O(() => {
    Rt(r), g2(s), va(a), n == null && (n = [1, 1, 1]), a == null && (a = "valid"), r == null && (r = Ga()), s == null && (s = "max"), e17 = uC(e17, r);
    let i, o = a === "same" ? "same" : "valid";
    return s === "max" ? i = xw(e17, t, n, o) : i = jv(e17, t, n, o), r === "channelsFirst" && (i = De(i, [0, 4, 1, 2, 3])), i;
  });
}
var kC = class extends We {
  constructor(e17) {
    if (e17.poolSize == null && (e17.poolSize = 2), super(e17), typeof e17.poolSize == "number") this.poolSize = [e17.poolSize];
    else if (Array.isArray(e17.poolSize) && e17.poolSize.length === 1 && typeof e17.poolSize[0] == "number") this.poolSize = e17.poolSize;
    else throw new V(`poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e17.poolSize)}`);
    if (tn(this.poolSize, "poolSize"), e17.strides == null) this.strides = this.poolSize;
    else if (typeof e17.strides == "number") this.strides = [e17.strides];
    else if (Array.isArray(e17.strides) && e17.strides.length === 1 && typeof e17.strides[0] == "number") this.strides = e17.strides;
    else throw new V(`strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e17.strides)}`);
    tn(this.strides, "strides"), this.padding = e17.padding == null ? "valid" : e17.padding, va(this.padding), this.inputSpec = [new zt({ ndim: 3 })];
  }
  computeOutputShape(e17) {
    e17 = Je(e17);
    let t = Va(e17[1], this.poolSize[0], this.padding, this.strides[0]);
    return [e17[0], t, e17[2]];
  }
  call(e17, t) {
    return O(() => {
      this.invokeCallHook(e17, t), e17 = wd(Te(e17), 2);
      let n = this.poolingFunction(Te(e17), [this.poolSize[0], 1], [this.strides[0], 1], this.padding, "channelsLast");
      return As(n, [2]);
    });
  }
  getConfig() {
    let e17 = { poolSize: this.poolSize, padding: this.padding, strides: this.strides }, t = super.getConfig();
    return Object.assign(e17, t), e17;
  }
};
var u1 = class extends kC {
  constructor(e17) {
    super(e17);
  }
  poolingFunction(e17, t, n, a, r) {
    return Rt(r), va(a), Pf(e17, t, n, a, r, "max");
  }
};
u1.className = "MaxPooling1D";
ne.registerClass(u1);
var p1 = class extends kC {
  constructor(e17) {
    super(e17);
  }
  poolingFunction(e17, t, n, a, r) {
    return Rt(r), va(a), Pf(e17, t, n, a, r, "avg");
  }
};
p1.className = "AveragePooling1D";
ne.registerClass(p1);
var IC = class extends We {
  constructor(e17) {
    if (e17.poolSize == null && (e17.poolSize = [2, 2]), super(e17), this.poolSize = Array.isArray(e17.poolSize) ? e17.poolSize : [e17.poolSize, e17.poolSize], e17.strides == null) this.strides = this.poolSize;
    else if (Array.isArray(e17.strides)) {
      if (e17.strides.length !== 2) throw new V(`If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${e17.strides.length}.`);
      this.strides = e17.strides;
    } else this.strides = [e17.strides, e17.strides];
    tn(this.poolSize, "poolSize"), tn(this.strides, "strides"), this.padding = e17.padding == null ? "valid" : e17.padding, this.dataFormat = e17.dataFormat == null ? "channelsLast" : e17.dataFormat, Rt(this.dataFormat), va(this.padding), this.inputSpec = [new zt({ ndim: 4 })];
  }
  computeOutputShape(e17) {
    e17 = Je(e17);
    let t = this.dataFormat === "channelsFirst" ? e17[2] : e17[1], n = this.dataFormat === "channelsFirst" ? e17[3] : e17[2];
    return t = Va(t, this.poolSize[0], this.padding, this.strides[0]), n = Va(n, this.poolSize[1], this.padding, this.strides[1]), this.dataFormat === "channelsFirst" ? [e17[0], e17[1], t, n] : [e17[0], t, n, e17[3]];
  }
  call(e17, t) {
    return O(() => (this.invokeCallHook(e17, t), this.poolingFunction(Te(e17), this.poolSize, this.strides, this.padding, this.dataFormat)));
  }
  getConfig() {
    let e17 = { poolSize: this.poolSize, padding: this.padding, strides: this.strides, dataFormat: this.dataFormat }, t = super.getConfig();
    return Object.assign(e17, t), e17;
  }
};
var c1 = class extends IC {
  constructor(e17) {
    super(e17);
  }
  poolingFunction(e17, t, n, a, r) {
    return Rt(r), va(a), Pf(e17, t, n, a, r, "max");
  }
};
c1.className = "MaxPooling2D";
ne.registerClass(c1);
var d1 = class extends IC {
  constructor(e17) {
    super(e17);
  }
  poolingFunction(e17, t, n, a, r) {
    return Rt(r), va(a), Pf(e17, t, n, a, r, "avg");
  }
};
d1.className = "AveragePooling2D";
ne.registerClass(d1);
var SC = class extends We {
  constructor(e17) {
    if (e17.poolSize == null && (e17.poolSize = [2, 2, 2]), super(e17), this.poolSize = Array.isArray(e17.poolSize) ? e17.poolSize : [e17.poolSize, e17.poolSize, e17.poolSize], e17.strides == null) this.strides = this.poolSize;
    else if (Array.isArray(e17.strides)) {
      if (e17.strides.length !== 3) throw new V(`If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${e17.strides.length}.`);
      this.strides = e17.strides;
    } else this.strides = [e17.strides, e17.strides, e17.strides];
    tn(this.poolSize, "poolSize"), tn(this.strides, "strides"), this.padding = e17.padding == null ? "valid" : e17.padding, this.dataFormat = e17.dataFormat == null ? "channelsLast" : e17.dataFormat, Rt(this.dataFormat), va(this.padding), this.inputSpec = [new zt({ ndim: 5 })];
  }
  computeOutputShape(e17) {
    e17 = Je(e17);
    let t = this.dataFormat === "channelsFirst" ? e17[2] : e17[1], n = this.dataFormat === "channelsFirst" ? e17[3] : e17[2], a = this.dataFormat === "channelsFirst" ? e17[4] : e17[3];
    return t = Va(t, this.poolSize[0], this.padding, this.strides[0]), n = Va(n, this.poolSize[1], this.padding, this.strides[1]), a = Va(a, this.poolSize[2], this.padding, this.strides[2]), this.dataFormat === "channelsFirst" ? [e17[0], e17[1], t, n, a] : [e17[0], t, n, a, e17[4]];
  }
  call(e17, t) {
    return O(() => (this.invokeCallHook(e17, t), this.poolingFunction(Te(e17), this.poolSize, this.strides, this.padding, this.dataFormat)));
  }
  getConfig() {
    let e17 = { poolSize: this.poolSize, padding: this.padding, strides: this.strides, dataFormat: this.dataFormat }, t = super.getConfig();
    return Object.assign(e17, t), e17;
  }
};
var h1 = class extends SC {
  constructor(e17) {
    super(e17);
  }
  poolingFunction(e17, t, n, a, r) {
    return Rt(r), va(a), wC(e17, t, n, a, r, "max");
  }
};
h1.className = "MaxPooling3D";
ne.registerClass(h1);
var m1 = class extends SC {
  constructor(e17) {
    super(e17);
  }
  poolingFunction(e17, t, n, a, r) {
    return Rt(r), va(a), wC(e17, t, n, a, r, "avg");
  }
};
m1.className = "AveragePooling3D";
ne.registerClass(m1);
var NC = class extends We {
  constructor(e17) {
    super(e17), this.inputSpec = [new zt({ ndim: 3 })];
  }
  computeOutputShape(e17) {
    return [e17[0], e17[2]];
  }
  call(e17, t) {
    throw new ze();
  }
};
var f1 = class extends NC {
  constructor(e17) {
    super(e17 || {});
  }
  call(e17, t) {
    return O(() => {
      let n = Te(e17);
      return Ct(n, 1);
    });
  }
};
f1.className = "GlobalAveragePooling1D";
ne.registerClass(f1);
var g1 = class extends NC {
  constructor(e17) {
    super(e17 || {});
  }
  call(e17, t) {
    return O(() => {
      let n = Te(e17);
      return ma(n, 1);
    });
  }
};
g1.className = "GlobalMaxPooling1D";
ne.registerClass(g1);
var TC = class extends We {
  constructor(e17) {
    super(e17), this.dataFormat = e17.dataFormat == null ? "channelsLast" : e17.dataFormat, Rt(this.dataFormat), this.inputSpec = [new zt({ ndim: 4 })];
  }
  computeOutputShape(e17) {
    return e17 = e17, this.dataFormat === "channelsLast" ? [e17[0], e17[3]] : [e17[0], e17[1]];
  }
  call(e17, t) {
    throw new ze();
  }
  getConfig() {
    let e17 = { dataFormat: this.dataFormat }, t = super.getConfig();
    return Object.assign(e17, t), e17;
  }
};
var b1 = class extends TC {
  call(e17, t) {
    return O(() => {
      let n = Te(e17);
      return this.dataFormat === "channelsLast" ? Ct(n, [1, 2]) : Ct(n, [2, 3]);
    });
  }
};
b1.className = "GlobalAveragePooling2D";
ne.registerClass(b1);
var y1 = class extends TC {
  call(e17, t) {
    return O(() => {
      let n = Te(e17);
      return this.dataFormat === "channelsLast" ? ma(n, [1, 2]) : ma(n, [2, 3]);
    });
  }
};
y1.className = "GlobalMaxPooling2D";
ne.registerClass(y1);
var CC = class extends We {
  constructor(e17) {
    super(e17), this.layer = e17.layer;
  }
  build(e17) {
    this.built = true;
  }
  get trainable() {
    return this.layer != null ? this.layer.trainable : false;
  }
  set trainable(e17) {
    this.layer != null && (this.layer.trainable = e17);
  }
  get trainableWeights() {
    return this.layer.trainableWeights;
  }
  get nonTrainableWeights() {
    return this.layer.nonTrainableWeights;
  }
  get updates() {
    return this.layer._updates;
  }
  get losses() {
    return this.layer.losses;
  }
  getWeights() {
    return this.layer.getWeights();
  }
  setWeights(e17) {
    this.layer.setWeights(e17);
  }
  getConfig() {
    let e17 = { layer: { className: this.layer.getClassName(), config: this.layer.getConfig() } }, t = super.getConfig();
    return Object.assign(e17, t), e17;
  }
  setFastWeightInitDuringBuild(e17) {
    super.setFastWeightInitDuringBuild(e17), this.layer != null && this.layer.setFastWeightInitDuringBuild(e17);
  }
  static fromConfig(e17, t, n = {}) {
    let a = t.layer, r = Ba(a, n);
    delete t.layer;
    let s = { layer: r };
    return Object.assign(s, t), new e17(s);
  }
};
var x1 = class extends CC {
  constructor(e17) {
    super(e17), this.supportsMasking = true;
  }
  build(e17) {
    if (e17 = Je(e17), e17.length < 3) throw new V(`TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(e17)}`);
    this.inputSpec = [{ shape: e17 }];
    let t = [e17[0]].concat(e17.slice(2));
    this.layer.built || (this.layer.build(t), this.layer.built = true), super.build(e17);
  }
  computeOutputShape(e17) {
    e17 = Je(e17);
    let t = [e17[0]].concat(e17.slice(2)), n = this.layer.computeOutputShape(t), a = e17[1];
    return [n[0], a].concat(n.slice(1));
  }
  call(e17, t) {
    return O(() => (e17 = Te(e17), yC((n, a) => [Te(this.layer.call(n, t)), []], e17, [], false, null, null, false, true)[1]));
  }
};
x1.className = "TimeDistributed";
ne.registerClass(x1);
function Sj(e17) {
  Ko(IG, "BidirectionalMergeMode", e17);
}
var Nj = "concat";
var v1 = class extends CC {
  constructor(e17) {
    super(e17);
    let t = e17.layer.getConfig(), n = {};
    n.className = e17.layer.getClassName(), n.config = t, this.forwardLayer = Ba(n), t.goBackwards = t.goBackwards !== true;
    let a = {};
    if (a.className = e17.layer.getClassName(), a.config = t, this.backwardLayer = Ba(a), this.forwardLayer.name = "forward_" + this.forwardLayer.name, this.backwardLayer.name = "backward_" + this.backwardLayer.name, this.mergeMode = e17.mergeMode === void 0 ? Nj : e17.mergeMode, Sj(this.mergeMode), e17.weights) throw new ze("weights support is not implemented for Bidirectional layer yet.");
    this._stateful = e17.layer.stateful, this.returnSequences = e17.layer.returnSequences, this.returnState = e17.layer.returnState, this.supportsMasking = true, this._trainable = true, this.inputSpec = e17.layer.inputSpec, this.numConstants = null;
  }
  get trainable() {
    return this._trainable;
  }
  set trainable(e17) {
    this._trainable = e17, this.forwardLayer != null && (this.forwardLayer.trainable = e17), this.backwardLayer != null && (this.backwardLayer.trainable = e17);
  }
  getWeights() {
    return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights());
  }
  setWeights(e17) {
    let t = e17.length, n = Math.floor(t / 2);
    this.forwardLayer.setWeights(e17.slice(0, n)), this.backwardLayer.setWeights(e17.slice(n));
  }
  computeOutputShape(e17) {
    let t = this.forwardLayer.computeOutputShape(e17);
    Array.isArray(t) && Array.isArray(t[0]) || (t = [t]), t = t;
    let n, a, r;
    return this.returnState && (r = t.slice(1)), n = t[0], n = n, this.mergeMode === "concat" ? (n[n.length - 1] *= 2, a = [n]) : this.mergeMode == null ? a = [n, n.slice()] : a = [n], this.returnState ? this.mergeMode == null ? a.concat(r).concat(r.slice()) : [n].concat(r).concat(r.slice()) : Mn(a);
  }
  apply(e17, t) {
    let n = t == null ? null : t.initialState, a = t == null ? null : t.constants;
    t == null && (t = {});
    let r = bC(e17, n, a, this.numConstants);
    if (e17 = r.inputs, n = r.initialState, a = r.constants, Array.isArray(e17) && (n = e17.slice(1), e17 = e17[0]), (n == null || n.length === 0) && a == null) return super.apply(e17, t);
    let s = [], i = [];
    if (n != null) {
      let l = n.length;
      if (l % 2 > 0) throw new V("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");
      t.initialState = n, s.push(...n);
      let u = n.map((p) => new zt({ shape: p.shape }));
      this.forwardLayer.stateSpec = u.slice(0, l / 2), this.backwardLayer.stateSpec = u.slice(l / 2), i.push(...u);
    }
    if (a != null) throw new ze("Support for constants in Bidirectional layers is not implemented yet.");
    let o = s[0] instanceof Ha;
    for (let l of s) if (l instanceof Ha !== o) throw new V("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");
    if (o) {
      let l = [e17].concat(s), u = this.inputSpec.concat(i), p = this.inputSpec;
      this.inputSpec = u;
      let d = super.apply(l, t);
      return this.inputSpec = p, d;
    } else return super.apply(e17, t);
  }
  call(e17, t) {
    return O(() => {
      let n = t.initialState, a, r;
      if (n == null) a = this.forwardLayer.call(e17, t), r = this.backwardLayer.call(e17, t);
      else {
        let o = n.slice(0, n.length / 2), l = n.slice(n.length / 2);
        a = this.forwardLayer.call(e17, Object.assign(t, { initialState: o })), r = this.backwardLayer.call(e17, Object.assign(t, { initialState: l }));
      }
      let s;
      this.returnState && (Array.isArray(a) && (s = a.slice(1).concat(r.slice(1))), a = a[0], r = r[0]), this.returnSequences && (r = ba(r, 1));
      let i;
      return this.mergeMode === "concat" ? i = t0([a, r]) : this.mergeMode === "sum" ? i = X(a, r) : this.mergeMode === "ave" ? i = z(0.5, X(a, r)) : this.mergeMode === "mul" ? i = z(a, r) : this.mergeMode == null && (i = [a, r]), this.returnState ? this.mergeMode == null ? i.concat(s) : [i].concat(s) : i;
    });
  }
  resetStates(e17) {
    this.forwardLayer.resetStates(), this.backwardLayer.resetStates();
  }
  build(e17) {
    ri(this.forwardLayer.name, () => {
      this.forwardLayer.build(e17);
    }), ri(this.backwardLayer.name, () => {
      this.backwardLayer.build(e17);
    }), this.built = true;
  }
  computeMask(e17, t) {
    Array.isArray(t) && (t = t[0]);
    let n;
    if (this.returnSequences ? this.mergeMode == null ? n = [t, t] : n = t : this.mergeMode == null ? n = [null, null] : n = null, this.returnState) {
      let a = this.forwardLayer.states.map((r) => null);
      return Array.isArray(n) ? n.concat(a).concat(a) : [n].concat(a).concat(a);
    } else return n;
  }
  get trainableWeights() {
    return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights);
  }
  get nonTrainableWeights() {
    return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights);
  }
  setFastWeightInitDuringBuild(e17) {
    super.setFastWeightInitDuringBuild(e17), this.forwardLayer != null && this.forwardLayer.setFastWeightInitDuringBuild(e17), this.backwardLayer != null && this.backwardLayer.setFastWeightInitDuringBuild(e17);
  }
  getConfig() {
    let e17 = { mergeMode: this.mergeMode }, t = super.getConfig();
    return Object.assign(e17, t), e17;
  }
  static fromConfig(e17, t) {
    let n = Ba(t.layer);
    if (delete t.layer, t.numConstants != null) throw new ze("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");
    let a = t;
    return a.layer = n, new e17(a);
  }
};
v1.className = "Bidirectional";
ne.registerClass(v1);
var w1 = class extends We {
  constructor(e17) {
    super(e17), this.scale = e17.scale, e17.offset ? this.offset = e17.offset : this.offset = 0;
  }
  getConfig() {
    let e17 = { scale: this.scale, offset: this.offset }, t = super.getConfig();
    return Object.assign(e17, t), e17;
  }
  call(e17, t) {
    return O(() => (e17 = Te(e17), e17.dtype !== "float32" && (e17 = ir(e17, "float32")), X(z(e17, this.scale), this.offset)));
  }
};
w1.className = "Rescaling";
ne.registerClass(w1);
var { resizeBilinear: Tj, cropAndResize: Cj } = Zn;
var k1 = class extends We {
  constructor(e17) {
    super(e17), this.height = e17.height, this.width = e17.width;
  }
  centerCrop(e17, t, n, a, r, s, i, o) {
    return O(() => {
      let l, u = false, p = t / s, d = n / i, c = (a + t) / s, h = (r + n) / i, m = [p, d, c, h], f = [];
      e17.rank === 3 ? (u = true, l = At([e17])) : l = e17;
      for (let x = 0; x < l.shape[0]; x++) f.push(m);
      let g = bn(f, [f.length, 4]), b = gi(0, f.length, 1, "int32"), y = Cj(l, g, b, [a, r], "nearest");
      return ir(u ? Te(dt(y)) : y, o);
    });
  }
  upsize(e17, t, n, a) {
    return O(() => {
      let r = Tj(e17, [t, n]);
      return ir(r, a);
    });
  }
  call(e17, t) {
    return O(() => {
      let n = Te(e17), a = n.dtype, r = n.shape, s = r[r.length - 3], i = r[r.length - 2], o = 0;
      s !== this.height && (o = Math.floor((s - this.height) / 2));
      let l = 0;
      return i !== this.width && (l = Math.floor((i - this.width) / 2), l === 0 && (l = 1)), o >= 0 && l >= 0 ? this.centerCrop(n, o, l, this.height, this.width, s, i, a) : this.upsize(e17, this.height, this.width, a);
    });
  }
  getConfig() {
    let e17 = { height: this.height, width: this.width }, t = super.getConfig();
    return Object.assign(e17, t), e17;
  }
  computeOutputShape(e17) {
    e17 = Je(e17);
    let t = e17.length - 3, n = e17.length - 2;
    return e17[t] = this.height, e17[n] = this.width, e17;
  }
};
k1.className = "CenterCrop";
ne.registerClass(k1);
function Ej(e17, t, n, a) {
  let r = Te(e17);
  if (r.dtype !== "int32" && (r = ir(r, "int32")), t === "int") return r;
  let s = r.shape;
  if (r.rank === 0 && (r = Gt(r, -1)), t === "oneHot" && r.shape[r.shape.length - 1] !== 1 && (r = Gt(r, -1)), r.rank > 2) throw new V(`When outputMode is not int, maximum output rank is 2 Received outputMode ${t} and input shape ${s} which would result in output rank ${r.rank}.`);
  let i = ["multiHot", "oneHot"].includes(t), o = r, l;
  if (typeof a != "undefined" && t === "count" ? l = Xh(o, a, n, i) : l = Xh(o, [], n, i), t !== "tfIdf") return l;
  if (a) return z(l, a);
  throw new V("When outputMode is 'tfIdf', weights must be provided.");
}
var I1 = class extends We {
  constructor(e17) {
    super(e17), this.numTokens = e17.numTokens, e17.outputMode ? this.outputMode = e17.outputMode : this.outputMode = "multiHot";
  }
  getConfig() {
    let e17 = { numTokens: this.numTokens, outputMode: this.outputMode }, t = super.getConfig();
    return Object.assign(e17, t), e17;
  }
  computeOutputShape(e17) {
    return e17 = Je(e17), e17 == null ? [this.numTokens] : this.outputMode === "oneHot" && e17[e17.length - 1] !== 1 ? (e17.push(this.numTokens), e17) : (e17[e17.length - 1] = this.numTokens, e17);
  }
  call(e17, t) {
    return O(() => {
      e17 = Te(e17), e17.dtype !== "int32" && (e17 = ir(e17, "int32"));
      let n;
      if (typeof t.countWeights != "undefined") {
        if (this.outputMode !== "count") throw new V(`countWeights is not used when outputMode !== count.
              Received countWeights=${t.countWeights}`);
        n = Te(t.countWeights);
      }
      let a = ma(e17), r = Ol(e17), s = Cn(this.numTokens, a).bufferSync().get(0), i = $r(r, 0).bufferSync().get(0);
      if (!(s && i)) throw new V(`Input values must be between 0 < values <= numTokens with numTokens=${this.numTokens}`);
      return Ej(e17, this.outputMode, this.numTokens, n);
    });
  }
};
I1.className = "CategoryEncoding";
ne.registerClass(I1);
var _j = ["bilinear", "nearest"];
var RI = new Set(_j);
var S1 = class extends We {
  constructor(e17) {
    if (super(e17), this.height = e17.height, this.width = e17.width, e17.interpolation) if (RI.has(e17.interpolation)) this.interpolation = e17.interpolation;
    else throw new V(`Invalid interpolation parameter: ${e17.interpolation} is not implemented`);
    else this.interpolation = "bilinear";
    this.cropToAspectRatio = !!e17.cropToAspectRatio;
  }
  computeOutputShape(e17) {
    e17 = Je(e17);
    let t = e17[2];
    return [this.height, this.width, t];
  }
  getConfig() {
    let e17 = { height: this.height, width: this.width, interpolation: this.interpolation, cropToAspectRatio: this.cropToAspectRatio }, t = super.getConfig();
    return Object.assign(e17, t), e17;
  }
  call(e17, t) {
    return O(() => {
      let n = [this.height, this.width];
      if (this.interpolation === "bilinear") return Zn.resizeBilinear(e17, n, !this.cropToAspectRatio);
      if (this.interpolation === "nearest") return Zn.resizeNearestNeighbor(e17, n, !this.cropToAspectRatio);
      throw new Error(`Interpolation is ${this.interpolation} but only ${[...RI]} are supported`);
    });
  }
};
S1.className = "Resizing";
ne.registerClass(S1);
var EC = class {
  constructor(e17) {
    this.seed = e17;
  }
  next() {
    if (this.seed !== void 0) return this.seed++;
  }
};
EC.className = "RandomSeed";
var _C = class extends We {
  constructor(e17) {
    super(e17), this.randomGenerator = new EC(e17.seed);
  }
  getConfig() {
    let e17 = { seed: this.randomGenerator.seed }, t = super.getConfig();
    return Object.assign(e17, t), e17;
  }
};
_C.className = "BaseRandomLayer";
var Aj = ["bilinear", "nearest"];
var MI = new Set(Aj);
var N1 = class extends _C {
  constructor(e17) {
    super(e17);
    let { factor: t, interpolation: n = "bilinear" } = e17;
    if (this.factor = t, Array.isArray(this.factor) && this.factor.length === 2) this.widthLower = this.factor[0], this.widthUpper = this.factor[1];
    else if (!Array.isArray(this.factor) && this.factor > 0) this.widthLower = -this.factor, this.widthUpper = this.factor;
    else throw new V(`Invalid factor: ${this.factor}. Must be positive number or tuple of 2 numbers`);
    if (this.widthLower < -1 || this.widthUpper < -1) throw new V(`factor must have values larger than -1. Got: ${this.factor}`);
    if (this.widthUpper < this.widthLower) throw new V(`factor cannot have upper bound less than lower bound.
        Got upper bound: ${this.widthUpper}.
        Got lower bound: ${this.widthLower}
      `);
    if (n) if (MI.has(n)) this.interpolation = n;
    else throw new V(`Invalid interpolation parameter: ${n} is not implemented`);
  }
  getConfig() {
    let e17 = { factor: this.factor, interpolation: this.interpolation }, t = super.getConfig();
    return Object.assign(e17, t), e17;
  }
  computeOutputShape(e17) {
    e17 = Je(e17);
    let t = e17[2];
    return [this.imgHeight, -1, t];
  }
  call(e17, t) {
    return O(() => {
      let n = Te(e17);
      this.imgHeight = n.shape[n.shape.length - 3];
      let a = n.shape[n.shape.length - 2];
      this.widthFactor = Es([1], 1 + this.widthLower, 1 + this.widthUpper, "float32", this.randomGenerator.next());
      let r = this.widthFactor.dataSync()[0] * a;
      r = Math.round(r);
      let s = [this.imgHeight, r];
      switch (this.interpolation) {
        case "bilinear":
          return Zn.resizeBilinear(e17, s);
        case "nearest":
          return Zn.resizeNearestNeighbor(e17, s);
        default:
          throw new Error(`Interpolation is ${this.interpolation}
          but only ${[...MI]} are supported`);
      }
    });
  }
};
N1.className = "RandomWidth";
ne.registerClass(N1);
function Fj(e17) {
  return new rp(e17);
}
function $j(e17) {
  return new T0(e17);
}
function Dj(e17) {
  return new I0(e17);
}
function Rj(e17) {
  return new S0(e17);
}
function Mj(e17) {
  return new N0(e17);
}
function Oj(e17) {
  return new E0(e17);
}
function Pj(e17) {
  return new C0(e17);
}
function Lj(e17) {
  return new D0(e17);
}
function zj(e17) {
  return new Af(e17);
}
function Wj(e17) {
  return new A0(e17);
}
function Bj(e17) {
  return new Ff(e17);
}
function Vj(e17) {
  return new F0(e17);
}
function Uj(e17) {
  return new $0(e17);
}
function Gj(e17) {
  return new R0(e17);
}
function Hj(e17) {
  return new M0(e17);
}
function jj(e17) {
  return new O0(e17);
}
function qj(e17) {
  return new G0(e17);
}
function Kj(e17) {
  return new V0(e17);
}
function Xj(e17) {
  return new Of(e17);
}
function Yj(e17) {
  return new B0(e17);
}
function Zj(e17) {
  return new U0(e17);
}
function Jj(e17) {
  return new H0(e17);
}
function Qj(e17) {
  return new j0(e17);
}
function e6(e17) {
  return new q0(e17);
}
function t6(e17) {
  return new X0(e17);
}
function n6(e17) {
  return new Y0(e17);
}
function a6(e17) {
  return new J0(e17);
}
function r6(e17) {
  return new t1(e17);
}
function s6(e17) {
  return new Q0(e17);
}
function i6(e17) {
  return new e1(e17);
}
function o6(e17) {
  return new Z0(e17);
}
function l6(e17) {
  return new n1(e17);
}
function u6(e17) {
  return new i1(e17);
}
function p6(e17) {
  return new o1(e17);
}
function c6(e17) {
  return new l1(e17);
}
function T1(e17) {
  return new p1(e17);
}
function d6(e17) {
  return T1(e17);
}
function h6(e17) {
  return T1(e17);
}
function C1(e17) {
  return new d1(e17);
}
function m6(e17) {
  return C1(e17);
}
function f6(e17) {
  return C1(e17);
}
function E1(e17) {
  return new m1(e17);
}
function g6(e17) {
  return E1(e17);
}
function b6(e17) {
  return E1(e17);
}
function y6(e17) {
  return new f1(e17);
}
function x6(e17) {
  return new b1(e17);
}
function AC(e17) {
  return new g1(e17);
}
function FC(e17) {
  return new y1(e17);
}
function $C(e17) {
  return new u1(e17);
}
function DC(e17) {
  return new c1(e17);
}
function v6(e17) {
  return new h1(e17);
}
function w6(e17) {
  return new L0(e17);
}
function k6(e17) {
  return new Df(e17);
}
function I6(e17) {
  return new z0(e17);
}
function S6(e17) {
  return new Cd(e17);
}
function N6(e17) {
  return new P0(e17);
}
function T6(e17) {
  return new $f(e17);
}
function C6(e17) {
  return new W0(e17);
}
function E6(e17) {
  return new Mf(e17);
}
function _6(e17) {
  return new Mr(e17);
}
function A6(e17) {
  return new Rf(e17);
}
function F6(e17) {
  return new v1(e17);
}
function $6(e17) {
  return new x1(e17);
}
var D6 = AC;
var R6 = FC;
var M6 = $C;
var O6 = DC;
function P6(e17) {
  return new a1(e17);
}
function L6(e17) {
  return new r1(e17);
}
function z6(e17) {
  return new s1(e17);
}
function W6(e17) {
  return new K0(e17);
}
function B6(e17) {
  return new w1(e17);
}
function V6(e17) {
  return new k1(e17);
}
function U6(e17) {
  return new S1(e17);
}
function G6(e17) {
  return new I1(e17);
}
function H6(e17) {
  return new N1(e17);
}
var RC = {};
_e(RC, { MAPE: () => nq, MSE: () => sq, binaryAccuracy: () => j6, binaryCrossentropy: () => q6, categoricalAccuracy: () => X6, categoricalCrossentropy: () => Y6, cosineProximity: () => Q6, mape: () => aq, meanAbsoluteError: () => eq, meanAbsolutePercentageError: () => tq, meanSquaredError: () => rq, mse: () => iq, precision: () => Z6, r2Score: () => oq, recall: () => J6, sparseCategoricalAccuracy: () => K6 });
function j6(e17, t) {
  return b0(e17, t);
}
function q6(e17, t) {
  return P2(e17, t);
}
function K6(e17, t) {
  return L2(e17, t);
}
function X6(e17, t) {
  return y0(e17, t);
}
function Y6(e17, t) {
  return x0(e17, t);
}
function Z6(e17, t) {
  return O2(e17, t);
}
function J6(e17, t) {
  return _H(e17, t);
}
function Q6(e17, t) {
  return g0(e17, t);
}
function eq(e17, t) {
  return Tf(e17, t);
}
function tq(e17, t) {
  return sp(e17, t);
}
function nq(e17, t) {
  return sp(e17, t);
}
function aq(e17, t) {
  return sp(e17, t);
}
function rq(e17, t) {
  return Xo(e17, t);
}
function sq(e17, t) {
  return Xo(e17, t);
}
function iq(e17, t) {
  return Xo(e17, t);
}
function oq(e17, t) {
  return AH(e17, t);
}
var MC = {};
_e(MC, { modelFromJSON: () => ij });
var OC = {};
_e(OC, { l1: () => uq, l1l2: () => lq, l2: () => pq });
function lq(e17) {
  return new Nd(e17);
}
function uq(e17) {
  return hj(e17);
}
function pq(e17) {
  return mj(e17);
}
var PC = class extends Gl {
  constructor() {
    super(...arguments), this.model = null;
  }
  setModel(e17) {
    if (!(e17 instanceof Er)) throw new Error("model must be a LayersModel, not some other Container");
    this.model = e17;
  }
};
function Nh(e17, t) {
  return e17 < t;
}
function OI(e17, t) {
  return e17 > t;
}
var LC = class extends PC {
  constructor(e17) {
    if (super(), e17 == null && (e17 = {}), e17.restoreBestWeights) throw new ze("restoreBestWeights = True is not implemented in EarlyStopping yet.");
    this.monitor = e17.monitor || "val_loss", this.minDelta = Math.abs(e17.minDelta || 0), this.patience = e17.patience || 0, this.verbose = e17.verbose || 0, this.mode = e17.mode || "auto", this.baseline = e17.baseline, ["auto", "min", "max"].indexOf(this.mode) === -1 && (console.warn(`EarlyStopping mode '${this.mode}' is invalid. Falling back to mode 'auto'.`), this.mode = "auto"), this.mode === "min" ? this.monitorFunc = Nh : this.mode === "max" ? this.monitorFunc = OI : this.monitor.indexOf("acc") !== -1 ? this.monitorFunc = OI : this.monitorFunc = Nh, this.monitorFunc === Nh && (this.minDelta *= -1);
  }
  async onTrainBegin(e17) {
    this.wait = 0, this.stoppedEpoch = 0, this.baseline != null ? this.best = this.baseline : this.best = this.monitorFunc === Nh ? 1 / 0 : -1 / 0;
  }
  async onEpochEnd(e17, t) {
    await Kr(t);
    let n = this.getMonitorValue(t);
    n != null && (this.monitorFunc(n - this.minDelta, this.best) ? (this.best = n, this.wait = 0) : (this.wait++, this.wait >= this.patience && (this.stoppedEpoch = e17, this.model.stopTraining = true)));
  }
  async onTrainEnd(e17) {
    this.stoppedEpoch > 0 && this.verbose && console.log(`Epoch ${this.stoppedEpoch}: early stopping.`);
  }
  getMonitorValue(e17) {
    e17 == null && (e17 = {});
    let t = e17[this.monitor];
    return t == null && console.warn(`Metric for EarlyStopping ${this.monitor} is not available. Available metrics are: ${Object.keys(e17)}`), t;
  }
};
function cq(e17) {
  return new LC(e17);
}
var dq = { earlyStopping: cq };
var hq = G();
hq.registerFlag("KEEP_INTERMEDIATE_TENSORS", () => false, (e17) => {
  e17 && console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.");
});
var qn;
(function(e17) {
  e17[e17.DT_INVALID = 0] = "DT_INVALID", e17[e17.DT_FLOAT = 1] = "DT_FLOAT", e17[e17.DT_DOUBLE = 2] = "DT_DOUBLE", e17[e17.DT_INT32 = 3] = "DT_INT32", e17[e17.DT_UINT8 = 4] = "DT_UINT8", e17[e17.DT_INT16 = 5] = "DT_INT16", e17[e17.DT_INT8 = 6] = "DT_INT8", e17[e17.DT_STRING = 7] = "DT_STRING", e17[e17.DT_COMPLEX64 = 8] = "DT_COMPLEX64", e17[e17.DT_INT64 = 9] = "DT_INT64", e17[e17.DT_BOOL = 10] = "DT_BOOL", e17[e17.DT_QINT8 = 11] = "DT_QINT8", e17[e17.DT_QUINT8 = 12] = "DT_QUINT8", e17[e17.DT_QINT32 = 13] = "DT_QINT32", e17[e17.DT_BFLOAT16 = 14] = "DT_BFLOAT16", e17[e17.DT_QINT16 = 15] = "DT_QINT16", e17[e17.DT_QUINT16 = 16] = "DT_QUINT16", e17[e17.DT_UINT16 = 17] = "DT_UINT16", e17[e17.DT_COMPLEX128 = 18] = "DT_COMPLEX128", e17[e17.DT_HALF = 19] = "DT_HALF", e17[e17.DT_RESOURCE = 20] = "DT_RESOURCE", e17[e17.DT_VARIANT = 21] = "DT_VARIANT", e17[e17.DT_UINT32 = 22] = "DT_UINT32", e17[e17.DT_UINT64 = 23] = "DT_UINT64", e17[e17.DT_FLOAT_REF = 101] = "DT_FLOAT_REF", e17[e17.DT_DOUBLE_REF = 102] = "DT_DOUBLE_REF", e17[e17.DT_INT32_REF = 103] = "DT_INT32_REF", e17[e17.DT_UINT8_REF = 104] = "DT_UINT8_REF", e17[e17.DT_INT16_REF = 105] = "DT_INT16_REF", e17[e17.DT_INT8_REF = 106] = "DT_INT8_REF", e17[e17.DT_STRING_REF = 107] = "DT_STRING_REF", e17[e17.DT_COMPLEX64_REF = 108] = "DT_COMPLEX64_REF", e17[e17.DT_INT64_REF = 109] = "DT_INT64_REF", e17[e17.DT_BOOL_REF = 110] = "DT_BOOL_REF", e17[e17.DT_QINT8_REF = 111] = "DT_QINT8_REF", e17[e17.DT_QUINT8_REF = 112] = "DT_QUINT8_REF", e17[e17.DT_QINT32_REF = 113] = "DT_QINT32_REF", e17[e17.DT_BFLOAT16_REF = 114] = "DT_BFLOAT16_REF", e17[e17.DT_QINT16_REF = 115] = "DT_QINT16_REF", e17[e17.DT_QUINT16_REF = 116] = "DT_QUINT16_REF", e17[e17.DT_UINT16_REF = 117] = "DT_UINT16_REF", e17[e17.DT_COMPLEX128_REF = 118] = "DT_COMPLEX128_REF", e17[e17.DT_HALF_REF = 119] = "DT_HALF_REF", e17[e17.DT_RESOURCE_REF = 120] = "DT_RESOURCE_REF", e17[e17.DT_VARIANT_REF = 121] = "DT_VARIANT_REF", e17[e17.DT_UINT32_REF = 122] = "DT_UINT32_REF", e17[e17.DT_UINT64_REF = 123] = "DT_UINT64_REF";
})(qn || (qn = {}));
var PI;
(function(e17) {
  let t;
  (function(n) {
    n[n.LEGACY = 0] = "LEGACY", n[n.V1 = 1] = "V1", n[n.V2 = 2] = "V2";
  })(t = e17.CheckpointFormatVersion || (e17.CheckpointFormatVersion = {}));
})(PI || (PI = {}));
var _1 = {};
function mq(e17, t) {
  let n = { tfOpName: e17, category: "custom", inputs: [], attrs: [], customExecutor: t };
  _1[e17] = n;
}
function zC(e17) {
  return _1[e17];
}
function fq(e17) {
  delete _1[e17];
}
function k(e17, t, n, a, r) {
  let s = t.inputParams[e17];
  if (s && s.inputIndexStart !== void 0) {
    let o = s.inputIndexStart, l = s.inputIndexEnd === 0 ? void 0 : s.inputIndexEnd === void 0 ? o + 1 : s.inputIndexEnd, u = o < 0 ? t.inputNames.length + o : o;
    if (s.type === "tensor") return pn(t.inputNames[u], n, a, r);
    if (s.type === "tensors") {
      let c = t.inputs.slice(o, l);
      return t.inputNames.slice(o, l).filter((h, m) => {
        var f;
        return ((f = c[m]) === null || f === void 0 ? void 0 : f.op) !== "NoOp";
      }).map((h) => pn(h, n, a, r));
    }
    let p = pn(t.inputNames[u], n, a, r), d = p.dataSync();
    return s.type === "number" ? d[0] : w.toNestedArray(p.shape, d);
  }
  let i = t.attrParams[e17];
  return i && i.value;
}
function pn(e17, t, n, a) {
  let [r, s] = Xn(e17, n);
  if (a != null) {
    let o = a.getHashTableHandleByName(r);
    if (o != null) return o;
  }
  let i = n.currentContextIds.find((o) => !!t[im(r, o)]);
  return i !== void 0 ? t[im(r, i)][s] : void 0;
}
function LI(e17, t, n) {
  return t[im(e17, n.currentContextId)];
}
function Sr(e17, t) {
  let [n, a, r] = Xn(e17, t);
  return [im(n, t && t.currentContextId), a, r];
}
function im(e17, t) {
  return t ? `${e17}-${t}` : e17;
}
function Xn(e17, t) {
  if (e17 === "") return ["", 0, void 0];
  let n = t != null && t.parseNodeNameCache != null;
  if (n) {
    let s = t.parseNodeNameCache.get(e17);
    if (s != null) return s;
  }
  let a = e17.split(":"), r;
  if (a.length === 1) r = [e17, 0, void 0];
  else {
    let s = a[0], i = a.length === 3 ? a[1] : void 0, o = Number(a[a.length - 1]);
    r = [s, o, i];
  }
  return n && t.parseNodeNameCache.set(e17, r), r;
}
function Mh(e17, t, n) {
  let a = k("pad", e17, t, n);
  if (a === "explicit") {
    a = k("explicitPaddings", e17, t, n);
    let r = [[0, 0], [0, 0], [0, 0], [0, 0]];
    for (let s = 0; s < 4; s++) r[s][0] = a[s * 2], r[s][1] = a[s * 2 + 1];
    return r;
  }
  return a;
}
function Nr(e17) {
  return e17.kept ? e17 : sr(e17);
}
var WC = {};
_e(WC, { json: () => gq });
var gq = [{ tfOpName: "Add", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "AddV2", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "AddN", category: "arithmetic", inputs: [{ start: 0, end: 0, name: "tensors", type: "tensors" }] }, { tfOpName: "BiasAdd", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }, { tfName: "data_format", name: "dataFormat", type: "string", notSupported: true }] }, { tfOpName: "Sub", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "RealDiv", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Div", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "DivNoNan", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "FloorDiv", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Mul", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Maximum", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Minimum", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Pow", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "SquaredDifference", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Mod", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "FloorMod", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }];
var BC = {};
_e(BC, { json: () => bq });
var bq = [{ tfOpName: "Abs", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Acos", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Asin", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Atan", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Atan2", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "y", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Ceil", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "ClipByValue", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "clipValueMin", type: "number" }, { start: 2, name: "clipValueMax", type: "number" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Complex", category: "basic_math", inputs: [{ start: 0, name: "real", type: "tensor" }, { start: 1, name: "imag", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "ComplexAbs", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Cos", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Cosh", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Elu", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Exp", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Floor", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Log", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Imag", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }, { tfName: "Tout", name: "outputType", type: "dtype", notSupported: true }] }, { tfOpName: "Neg", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Real", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }, { tfName: "Tout", name: "outputType", type: "dtype", notSupported: true }] }, { tfOpName: "Prelu", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "alpha", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Relu", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Relu6", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Selu", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Sigmoid", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Sin", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Sinh", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Sqrt", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Rsqrt", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Square", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Tan", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Tanh", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Sign", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Round", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Expm1", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Log1p", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Reciprocal", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Softplus", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Asinh", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Acosh", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Atanh", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Erf", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "LeakyRelu", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "alpha", name: "alpha", type: "number", defaultValue: 0.2 }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "IsNan", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "IsFinite", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "IsInf", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }];
var VC = {};
_e(VC, { json: () => yq });
var yq = [{ tfOpName: "EmptyTensorList", category: "control", inputs: [{ start: 0, name: "elementShape", type: "shape" }, { start: 1, name: "maxNumElements", type: "number" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "LoopCond", category: "control", inputs: [{ start: 0, name: "pred", type: "tensor" }] }, { tfOpName: "Switch", category: "control", inputs: [{ start: 0, name: "data", type: "tensor" }, { start: 1, name: "pred", type: "tensor" }] }, { tfOpName: "Merge", category: "control", inputs: [{ start: 0, end: 0, name: "tensors", type: "tensors" }] }, { tfOpName: "Enter", category: "control", inputs: [{ start: 0, name: "tensor", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }, { tfName: "frame_name", name: "frameName", type: "string" }, { tfName: "is_constant", name: "isConstant", type: "bool" }] }, { tfOpName: "Exit", category: "control", inputs: [{ start: 0, name: "tensor", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "NextIteration", category: "control", inputs: [{ start: 0, name: "tensor", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "TensorArrayV3", category: "control", inputs: [{ start: 0, name: "size", type: "number" }], attrs: [{ tfName: "dtype", name: "dtype", type: "dtype" }, { tfName: "element_shape", name: "elementShape", type: "shape" }, { tfName: "dynamic_size", name: "dynamicSize", type: "bool" }, { tfName: "clear_after_read", name: "clearAfterRead", type: "bool" }, { tfName: "identical_element_shapes", name: "identicalElementShapes", type: "bool" }, { tfName: "tensor_array_name", name: "name", type: "string" }] }, { tfOpName: "TensorArrayWriteV3", category: "control", inputs: [{ start: 0, name: "tensorArrayId", type: "tensor" }, { start: 1, name: "index", type: "number" }, { start: 2, name: "tensor", type: "tensor" }, { start: 3, name: "flowIn", type: "number" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "TensorArrayReadV3", category: "control", inputs: [{ start: 0, name: "tensorArrayId", type: "tensor" }, { start: 1, name: "index", type: "number" }, { start: 2, name: "flowIn", type: "number" }], attrs: [{ tfName: "dtype", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "TensorArrayGatherV3", category: "control", inputs: [{ start: 0, name: "tensorArrayId", type: "tensor" }, { start: 1, name: "indices", type: "number[]" }, { start: 2, name: "flowIn", type: "number" }], attrs: [{ tfName: "dtype", name: "dtype", type: "dtype" }, { tfName: "element_shape", name: "elementShape", type: "shape" }] }, { tfOpName: "TensorArrayScatterV3", category: "control", inputs: [{ start: 0, name: "tensorArrayId", type: "tensor" }, { start: 1, name: "indices", type: "number[]" }, { start: 2, name: "tensor", type: "tensor" }, { start: 3, name: "flowIn", type: "number" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype" }] }, { tfOpName: "TensorArrayConcatV3", category: "control", inputs: [{ start: 0, name: "tensorArrayId", type: "tensor" }, { start: 1, name: "flowIn", type: "number" }], attrs: [{ tfName: "dtype", name: "dtype", type: "dtype" }, { tfName: "element_shape_except0", name: "elementShapeExcept0", type: "shape", notSupported: true }] }, { tfOpName: "TensorArraySplitV3", category: "control", inputs: [{ start: 0, name: "tensorArrayId", type: "tensor" }, { start: 1, name: "tensor", type: "tensor" }, { start: 2, name: "lengths", type: "number[]" }, { start: 3, name: "flowIn", type: "number" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype" }] }, { tfOpName: "TensorArraySizeV3", category: "control", inputs: [{ start: 0, name: "tensorArrayId", type: "tensor" }, { start: 1, name: "flowIn", type: "number" }] }, { tfOpName: "TensorArrayCloseV3", category: "control", inputs: [{ start: 0, name: "tensorArrayId", type: "tensor" }] }, { tfOpName: "StatelessIf", category: "control", inputs: [{ start: 0, name: "cond", type: "tensor" }, { start: 1, end: 0, name: "args", type: "tensors" }], attrs: [{ tfName: "then_branch", name: "thenBranch", type: "func" }, { tfName: "else_branch", name: "elseBranch", type: "func" }] }, { tfOpName: "If", category: "control", inputs: [{ start: 0, name: "cond", type: "tensor" }, { start: 1, end: 0, name: "args", type: "tensors" }], attrs: [{ tfName: "then_branch", name: "thenBranch", type: "func" }, { tfName: "else_branch", name: "elseBranch", type: "func" }] }, { tfOpName: "StatelessWhile", category: "control", inputs: [{ start: 0, end: 0, name: "args", type: "tensors" }], attrs: [{ tfName: "cond", name: "cond", type: "func" }, { tfName: "body", name: "body", type: "func" }] }, { tfOpName: "While", category: "control", inputs: [{ start: 0, end: 0, name: "args", type: "tensors" }], attrs: [{ tfName: "cond", name: "cond", type: "func" }, { tfName: "body", name: "body", type: "func" }] }, { tfOpName: "TensorListScatter", category: "control", inputs: [{ start: 0, name: "tensor", type: "tensor" }, { start: 1, name: "indices", type: "number[]" }, { start: 2, name: "elementShape", type: "shape" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "TensorListScatterV2", category: "control", inputs: [{ start: 0, name: "tensor", type: "tensor" }, { start: 1, name: "indices", type: "number[]" }, { start: 2, name: "elementShape", type: "shape" }, { start: 3, name: "numElements", type: "number" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "TensorListGather", category: "control", inputs: [{ start: 0, name: "tensorListId", type: "tensor" }, { start: 1, name: "indices", type: "number[]" }, { start: 2, name: "elementShape", type: "shape" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "TensorListGetItem", category: "control", inputs: [{ start: 0, name: "tensorListId", type: "tensor" }, { start: 1, name: "index", type: "number" }, { start: 2, name: "elementShape", type: "shape" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "TensorListSetItem", category: "control", inputs: [{ start: 0, name: "tensorListId", type: "tensor" }, { start: 1, name: "index", type: "number" }, { start: 2, name: "tensor", type: "tensor" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "TensorListReserve", category: "control", inputs: [{ start: 0, name: "elementShape", type: "shape" }, { start: 1, name: "numElements", type: "number" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "TensorListFromTensor", category: "control", inputs: [{ start: 0, name: "tensor", type: "tensor" }, { start: 1, name: "elementShape", type: "shape" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "TensorListStack", category: "control", inputs: [{ start: 0, name: "tensorListId", type: "tensor" }, { start: 1, name: "elementShape", type: "shape" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }, { tfName: "num_elements", name: "numElements", type: "dtype" }] }, { tfOpName: "TensorListSplit", category: "control", inputs: [{ start: 0, name: "tensor", type: "tensor" }, { start: 1, name: "elementShape", type: "shape" }, { start: 2, name: "lengths", type: "number[]" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "TensorListConcat", category: "control", inputs: [{ start: 0, name: "tensorListId", type: "tensor" }], attrs: [{ tfName: "element_shape", name: "elementShape", type: "shape" }, { tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "TensorListConcatV2", category: "control", inputs: [{ start: 0, name: "tensorListId", type: "tensor" }], attrs: [{ tfName: "element_shape", name: "elementShape", type: "shape" }, { tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "TensorListPopBack", category: "control", inputs: [{ start: 0, name: "tensorListId", type: "tensor" }, { start: 1, name: "elementShape", type: "shape" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "TensorListPushBack", category: "control", inputs: [{ start: 0, name: "tensorListId", type: "tensor" }, { start: 1, name: "tensor", type: "tensor" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "TensorListLength", category: "control", inputs: [{ start: 0, name: "tensorListId", type: "tensor" }] }, { tfOpName: "TensorListResize", category: "control", inputs: [{ start: 0, name: "tensorListId", type: "tensor" }, { start: 1, name: "size", type: "number" }] }];
var UC = {};
_e(UC, { json: () => xq });
var xq = [{ tfOpName: "AvgPool", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "data_format", name: "dataFormat", type: "string", notSupported: true }, { tfName: "ksize", name: "kernelSize", type: "number[]" }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "MaxPool", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "data_format", name: "dataFormat", type: "string", notSupported: true }, { tfName: "ksize", name: "kernelSize", type: "number[]" }, { tfName: "explicit_paddings", name: "explicitPaddings", type: "number[]", defaultValue: [], notSupported: true }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "MaxPoolWithArgmax", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "ksize", name: "kernelSize", type: "number[]" }, { tfName: "include_batch_in_index", name: "includeBatchInIndex", type: "bool" }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "AvgPool3D", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "data_format", name: "dataFormat", type: "string", notSupported: true }, { tfName: "ksize", name: "kernelSize", type: "number[]" }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "MaxPool3D", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "data_format", name: "dataFormat", type: "string", notSupported: true }, { tfName: "ksize", name: "kernelSize", type: "number[]" }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Conv1D", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "filter", type: "tensor" }], attrs: [{ tfName: "stride", name: "stride", type: "number" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "data_format", name: "dataFormat", type: "string", defaultValue: "NWC" }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }, { tfName: "dilation", name: "dilation", type: "number", defaultValue: 1 }] }, { tfOpName: "Conv2D", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "filter", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }, { tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "useCudnnOnGpu", name: "useCudnnOnGpu", type: "bool" }, { tfName: "data_format", name: "dataFormat", type: "string", defaultValue: "NHWC" }, { tfName: "explicit_paddings", name: "explicitPaddings", type: "number[]", defaultValue: [] }, { tfName: "dilations", name: "dilations", type: "number[]" }] }, { tfOpName: "_FusedConv2D", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "filter", type: "tensor" }, { start: 2, end: 0, name: "args", type: "tensors" }], attrs: [{ tfName: "num_args", name: "numArgs", type: "number" }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }, { tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "explicit_paddings", name: "explicitPaddings", type: "number[]", defaultValue: [] }, { tfName: "use_cudnn_on_gpu", name: "useCudnnOnGpu", type: "bool", defaultValue: true }, { tfName: "data_format", name: "dataFormat", type: "string", defaultValue: "NHWC" }, { tfName: "dilations", name: "dilations", type: "number[]", defaultValue: [1, 1, 1, 1] }, { tfName: "fused_ops", name: "fusedOps", type: "string[]", defaultValue: [] }, { tfName: "epsilon", name: "epsilon", type: "number", defaultValue: 1e-4 }, { tfName: "leakyrelu_alpha", name: "leakyreluAlpha", type: "number", defaultValue: 0.2 }] }, { tfOpName: "Conv2DBackpropInput", category: "convolution", inputs: [{ start: 2, name: "x", type: "tensor" }, { start: 1, name: "filter", type: "tensor" }, { start: 0, name: "outputShape", type: "number[]" }], attrs: [{ tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "data_format", name: "dataFormat", type: "string", notSupported: true }, { tfName: "explicit_paddings", name: "explicitPaddings", type: "number[]", defaultValue: [] }, { tfName: "dilations", name: "dilations", type: "number[]", notSupported: true }] }, { tfOpName: "DepthwiseConv2d", category: "convolution", inputs: [{ start: 0, name: "input", type: "tensor" }, { start: 1, name: "filter", type: "tensor" }], attrs: [{ tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "data_format", name: "dataFormat", type: "string", defaultValue: "NHWC" }, { tfName: "explicit_paddings", name: "explicitPaddings", type: "number[]", defaultValue: [] }, { tfName: "dilations", name: "dilations", type: "number[]" }] }, { tfOpName: "DepthwiseConv2dNative", category: "convolution", inputs: [{ start: 0, name: "input", type: "tensor" }, { start: 1, name: "filter", type: "tensor" }], attrs: [{ tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "data_format", name: "dataFormat", type: "string", defaultValue: "NHWC" }, { tfName: "explicit_paddings", name: "explicitPaddings", type: "number[]", defaultValue: [] }, { tfName: "dilations", name: "dilations", type: "number[]" }] }, { tfOpName: "FusedDepthwiseConv2dNative", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "filter", type: "tensor" }, { start: 2, end: 0, name: "args", type: "tensors" }], attrs: [{ tfName: "num_args", name: "numArgs", type: "number" }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }, { tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "data_format", name: "dataFormat", type: "string", defaultValue: "NHWC" }, { tfName: "dilations", name: "dilations", type: "number[]", defaultValue: [1, 1, 1, 1] }, { tfName: "fused_ops", name: "fusedOps", type: "string[]", defaultValue: [] }, { tfName: "explicit_paddings", name: "explicitPaddings", type: "number[]", defaultValue: [] }] }, { tfOpName: "Conv3D", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "filter", type: "tensor" }], attrs: [{ tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "data_format", name: "dataFormat", type: "string", defaultValue: "NHWC" }, { tfName: "dilations", name: "dilations", type: "number[]" }] }, { tfOpName: "Dilation2D", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "filter", type: "tensor" }], attrs: [{ tfName: "strides", name: "strides", type: "number[]" }, { tfName: "rates", name: "dilations", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }] }];
var GC = {};
_e(GC, { json: () => vq });
var vq = [{ tfOpName: "Fill", category: "creation", inputs: [{ start: 0, name: "shape", type: "number[]" }, { start: 1, name: "value", type: "number" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype" }] }, { tfOpName: "LinSpace", category: "creation", inputs: [{ start: 0, name: "start", type: "number" }, { start: 1, name: "stop", type: "number" }, { start: 2, name: "num", type: "number" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "OneHot", category: "creation", inputs: [{ start: 0, name: "indices", type: "tensor" }, { start: 1, name: "depth", type: "number" }, { start: 2, name: "onValue", type: "number", defaultValue: 1 }, { start: 3, name: "offValue", type: "number", defaultValue: 0 }], attrs: [{ tfName: "axis", name: "axis", type: "number", notSupported: true }, { tfName: "T", name: "dtype", type: "dtype" }] }, { tfOpName: "Ones", category: "creation", inputs: [{ start: 0, name: "shape", type: "number[]" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype" }] }, { tfOpName: "OnesLike", category: "creation", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "dtype", name: "dtype", type: "dtype" }] }, { tfOpName: "RandomStandardNormal", category: "creation", inputs: [{ start: 0, name: "shape", type: "number[]" }], attrs: [{ tfName: "seed", name: "seed", type: "number", defaultValue: 0 }, { tfName: "seed2", name: "seed2", type: "number", defaultValue: 0, notSupported: true }, { tfName: "dtype", name: "dtype", type: "dtype" }, { tfName: "T", name: "T", type: "number", notSupported: true }] }, { tfOpName: "RandomUniform", category: "creation", inputs: [{ start: 0, name: "shape", type: "number[]" }], attrs: [{ tfName: "minval", name: "minval", type: "number", defaultValue: 0 }, { tfName: "maxval", name: "maxval", type: "number", defaultValue: 1 }, { tfName: "dtype", name: "dtype", type: "dtype" }, { tfName: "seed", name: "seed", type: "number", defaultValue: 0 }, { tfName: "seed2", name: "seed2", type: "number", defaultValue: 0, notSupported: true }, { tfName: "T", name: "T", type: "number", notSupported: true }] }, { tfOpName: "RandomUniformInt", category: "creation", inputs: [{ start: 0, name: "shape", type: "number[]" }], attrs: [{ tfName: "minval", name: "minval", type: "number" }, { tfName: "maxval", name: "maxval", type: "number" }, { tfName: "seed", name: "seed", type: "number", defaultValue: 0 }, { tfName: "seed2", name: "seed2", type: "number", defaultValue: 0, notSupported: true }] }, { tfOpName: "Range", category: "creation", inputs: [{ start: 0, name: "start", type: "number" }, { start: 1, name: "stop", type: "number" }, { start: 2, name: "step", type: "number", defaultValue: 0 }], attrs: [{ tfName: "Tidx", name: "dtype", type: "dtype" }] }, { tfOpName: "TruncatedNormal", category: "creation", inputs: [{ start: 0, name: "shape", type: "number[]" }], attrs: [{ tfName: "means", name: "mean", type: "number", defaultValue: 0 }, { tfName: "stddev", name: "stdDev", type: "number", defaultValue: 1 }, { tfName: "seed", name: "seed", type: "number" }, { tfName: "seed2", name: "seed2", type: "number", defaultValue: 0, notSupported: true }, { tfName: "dtype", name: "dtype", type: "dtype" }, { tfName: "T", name: "T", type: "number", notSupported: true }] }, { tfOpName: "Zeros", category: "creation", inputs: [{ start: 0, name: "shape", type: "number[]" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype" }] }, { tfOpName: "ZerosLike", category: "creation", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype" }] }, { tfOpName: "Multinomial", category: "creation", inputs: [{ start: 0, name: "logits", type: "tensor" }, { start: 1, name: "numSamples", type: "number" }], attrs: [{ tfName: "seed", name: "seed", type: "number" }, { tfName: "seed2", name: "seed2", type: "number" }, { tfName: "T", name: "dtype", type: "dtype" }, { tfName: "output_dtype", name: "output_dtype", type: "dtype" }] }];
var HC = {};
_e(HC, { json: () => wq });
var wq = [{ tfOpName: "NonMaxSuppressionV2", category: "dynamic", inputs: [{ start: 0, name: "boxes", type: "tensor" }, { start: 1, name: "scores", type: "tensor" }, { start: 2, name: "maxOutputSize", type: "number" }, { start: 3, name: "iouThreshold", type: "number" }] }, { tfOpName: "NonMaxSuppressionV3", category: "dynamic", inputs: [{ start: 0, name: "boxes", type: "tensor" }, { start: 1, name: "scores", type: "tensor" }, { start: 2, name: "maxOutputSize", type: "number" }, { start: 3, name: "iouThreshold", type: "number" }, { start: 4, name: "scoreThreshold", type: "number" }] }, { tfOpName: "NonMaxSuppressionV4", category: "dynamic", inputs: [{ start: 0, name: "boxes", type: "tensor" }, { start: 1, name: "scores", type: "tensor" }, { start: 2, name: "maxOutputSize", type: "number" }, { start: 3, name: "iouThreshold", type: "number" }, { start: 4, name: "scoreThreshold", type: "number" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }, { tfName: "T_threshold", name: "threshold", type: "dtype", notSupported: true }, { tfName: "pad_to_max_output_size", name: "padToMaxOutputSize", type: "bool" }] }, { tfOpName: "NonMaxSuppressionV5", category: "dynamic", inputs: [{ start: 0, name: "boxes", type: "tensor" }, { start: 1, name: "scores", type: "tensor" }, { start: 2, name: "maxOutputSize", type: "number" }, { start: 3, name: "iouThreshold", type: "number" }, { start: 4, name: "scoreThreshold", type: "number" }, { start: 5, name: "softNmsSigma", type: "number" }] }, { tfOpName: "Where", category: "dynamic", inputs: [{ start: 0, name: "condition", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "ListDiff", category: "dynamic", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "y", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }];
var jC = {};
_e(jC, { json: () => kq });
var kq = [{ tfOpName: "LowerBound", category: "evaluation", inputs: [{ start: 0, name: "sortedSequence", type: "tensor" }, { start: 1, name: "values", type: "tensor" }] }, { tfOpName: "TopKV2", category: "evaluation", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "k", type: "number" }], attrs: [{ tfName: "sorted", name: "sorted", type: "bool" }] }, { tfOpName: "UpperBound", category: "evaluation", inputs: [{ start: 0, name: "sortedSequence", type: "tensor" }, { start: 1, name: "values", type: "tensor" }] }, { tfOpName: "Unique", category: "evaluation", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "UniqueV2", category: "evaluation", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number" }] }];
var qC = {};
_e(qC, { json: () => Iq });
var Iq = [{ tfOpName: "PlaceholderWithDefault", category: "graph", inputs: [{ start: 0, name: "default", type: "tensor" }], attrs: [{ tfName: "shape", name: "shape", type: "shape" }, { tfName: "dtype", name: "dtype", type: "dtype" }] }, { tfOpName: "Placeholder", category: "graph", attrs: [{ tfName: "shape", name: "shape", type: "shape" }, { tfName: "dtype", name: "dtype", type: "dtype" }] }, { tfOpName: "Const", category: "graph" }, { tfOpName: "Identity", category: "graph", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "IdentityN", category: "graph", inputs: [{ start: 0, end: 0, name: "x", type: "tensors" }] }, { tfOpName: "Snapshot", category: "graph", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "Rank", category: "graph", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "Size", category: "graph", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "Shape", category: "graph", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "ShapeN", category: "graph", inputs: [{ start: 0, end: 0, name: "x", type: "tensors" }] }, { tfOpName: "Print", category: "graph", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "data", type: "tensors" }], attrs: [{ tfName: "message", name: "message", type: "string" }, { tfName: "first_n", name: "firstN", type: "number", notSupported: true }, { tfName: "summarize", name: "summarize", type: "number", defaultValue: 3 }] }, { tfOpName: "NoOp", category: "graph", inputs: [] }, { tfOpName: "StopGradient", category: "graph", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "FakeQuantWithMinMaxVars", category: "graph", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "min", name: "min", type: "number" }, { tfName: "max", name: "max", type: "number" }] }];
var KC = {};
_e(KC, { json: () => Sq });
var Sq = [{ tfOpName: "HashTable", category: "hash_table", inputs: [], attrs: [{ tfName: "shared_name", name: "sharedName", type: "string" }, { tfName: "use_node_name_sharing", name: "useNodeNameSharing", type: "bool" }, { tfName: "key_dtype", name: "keyDType", type: "dtype" }, { tfName: "value_dtype", name: "valueDType", type: "dtype" }] }, { tfOpName: "HashTableV2", category: "hash_table", inputs: [], attrs: [{ tfName: "shared_name", name: "sharedName", type: "string" }, { tfName: "use_node_name_sharing", name: "useNodeNameSharing", type: "bool" }, { tfName: "key_dtype", name: "keyDType", type: "dtype" }, { tfName: "value_dtype", name: "valueDType", type: "dtype" }] }, { tfOpName: "LookupTableImport", category: "hash_table", inputs: [{ start: 0, name: "tableHandle", type: "tensor" }, { start: 1, name: "keys", type: "tensor" }, { start: 2, name: "values", type: "tensor" }], attrs: [{ tfName: "Tin", name: "tIn", type: "dtype", notSupported: true }, { tfName: "Tout", name: "tOut", type: "dtype", notSupported: true }] }, { tfOpName: "LookupTableImportV2", category: "hash_table", inputs: [{ start: 0, name: "tableHandle", type: "tensor" }, { start: 1, name: "keys", type: "tensor" }, { start: 2, name: "values", type: "tensor" }], attrs: [{ tfName: "Tin", name: "tIn", type: "dtype", notSupported: true }, { tfName: "Tout", name: "tOut", type: "dtype", notSupported: true }] }, { tfOpName: "LookupTableFind", category: "hash_table", inputs: [{ start: 0, name: "tableHandle", type: "tensor" }, { start: 1, name: "keys", type: "tensor" }, { start: 2, name: "defaultValue", type: "tensor" }], attrs: [{ tfName: "Tin", name: "tIn", type: "dtype", notSupported: true }, { tfName: "Tout", name: "tOut", type: "dtype", notSupported: true }] }, { tfOpName: "LookupTableFindV2", category: "hash_table", inputs: [{ start: 0, name: "tableHandle", type: "tensor" }, { start: 1, name: "keys", type: "tensor" }, { start: 2, name: "defaultValue", type: "tensor" }], attrs: [{ tfName: "Tin", name: "tIn", type: "dtype", notSupported: true }, { tfName: "Tout", name: "tOut", type: "dtype", notSupported: true }] }, { tfOpName: "LookupTableSize", category: "hash_table", inputs: [{ start: 0, name: "tableHandle", type: "tensor" }] }, { tfOpName: "LookupTableSizeV2", category: "hash_table", inputs: [{ start: 0, name: "tableHandle", type: "tensor" }] }, { tfOpName: "InitializeTable", category: "hash_table", inputs: [{ start: 0, name: "tableHandle", type: "tensor" }, { start: 1, name: "keys", type: "tensor" }, { start: 2, name: "values", type: "tensor" }] }, { tfOpName: "InitializeTableV2", category: "hash_table", inputs: [{ start: 0, name: "tableHandle", type: "tensor" }, { start: 1, name: "keys", type: "tensor" }, { start: 2, name: "values", type: "tensor" }] }];
var XC = {};
_e(XC, { json: () => Nq });
var Nq = [{ tfOpName: "ResizeBilinear", category: "image", inputs: [{ start: 0, name: "images", type: "tensor" }, { start: 1, name: "size", type: "number[]" }], attrs: [{ tfName: "align_corners", name: "alignCorners", type: "bool" }, { tfName: "half_pixel_centers", name: "halfPixelCenters", type: "bool" }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "ResizeNearestNeighbor", category: "image", inputs: [{ start: 0, name: "images", type: "tensor" }, { start: 1, name: "size", type: "number[]" }], attrs: [{ tfName: "align_corners", name: "alignCorners", type: "bool" }, { tfName: "half_pixel_centers", name: "halfPixelCenters", type: "bool" }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "CropAndResize", category: "image", inputs: [{ start: 0, name: "image", type: "tensor" }, { start: 1, name: "boxes", type: "tensor" }, { start: 2, name: "boxInd", type: "tensor" }, { start: 3, name: "cropSize", type: "number[]" }], attrs: [{ tfName: "method", name: "method", type: "string" }, { tfName: "extrapolation_value", name: "extrapolationValue", type: "number" }] }, { tfOpName: "ImageProjectiveTransformV3", category: "image", inputs: [{ start: 0, name: "images", type: "tensor" }, { start: 1, name: "transforms", type: "tensor" }, { start: 2, name: "outputShape", type: "number[]" }, { start: 3, name: "fillValue", type: "number" }], attrs: [{ tfName: "interpolation", name: "interpolation", type: "string" }, { tfName: "fill_mode", name: "fillMode", type: "string" }] }];
var YC = {};
_e(YC, { json: () => Tq });
var Tq = [{ tfOpName: "Equal", category: "logical", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "NotEqual", category: "logical", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Greater", category: "logical", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "GreaterEqual", category: "logical", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Less", category: "logical", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "LessEqual", category: "logical", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "LogicalAnd", category: "logical", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "LogicalNot", category: "logical", inputs: [{ start: 0, name: "a", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "LogicalOr", category: "logical", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Select", category: "logical", inputs: [{ start: 0, name: "condition", type: "tensor" }, { start: 1, name: "a", type: "tensor" }, { start: 2, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "SelectV2", category: "logical", inputs: [{ start: 0, name: "condition", type: "tensor" }, { start: 1, name: "a", type: "tensor" }, { start: 2, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "BitwiseAnd", category: "logical", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "y", type: "tensor" }] }];
var ZC = {};
_e(ZC, { json: () => Cq });
var Cq = [{ tfOpName: "_FusedMatMul", category: "matrices", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }, { start: 2, end: 0, name: "args", type: "tensors" }], attrs: [{ tfName: "num_args", name: "numArgs", type: "number" }, { tfName: "fused_ops", name: "fusedOps", type: "string[]", defaultValue: [] }, { tfName: "epsilon", name: "epsilon", type: "number", defaultValue: 1e-4 }, { tfName: "transpose_a", name: "transposeA", type: "bool", defaultValue: false }, { tfName: "transpose_b", name: "transposeB", type: "bool", defaultValue: false }, { tfName: "leakyrelu_alpha", name: "leakyreluAlpha", type: "number", defaultValue: 0.2 }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "MatMul", category: "matrices", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "transpose_a", name: "transposeA", type: "bool", defaultValue: false }, { tfName: "transpose_b", name: "transposeB", type: "bool", defaultValue: false }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "BatchMatMul", category: "matrices", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "adj_x", name: "transposeA", type: "bool", defaultValue: false }, { tfName: "adj_y", name: "transposeB", type: "bool", defaultValue: false }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "BatchMatMulV2", category: "matrices", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "adj_x", name: "transposeA", type: "bool", defaultValue: false }, { tfName: "adj_y", name: "transposeB", type: "bool", defaultValue: false }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Transpose", category: "matrices", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "perm", type: "number[]" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Einsum", category: "matrices", inputs: [{ start: 0, end: 0, name: "tensors", type: "tensors" }], attrs: [{ tfName: "equation", name: "equation", type: "string" }, { tfName: "N", name: "n", type: "number", defaultValue: 2 }, { tfName: "T", name: "dtype", type: "dtype" }] }, { tfOpName: "MatrixBandPart", category: "matrices", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "numLower", type: "tensor" }, { start: 1, name: "numUpper", type: "tensor" }] }];
var JC = {};
_e(JC, { json: () => Eq });
var Eq = [{ tfOpName: "EuclideanNorm", category: "normalization", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number[]" }], attrs: [{ tfName: "keep_dims", name: "keepDims", type: "bool", defaultValue: false }] }, { tfOpName: "FusedBatchNorm", category: "normalization", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "scale", type: "tensor" }, { start: 2, name: "offset", type: "tensor" }, { start: 3, name: "mean", type: "tensor" }, { start: 4, name: "variance", type: "tensor" }], attrs: [{ tfName: "epsilon", name: "epsilon", type: "number", defaultValue: 1e-3 }, { tfName: "data_format", name: "dataFormat", type: "string", notSupported: true }] }, { tfOpName: "FusedBatchNormV2", category: "normalization", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "scale", type: "tensor" }, { start: 2, name: "offset", type: "tensor" }, { start: 3, name: "mean", type: "tensor" }, { start: 4, name: "variance", type: "tensor" }], attrs: [{ tfName: "epsilon", name: "epsilon", type: "number", defaultValue: 1e-3 }, { tfName: "data_format", name: "dataFormat", type: "string", notSupported: true }] }, { tfOpName: "FusedBatchNormV3", category: "normalization", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "scale", type: "tensor" }, { start: 2, name: "offset", type: "tensor" }, { start: 3, name: "mean", type: "tensor" }, { start: 4, name: "variance", type: "tensor" }], attrs: [{ tfName: "epsilon", name: "epsilon", type: "number", defaultValue: 1e-3 }, { tfName: "data_format", name: "dataFormat", type: "string", notSupported: true }] }, { tfOpName: "LRN", category: "normalization", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "depth_radius", name: "radius", type: "number", defaultValue: 5 }, { tfName: "bias", name: "bias", type: "number", defaultValue: 1 }, { tfName: "alpha", name: "alpha", type: "number", defaultValue: 1 }, { tfName: "beta", name: "beta", type: "number", defaultValue: 0.5 }] }, { tfOpName: "Softmax", category: "normalization", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "LogSoftmax", category: "normalization", inputs: [{ start: 0, name: "x", type: "tensor" }] }];
var QC = {};
_e(QC, { json: () => _q });
var _q = [{ tfOpName: "Bincount", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "size", type: "number" }, { start: 2, name: "weights", type: "tensor" }] }, { tfOpName: "DenseBincount", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "size", type: "number" }, { start: 2, name: "weights", type: "tensor" }], attrs: [{ tfName: "binary_output", name: "binaryOutput", type: "bool" }] }, { tfOpName: "Max", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number[]" }], attrs: [{ tfName: "keep_dims", name: "keepDims", type: "bool" }] }, { tfOpName: "Mean", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number[]" }], attrs: [{ tfName: "keep_dims", name: "keepDims", type: "bool" }] }, { tfOpName: "Min", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number[]" }], attrs: [{ tfName: "keep_dims", name: "keepDims", type: "bool" }] }, { tfOpName: "Sum", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number[]" }], attrs: [{ tfName: "keep_dims", name: "keepDims", type: "bool" }] }, { tfOpName: "All", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number[]" }], attrs: [{ tfName: "keep_dims", name: "keepDims", type: "bool" }] }, { tfOpName: "Any", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number[]" }], attrs: [{ tfName: "keep_dims", name: "keepDims", type: "bool" }] }, { tfOpName: "ArgMax", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number" }] }, { tfOpName: "ArgMin", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number" }] }, { tfOpName: "Prod", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number[]" }], attrs: [{ tfName: "keep_dims", name: "keepDims", type: "bool" }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Cumprod", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number" }], attrs: [{ tfName: "exclusive", name: "exclusive", type: "bool" }, { tfName: "reverse", name: "reverse", type: "bool" }] }, { tfOpName: "Cumsum", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number" }], attrs: [{ tfName: "exclusive", name: "exclusive", type: "bool" }, { tfName: "reverse", name: "reverse", type: "bool" }] }];
var eE = {};
_e(eE, { json: () => Aq });
var Aq = [{ tfOpName: "ConcatV2", category: "slice_join", inputs: [{ start: 0, end: -1, name: "tensors", type: "tensors" }, { start: -1, name: "axis", type: "number" }], attrs: [{ tfName: "N", name: "n", type: "number", defaultValue: 2 }] }, { tfOpName: "Concat", category: "slice_join", inputs: [{ start: 1, end: 0, name: "tensors", type: "tensors" }, { start: 0, name: "axis", type: "number" }], attrs: [{ tfName: "N", name: "n", type: "number", defaultValue: 2 }] }, { tfOpName: "GatherV2", category: "slice_join", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "indices", type: "tensor" }, { start: 2, name: "axis", type: "number", defaultValue: 0 }], attrs: [{ tfName: "batch_dims", name: "batchDims", type: "number", defaultValue: 0 }] }, { tfOpName: "Gather", category: "slice_join", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "indices", type: "tensor" }], attrs: [{ tfName: "validate_indices", name: "validateIndices", type: "bool", notSupported: true }] }, { tfOpName: "Reverse", category: "slice_join", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "dims", type: "bool[]" }] }, { tfOpName: "ReverseV2", category: "slice_join", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number[]" }] }, { tfOpName: "Slice", category: "slice_join", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "begin", type: "number[]" }, { start: 2, name: "size", type: "number[]" }] }, { tfOpName: "StridedSlice", category: "slice_join", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "begin", type: "number[]" }, { start: 2, name: "end", type: "number[]" }, { start: 3, name: "strides", type: "number[]" }], attrs: [{ tfName: "begin_mask", name: "beginMask", type: "number", defaultValue: 0 }, { tfName: "end_mask", name: "endMask", type: "number", defaultValue: 0 }, { tfName: "new_axis_mask", name: "newAxisMask", type: "number", defaultValue: 0 }, { tfName: "ellipsis_mask", name: "ellipsisMask", type: "number", defaultValue: 0 }, { tfName: "shrink_axis_mask", name: "shrinkAxisMask", type: "number", defaultValue: 0 }] }, { tfOpName: "Pack", category: "slice_join", inputs: [{ start: 0, end: 0, name: "tensors", type: "tensors" }], attrs: [{ tfName: "axis", name: "axis", type: "number", defaultValue: 0 }] }, { tfOpName: "Unpack", category: "slice_join", inputs: [{ start: 0, name: "tensor", type: "tensor" }], attrs: [{ tfName: "axis", name: "axis", type: "number", defaultValue: 0 }, { tfName: "num", name: "num", type: "number", defaultValue: 0, notSupported: true }] }, { tfOpName: "Tile", category: "slice_join", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "reps", type: "number[]" }] }, { tfOpName: "Split", category: "slice_join", inputs: [{ start: 0, name: "axis", type: "number", defaultValue: 0 }, { start: 1, name: "x", type: "tensor" }], attrs: [{ tfName: "num_split", name: "numOrSizeSplits", type: "number", defaultValue: 1 }] }, { tfOpName: "SplitV", category: "slice_join", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "numOrSizeSplits", type: "number[]" }, { start: 2, name: "axis", type: "number", defaultValue: 0 }] }, { tfOpName: "ScatterNd", category: "slice_join", inputs: [{ start: 0, name: "indices", type: "tensor" }, { start: 1, name: "values", type: "tensor" }, { start: 2, name: "shape", type: "number[]" }] }, { tfOpName: "GatherNd", category: "slice_join", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "indices", type: "tensor" }] }, { tfOpName: "SparseToDense", category: "slice_join", inputs: [{ start: 0, name: "sparseIndices", type: "tensor" }, { start: 1, name: "outputShape", type: "number[]" }, { start: 2, name: "sparseValues", type: "tensor" }, { start: 3, name: "defaultValue", type: "tensor" }], attrs: [{ tfName: "validate_indices", name: "validateIndices", type: "bool", defaultValue: false, notSupported: true }] }, { tfOpName: "TensorScatterUpdate", category: "slice_join", inputs: [{ start: 0, name: "tensor", type: "tensor" }, { start: 1, name: "indices", type: "tensor" }, { start: 2, name: "values", type: "tensor" }] }];
var tE = {};
_e(tE, { json: () => Fq });
var Fq = [{ tfOpName: "SparseFillEmptyRows", category: "sparse", inputs: [{ start: 0, name: "indices", type: "tensor" }, { start: 1, name: "values", type: "tensor" }, { start: 2, name: "denseShape", type: "tensor" }, { start: 3, name: "defaultValue", type: "tensor" }] }, { tfOpName: "SparseReshape", category: "sparse", inputs: [{ start: 0, name: "inputIndices", type: "tensor" }, { start: 1, name: "inputShape", type: "tensor" }, { start: 2, name: "newShape", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "SparseSegmentMean", category: "sparse", inputs: [{ start: 0, name: "data", type: "tensor" }, { start: 1, name: "indices", type: "tensor" }, { start: 2, name: "segmentIds", type: "tensor" }] }, { tfOpName: "SparseSegmentSum", category: "sparse", inputs: [{ start: 0, name: "data", type: "tensor" }, { start: 1, name: "indices", type: "tensor" }, { start: 2, name: "segmentIds", type: "tensor" }] }];
var nE = {};
_e(nE, { json: () => $q });
var $q = [{ tfOpName: "FFT", category: "spectral", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "IFFT", category: "spectral", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "RFFT", category: "spectral", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "fft_length", type: "number", notSupported: true }] }, { tfOpName: "IRFFT", category: "spectral", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "fft_length", type: "number", notSupported: true }] }];
var aE = {};
_e(aE, { json: () => Dq });
var Dq = [{ tfOpName: "StaticRegexReplace", category: "string", inputs: [{ start: 0, name: "input", type: "tensor" }], attrs: [{ tfName: "pattern", name: "pattern", type: "string" }, { tfName: "rewrite", name: "rewrite", type: "string" }, { tfName: "replace_global", name: "replaceGlobal", type: "bool" }] }, { tfOpName: "StringNGrams", category: "string", inputs: [{ start: 0, name: "data", type: "tensor" }, { start: 1, name: "dataSplits", type: "tensor" }], attrs: [{ tfName: "separator", name: "separator", type: "string" }, { tfName: "ngram_widths", name: "nGramWidths", type: "number[]" }, { tfName: "left_pad", name: "leftPad", type: "string" }, { tfName: "right_pad", name: "rightPad", type: "string" }, { tfName: "pad_width", name: "padWidth", type: "number" }, { tfName: "preserve_short_sequences", name: "preserveShortSequences", type: "bool" }], outputs: ["ngrams", "ngrams_splits"] }, { tfOpName: "StringSplit", category: "string", inputs: [{ start: 0, name: "input", type: "tensor" }, { start: 1, name: "delimiter", type: "tensor" }], attrs: [{ tfName: "skip_empty", name: "skipEmpty", type: "bool" }], outputs: ["indices", "values", "shape"] }, { tfOpName: "StringToHashBucketFast", category: "string", inputs: [{ start: 0, name: "input", type: "tensor" }], attrs: [{ tfName: "num_buckets", name: "numBuckets", type: "number" }] }];
var rE = {};
_e(rE, { json: () => Rq });
var Rq = [{ tfOpName: "Cast", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "SrcT", name: "sdtype", type: "dtype", notSupported: true }, { tfName: "DstT", name: "dtype", type: "dtype" }] }, { tfOpName: "ExpandDims", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number" }] }, { tfOpName: "MirrorPad", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "padding", type: "number[]" }], attrs: [{ tfName: "mode", name: "mode", type: "string" }] }, { tfOpName: "Pad", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "padding", type: "number[]" }], attrs: [{ tfName: "constant_value", name: "constantValue", type: "number", defaultValue: 0 }] }, { tfOpName: "PadV2", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "padding", type: "number[]" }, { start: 2, name: "constantValue", type: "number", defaultValue: 0 }] }, { tfOpName: "Reshape", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "shape", type: "number[]" }] }, { tfOpName: "EnsureShape", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "shape", type: "number[]" }] }, { tfOpName: "Squeeze", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "axis", tfDeprecatedName: "squeeze_dims", name: "axis", type: "number[]" }] }, { tfOpName: "SpaceToBatchND", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "blockShape", type: "number[]" }, { start: 2, name: "paddings", type: "number[]" }] }, { tfOpName: "BatchToSpaceND", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "blockShape", type: "number[]" }, { start: 2, name: "crops", type: "number[]" }] }, { tfOpName: "DepthToSpace", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "block_size", name: "blockSize", type: "number" }, { tfName: "data_format", name: "dataFormat", type: "string" }] }, { tfOpName: "BroadcastTo", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "shape", type: "number[]" }], attrs: [] }, { tfOpName: "BroadcastArgs", category: "transformation", inputs: [{ start: 0, name: "s0", type: "tensor" }, { start: 1, name: "s1", type: "tensor" }], attrs: [] }];
var zI = class {
  static get Instance() {
    return this._instance || (this._instance = new this());
  }
  constructor() {
    let e17 = [WC, BC, VC, UC, GC, HC, jC, qC, KC, XC, YC, ZC, JC, QC, eE, tE, nE, aE, rE], t = [].concat(...e17.map((n) => n.json));
    this.opMappers = t.reduce((n, a) => (n[a.tfOpName] = a, n), {});
  }
  transformGraph(e17, t = {}) {
    let n = e17.node, a = [], r = [], s = [], i = n.reduce((m, f) => (m[f.name] = this.mapNode(f), f.op.startsWith("Placeholder") ? a.push(m[f.name]) : f.op === "Const" ? r.push(m[f.name]) : (f.input == null || f.input.length === 0) && s.push(m[f.name]), m), {}), o = [], l = [], u = {}, p = {};
    t != null && (u = this.mapSignatureEntries(t.inputs), p = this.mapSignatureEntries(t.outputs));
    let d = Object.keys(i);
    d.forEach((m) => {
      let f = i[m];
      f.inputNames.forEach((g, b) => {
        let [y, , x] = Sr(g), v = i[y];
        if (v.outputs != null) {
          let I = v.outputs.indexOf(x);
          if (I !== -1) {
            let N = `${y}:${I}`;
            f.inputNames[b] = N;
          }
        }
        f.inputs.push(v), v.children.push(f);
      });
    }), Object.keys(p).length === 0 ? d.forEach((m) => {
      let f = i[m];
      f.children.length === 0 && l.push(f);
    }) : Object.keys(p).forEach((m) => {
      let [f] = Sr(m), g = i[f];
      g != null && (g.signatureKey = p[m], l.push(g));
    }), Object.keys(u).length > 0 ? Object.keys(u).forEach((m) => {
      let [f] = Sr(m), g = i[f];
      g && (g.signatureKey = u[m], o.push(g));
    }) : o = a;
    let c = {};
    e17.library != null && e17.library.function != null && (c = e17.library.function.reduce((m, f) => (m[f.signature.name] = this.mapFunction(f), m), {}));
    let h = { nodes: i, inputs: o, outputs: l, weights: r, placeholders: a, signature: t, functions: c };
    return s.length > 0 && (h.initNodes = s), h;
  }
  mapSignatureEntries(e17) {
    return Object.keys(e17 || {}).reduce((t, n) => (t[e17[n].name] = n, t), {});
  }
  mapNode(e17) {
    let t = zC(e17.op) || this.opMappers[e17.op] || {};
    e17.attr == null && (e17.attr = {});
    let n = { name: e17.name, op: e17.op, category: t.category, inputNames: (e17.input || []).map((a) => a.startsWith("^") ? a.slice(1) : a), inputs: [], children: [], inputParams: {}, attrParams: {}, rawAttrs: e17.attr, outputs: t.outputs };
    return t.inputs != null && (n.inputParams = t.inputs.reduce((a, r) => (a[r.name] = { type: r.type, inputIndexStart: r.start, inputIndexEnd: r.end }, a), {})), t.attrs != null && (n.attrParams = t.attrs.reduce((a, r) => {
      let s = r.type, i;
      switch (r.type) {
        case "string":
          i = Xx(e17.attr, r.tfName, r.defaultValue), i === void 0 && r.tfDeprecatedName && (i = Xx(e17.attr, r.tfDeprecatedName, r.defaultValue));
          break;
        case "string[]":
          i = nv(e17.attr, r.tfName, r.defaultValue), i === void 0 && r.tfDeprecatedName && (i = nv(e17.attr, r.tfDeprecatedName, r.defaultValue));
          break;
        case "number":
          i = Zx(e17.attr, r.tfName, r.defaultValue || 0), i === void 0 && r.tfDeprecatedName && (i = Zx(e17.attr, r.tfDeprecatedName, r.defaultValue));
          break;
        case "number[]":
          i = tv(e17.attr, r.tfName, r.defaultValue), i === void 0 && r.tfDeprecatedName && (i = tv(e17.attr, r.tfDeprecatedName, r.defaultValue));
          break;
        case "bool":
          i = Yx(e17.attr, r.tfName, r.defaultValue), i === void 0 && r.tfDeprecatedName && (i = Yx(e17.attr, r.tfDeprecatedName, r.defaultValue));
          break;
        case "bool[]":
          i = rv(e17.attr, r.tfName, r.defaultValue), i === void 0 && r.tfDeprecatedName && (i = rv(e17.attr, r.tfDeprecatedName, r.defaultValue));
          break;
        case "shape":
          i = ev(e17.attr, r.tfName, r.defaultValue), i === void 0 && r.tfDeprecatedName && (i = ev(e17.attr, r.tfDeprecatedName, r.defaultValue));
          break;
        case "shape[]":
          i = av(e17.attr, r.tfName, r.defaultValue), i === void 0 && r.tfDeprecatedName && (i = av(e17.attr, r.tfDeprecatedName, r.defaultValue));
          break;
        case "dtype":
          i = Jx(e17.attr, r.tfName, r.defaultValue), i === void 0 && r.tfDeprecatedName && (i = Jx(e17.attr, r.tfDeprecatedName, r.defaultValue));
          break;
        case "dtype[]":
          i = Qx(e17.attr, r.tfName, r.defaultValue), i === void 0 && r.tfDeprecatedName && (i = Qx(e17.attr, r.tfDeprecatedName, r.defaultValue));
          break;
        case "func":
          i = WI(e17.attr, r.tfName, r.defaultValue), i === void 0 && r.tfDeprecatedName && (i = WI(e17.attr, r.tfDeprecatedName, r.defaultValue));
          break;
        case "tensor":
        case "tensors":
          break;
        default:
          throw new Error(`Unsupported param type: ${r.type} for op: ${e17.op}`);
      }
      return a[r.name] = { value: i, type: s }, a;
    }, {})), n;
  }
  mapFunction(e17) {
    let t = e17.nodeDef, n = [], a = [], r = {};
    t != null && (r = t.reduce((u, p) => (u[p.name] = this.mapNode(p), p.op === "Const" && a.push(u[p.name]), u), {}));
    let s = [], i = [];
    e17.signature.inputArg.forEach((u) => {
      let [p] = Sr(u.name), d = { name: p, op: "Placeholder", inputs: [], inputNames: [], category: "graph", inputParams: {}, attrParams: { dtype: { value: A1(u.type), type: "dtype" } }, children: [] };
      d.signatureKey = u.name, s.push(d), r[p] = d;
    }), Object.keys(r).forEach((u) => {
      let p = r[u];
      p.inputNames.forEach((d, c) => {
        let [h, , m] = Sr(d), f = r[h];
        if (f.outputs != null) {
          let g = f.outputs.indexOf(m);
          if (g !== -1) {
            let b = `${h}:${g}`;
            p.inputNames[c] = b;
          }
        }
        p.inputs.push(f), f.children.push(p);
      });
    });
    let o = e17.ret;
    e17.signature.outputArg.forEach((u) => {
      let [p, d] = Sr(o[u.name]), c = r[p];
      c != null && (c.defaultOutput = d, i.push(c));
    });
    let l = this.mapArgsToSignature(e17);
    return { nodes: r, inputs: s, outputs: i, weights: a, placeholders: n, signature: l };
  }
  mapArgsToSignature(e17) {
    return { methodName: e17.signature.name, inputs: e17.signature.inputArg.reduce((t, n) => (t[n.name] = this.mapArgToTensorInfo(n), t), {}), outputs: e17.signature.outputArg.reduce((t, n) => (t[n.name] = this.mapArgToTensorInfo(n, e17.ret), t), {}) };
  }
  mapArgToTensorInfo(e17, t) {
    let n = e17.name;
    return t != null && (n = t[n]), { name: n, dtype: e17.type };
  }
};
function Mq(e17) {
  let t = G().global;
  if (typeof t.atob != "undefined") return t.atob(e17);
  if (typeof Buffer != "undefined") return new Buffer(e17, "base64").toString();
  throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()");
}
function sE(e17, t) {
  let n = Array.isArray(e17) ? String.fromCharCode.apply(null, e17) : Mq(e17);
  return t ? n : n.toLowerCase();
}
function Xx(e17, t, n, a = false) {
  let r = e17[t];
  return r != null ? sE(r.s, a) : n;
}
function Yx(e17, t, n) {
  let a = e17[t];
  return a ? a.b : n;
}
function Zx(e17, t, n) {
  let a = e17[t] || {}, r = a.i != null ? a.i : a.f != null ? a.f : n;
  return typeof r == "number" ? r : parseInt(r, 10);
}
function A1(e17) {
  switch (typeof e17 == "string" && (e17 = qn[e17]), e17) {
    case qn.DT_FLOAT:
    case qn.DT_HALF:
      return "float32";
    case qn.DT_INT32:
    case qn.DT_INT64:
    case qn.DT_INT8:
    case qn.DT_UINT8:
      return "int32";
    case qn.DT_BOOL:
      return "bool";
    case qn.DT_DOUBLE:
      return "float32";
    case qn.DT_STRING:
      return "string";
    case qn.DT_COMPLEX64:
    case qn.DT_COMPLEX128:
      return "complex64";
    default:
      return null;
  }
}
function WI(e17, t, n) {
  let a = e17[t];
  return a && a.func ? a.func.name : n;
}
function Jx(e17, t, n) {
  let a = e17[t];
  return a && a.type ? A1(a.type) : n;
}
function Qx(e17, t, n) {
  let a = e17[t];
  return a && a.list && a.list.type ? a.list.type.map((r) => A1(r)) : n;
}
function iE(e17) {
  if (!e17.unknownRank) return e17.dim != null ? e17.dim.map((t) => typeof t.size == "number" ? t.size : parseInt(t.size, 10)) : [];
}
function ev(e17, t, n) {
  let a = e17[t];
  return a && a.shape ? iE(a.shape) : n;
}
function tv(e17, t, n) {
  let a = e17[t];
  return a ? ((a.list.f && a.list.f.length ? a.list.f : a.list.i) || []).map((r) => typeof r == "number" ? r : parseInt(r, 10)) : n;
}
function nv(e17, t, n, a = false) {
  let r = e17[t];
  return r && r.list && r.list.s ? r.list.s.map((s) => sE(s, a)) : n;
}
function av(e17, t, n) {
  let a = e17[t];
  return a && a.list && a.list.shape ? a.list.shape.map((r) => iE(r)) : n;
}
function rv(e17, t, n) {
  let a = e17[t];
  return a && a.list && a.list.b ? a.list.b : n;
}
var Oq = class {
  constructor(e17, t, n) {
    this.node = e17, this.tensorMap = t, this.context = n, this.inputs = [], this.attrs = {}, this.inputs = e17.inputNames.map((a) => this.getInput(a)), e17.rawAttrs != null && (this.attrs = Object.keys(e17.rawAttrs).reduce((a, r) => (a[r] = this.getAttr(r), a), {}));
  }
  getInput(e17) {
    return pn(e17, this.tensorMap, this.context);
  }
  getAttr(e17, t) {
    let n = this.node.rawAttrs[e17];
    if (n.tensor != null) return pn(e17, this.tensorMap, this.context);
    if (n.i != null || n.f != null) return Zx(this.node.rawAttrs, e17, t);
    if (n.s != null) return Xx(this.node.rawAttrs, e17, t);
    if (n.b != null) return Yx(this.node.rawAttrs, e17, t);
    if (n.shape != null) return ev(this.node.rawAttrs, e17, t);
    if (n.type != null) return Jx(this.node.rawAttrs, e17, t);
    if (n.list != null) {
      if (n.list.i != null || n.list.f != null) return tv(this.node.rawAttrs, e17, t);
      if (n.list.s != null) return nv(this.node.rawAttrs, e17, t);
      if (n.list.shape != null) return av(this.node.rawAttrs, e17, t);
      if (n.list.b != null) return rv(this.node.rawAttrs, e17, t);
      if (n.list.type != null) return Qx(this.node.rawAttrs, e17, t);
    }
    return t;
  }
};
var on = {};
_e(on, { OP_SCOPE_SUFFIX: () => Fv, abs: () => Lt, acos: () => Pv, acosh: () => Lv, add: () => X, addN: () => vN, all: () => Lm, any: () => yc, argMax: () => di, argMin: () => zv, asin: () => Wv, asinh: () => Bv, atan: () => Vv, atan2: () => Uv, atanh: () => Gv, avgPool: () => ya, avgPool3d: () => jv, basicLSTMCell: () => SN, batchNorm: () => Ns, batchNorm2d: () => qv, batchNorm3d: () => Kv, batchNorm4d: () => Xv, batchToSpaceND: () => id, bincount: () => Yv, bitwiseAnd: () => NN, booleanMaskAsync: () => mT, broadcastArgs: () => TN, broadcastTo: () => ai, buffer: () => Oe, cast: () => re, ceil: () => Zv, clipByValue: () => an, clone: () => sr, complex: () => _r, concat: () => et, concat1d: () => Jv, concat2d: () => Qv, concat3d: () => ew, concat4d: () => tw, conv1d: () => zm, conv2d: () => $t, conv2dTranspose: () => Wm, conv3d: () => aw, conv3dTranspose: () => rw, cos: () => od, cosh: () => Bm, cosineWindow: () => pf, cumprod: () => wc, cumsum: () => Vm, denseBincount: () => Xh, depthToSpace: () => sw, depthwiseConv2d: () => Ts, diag: () => EN, dilation2d: () => iw, div: () => he, divNoNan: () => ow, dot: () => lw, dropout: () => Pw, einsum: () => Zs, elu: () => Qu, enclosingPowerOfTwo: () => Lw, ensureShape: () => AN, equal: () => Jn, erf: () => Um, euclideanNorm: () => cw, exp: () => dn, expandDims: () => Gt, expm1: () => dw, eye: () => Gm, fft: () => bd, fill: () => yn, floor: () => tp, floorDiv: () => Pm, fused: () => Vl, gather: () => np, gatherND: () => yT, greater: () => Cn, greaterEqual: () => $r, ifft: () => Bl, imag: () => ld, image: () => Zn, inTopKAsync: () => xT, irfft: () => af, isFinite: () => hw, isInf: () => mw, isNaN: () => fw, leakyRelu: () => ud, less: () => Pl, lessEqual: () => Cs, linalg: () => Bw, linspace: () => MN, localResponseNormalization: () => gw, log: () => Qn, log1p: () => pd, logSigmoid: () => bw, logSoftmax: () => jm, logSumExp: () => cd, logicalAnd: () => _a, logicalNot: () => dd, logicalOr: () => qm, logicalXor: () => yw, losses: () => FT, lowerBound: () => PN, matMul: () => $e, max: () => ma, maxPool: () => Dt, maxPool3d: () => xw, maxPoolWithArgmax: () => LN, maximum: () => hr, mean: () => Ct, meshgrid: () => zN, min: () => Ol, minimum: () => ds, mirrorPad: () => vw, mod: () => ww, moments: () => hd, movingAverage: () => fT, mul: () => z, multiRNNCell: () => WN, multinomial: () => BN, neg: () => yt, norm: () => ep, notEqual: () => fi, oneHot: () => Ll, ones: () => Pn, onesLike: () => ea, op: () => L, outerProduct: () => VN, pad: () => xa, pad1d: () => UN, pad2d: () => GN, pad3d: () => HN, pad4d: () => jN, pool: () => kw, pow: () => ur, prelu: () => fd, print: () => Ov, prod: () => Iw, raggedGather: () => qN, raggedRange: () => KN, raggedTensorToTensor: () => XN, rand: () => YN, randomGamma: () => eT, randomNormal: () => Xm, randomStandardNormal: () => tT, randomUniform: () => Es, randomUniformInt: () => nT, range: () => gi, real: () => zl, reciprocal: () => Ew, relu: () => Ke, relu6: () => Ym, reshape: () => W, reverse: () => ba, reverse1d: () => aT, reverse2d: () => rT, reverse3d: () => sT, reverse4d: () => iT, rfft: () => yd, round: () => Zm, rsqrt: () => Jm, scalar: () => xe, scatterND: () => gT, searchSorted: () => Km, selu: () => Qm, separableConv2d: () => _s, setdiff1dAsync: () => oT, sigmoid: () => ha, sign: () => _w, signal: () => AT, sin: () => ef, sinh: () => tf, slice: () => Ve, slice1d: () => gd, slice2d: () => nf, slice3d: () => Ho, slice4d: () => Wl, softmax: () => qa, softplus: () => Go, spaceToBatchND: () => md, sparse: () => $T, sparseToDense: () => bT, spectral: () => _T, split: () => Ln, sqrt: () => rn, square: () => pt, squaredDifference: () => rf, squeeze: () => As, stack: () => At, step: () => jo, stridedSlice: () => Aw, string: () => DT, sub: () => pe, sum: () => fe, tan: () => Fw, tanh: () => cs, tensor: () => bn, tensor1d: () => je, tensor2d: () => Ea, tensor3d: () => xd, tensor4d: () => Fa, tensor5d: () => lT, tensor6d: () => uT, tensorScatterUpdate: () => cT, tile: () => On, topk: () => Dw, transpose: () => De, truncatedNormal: () => lf, unique: () => Rw, unsortedSegmentSum: () => uf, unstack: () => dt, upperBound: () => dT, variable: () => Mw, where: () => nn, whereAsync: () => Ow, zeros: () => It, zerosLike: () => qe });
var Pq = (e17, t, n, a = on) => {
  switch (e17.op) {
    case "BiasAdd":
    case "AddV2":
    case "Add":
      return [a.add(k("a", e17, t, n), k("b", e17, t, n))];
    case "AddN":
      return [a.addN(k("tensors", e17, t, n))];
    case "FloorMod":
    case "Mod":
      return [a.mod(k("a", e17, t, n), k("b", e17, t, n))];
    case "Mul":
      return [a.mul(k("a", e17, t, n), k("b", e17, t, n))];
    case "RealDiv":
    case "Div":
      return [a.div(k("a", e17, t, n), k("b", e17, t, n))];
    case "DivNoNan":
      return [a.divNoNan(k("a", e17, t, n), k("b", e17, t, n))];
    case "FloorDiv":
      return [a.floorDiv(k("a", e17, t, n), k("b", e17, t, n))];
    case "Sub":
      return [a.sub(k("a", e17, t, n), k("b", e17, t, n))];
    case "Minimum":
      return [a.minimum(k("a", e17, t, n), k("b", e17, t, n))];
    case "Maximum":
      return [a.maximum(k("a", e17, t, n), k("b", e17, t, n))];
    case "Pow":
      return [a.pow(k("a", e17, t, n), k("b", e17, t, n))];
    case "SquaredDifference":
      return [a.squaredDifference(k("a", e17, t, n), k("b", e17, t, n))];
    default:
      throw TypeError(`Node type ${e17.op} is not implemented`);
  }
};
var Lq = (e17, t, n, a = on) => {
  switch (e17.op) {
    case "Abs":
    case "ComplexAbs":
      return [a.abs(k("x", e17, t, n))];
    case "Acos":
      return [a.acos(k("x", e17, t, n))];
    case "Acosh":
      return [a.acosh(k("x", e17, t, n))];
    case "Asin":
      return [a.asin(k("x", e17, t, n))];
    case "Asinh":
      return [a.asinh(k("x", e17, t, n))];
    case "Atan":
      return [a.atan(k("x", e17, t, n))];
    case "Atan2":
      return [a.atan2(k("x", e17, t, n), k("y", e17, t, n))];
    case "Atanh":
      return [a.atanh(k("x", e17, t, n))];
    case "Ceil":
      return [a.ceil(k("x", e17, t, n))];
    case "Complex":
      return [a.complex(k("real", e17, t, n), k("imag", e17, t, n))];
    case "Cos":
      return [a.cos(k("x", e17, t, n))];
    case "Cosh":
      return [a.cosh(k("x", e17, t, n))];
    case "Elu":
      return [a.elu(k("x", e17, t, n))];
    case "Erf":
      return [a.erf(k("x", e17, t, n))];
    case "Exp":
      return [a.exp(k("x", e17, t, n))];
    case "Expm1":
      return [a.expm1(k("x", e17, t, n))];
    case "Floor":
      return [a.floor(k("x", e17, t, n))];
    case "Log":
      return [a.log(k("x", e17, t, n))];
    case "Log1p":
      return [a.log1p(k("x", e17, t, n))];
    case "Imag":
      return [a.imag(k("x", e17, t, n))];
    case "Neg":
      return [a.neg(k("x", e17, t, n))];
    case "Reciprocal":
      return [a.reciprocal(k("x", e17, t, n))];
    case "Real":
      return [a.real(k("x", e17, t, n))];
    case "Relu":
      return [a.relu(k("x", e17, t, n))];
    case "Round":
      return [a.round(k("x", e17, t, n))];
    case "Selu":
      return [a.selu(k("x", e17, t, n))];
    case "Sigmoid":
      return [a.sigmoid(k("x", e17, t, n))];
    case "Sin":
      return [a.sin(k("x", e17, t, n))];
    case "Sign":
      return [a.sign(k("x", e17, t, n))];
    case "Sinh":
      return [a.sinh(k("x", e17, t, n))];
    case "Softplus":
      return [a.softplus(k("x", e17, t, n))];
    case "Sqrt":
      return [a.sqrt(k("x", e17, t, n))];
    case "Square":
      return [a.square(k("x", e17, t, n))];
    case "Tanh":
      return [a.tanh(k("x", e17, t, n))];
    case "Tan":
      return [a.tan(k("x", e17, t, n))];
    case "ClipByValue":
      return [a.clipByValue(k("x", e17, t, n), k("clipValueMin", e17, t, n), k("clipValueMax", e17, t, n))];
    case "Relu6":
      return [a.relu6(k("x", e17, t, n))];
    case "Rsqrt":
      return [a.rsqrt(pn(e17.inputNames[0], t, n))];
    case "LeakyRelu":
      return [a.leakyRelu(k("x", e17, t, n), k("alpha", e17, t, n))];
    case "Prelu":
      return [a.prelu(k("x", e17, t, n), k("alpha", e17, t, n))];
    case "IsNan":
      return [a.isNaN(pn(e17.inputNames[0], t, n))];
    case "IsInf":
      return [a.isInf(pn(e17.inputNames[0], t, n))];
    case "IsFinite":
      return [a.isFinite(pn(e17.inputNames[0], t, n))];
    default:
      throw TypeError(`Node type ${e17.op} is not implemented`);
  }
};
function Ca(e17, t, n = "") {
  if (!(typeof e17 == "number" || typeof t == "number")) {
    w.assert(e17.length === t.length, () => n + ` Shapes ${e17} and ${t} must match`);
    for (let a = 0; a < e17.length; a++) {
      let r = e17[a], s = t[a];
      w.assert(r < 0 || s < 0 || r === s, () => n + ` Shapes ${e17} and ${t} must match`);
    }
  }
}
function BI(e17) {
  return !(typeof e17 == "number" || e17.some((t) => t < 0));
}
function Zp(e17, t, n) {
  let a = sv(e17, n), r = !BI(a);
  if (r && t.length === 0) throw new Error(`Tried to calculate elements of an empty list with non-fully-defined elementShape: ${a}`);
  if (r && t.forEach((s) => {
    a = sv(s.shape, a);
  }), !BI(a)) throw new Error(`Non-fully-defined elementShape: ${a}`);
  return a;
}
function sv(e17, t) {
  if (typeof e17 == "number") return t;
  if (typeof t == "number") return e17;
  if (e17.length !== t.length) throw new Error(`Incompatible ranks during merge: ${e17} vs. ${t}`);
  let n = [];
  for (let a = 0; a < e17.length; ++a) {
    let r = e17[a], s = t[a];
    if (r >= 0 && s >= 0 && r !== s) throw new Error(`Incompatible shape during merge: ${e17} vs. ${t}`);
    n[a] = r >= 0 ? r : s;
  }
  return n;
}
var zq = class {
  constructor(e17, t, n, a, r, s, i) {
    this.name = e17, this.dtype = t, this.maxSize = n, this.elementShape = a, this.identicalElementShapes = r, this.dynamicSize = s, this.clearAfterRead = i, this.tensors = [], this.closed_ = false, this.idTensor = xe(0), Ht(this.idTensor);
  }
  get id() {
    return this.idTensor.id;
  }
  get closed() {
    return this.closed_;
  }
  clearAndClose(e17) {
    this.tensors.forEach((t) => {
      (e17 == null || !e17.has(t.tensor.id)) && t.tensor.dispose();
    }), this.tensors = [], this.closed_ = true, this.idTensor.dispose();
  }
  size() {
    return this.tensors.length;
  }
  read(e17) {
    if (this.closed_) throw new Error(`TensorArray ${this.name} has already been closed.`);
    if (e17 < 0 || e17 >= this.size()) throw new Error(`Tried to read from index ${e17}, but array size is: ${this.size()}`);
    let t = this.tensors[e17];
    if (t.cleared) throw new Error(`TensorArray ${this.name}: Could not read index ${e17} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);
    return this.clearAfterRead && (t.cleared = true), t.read = true, t.tensor;
  }
  readMany(e17) {
    return e17.map((t) => this.read(t));
  }
  write(e17, t) {
    if (this.closed_) throw new Error(`TensorArray ${this.name} has already been closed.`);
    if (e17 < 0 || !this.dynamicSize && e17 >= this.maxSize) throw new Error(`Tried to write to index ${e17}, but array is not resizeable and size is: ${this.maxSize}`);
    let n = this.tensors[e17] || {};
    if (t.dtype !== this.dtype) throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e17},
          because the value dtype is ${t.dtype}, but TensorArray dtype is ${this.dtype}.`);
    if (this.size() === 0 && (this.elementShape == null || this.elementShape.length === 0) && (this.elementShape = t.shape), Ca(this.elementShape, t.shape, `TensorArray ${this.name}: Could not write to TensorArray index ${e17}.`), n.read) throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e17}, because it has already been read.`);
    if (n.written) throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e17}, because it has already been written.`);
    n.tensor = t, Ht(t), n.written = true, this.tensors[e17] = n;
  }
  writeMany(e17, t) {
    if (e17.length !== t.length) throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${e17.length} is not the same as tensors size: ${t.length}.`);
    e17.forEach((n, a) => this.write(n, t[a]));
  }
  gather(e17, t) {
    if (t && t !== this.dtype) throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${t}`);
    if (e17) e17 = e17.slice(0, this.size());
    else {
      e17 = [];
      for (let a = 0; a < this.size(); a++) e17.push(a);
    }
    if (e17.length === 0) return bn([], [0].concat(this.elementShape));
    let n = this.readMany(e17);
    return Ca(this.elementShape, n[0].shape, "TensorArray shape mismatch: "), At(n, 0);
  }
  concat(e17) {
    if (e17 && e17 !== this.dtype) throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${e17}`);
    if (this.size() === 0) return bn([], [0].concat(this.elementShape));
    let t = [];
    for (let a = 0; a < this.size(); a++) t.push(a);
    let n = this.readMany(t);
    return Ca(this.elementShape, n[0].shape, `TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${n[0].shape})`), et(n, 0);
  }
  scatter(e17, t) {
    if (t.dtype !== this.dtype) throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);
    if (e17.length !== t.shape[0]) throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e17.length} vs. ${t.shape[0]}`);
    let n = Math.max(...e17);
    if (!this.dynamicSize && n >= this.maxSize) throw new Error(`Max index must be < array size (${n}  vs. ${this.maxSize})`);
    this.writeMany(e17, dt(t, 0));
  }
  split(e17, t) {
    if (t.dtype !== this.dtype) throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);
    let n = 0, a = e17.map((o) => (n += o, n));
    if (n !== t.shape[0]) throw new Error(`Expected sum of lengths to be equal to
          tensor.shape[0], but sum of lengths is
        ${n}, and tensor's shape is: ${t.shape}`);
    if (!this.dynamicSize && e17.length !== this.maxSize) throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${e17.length}), and the TensorArray is not marked as dynamically resizeable`);
    let r = n === 0 ? 0 : t.size / n, s = [];
    O(() => {
      t = W(t, [1, n, r]);
      for (let o = 0; o < e17.length; ++o) {
        let l = [0, o === 0 ? 0 : a[o - 1], 0], u = [1, e17[o], r];
        s[o] = W(Ve(t, l, u), this.elementShape);
      }
      return s;
    });
    let i = [];
    for (let o = 0; o < e17.length; o++) i[o] = o;
    this.writeMany(i, s);
  }
};
var Lf = class iv {
  get id() {
    return this.idTensor.id;
  }
  constructor(t, n, a, r = -1) {
    this.tensors = t, this.elementShape = n, this.elementDtype = a, t != null && t.forEach((s) => {
      if (a !== s.dtype) throw new Error(`Invalid data types; op elements ${a}, but list elements ${s.dtype}`);
      Ca(n, s.shape, "TensorList shape mismatch: "), Ht(s);
    }), this.idTensor = xe(0), this.maxNumElements = r, Ht(this.idTensor);
  }
  copy() {
    return new iv([...this.tensors], this.elementShape, this.elementDtype);
  }
  clearAndClose(t) {
    this.tensors.forEach((n) => {
      (t == null || !t.has(n.id)) && n.dispose();
    }), this.tensors.length = 0, this.idTensor.dispose();
  }
  size() {
    return this.tensors.length;
  }
  stack(t, n, a = -1) {
    if (n !== this.elementDtype) throw new Error(`Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`);
    if (a !== -1 && this.tensors.length !== a) throw new Error(`Operation expected a list with ${a} elements but got a list with ${this.tensors.length} elements.`);
    Ca(t, this.elementShape, "TensorList shape mismatch: ");
    let r = Zp(this.elementShape, this.tensors, t);
    return O(() => {
      let s = this.tensors.map((i) => W(i, r));
      return At(s, 0);
    });
  }
  popBack(t, n) {
    if (n !== this.elementDtype) throw new Error(`Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`);
    if (this.size() === 0) throw new Error("Trying to pop from an empty list.");
    let a = Zp(this.elementShape, this.tensors, t), r = this.tensors.pop();
    return r.kept = false, Ca(r.shape, t, "TensorList shape mismatch: "), W(r, a);
  }
  pushBack(t) {
    if (t.dtype !== this.elementDtype) throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);
    if (Ca(t.shape, this.elementShape, "TensorList shape mismatch: "), this.maxNumElements === this.size()) throw new Error("Trying to push element into a full list.");
    Ht(t), this.tensors.push(t);
  }
  resize(t) {
    if (t < 0) throw new Error(`TensorListResize expects size to be non-negative. Got: ${t}`);
    if (this.maxNumElements !== -1 && t > this.maxNumElements) throw new Error(`TensorListResize input size ${t} is greater maxNumElement ${this.maxNumElements}.`);
    let n = new iv([], this.elementShape, this.elementDtype, this.maxNumElements);
    n.tensors.length = t;
    for (let a = 0; a < Math.min(this.tensors.length, t); ++a) n.tensors[a] = this.tensors[a];
    return n;
  }
  getItem(t, n, a) {
    if (a !== this.elementDtype) throw new Error(`Invalid data types; op elements ${a}, but list elements ${this.elementDtype}`);
    if (t < 0 || t > this.tensors.length) throw new Error(`Trying to access element ${t} in a list with ${this.tensors.length} elements.`);
    if (this.tensors[t] == null) throw new Error(`element at index ${t} is null.`);
    Ca(this.tensors[t].shape, n, "TensorList shape mismatch: ");
    let r = Zp(this.elementShape, this.tensors, n);
    return W(this.tensors[t], r);
  }
  setItem(t, n) {
    if (n.dtype !== this.elementDtype) throw new Error(`Invalid data types; op elements ${n.dtype}, but list elements ${this.elementDtype}`);
    if (t < 0 || this.maxNumElements !== -1 && t >= this.maxNumElements) throw new Error(`Trying to set element ${t} in a list with max ${this.maxNumElements} elements.`);
    Ca(this.elementShape, n.shape, "TensorList shape mismatch: "), Ht(n), this.tensors[t] != null && (this.tensors[t].kept = false), this.tensors[t] = n;
  }
  gather(t, n, a) {
    if (n !== this.elementDtype) throw new Error(`Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`);
    Ca(this.elementShape, a, "TensorList shape mismatch: "), t = t.slice(0, this.size());
    let r = Zp(this.elementShape, this.tensors, a);
    return t.length === 0 ? bn([], [0].concat(r)) : O(() => {
      let s = t.map((i) => W(this.tensors[i], r));
      return At(s, 0);
    });
  }
  concat(t, n) {
    if (t && t !== this.elementDtype) throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${t}`);
    Ca(this.elementShape, n, "TensorList shape mismatch: ");
    let a = Zp(this.elementShape, this.tensors, n);
    return this.size() === 0 ? bn([], [0].concat(a)) : O(() => {
      let r = this.tensors.map((s) => W(s, a));
      return et(r, 0);
    });
  }
};
function Wq(e17, t, n) {
  let a = e17.dtype;
  if (e17.shape.length < 1) throw new Error(`Tensor must be at least a vector, but saw shape: ${e17.shape}`);
  if (e17.dtype !== n) throw new Error(`Invalid data types; op elements ${e17.dtype}, but list elements ${n}`);
  let r = e17.shape.slice(1);
  Ca(r, t, "TensorList shape mismatch: ");
  let s = dt(e17);
  return new Lf(s, t, a);
}
function Bq(e17, t, n, a) {
  return new Lf([], e17, t, a);
}
function Vq(e17, t, n, a) {
  if (t.length !== e17.shape[0]) throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e17.shape[0]}`);
  let r = Math.max(...t);
  if (a != null && a !== -1 && r >= a) throw new Error(`Max index must be < array size (${r}  vs. ${a})`);
  let s = new Lf([], n, e17.dtype, a), i = dt(e17, 0);
  return t.forEach((o, l) => {
    s.setItem(o, i[l]);
  }), s;
}
function Uq(e17, t, n) {
  let a = 0, r = t.map((p) => (a += p, a));
  if (a !== e17.shape[0]) throw new Error(`Expected sum of lengths to be equal to
          tensor.shape[0], but sum of lengths is
        ${a}, and tensor's shape is: ${e17.shape}`);
  let s = e17.shape.slice(1), i = sv(s, n), o = a === 0 ? 0 : e17.size / a, l = O(() => {
    let p = [];
    e17 = W(e17, [1, a, o]);
    for (let d = 0; d < t.length; ++d) {
      let c = [0, d === 0 ? 0 : r[d - 1], 0], h = [1, t[d], o];
      p[d] = W(Ve(e17, c, h), i);
    }
    return e17.dispose(), p;
  }), u = new Lf([], n, e17.dtype, t.length);
  for (let p = 0; p < l.length; p++) u.setItem(p, l[p]);
  return u;
}
var Gq = async (e17, t, n) => {
  switch (e17.op) {
    case "If":
    case "StatelessIf": {
      let a = k("thenBranch", e17, t, n), r = k("elseBranch", e17, t, n), s = k("cond", e17, t, n), i = k("args", e17, t, n);
      return (await s.data())[0] ? n.functionMap[a].executeFunctionAsync(i, n.tensorArrayMap, n.tensorListMap) : n.functionMap[r].executeFunctionAsync(i, n.tensorArrayMap, n.tensorListMap);
    }
    case "While":
    case "StatelessWhile": {
      let a = k("body", e17, t, n), r = k("cond", e17, t, n), s = k("args", e17, t, n), i = await n.functionMap[r].executeFunctionAsync(s, n.tensorArrayMap, n.tensorListMap), o = s.map((p) => p.id), l = await i[0].data();
      i.forEach((p) => {
        !p.kept && o.indexOf(p.id) === -1 && p.dispose();
      });
      let u = s;
      for (; l[0]; ) {
        let p = u;
        u = await n.functionMap[a].executeFunctionAsync(u, n.tensorArrayMap, n.tensorListMap);
        let d = u.map((h) => h.id);
        p.forEach((h) => {
          !h.kept && o.indexOf(h.id) === -1 && d.indexOf(h.id) === -1 && h.dispose();
        });
        let c = await n.functionMap[r].executeFunctionAsync(u, n.tensorArrayMap, n.tensorListMap);
        l = await c[0].data(), c.forEach((h) => {
          !h.kept && o.indexOf(h.id) === -1 && d.indexOf(h.id) === -1 && h.dispose();
        });
      }
      return u;
    }
    case "LoopCond": {
      let a = k("pred", e17, t, n);
      return [Nr(a)];
    }
    case "Switch": {
      let a = k("pred", e17, t, n), r = k("data", e17, t, n);
      return r.kept || (r = Nr(r)), (await a.data())[0] ? [void 0, r] : [r, void 0];
    }
    case "Merge": {
      let a = e17.inputNames.find((r) => pn(r, t, n) !== void 0);
      if (a) {
        let r = pn(a, t, n);
        return [Nr(r)];
      }
      return;
    }
    case "Enter": {
      let a = k("frameName", e17, t, n), r = k("tensor", e17, t, n);
      return n.enterFrame(a), [Nr(r)];
    }
    case "Exit": {
      let a = k("tensor", e17, t, n);
      return n.exitFrame(), [Nr(a)];
    }
    case "NextIteration": {
      let a = k("tensor", e17, t, n);
      return n.nextIteration(), [Nr(a)];
    }
    case "TensorArrayV3": {
      let a = k("size", e17, t, n), r = k("dtype", e17, t, n), s = k("elementShape", e17, t, n), i = k("dynamicSize", e17, t, n), o = k("clearAfterRead", e17, t, n), l = k("identicalElementShapes", e17, t, n), u = k("name", e17, t, n), p = new zq(u, r, a, s, l, i, o);
      return n.addTensorArray(p), [p.idTensor, xe(1)];
    }
    case "TensorArrayWriteV3": {
      let a = k("tensorArrayId", e17, t, n), r = k("index", e17, t, n), s = k("tensor", e17, t, n), i = n.getTensorArray(a.id);
      return i.write(r, s), [i.idTensor];
    }
    case "TensorArrayReadV3": {
      let a = k("tensorArrayId", e17, t, n), r = k("index", e17, t, n);
      return [n.getTensorArray(a.id).read(r)];
    }
    case "TensorArrayGatherV3": {
      let a = k("tensorArrayId", e17, t, n), r = k("indices", e17, t, n), s = k("dtype", e17, t, n);
      return [n.getTensorArray(a.id).gather(r, s)];
    }
    case "TensorArrayScatterV3": {
      let a = k("tensorArrayId", e17, t, n), r = k("indices", e17, t, n), s = k("tensor", e17, t, n), i = n.getTensorArray(a.id);
      return i.scatter(r, s), [i.idTensor];
    }
    case "TensorArrayConcatV3": {
      let a = k("tensorArrayId", e17, t, n), r = n.getTensorArray(a.id), s = k("dtype", e17, t, n);
      return [r.concat(s)];
    }
    case "TensorArraySplitV3": {
      let a = k("tensorArrayId", e17, t, n), r = k("tensor", e17, t, n), s = k("lengths", e17, t, n), i = n.getTensorArray(a.id);
      return i.split(s, r), [i.idTensor];
    }
    case "TensorArraySizeV3": {
      let a = k("tensorArrayId", e17, t, n), r = n.getTensorArray(a.id);
      return [xe(r.size(), "int32")];
    }
    case "TensorArrayCloseV3": {
      let a = k("tensorArrayId", e17, t, n), r = n.getTensorArray(a.id);
      return r.clearAndClose(), [r.idTensor];
    }
    case "TensorListSetItem": {
      let a = k("tensorListId", e17, t, n), r = k("index", e17, t, n), s = k("tensor", e17, t, n), i = n.getTensorList(a.id);
      return i.setItem(r, s), [i.idTensor];
    }
    case "TensorListGetItem": {
      let a = k("tensorListId", e17, t, n), r = k("index", e17, t, n), s = k("elementShape", e17, t, n), i = k("elementDType", e17, t, n);
      return [n.getTensorList(a.id).getItem(r, s, i)];
    }
    case "TensorListScatterV2":
    case "TensorListScatter": {
      let a = k("indices", e17, t, n), r = k("tensor", e17, t, n), s = k("elementShape", e17, t, n), i = k("numElements", e17, t, n), o = Vq(r, a, s, i);
      return n.addTensorList(o), [o.idTensor];
    }
    case "TensorListReserve":
    case "EmptyTensorList": {
      let a = k("elementShape", e17, t, n), r = k("elementDType", e17, t, n), s;
      e17.op === "TensorListReserve" ? s = "numElements" : s = "maxNumElements";
      let i = k(s, e17, t, n), o = e17.op === "TensorListReserve" ? -1 : i, l = Bq(a, r, i, o);
      return n.addTensorList(l), [l.idTensor];
    }
    case "TensorListGather": {
      let a = k("tensorListId", e17, t, n), r = k("indices", e17, t, n), s = k("elementShape", e17, t, n), i = k("elementDType", e17, t, n);
      return [n.getTensorList(a.id).gather(r, i, s)];
    }
    case "TensorListStack": {
      let a = k("tensorListId", e17, t, n), r = k("elementShape", e17, t, n), s = k("elementDType", e17, t, n), i = k("numElements", e17, t, n);
      return [n.getTensorList(a.id).stack(r, s, i)];
    }
    case "TensorListFromTensor": {
      let a = k("tensor", e17, t, n), r = k("elementShape", e17, t, n), s = k("elementDType", e17, t, n), i = Wq(a, r, s);
      return n.addTensorList(i), [i.idTensor];
    }
    case "TensorListConcat":
    case "TensorListConcatV2": {
      let a = k("tensorListId", e17, t, n), r = n.getTensorList(a.id), s = k("dtype", e17, t, n), i = k("elementShape", e17, t, n);
      return [r.concat(s, i)];
    }
    case "TensorListPushBack": {
      let a = k("tensorListId", e17, t, n), r = k("tensor", e17, t, n), s = n.getTensorList(a.id);
      return s.pushBack(r), [s.idTensor];
    }
    case "TensorListPopBack": {
      let a = k("tensorListId", e17, t, n), r = k("elementShape", e17, t, n), s = k("elementDType", e17, t, n);
      return [n.getTensorList(a.id).popBack(r, s)];
    }
    case "TensorListSplit": {
      let a = k("tensor", e17, t, n), r = k("elementShape", e17, t, n), s = k("lengths", e17, t, n), i = Uq(a, s, r);
      return n.addTensorList(i), [i.idTensor];
    }
    case "TensorListLength": {
      let a = k("tensorListId", e17, t, n), r = n.getTensorList(a.id);
      return [xe(r.size(), "int32")];
    }
    case "TensorListResize": {
      let a = k("tensorListId", e17, t, n), r = k("size", e17, t, n), s = n.getTensorList(a.id).resize(r);
      return n.addTensorList(s), [s.idTensor];
    }
    default:
      throw TypeError(`Node type ${e17.op} is not implemented`);
  }
};
function VI(e17, t, n) {
  let [a, r] = k("fusedOps", e17, t, n), s = a === "biasadd", i = !s, o = r === "prelu", l = a === "fusedbatchnorm", u = k("numArgs", e17, t, n);
  if (s) {
    if (o && u !== 2) throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");
    if (!o && s && u !== 1) throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.");
  }
  if (l) throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported");
  let p = k("strides", e17, t, n), d = Mh(e17, t, n), c = k("dataFormat", e17, t, n).toUpperCase(), h = k("dilations", e17, t, n), [m, f] = k("args", e17, t, n);
  i && (f = m, m = void 0);
  let g = k("leakyreluAlpha", e17, t, n);
  return { stride: p, pad: d, dataFormat: c, dilations: h, biasArg: m, preluArg: f, activationFunc: r, leakyreluAlpha: g };
}
var Hq = (e17, t, n, a = on) => {
  switch (e17.op) {
    case "Conv1D": {
      let r = k("stride", e17, t, n), s = k("pad", e17, t, n), i = k("dataFormat", e17, t, n).toUpperCase(), o = k("dilation", e17, t, n);
      return [a.conv1d(k("x", e17, t, n), k("filter", e17, t, n), r, s, i, o)];
    }
    case "Conv2D": {
      let r = k("strides", e17, t, n), s = Mh(e17, t, n), i = k("dataFormat", e17, t, n).toUpperCase(), o = k("dilations", e17, t, n);
      return [a.conv2d(k("x", e17, t, n), k("filter", e17, t, n), [r[1], r[2]], s, i, [o[1], o[2]])];
    }
    case "_FusedConv2D": {
      let { stride: r, pad: s, dataFormat: i, dilations: o, biasArg: l, preluArg: u, activationFunc: p, leakyreluAlpha: d } = VI(e17, t, n);
      return [a.fused.conv2d({ x: k("x", e17, t, n), filter: k("filter", e17, t, n), strides: [r[1], r[2]], pad: s, dataFormat: i, dilations: [o[1], o[2]], bias: l, activation: p, preluActivationWeights: u, leakyreluAlpha: d })];
    }
    case "FusedDepthwiseConv2dNative": {
      let { stride: r, pad: s, dataFormat: i, dilations: o, biasArg: l, preluArg: u, activationFunc: p, leakyreluAlpha: d } = VI(e17, t, n);
      return [a.fused.depthwiseConv2d({ x: k("x", e17, t, n), filter: k("filter", e17, t, n), strides: [r[1], r[2]], pad: s, dataFormat: i, dilations: [o[1], o[2]], bias: l, activation: p, preluActivationWeights: u, leakyreluAlpha: d })];
    }
    case "Conv2DBackpropInput":
    case "Conv2dTranspose": {
      let r = k("outputShape", e17, t, n), s = k("strides", e17, t, n), i = Mh(e17, t, n);
      return [a.conv2dTranspose(k("x", e17, t, n), k("filter", e17, t, n), r, [s[1], s[2]], i)];
    }
    case "DepthwiseConv2dNative":
    case "DepthwiseConv2d": {
      let r = k("strides", e17, t, n), s = Mh(e17, t, n), i = k("dilations", e17, t, n), o = k("dataFormat", e17, t, n).toUpperCase();
      return [a.depthwiseConv2d(k("input", e17, t, n), k("filter", e17, t, n), [r[1], r[2]], s, o, [i[1], i[2]])];
    }
    case "Conv3D": {
      let r = k("strides", e17, t, n), s = k("pad", e17, t, n), i = k("dataFormat", e17, t, n).toUpperCase(), o = k("dilations", e17, t, n);
      return [a.conv3d(k("x", e17, t, n), k("filter", e17, t, n), [r[1], r[2], r[3]], s, i, [o[1], o[2], o[3]])];
    }
    case "AvgPool": {
      let r = k("strides", e17, t, n), s = k("pad", e17, t, n), i = k("kernelSize", e17, t, n);
      return [a.avgPool(k("x", e17, t, n), [i[1], i[2]], [r[1], r[2]], s)];
    }
    case "MaxPool": {
      let r = k("strides", e17, t, n), s = k("pad", e17, t, n), i = k("kernelSize", e17, t, n);
      return [a.maxPool(k("x", e17, t, n), [i[1], i[2]], [r[1], r[2]], s)];
    }
    case "MaxPoolWithArgmax": {
      let r = k("strides", e17, t, n), s = k("pad", e17, t, n), i = k("kernelSize", e17, t, n), o = k("includeBatchInIndex", e17, t, n), { result: l, indexes: u } = a.maxPoolWithArgmax(k("x", e17, t, n), [i[1], i[2]], [r[1], r[2]], s, o);
      return [l, u];
    }
    case "AvgPool3D": {
      let r = k("strides", e17, t, n), s = k("pad", e17, t, n), i = k("kernelSize", e17, t, n);
      return [a.avgPool3d(k("x", e17, t, n), [i[1], i[2], i[3]], [r[1], r[2], r[3]], s)];
    }
    case "MaxPool3D": {
      let r = k("strides", e17, t, n), s = k("pad", e17, t, n), i = k("kernelSize", e17, t, n);
      return [a.maxPool3d(k("x", e17, t, n), [i[1], i[2], i[3]], [r[1], r[2], r[3]], s)];
    }
    case "Dilation2D": {
      let r = k("strides", e17, t, n), s = k("pad", e17, t, n), i = k("dilations", e17, t, n), o = r[1], l = r[2], u = i[1], p = i[2];
      return [a.dilation2d(k("x", e17, t, n), k("filter", e17, t, n), [o, l], s, [u, p], "NHWC")];
    }
    default:
      throw TypeError(`Node type ${e17.op} is not implemented`);
  }
};
var jq = (e17, t, n, a = on) => {
  switch (e17.op) {
    case "Fill": {
      let r = k("shape", e17, t, n), s = k("dtype", e17, t, n), i = k("value", e17, t, n);
      return [a.fill(r, i, s)];
    }
    case "LinSpace": {
      let r = k("start", e17, t, n), s = k("stop", e17, t, n), i = k("num", e17, t, n);
      return [a.linspace(r, s, i)];
    }
    case "Multinomial": {
      let r = k("logits", e17, t, n), s = k("numSamples", e17, t, n), i = k("seed", e17, t, n);
      return [a.multinomial(r, s, i)];
    }
    case "OneHot": {
      let r = k("indices", e17, t, n), s = k("depth", e17, t, n), i = k("onValue", e17, t, n), o = k("offValue", e17, t, n), l = k("dtype", e17, t, n);
      return [a.oneHot(r, s, i, o, l)];
    }
    case "Ones":
      return [a.ones(k("shape", e17, t, n), k("dtype", e17, t, n))];
    case "OnesLike":
      return [a.onesLike(k("x", e17, t, n))];
    case "RandomStandardNormal":
      return [a.randomStandardNormal(k("shape", e17, t, n), k("dtype", e17, t, n), k("seed", e17, t, n))];
    case "RandomUniform":
      return [a.randomUniform(k("shape", e17, t, n), k("minval", e17, t, n), k("maxval", e17, t, n), k("dtype", e17, t, n))];
    case "RandomUniformInt":
      return [a.randomUniformInt(k("shape", e17, t, n), k("minval", e17, t, n), k("maxval", e17, t, n), k("seed", e17, t, n))];
    case "Range": {
      let r = k("start", e17, t, n), s = k("stop", e17, t, n), i = k("step", e17, t, n);
      return [a.range(r, s, i, k("dtype", e17, t, n))];
    }
    case "TruncatedNormal": {
      let r = k("shape", e17, t, n), s = k("mean", e17, t, n), i = k("stdDev", e17, t, n), o = k("seed", e17, t, n);
      return [a.truncatedNormal(r, s, i, k("dtype", e17, t, n), o)];
    }
    case "Zeros":
      return [a.zeros(k("shape", e17, t, n), k("dtype", e17, t, n))];
    case "ZerosLike":
      return [a.zerosLike(k("x", e17, t, n))];
    default:
      throw TypeError(`Node type ${e17.op} is not implemented`);
  }
};
function gx(e17, t, n) {
  let a = k("boxes", e17, t, n), r = k("scores", e17, t, n), s = k("maxOutputSize", e17, t, n), i = k("iouThreshold", e17, t, n), o = k("scoreThreshold", e17, t, n), l = k("softNmsSigma", e17, t, n);
  return { boxes: a, scores: r, maxOutputSize: s, iouThreshold: i, scoreThreshold: o, softNmsSigma: l };
}
var qq = async (e17, t, n, a, r = on) => {
  switch (e17.op) {
    case "NonMaxSuppressionV5": {
      let { boxes: s, scores: i, maxOutputSize: o, iouThreshold: l, scoreThreshold: u, softNmsSigma: p } = gx(e17, t, n), d = await r.image.nonMaxSuppressionWithScoreAsync(s, i, o, l, u, p);
      return [d.selectedIndices, d.selectedScores];
    }
    case "NonMaxSuppressionV4": {
      let { boxes: s, scores: i, maxOutputSize: o, iouThreshold: l, scoreThreshold: u } = gx(e17, t, n), p = k("padToMaxOutputSize", e17, t, n), d = await r.image.nonMaxSuppressionPaddedAsync(s, i, o, l, u, p);
      return [d.selectedIndices, d.validOutputs];
    }
    case "NonMaxSuppressionV3":
    case "NonMaxSuppressionV2": {
      let { boxes: s, scores: i, maxOutputSize: o, iouThreshold: l, scoreThreshold: u } = gx(e17, t, n);
      return [await r.image.nonMaxSuppressionAsync(s, i, o, l, u)];
    }
    case "Where": {
      let s = r.cast(k("condition", e17, t, n), "bool"), i = [await r.whereAsync(s)];
      return s.dispose(), i;
    }
    case "ListDiff":
      return r.setdiff1dAsync(k("x", e17, t, n), k("y", e17, t, n));
    default:
      throw TypeError(`Node type ${e17.op} is not implemented`);
  }
};
var Kq = (e17, t, n, a = on) => {
  switch (e17.op) {
    case "LowerBound": {
      let r = k("sortedSequence", e17, t, n), s = k("values", e17, t, n);
      return [a.lowerBound(r, s)];
    }
    case "TopKV2": {
      let r = k("x", e17, t, n), s = k("k", e17, t, n), i = k("sorted", e17, t, n), o = a.topk(r, s, i);
      return [o.values, o.indices];
    }
    case "UpperBound": {
      let r = k("sortedSequence", e17, t, n), s = k("values", e17, t, n);
      return [a.upperBound(r, s)];
    }
    case "Unique": {
      let r = k("x", e17, t, n), s = a.unique(r);
      return [s.values, s.indices];
    }
    case "UniqueV2": {
      let r = k("x", e17, t, n), s = k("axis", e17, t, n), i = a.unique(r, s);
      return [i.values, i.indices];
    }
    default:
      throw TypeError(`Node type ${e17.op} is not implemented`);
  }
};
var Xq = (e17, t, n, a = on) => {
  switch (e17.op) {
    case "Const":
      return t[e17.name];
    case "PlaceholderWithDefault":
      let r = k("default", e17, t, n);
      return [pn(e17.name, t, n) || r];
    case "Placeholder":
      return [pn(e17.name, t, n)];
    case "Identity":
    case "StopGradient":
    case "FakeQuantWithMinMaxVars": {
      let p = k("x", e17, t, n);
      return [Nr(p)];
    }
    case "IdentityN":
      return k("x", e17, t, n).map((p) => Nr(p));
    case "Snapshot":
      let s = k("x", e17, t, n);
      return [Nr(s)];
    case "Shape":
      return [a.tensor1d(k("x", e17, t, n).shape, "int32")];
    case "ShapeN":
      return k("x", e17, t, n).map((p) => a.tensor1d(p.shape));
    case "Size":
      return [a.scalar(k("x", e17, t, n).size, "int32")];
    case "Rank":
      return [a.scalar(k("x", e17, t, n).rank, "int32")];
    case "NoOp":
      return [a.scalar(1)];
    case "Print":
      let i = k("x", e17, t, n), o = k("data", e17, t, n), l = k("message", e17, t, n), u = k("summarize", e17, t, n);
      console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."), console.log(l);
      for (let p = 0; p < o.length; p++) console.log(Array.prototype.slice.call(o[p].dataSync()).slice(0, u));
      return [i];
    default:
      throw TypeError(`Node type ${e17.op} is not implemented`);
  }
};
var Yq = class {
  get id() {
    return this.handle.id;
  }
  constructor(e17, t) {
    this.keyDType = e17, this.valueDType = t, this.handle = xe(0), this.tensorMap = /* @__PURE__ */ new Map(), Ht(this.handle);
  }
  clearAndClose() {
    this.tensorMap.forEach((e17) => e17.dispose()), this.tensorMap.clear(), this.handle.dispose();
  }
  size() {
    return this.tensorMap.size;
  }
  tensorSize() {
    return xe(this.size(), "int32");
  }
  async import(e17, t) {
    this.checkKeyAndValueTensor(e17, t);
    let n = await e17.data();
    return this.tensorMap.forEach((a) => a.dispose()), this.tensorMap.clear(), O(() => {
      let a = dt(t), r = n.length, s = a.length;
      w.assert(r === s, () => `The number of elements doesn't match, keys has ${r} elements, the values has ${s} elements.`);
      for (let i = 0; i < r; i++) {
        let o = n[i], l = a[i];
        Ht(l), this.tensorMap.set(o, l);
      }
      return this.handle;
    });
  }
  async find(e17, t) {
    this.checkKeyAndValueTensor(e17, t);
    let n = await e17.data();
    return O(() => {
      let a = [];
      for (let r = 0; r < n.length; r++) {
        let s = n[r], i = this.findWithDefault(s, t);
        a.push(i);
      }
      return At(a);
    });
  }
  findWithDefault(e17, t) {
    let n = this.tensorMap.get(e17);
    return n != null ? n : t;
  }
  checkKeyAndValueTensor(e17, t) {
    if (e17.dtype !== this.keyDType) throw new Error(`Expect key dtype ${this.keyDType}, but got ${e17.dtype}`);
    if (t.dtype !== this.valueDType) throw new Error(`Expect value dtype ${this.valueDType}, but got ${t.dtype}`);
  }
};
var Zq = async (e17, t, n, a) => {
  switch (e17.op) {
    case "HashTable":
    case "HashTableV2": {
      let r = a.getHashTableHandleByName(e17.name);
      if (r != null) return [r];
      {
        let s = k("keyDType", e17, t, n), i = k("valueDType", e17, t, n), o = new Yq(s, i);
        return a.addHashTable(e17.name, o), [o.handle];
      }
    }
    case "InitializeTable":
    case "InitializeTableV2":
    case "LookupTableImport":
    case "LookupTableImportV2": {
      let r = k("tableHandle", e17, t, n, a), s = k("keys", e17, t, n), i = k("values", e17, t, n);
      return [await a.getHashTableById(r.id).import(s, i)];
    }
    case "LookupTableFind":
    case "LookupTableFindV2": {
      let r = k("tableHandle", e17, t, n, a), s = k("keys", e17, t, n), i = k("defaultValue", e17, t, n);
      return [await a.getHashTableById(r.id).find(s, i)];
    }
    case "LookupTableSize":
    case "LookupTableSizeV2": {
      let r = k("tableHandle", e17, t, n, a);
      return [a.getHashTableById(r.id).tensorSize()];
    }
    default:
      throw TypeError(`Node type ${e17.op} is not implemented`);
  }
};
var Jq = (e17, t, n, a = on) => {
  switch (e17.op) {
    case "ResizeBilinear": {
      let r = k("images", e17, t, n), s = k("size", e17, t, n), i = k("alignCorners", e17, t, n), o = k("halfPixelCenters", e17, t, n);
      return [a.image.resizeBilinear(r, [s[0], s[1]], i, o)];
    }
    case "ResizeNearestNeighbor": {
      let r = k("images", e17, t, n), s = k("size", e17, t, n), i = k("alignCorners", e17, t, n), o = k("halfPixelCenters", e17, t, n);
      return [a.image.resizeNearestNeighbor(r, [s[0], s[1]], i, o)];
    }
    case "CropAndResize": {
      let r = k("image", e17, t, n), s = k("boxes", e17, t, n), i = k("boxInd", e17, t, n), o = k("cropSize", e17, t, n), l = k("method", e17, t, n), u = k("extrapolationValue", e17, t, n);
      return [a.image.cropAndResize(r, s, i, o, l, u)];
    }
    case "ImageProjectiveTransformV3": {
      let r = k("images", e17, t, n), s = k("transforms", e17, t, n), i = k("outputShape", e17, t, n), o = k("fillValue", e17, t, n), l = k("interpolation", e17, t, n), u = k("fillMode", e17, t, n);
      return [a.image.transform(r, s, l.toLowerCase(), u.toLowerCase(), o, i)];
    }
    default:
      throw TypeError(`Node type ${e17.op} is not implemented`);
  }
};
var Qq = (e17, t, n, a = on) => {
  switch (e17.op) {
    case "Equal":
      return [a.equal(k("a", e17, t, n), k("b", e17, t, n))];
    case "NotEqual":
      return [a.notEqual(k("a", e17, t, n), k("b", e17, t, n))];
    case "Greater":
      return [a.greater(k("a", e17, t, n), k("b", e17, t, n))];
    case "GreaterEqual":
      return [a.greaterEqual(k("a", e17, t, n), k("b", e17, t, n))];
    case "Less":
      return [a.less(k("a", e17, t, n), k("b", e17, t, n))];
    case "LessEqual":
      return [a.lessEqual(k("a", e17, t, n), k("b", e17, t, n))];
    case "LogicalAnd":
      return [a.logicalAnd(k("a", e17, t, n), k("b", e17, t, n))];
    case "LogicalNot":
      return [a.logicalNot(k("a", e17, t, n))];
    case "LogicalOr":
      return [a.logicalOr(k("a", e17, t, n), k("b", e17, t, n))];
    case "Select":
    case "SelectV2":
      return [a.where(k("condition", e17, t, n), k("a", e17, t, n), k("b", e17, t, n))];
    case "BitwiseAnd":
      return [a.bitwiseAnd(k("a", e17, t, n), k("b", e17, t, n))];
    default:
      throw TypeError(`Node type ${e17.op} is not implemented`);
  }
};
var e5 = (e17, t, n, a = on) => {
  switch (e17.op) {
    case "BatchMatMul":
    case "BatchMatMulV2":
    case "MatMul":
      return [a.matMul(k("a", e17, t, n), k("b", e17, t, n), k("transposeA", e17, t, n), k("transposeB", e17, t, n))];
    case "Einsum":
      return [a.einsum(k("equation", e17, t, n), ...k("tensors", e17, t, n))];
    case "Transpose":
      return [a.transpose(k("x", e17, t, n), k("perm", e17, t, n))];
    case "_FusedMatMul":
      let [r, s] = k("fusedOps", e17, t, n), i = r === "biasadd", o = s === "prelu", l = k("numArgs", e17, t, n), u = k("leakyreluAlpha", e17, t, n);
      if (i) {
        if (o && l !== 2) throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");
        if (!o && l !== 1) throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.");
      }
      let [p, d] = k("args", e17, t, n);
      return [a.fused.matMul({ a: k("a", e17, t, n), b: k("b", e17, t, n), transposeA: k("transposeA", e17, t, n), transposeB: k("transposeB", e17, t, n), bias: p, activation: s, preluActivationWeights: d, leakyreluAlpha: u })];
    case "MatrixBandPart":
      return [a.linalg.bandPart(k("a", e17, t, n), k("numLower", e17, t, n), k("numUpper", e17, t, n))];
    default:
      throw TypeError(`Node type ${e17.op} is not implemented`);
  }
};
var t5 = (e17, t, n, a = on) => {
  switch (e17.op) {
    case "EuclideanNorm":
      return [a.euclideanNorm(k("x", e17, t, n), k("axis", e17, t, n), k("keepDims", e17, t, n))];
    case "FusedBatchNorm":
    case "FusedBatchNormV2":
      return [a.batchNorm(k("x", e17, t, n), k("mean", e17, t, n), k("variance", e17, t, n), k("offset", e17, t, n), k("scale", e17, t, n), k("epsilon", e17, t, n))];
    case "FusedBatchNormV3":
      return [a.batchNorm(k("x", e17, t, n), k("mean", e17, t, n), k("variance", e17, t, n), k("offset", e17, t, n), k("scale", e17, t, n), k("epsilon", e17, t, n))];
    case "LRN":
      return [a.localResponseNormalization(k("x", e17, t, n), k("radius", e17, t, n), k("bias", e17, t, n), k("alpha", e17, t, n), k("beta", e17, t, n))];
    case "Softmax":
      return [a.softmax(k("x", e17, t, n))];
    case "LogSoftmax":
      return [a.logSoftmax(k("x", e17, t, n))];
    default:
      throw TypeError(`Node type ${e17.op} is not implemented`);
  }
};
var n5 = (e17, t, n, a = on) => {
  switch (e17.op) {
    case "RaggedGather": {
      let { outputNestedSplits: r, outputDenseValues: s } = a.raggedGather(k("paramsNestedSplits", e17, t, n), k("paramsDenseValues", e17, t, n), k("indices", e17, t, n), k("outputRaggedRank", e17, t, n));
      return r.concat(s);
    }
    case "RaggedRange": {
      let { rtNestedSplits: r, rtDenseValues: s } = a.raggedRange(k("starts", e17, t, n), k("limits", e17, t, n), k("splits", e17, t, n));
      return [r, s];
    }
    case "RaggedTensorToTensor":
      return [a.raggedTensorToTensor(k("shape", e17, t, n), k("values", e17, t, n), k("defaultValue", e17, t, n), k("rowPartitionTensors", e17, t, n), k("rowPartitionTypes", e17, t, n))];
    default:
      throw TypeError(`Node type ${e17.op} is not implemented`);
  }
};
var a5 = (e17, t, n, a = on) => {
  switch (e17.op) {
    case "Max": {
      let o = k("axis", e17, t, n), l = k("keepDims", e17, t, n);
      return [a.max(k("x", e17, t, n), o, l)];
    }
    case "Mean": {
      let o = k("axis", e17, t, n), l = k("keepDims", e17, t, n);
      return [a.mean(k("x", e17, t, n), o, l)];
    }
    case "Min": {
      let o = k("axis", e17, t, n), l = k("keepDims", e17, t, n);
      return [a.min(k("x", e17, t, n), o, l)];
    }
    case "Sum": {
      let o = k("axis", e17, t, n), l = k("keepDims", e17, t, n);
      return [a.sum(k("x", e17, t, n), o, l)];
    }
    case "All": {
      let o = k("axis", e17, t, n), l = k("keepDims", e17, t, n);
      return [a.all(k("x", e17, t, n), o, l)];
    }
    case "Any": {
      let o = k("axis", e17, t, n), l = k("keepDims", e17, t, n);
      return [a.any(k("x", e17, t, n), o, l)];
    }
    case "ArgMax": {
      let o = k("axis", e17, t, n);
      return [a.argMax(k("x", e17, t, n), o)];
    }
    case "ArgMin": {
      let o = k("axis", e17, t, n);
      return [a.argMin(k("x", e17, t, n), o)];
    }
    case "Prod": {
      let o = k("axis", e17, t, n), l = k("keepDims", e17, t, n);
      return [a.prod(k("x", e17, t, n), o, l)];
    }
    case "Cumprod": {
      let o = k("axis", e17, t, n), l = k("exclusive", e17, t, n), u = k("reverse", e17, t, n);
      return [a.cumprod(k("x", e17, t, n), o, l, u)];
    }
    case "Cumsum": {
      let o = k("axis", e17, t, n), l = k("exclusive", e17, t, n), u = k("reverse", e17, t, n);
      return [a.cumsum(k("x", e17, t, n), o, l, u)];
    }
    case "Bincount":
      let r = k("x", e17, t, n), s = k("weights", e17, t, n), i = k("size", e17, t, n);
      return [a.bincount(r, s, i)];
    case "DenseBincount": {
      let o = k("x", e17, t, n), l = k("weights", e17, t, n), u = k("size", e17, t, n), p = k("binaryOutput", e17, t, n);
      return [a.denseBincount(o, l, u, p)];
    }
    default:
      throw TypeError(`Node type ${e17.op} is not implemented`);
  }
};
var r5 = (e17, t, n, a = on) => {
  switch (e17.op) {
    case "ConcatV2":
    case "Concat": {
      let r = k("n", e17, t, n), s = k("axis", e17, t, n), i = k("tensors", e17, t, n);
      return i = i.slice(0, r), [a.concat(i, s)];
    }
    case "Gather": {
      let r = k("x", e17, t, n), s = k("indices", e17, t, n);
      return [a.gather(r, a.cast(s, "int32"), 0)];
    }
    case "GatherV2": {
      let r = k("axis", e17, t, n), s = k("batchDims", e17, t, n), i = k("x", e17, t, n), o = k("indices", e17, t, n);
      return [a.gather(i, a.cast(o, "int32"), r, s)];
    }
    case "Reverse": {
      let r = k("dims", e17, t, n), s = [];
      for (let o = 0; o < r.length; o++) r[o] && s.push(o);
      let i = k("x", e17, t, n);
      return [a.reverse(i, s)];
    }
    case "ReverseV2": {
      let r = k("axis", e17, t, n), s = k("x", e17, t, n);
      return [a.reverse(s, r)];
    }
    case "Slice": {
      let r = k("begin", e17, t, n), s = k("size", e17, t, n);
      return [a.slice(k("x", e17, t, n), r, s)];
    }
    case "StridedSlice": {
      let r = k("begin", e17, t, n), s = k("end", e17, t, n), i = k("strides", e17, t, n), o = k("beginMask", e17, t, n), l = k("endMask", e17, t, n), u = k("ellipsisMask", e17, t, n), p = k("newAxisMask", e17, t, n), d = k("shrinkAxisMask", e17, t, n), c = k("x", e17, t, n);
      return [a.stridedSlice(c, r, s, i, o, l, u, p, d)];
    }
    case "Pack":
      return O(() => {
        let r = k("axis", e17, t, n), s = k("tensors", e17, t, n), i = s[0].shape, o = a.squeeze(s[0]).shape, l = s.map((u) => {
          let p = w.arraysEqual(u.shape, i);
          if (!p && !w.arraysEqual(a.squeeze(u).shape, o)) throw new Error("the input tensors shape does not match");
          return p ? u : a.reshape(u, i);
        });
        return [a.stack(l, r)];
      });
    case "Unpack": {
      let r = k("axis", e17, t, n), s = k("tensor", e17, t, n);
      return a.unstack(s, r);
    }
    case "Tile": {
      let r = k("reps", e17, t, n);
      return [a.tile(k("x", e17, t, n), r)];
    }
    case "Split":
    case "SplitV": {
      let r = k("axis", e17, t, n), s = k("numOrSizeSplits", e17, t, n), i = k("x", e17, t, n);
      return a.split(i, s, r);
    }
    case "ScatterNd": {
      let r = k("indices", e17, t, n), s = k("values", e17, t, n), i = k("shape", e17, t, n);
      return [a.scatterND(r, s, i)];
    }
    case "GatherNd": {
      let r = k("x", e17, t, n), s = k("indices", e17, t, n);
      return [a.gatherND(r, s)];
    }
    case "SparseToDense": {
      let r = k("sparseIndices", e17, t, n), s = k("outputShape", e17, t, n), i = k("sparseValues", e17, t, n), o = k("defaultValue", e17, t, n);
      return [a.sparseToDense(r, i, s, i.dtype === o.dtype ? o : a.cast(o, i.dtype))];
    }
    case "TensorScatterUpdate": {
      let r = k("indices", e17, t, n), s = k("values", e17, t, n), i = k("tensor", e17, t, n);
      return [a.tensorScatterUpdate(i, r, s)];
    }
    default:
      throw TypeError(`Node type ${e17.op} is not implemented`);
  }
};
var s5 = (e17, t, n, a = on) => {
  switch (e17.op) {
    case "SparseFillEmptyRows": {
      let { outputIndices: r, outputValues: s, emptyRowIndicator: i, reverseIndexMap: o } = a.sparse.sparseFillEmptyRows(k("indices", e17, t, n), k("values", e17, t, n), k("denseShape", e17, t, n), k("defaultValue", e17, t, n));
      return [r, s, i, o];
    }
    case "SparseReshape": {
      let { outputIndices: r, outputShape: s } = a.sparse.sparseReshape(k("inputIndices", e17, t, n), k("inputShape", e17, t, n), k("newShape", e17, t, n));
      return [r, s];
    }
    case "SparseSegmentMean":
      return [a.sparse.sparseSegmentMean(k("data", e17, t, n), k("indices", e17, t, n), k("segmentIds", e17, t, n))];
    case "SparseSegmentSum":
      return [a.sparse.sparseSegmentSum(k("data", e17, t, n), k("indices", e17, t, n), k("segmentIds", e17, t, n))];
    default:
      throw TypeError(`Node type ${e17.op} is not implemented`);
  }
};
var i5 = (e17, t, n, a = on) => {
  switch (e17.op) {
    case "FFT":
      return [a.fft(k("x", e17, t, n))];
    case "IFFT":
      return [a.ifft(k("x", e17, t, n))];
    case "RFFT":
      return [a.rfft(k("x", e17, t, n))];
    case "IRFFT":
      return [a.irfft(k("x", e17, t, n))];
    default:
      throw TypeError(`Node type ${e17.op} is not implemented`);
  }
};
var o5 = (e17, t, n, a = on) => {
  switch (e17.op) {
    case "StaticRegexReplace":
      return [a.string.staticRegexReplace(k("input", e17, t, n), k("pattern", e17, t, n), k("rewrite", e17, t, n), k("replaceGlobal", e17, t, n))];
    case "StringNGrams": {
      let { nGrams: r, nGramsSplits: s } = a.string.stringNGrams(k("data", e17, t, n), k("dataSplits", e17, t, n), k("separator", e17, t, n), k("nGramWidths", e17, t, n), k("leftPad", e17, t, n), k("rightPad", e17, t, n), k("padWidth", e17, t, n), k("preserveShortSequences", e17, t, n));
      return [r, s];
    }
    case "StringSplit": {
      let { indices: r, values: s, shape: i } = a.string.stringSplit(k("input", e17, t, n), k("delimiter", e17, t, n), k("skipEmpty", e17, t, n));
      return [r, s, i];
    }
    case "StringToHashBucketFast":
      return [a.string.stringToHashBucketFast(k("input", e17, t, n), k("numBuckets", e17, t, n))];
    default:
      throw TypeError(`Node type ${e17.op} is not implemented`);
  }
};
var l5 = (e17, t, n, a = on) => {
  switch (e17.op) {
    case "Cast":
      return [a.cast(k("x", e17, t, n), k("dtype", e17, t, n))];
    case "ExpandDims": {
      let r = k("axis", e17, t, n);
      return [a.expandDims(k("x", e17, t, n), r)];
    }
    case "Squeeze": {
      let r = k("axis", e17, t, n);
      return [a.squeeze(k("x", e17, t, n), r)];
    }
    case "Reshape":
      return [a.reshape(k("x", e17, t, n), k("shape", e17, t, n))];
    case "EnsureShape":
      return [a.ensureShape(k("x", e17, t, n), k("shape", e17, t, n))];
    case "MirrorPad":
      return [a.mirrorPad(k("x", e17, t, n), k("padding", e17, t, n), k("mode", e17, t, n))];
    case "PadV2":
    case "Pad":
      return [a.pad(k("x", e17, t, n), k("padding", e17, t, n), k("constantValue", e17, t, n))];
    case "SpaceToBatchND": {
      let r = k("blockShape", e17, t, n), s = k("paddings", e17, t, n);
      return [a.spaceToBatchND(k("x", e17, t, n), r, s)];
    }
    case "BatchToSpaceND": {
      let r = k("blockShape", e17, t, n), s = k("crops", e17, t, n);
      return [a.batchToSpaceND(k("x", e17, t, n), r, s)];
    }
    case "DepthToSpace": {
      let r = k("blockSize", e17, t, n), s = k("dataFormat", e17, t, n).toUpperCase();
      return [a.depthToSpace(k("x", e17, t, n), r, s)];
    }
    case "BroadcastTo":
      return [a.broadcastTo(k("x", e17, t, n), k("shape", e17, t, n))];
    case "BroadcastArgs":
      return [a.broadcastArgs(k("s0", e17, t, n), k("s1", e17, t, n))];
    default:
      throw TypeError(`Node type ${e17.op} is not implemented`);
  }
};
function UI(e17, t, n, a, r = O) {
  let s = ((i, o, l) => {
    switch (i.category) {
      case "arithmetic":
        return r(() => Pq(i, o, l));
      case "basic_math":
        return r(() => Lq(i, o, l));
      case "control":
        return Gq(i, o, l);
      case "convolution":
        return r(() => Hq(i, o, l));
      case "creation":
        return r(() => jq(i, o, l));
      case "dynamic":
        return qq(i, o, l);
      case "evaluation":
        return r(() => Kq(i, o, l));
      case "image":
        return r(() => Jq(i, o, l));
      case "graph":
        return r(() => Xq(i, o, l));
      case "logical":
        return r(() => Qq(i, o, l));
      case "matrices":
        return r(() => e5(i, o, l));
      case "normalization":
        return r(() => t5(i, o, l));
      case "ragged":
        return r(() => n5(i, o, l));
      case "reduction":
        return r(() => a5(i, o, l));
      case "slice_join":
        return r(() => r5(i, o, l));
      case "sparse":
        return r(() => s5(i, o, l));
      case "spectral":
        return r(() => i5(i, o, l));
      case "string":
        return r(() => o5(i, o, l));
      case "transformation":
        return r(() => l5(i, o, l));
      case "hash_table":
        return Zq(i, o, l, a);
      case "custom":
        let u = zC(i.op);
        if (u && u.customExecutor) return u.customExecutor(new Oq(i, o, l));
        throw TypeError(`Custom op ${i.op} is not registered.`);
      default:
        throw TypeError(`Unknown op '${i.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`);
    }
  })(e17, t, n);
  return w.isPromise(s) ? s.then((i) => [].concat(i)) : [].concat(s);
}
var GI = class {
  constructor(e17 = {}, t = {}, n = {}, a = {}, r) {
    this.weightMap = e17, this.tensorArrayMap = t, this.tensorListMap = n, this.functionMap = a, this.parseNodeNameCache = r, this.rootContext = { id: 0, frameName: "", iterationId: 0 }, this.contexts = [this.rootContext], this.lastId = 0, this.generateCurrentContextIds();
  }
  newFrame(e17, t) {
    return { id: e17, frameName: t, iterationId: 0 };
  }
  set currentContext(e17) {
    this.contexts !== e17 && (this.contexts = e17, this.generateCurrentContextIds());
  }
  get currentContext() {
    return this.contexts;
  }
  get currentContextId() {
    return this._currentContextIds[0];
  }
  get currentContextIds() {
    return this._currentContextIds;
  }
  generateCurrentContextIds() {
    let e17 = [];
    for (let t = 0; t < this.contexts.length - 1; t++) {
      let n = this.contexts.slice(0, this.contexts.length - t);
      e17.push(this.contextIdforContexts(n));
    }
    e17.push(""), this._currentContextIds = e17;
  }
  contextIdforContexts(e17) {
    return e17 ? e17.map((t) => t.id === 0 && t.iterationId === 0 ? "" : `${t.frameName}-${t.iterationId}`).join("/") : "";
  }
  enterFrame(e17) {
    this.contexts && (this.lastId++, this.contexts = this.contexts.slice(), this.contexts.push(this.newFrame(this.lastId, e17)), this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)));
  }
  exitFrame() {
    if (this.contexts && this.contexts.length > 1) this.contexts = this.contexts.slice(), this.contexts.splice(-1), this.currentContextIds.shift();
    else throw new Error("Cannot exit frame, the context is empty");
  }
  nextIteration() {
    if (this.contexts && this.contexts.length > 0) {
      this.contexts = this.contexts.slice(), this.lastId++;
      let e17 = Object.assign({}, this.contexts[this.contexts.length - 1]);
      e17.iterationId += 1, e17.id = this.lastId, this.contexts.splice(-1, 1, e17), this._currentContextIds.splice(0, 1, this.contextIdforContexts(this.contexts));
    } else throw new Error("Cannot increase frame iteration, the context is empty");
  }
  getWeight(e17) {
    return this.weightMap[e17];
  }
  addTensorArray(e17) {
    this.tensorArrayMap[e17.id] = e17;
  }
  getTensorArray(e17) {
    return this.tensorArrayMap[e17];
  }
  addTensorList(e17) {
    this.tensorListMap[e17.id] = e17;
  }
  getTensorList(e17) {
    return this.tensorListMap[e17];
  }
  dispose(e17) {
    for (let t in this.tensorArrayMap) this.tensorArrayMap[t].clearAndClose(e17);
    for (let t in this.tensorListMap) this.tensorListMap[t].clearAndClose(e17);
  }
};
function HI(e17, t, n, a) {
  let r = /* @__PURE__ */ new Set(), s = [], i = null, o = null, l = /* @__PURE__ */ new Set(), u = new Set(Object.keys(e17).map((c) => Xn(c)[0]));
  a = a || [];
  let p = new Set(a.map((c) => Xn(c.name)[0])), d = [...t];
  for (; d.length > 0; ) {
    let c = d.pop();
    if ((Qs(c) || g5(c) || b5(c)) && i == null && (i = c, o = i.children.map((h) => h.name).filter((h) => r.has(h))), r.add(c.name), n[c.name] == null && !u.has(c.name) && !p.has(c.name)) {
      if (c.inputs.length === 0) {
        s.push(c.name);
        continue;
      }
      c.inputs.forEach((h) => {
        l.has(h.name) || (l.add(h.name), d.push(h));
      });
    }
  }
  return { inputs: e17, outputs: t, usedNodes: r, missingInputs: s, dynamicNode: i, syncInputs: o };
}
function u5(e17, t) {
  let { usedNodes: n, inputs: a } = t, r = Object.keys(a).map((g) => Xn(g)[0]).map((g) => e17.nodes[g]), s = e17.initNodes || [], i = (g) => n.has(typeof g == "string" ? g : g.name);
  function o(g) {
    return [...new Map(g.map((b) => [b.name, b])).values()];
  }
  let l = o([...r, ...e17.weights, ...s]).filter(i), u = o([...l, ...Object.values(e17.nodes)]).filter(i), p = new Map(u.map((g) => [g.name, g])), d = {};
  for (let g of u) {
    d[g.name] = d[g.name] || 0;
    for (let b of g.children) i(b) || (d[b.name] = Number.POSITIVE_INFINITY), d[b.name] = (d[b.name] || 0) + 1;
  }
  let c = Object.entries(d).filter(([, g]) => g === 0).map(([g]) => g), h = [...c];
  for (; c.length > 0; ) {
    let g = c.pop(), b = p.get(g);
    for (let y of b.children.filter(i)) --d[y.name] === 0 && (h.push(y.name), c.push(y.name));
  }
  let m = h.map((g) => p.get(g)), f = p5(m, l);
  return c5(f, l), f;
}
function p5(e17, t) {
  let n = new Map(e17.map((s) => [s.name, s])), a = t.map((s) => s.name), r = new Set(a);
  for (; a.length > 0; ) {
    let s = a.pop(), i = n.get(s);
    for (let o of i.children) !n.has(o.name) || r.has(o.name) || (r.add(o.name), a.push(o.name));
  }
  return e17.filter((s) => r.has(s.name));
}
var Th = class extends Error {
  constructor(e17) {
    super(`NodesExecutionOrderError: ${e17}`);
  }
};
function c5(e17, t) {
  let n = new Map(e17.map((o, l) => [o.name, l])), a = new Set(t.map((o) => o.name)), r = (o) => a.has(typeof o == "string" ? o : o.name), s = new Set(e17.map((o) => o.name)), i = (o) => s.has(typeof o == "string" ? o : o.name);
  for (let o of e17) {
    for (let l of o.children.filter(i)) {
      if (!n.has(l.name)) throw new Th(`Child ${l.name} of node ${o.name} is unreachable.`);
      if (n.get(o.name) > n.get(l.name)) throw new Th(`Node ${o.name} is scheduled to run after its child ${l.name}.`);
    }
    if (!r(o)) for (let l of o.inputs) {
      if (!n.has(l.name)) throw new Th(`Input ${l.name} of node ${o.name} is unreachable.`);
      if (n.get(l.name) > n.get(o.name)) throw new Th(`Node ${o.name} is scheduled to run before its input ${l.name}.`);
    }
  }
}
function d5(e17) {
  let t = new Map(e17.map((o, l) => [o.name, l])), n = Number.MAX_SAFE_INTEGER, a = e17.map((o, l) => Qs(o) ? n : l), r = (o) => {
    let l = a[t.get(o.name)];
    return l == null ? -1 : l;
  }, s = e17.map((o, l) => o.children.map(r).reduce((u, p) => Math.max(u, p), a[l])), i = /* @__PURE__ */ new Map();
  for (let o = 0; o < e17.length; ++o) {
    let l = s[o];
    if (l === n) continue;
    let u = e17[o], p = e17[l];
    i.has(p.name) || i.set(p.name, []), i.get(p.name).push(u);
  }
  return i;
}
var h5 = /* @__PURE__ */ new Set(["Switch", "Merge", "Enter", "Exit", "NextIteration", "StatelessIf", "StatelessWhile", "if", "While"]);
var m5 = /* @__PURE__ */ new Set(["NonMaxSuppressionV2", "NonMaxSuppressionV3", "NonMaxSuppressionV5", "Where"]);
var f5 = /* @__PURE__ */ new Set(["HashTable", "HashTableV2", "LookupTableImport", "LookupTableImportV2", "LookupTableFind", "LookupTableFindV2", "LookupTableSize", "LookupTableSizeV2"]);
function Qs(e17) {
  return h5.has(e17.op);
}
function g5(e17) {
  return m5.has(e17.op);
}
function b5(e17) {
  return f5.has(e17.op);
}
var jI = class oE {
  get weightIds() {
    return this.parent ? this.parent.weightIds : this._weightIds;
  }
  get functionExecutorMap() {
    return this.parent ? this.parent.functionExecutorMap : this._functionExecutorMap;
  }
  get weightMap() {
    return this.parent ? this.parent.weightMap : this._weightMap;
  }
  set weightMap(t) {
    let n = Object.keys(t).map((a) => t[a].map((r) => r.id));
    this._weightIds = [].concat(...n), this._weightMap = t;
  }
  set resourceManager(t) {
    this._resourceManager = t;
  }
  get inputs() {
    return this._inputs.map((t) => ({ name: t.name, shape: t.attrParams.shape ? t.attrParams.shape.value : void 0, dtype: t.attrParams.dtype ? t.attrParams.dtype.value : void 0 }));
  }
  get outputs() {
    return this._outputs.map((t) => ({ name: t.name, shape: t.attrParams.shape ? t.attrParams.shape.value : void 0, dtype: t.attrParams.dtype ? t.attrParams.dtype.value : void 0 }));
  }
  get inputNodes() {
    return this._inputs.map((t) => t.signatureKey || t.name);
  }
  get outputNodes() {
    return this._outputs.map((t) => {
      let n = t.signatureKey || t.name;
      return t.defaultOutput ? `${n}:${t.defaultOutput}` : n;
    });
  }
  get functions() {
    return Object.keys(this._functions).reduce((t, n) => (t[n] = this._functions[n].signature, t), {});
  }
  constructor(t, n) {
    this.graph = t, this.parent = n, this.compiledMap = /* @__PURE__ */ new Map(), this.parseNodeNameCache = /* @__PURE__ */ new Map(), this._weightMap = {}, this.SEPARATOR = ",", this._functions = {}, this._functionExecutorMap = {}, this.keepIntermediateTensors = false, this._outputs = t.outputs, this._inputs = t.inputs, this._initNodes = t.initNodes, this._signature = t.signature, this._functions = t.functions, t.functions != null && Object.keys(t.functions).forEach((a) => {
      this._functionExecutorMap[a] = new oE(t.functions[a], this);
    });
  }
  getCompilationKey(t, n) {
    let a = t.map((s) => s.name).sort(), r = n.map((s) => s.name).sort();
    return a.join(this.SEPARATOR) + "--" + r.join(this.SEPARATOR);
  }
  compile(t, n) {
    let a = HI(t, n, this.weightMap, this._initNodes), { missingInputs: r, dynamicNode: s, syncInputs: i } = a;
    if (s != null) throw new Error(`This execution contains the node '${s.name}', which has the dynamic op '${s.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${i}]`);
    if (r.length > 0) {
      let u = n.map((d) => d.name), p = Object.keys(t);
      throw new Error(`Cannot compute the outputs [${u}] from the provided inputs [${p}]. Missing the following inputs: [${r}]`);
    }
    let o = u5(this.graph, a), l = d5(o);
    return { orderedNodes: o, nodeLiveUntilMap: l };
  }
  cloneAndKeepTensor(t) {
    if (t == null) return null;
    let n = t.clone();
    return Ht(n), n;
  }
  cloneTensorList(t) {
    return t ? t.map((n) => this.cloneAndKeepTensor(n)) : null;
  }
  cloneTensorMap(t) {
    return Object.fromEntries(Object.entries(t).map(([n, a]) => [n, this.cloneTensorList(a)]));
  }
  execute(t, n) {
    this.disposeIntermediateTensors(), t = this.mapInputs(t);
    let a = Object.keys(t).sort();
    this.checkInputs(t), this.checkInputShapeAndType(t), n = this.mapOutputs(n), this.checkOutputs(n);
    let r = a.map((c) => this.graph.nodes[Xn(c)[0]]), s = n.map((c) => Xn(c)[0]), i = new Set(s), o = s.map((c) => this.graph.nodes[c]);
    o.length === 0 && (o = this._outputs);
    let l = this.getCompilationKey(r, o), u = this.compiledMap.get(l);
    u == null && (u = this.compile(t, o), this.compiledMap.set(l, u));
    try {
      this.keepIntermediateTensors = G().getBool("KEEP_INTERMEDIATE_TENSORS");
    } catch (c) {
      this.keepIntermediateTensors = false, console.warn(c.message);
    }
    let p = {}, d = {};
    return O(() => {
      let c = new GI(this.weightMap, p, d, this.functionExecutorMap, this.parseNodeNameCache), h = Object.assign({}, this.weightMap);
      this.keepIntermediateTensors && (this.clonedTensorsMap = this.cloneTensorMap(this.weightMap)), Object.keys(t).forEach((b) => {
        let [y, x] = Xn(b, c), v = [];
        v[x] = t[b], h[y] = v, this.keepIntermediateTensors && (this.clonedTensorsMap[y] = this.cloneTensorList(v));
      });
      let m = this.getFrozenTensorIds(h), { orderedNodes: f, nodeLiveUntilMap: g } = u;
      for (let b of f) {
        if (h[b.name]) continue;
        let y = UI(b, h, c, this._resourceManager);
        if (w.isPromise(y)) throw new Error(`The execution of the op '${b.op}' returned a promise. Please use model.executeAsync() instead.`);
        h[b.name] = y, this.keepIntermediateTensors && (this.clonedTensorsMap[b.name] = this.cloneTensorList(y)), this.checkTensorForDisposalWithNodeLiveUntilInfo(b, h, c, m, i, g.get(b.name));
      }
      return this.parent == null && c.dispose(m), n.map((b) => pn(b, h, c));
    });
  }
  getFrozenTensorIds(t) {
    let n = [].concat.apply([], Object.keys(t).map((a) => t[a]).map((a) => a.map((r) => r.id)));
    return new Set(n);
  }
  checkTensorForDisposal(t, n, a, r, s, i, o) {
    if (!(Qs(n) || i.has(t))) {
      for (let l of a[t]) l != null && (o[l.id] = (o[l.id] || 0) + n.children.length);
      for (let l of n.inputs) {
        if (Qs(l)) continue;
        let u = LI(l.name, a, r);
        if (u != null) for (let p of u) {
          if (!p || p.kept || s.has(p.id)) continue;
          let d = o[p.id];
          d === 1 ? (p.dispose(), delete o[p.id]) : d != null && o[p.id]--;
        }
      }
    }
  }
  checkTensorForDisposalWithNodeLiveUntilInfo(t, n, a, r, s, i) {
    function o(l) {
      return Qs(l) || s.has(l.name);
    }
    if (!(Qs(t) || i == null)) for (let l of i) {
      if (o(l)) continue;
      let u = LI(l.name, n, a);
      for (let p of u) !p || p.kept || r.has(p.id) || p.dispose();
    }
  }
  async executeAsync(t, n) {
    return this._executeAsync(t, n);
  }
  disposeIntermediateTensors() {
    this.clonedTensorsMap && (Object.values(this.clonedTensorsMap).forEach((t) => {
      for (let n of t) n && !n.isDisposed && n.dispose();
    }), this.clonedTensorsMap = null);
  }
  getIntermediateTensors() {
    return this.clonedTensorsMap;
  }
  async _executeAsync(t, n, a = false, r = {}, s = {}) {
    this.disposeIntermediateTensors(), a || (t = this.mapInputs(t), this.checkInputs(t), this.checkInputShapeAndType(t), n = this.mapOutputs(n), this.checkOutputs(n));
    try {
      this.keepIntermediateTensors = G().getBool("KEEP_INTERMEDIATE_TENSORS");
    } catch (c) {
      this.keepIntermediateTensors = false, console.warn(c.message);
    }
    let i = new GI(this.weightMap, r, s, this.functionExecutorMap, this.parseNodeNameCache);
    this.keepIntermediateTensors && (this.clonedTensorsMap = this.cloneTensorMap(this.weightMap));
    let o = await this.executeWithControlFlow(t, i, n, a), l = n.map((c) => pn(c, o, i)), u = l.map((c) => c.id), p = Object.keys(t).map((c) => t[c].id), d = /* @__PURE__ */ new Set([...u, ...p, ...this.weightIds]);
    return Object.values(o).forEach((c) => {
      c.forEach((h) => {
        h && !h.isDisposed && !d.has(h.id) && h.dispose();
      });
    }), this.parent == null && i.dispose(d), l;
  }
  async executeFunctionAsync(t, n, a) {
    let r = t.reduce((s, i, o) => (s[this.inputs[o].name] = i, s), {});
    return this._executeAsync(r, this.outputNodes, true, n, a);
  }
  async executeWithControlFlow(t, n, a, r) {
    let s = Object.keys(t), i = s.map((v) => this.graph.nodes[Xn(v)[0]]), o = a.map((v) => Xn(v)[0]), l = new Set(o), u = o.map((v) => this.graph.nodes[v]);
    u.length === 0 && (u = this._outputs);
    let { usedNodes: p, missingInputs: d, dynamicNode: c, syncInputs: h } = HI(t, u, this.weightMap, this._initNodes), m = [...i, ...this.graph.weights, ...this._initNodes || []].map((v) => ({ node: v, contexts: n.currentContext })), f = Object.assign({}, this.weightMap);
    Object.keys(t).forEach((v) => {
      let [I, N] = Xn(v), C = [];
      C[N] = t[v], f[I] = C;
    });
    let g = {}, b = this.getFrozenTensorIds(f), y = {};
    for (; m.length > 0; ) {
      let v = this.processStack(i, m, n, f, y, b, l, g, p);
      await Promise.all(v);
    }
    c == null && !r && console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");
    let x = u.filter((v) => !Qs(v) && !pn(v.name, f, n)).map((v) => v.name);
    if (x.length > 0) {
      let v = "";
      throw c != null && (v = `Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${h}]`), new Error(`Cannot compute the outputs [${x}] from the provided inputs [${s}]. Consider providing the following inputs: [${d}]. ${v}`);
    }
    return f;
  }
  processStack(t, n, a, r, s, i, o, l, u) {
    let p = [];
    for (; n.length > 0; ) {
      let d = n.pop();
      a.currentContext = d.contexts;
      let c = "";
      if (d.node.op === "Enter" && k("isConstant", d.node, r, a) && ([c] = Sr(d.node.name, a)), r[d.node.name] == null) {
        let h = UI(d.node, r, a, this._resourceManager);
        c || ([c] = Sr(d.node.name, a));
        let m = a.currentContext;
        w.isPromise(h) ? p.push(h.then((f) => (r[c] = f, this.keepIntermediateTensors && (this.clonedTensorsMap[c] = this.cloneTensorList(f)), a.currentContext = m, this.checkTensorForDisposal(c, d.node, r, a, i, o, l), this.processChildNodes(d.node, n, a, r, s, u), f))) : (r[c] = h, this.keepIntermediateTensors && (this.clonedTensorsMap[c] = this.cloneTensorList(h)), this.checkTensorForDisposal(c, d.node, r, a, i, o, l), this.processChildNodes(d.node, n, a, r, s, u));
      } else this.processChildNodes(d.node, n, a, r, s, u);
    }
    return p;
  }
  processChildNodes(t, n, a, r, s, i) {
    t.children.forEach((o) => {
      let [l] = Sr(o.name, a);
      s[l] || !i.has(o.name) || (o.op === "Merge" ? o.inputNames.some((u) => !!pn(u, r, a)) && (s[l] = true, n.push({ contexts: a.currentContext, node: o })) : o.inputNames.every((u) => !!pn(u, r, a)) && (s[l] = true, n.push({ contexts: a.currentContext, node: o })));
    });
  }
  dispose() {
    Object.keys(this.weightMap).forEach((t) => this.weightMap[t].forEach((n) => n.dispose()));
  }
  checkInputShapeAndType(t) {
    Object.keys(t).forEach((n) => {
      let a = t[n], [r] = Xn(n), s = this.graph.nodes[r];
      if (s.attrParams.shape && s.attrParams.shape.value) {
        let i = s.attrParams.shape.value, o = i.length === a.shape.length && a.shape.every((l, u) => i[u] === -1 || i[u] === l);
        w.assert(o, () => `The shape of dict['${s.name}'] provided in model.execute(dict) must be [${i}], but was [${a.shape}]`);
      }
      s.attrParams.dtype && s.attrParams.dtype.value && w.assert(a.dtype === s.attrParams.dtype.value, () => `The dtype of dict['${s.name}'] provided in model.execute(dict) must be ${s.attrParams.dtype.value}, but was ${a.dtype}`);
    });
  }
  mapInputs(t) {
    var n, a;
    let r = {};
    for (let s in t) {
      let i = (a = (n = this._signature) === null || n === void 0 ? void 0 : n.inputs) === null || a === void 0 ? void 0 : a[s];
      i != null ? r[i.name] = t[s] : r[s] = t[s];
    }
    return r;
  }
  checkInputs(t) {
    let n = Object.keys(t).filter((a) => {
      let [r] = Xn(a);
      return this.graph.nodes[r] == null;
    });
    if (n.length > 0) throw new Error(`The dict provided in model.execute(dict) has keys: [${n}] that are not part of graph`);
  }
  mapOutputs(t) {
    return t.map((n) => {
      var a, r;
      let s = (r = (a = this._signature) === null || a === void 0 ? void 0 : a.outputs) === null || r === void 0 ? void 0 : r[n];
      return s != null ? s.name : n;
    }, {});
  }
  checkOutputs(t) {
    t.forEach((n) => {
      let [a] = Xn(n);
      if (!this.graph.nodes[a]) throw new Error(`The output '${n}' is not found in the graph`);
    });
  }
};
var y5 = class {
  constructor(e17 = {}, t = {}) {
    this.hashTableNameToHandle = e17, this.hashTableMap = t;
  }
  addHashTable(e17, t) {
    this.hashTableNameToHandle[e17] = t.handle, this.hashTableMap[t.id] = t;
  }
  getHashTableHandleByName(e17) {
    return this.hashTableNameToHandle[e17];
  }
  getHashTableById(e17) {
    return this.hashTableMap[e17];
  }
  dispose() {
    for (let e17 in this.hashTableMap) this.hashTableMap[e17].clearAndClose(), delete this.hashTableMap[e17];
    for (let e17 in this.hashTableNameToHandle) this.hashTableNameToHandle[e17].dispose(), delete this.hashTableNameToHandle[e17];
  }
};
var x5 = "?tfjs-format=file";
var v5 = "model.json";
var F1 = class {
  get modelVersion() {
    return this.version;
  }
  get inputNodes() {
    return this.executor.inputNodes;
  }
  get outputNodes() {
    return this.executor.outputNodes;
  }
  get inputs() {
    return this.executor.inputs;
  }
  get outputs() {
    return this.executor.outputs;
  }
  get weights() {
    return this.executor.weightMap;
  }
  get metadata() {
    return this.artifacts.userDefinedMetadata;
  }
  get modelSignature() {
    return this.signature;
  }
  get modelStructuredOutputKeys() {
    return this.structuredOutputKeys;
  }
  constructor(e17, t = {}, n = jt) {
    this.modelUrl = e17, this.loadOptions = t, this.version = "n/a", this.io = n, t == null && (this.loadOptions = {}), this.resourceManager = new y5();
  }
  findIOHandler() {
    let e17 = this.modelUrl;
    if (e17.load != null) this.handler = e17;
    else if (this.loadOptions.requestInit != null) this.handler = this.io.browserHTTPRequest(e17, this.loadOptions);
    else {
      let t = this.io.getLoadHandlers(e17, this.loadOptions);
      if (t.length === 0) t.push(this.io.browserHTTPRequest(e17, this.loadOptions));
      else if (t.length > 1) throw new Error(`Found more than one (${t.length}) load handlers for URL '${[e17]}'`);
      this.handler = t[0];
    }
  }
  load() {
    if (this.findIOHandler(), this.handler.load == null) throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");
    let e17 = this.handler.load();
    return w.isPromise(e17) ? e17.then((t) => t.getWeightStream == null ? this.loadSync(t) : this.loadStreaming(t)) : this.loadSync(e17);
  }
  loadSync(e17) {
    let t = this.io.decodeWeights(e17.weightData, e17.weightSpecs);
    return this.loadWithWeightMap(e17, t);
  }
  async loadStreaming(e17) {
    if (e17.getWeightStream == null) throw new Error("Model artifacts missing streamWeights function");
    let t = await pN(e17.getWeightStream(), e17.weightSpecs);
    return this.loadWithWeightMap(e17, t);
  }
  loadWithWeightMap(e17, t) {
    this.artifacts = e17;
    let n = this.artifacts.modelTopology, a = this.artifacts.signature;
    if (this.artifacts.userDefinedMetadata != null) {
      let r = this.artifacts.userDefinedMetadata;
      r.signature != null && (a = r.signature), r.structuredOutputKeys != null && (this.structuredOutputKeys = r.structuredOutputKeys);
    }
    if (this.signature = a, this.version = `${n.versions.producer}.${n.versions.minConsumer}`, this.executor = new jI(zI.Instance.transformGraph(n, this.signature)), this.executor.weightMap = this.convertTensorMapToTensorsMap(t), this.executor.resourceManager = this.resourceManager, e17.modelInitializer != null && e17.modelInitializer.node != null) {
      let r = zI.Instance.transformGraph(e17.modelInitializer);
      this.initializer = new jI(r), this.initializer.weightMap = this.executor.weightMap, this.initializer.resourceManager = this.resourceManager, this.initializerSignature = e17.initializerSignature;
    }
    return true;
  }
  async save(e17, t) {
    if (typeof e17 == "string") {
      let n = this.io.getSaveHandlers(e17);
      if (n.length === 0) throw new Error(`Cannot find any save handlers for URL '${e17}'`);
      if (n.length > 1) throw new Error(`Found more than one (${n.length}) save handlers for URL '${e17}'`);
      e17 = n[0];
    }
    if (e17.save == null) throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");
    return e17.save(this.artifacts);
  }
  addStructuredOutputNames(e17) {
    if (this.structuredOutputKeys) {
      let t = e17 instanceof Ce ? [e17] : e17, n = {};
      return t.forEach((a, r) => n[this.structuredOutputKeys[r]] = a), n;
    }
    return e17;
  }
  predict(e17, t) {
    let n = this.execute(e17, this.outputNodes);
    return this.addStructuredOutputNames(n);
  }
  async predictAsync(e17, t) {
    let n = await this.executeAsync(e17, this.outputNodes);
    return this.addStructuredOutputNames(n);
  }
  normalizeInputs(e17) {
    var t;
    if (!(e17 instanceof Ce) && !Array.isArray(e17)) {
      let r = (t = this.signature) === null || t === void 0 ? void 0 : t.inputs;
      if (r != null) for (let s in r) {
        let i = r[s];
        i.resourceId != null && (e17[s] = this.resourceIdToCapturedInput[i.resourceId]);
      }
      return e17;
    }
    e17 = Array.isArray(e17) ? e17 : [e17];
    let n = Object.keys(this.resourceIdToCapturedInput).length;
    if (e17.length + n !== this.inputNodes.length) throw new Error(`Input tensor count mismatch, the graph model has ${this.inputNodes.length - n} non-resource placeholders, while there are ${e17.length} input tensors provided.`);
    let a = 0;
    return this.inputNodes.reduce((r, s) => {
      var i, o, l;
      let u = (l = (o = (i = this.signature) === null || i === void 0 ? void 0 : i.inputs) === null || o === void 0 ? void 0 : o[s]) === null || l === void 0 ? void 0 : l.resourceId;
      return u != null ? r[s] = this.resourceIdToCapturedInput[u] : r[s] = e17[a++], r;
    }, {});
  }
  normalizeOutputs(e17) {
    return e17 = e17 || this.outputNodes, Array.isArray(e17) ? e17 : [e17];
  }
  executeInitializerGraph() {
    return this.initializer == null ? [] : this.initializerSignature == null ? this.initializer.execute({}, []) : this.initializer.execute({}, Object.keys(this.initializerSignature.outputs));
  }
  async executeInitializerGraphAsync() {
    return this.initializer == null ? [] : this.initializerSignature == null ? this.initializer.executeAsync({}, []) : this.initializer.executeAsync({}, Object.keys(this.initializerSignature.outputs));
  }
  setResourceIdToCapturedInput(e17) {
    if (this.resourceIdToCapturedInput = {}, this.initializerSignature) {
      let t = this.initializerSignature.outputs, n = Object.keys(t);
      for (let a = 0; a < n.length; a++) {
        let r = n[a], s = t[r];
        this.resourceIdToCapturedInput[s.resourceId] = e17[a];
      }
    }
  }
  execute(e17, t) {
    this.resourceIdToCapturedInput == null && this.setResourceIdToCapturedInput(this.executeInitializerGraph()), e17 = this.normalizeInputs(e17), t = this.normalizeOutputs(t);
    let n = this.executor.execute(e17, t);
    return n.length > 1 ? n : n[0];
  }
  async executeAsync(e17, t) {
    this.resourceIdToCapturedInput == null && this.setResourceIdToCapturedInput(await this.executeInitializerGraphAsync()), e17 = this.normalizeInputs(e17), t = this.normalizeOutputs(t);
    let n = await this.executor.executeAsync(e17, t);
    return n.length > 1 ? n : n[0];
  }
  getIntermediateTensors() {
    return this.executor.getIntermediateTensors();
  }
  disposeIntermediateTensors() {
    this.executor.disposeIntermediateTensors();
  }
  convertTensorMapToTensorsMap(e17) {
    return Object.keys(e17).reduce((t, n) => (t[n] = [e17[n]], t), {});
  }
  dispose() {
    this.executor.dispose(), this.initializer && (this.initializer.dispose(), this.resourceIdToCapturedInput && Ee(this.resourceIdToCapturedInput)), this.resourceManager.dispose();
  }
};
async function w5(e17, t = {}, n = jt) {
  if (e17 == null) throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");
  t == null && (t = {}), t.fromTFHub && typeof e17 == "string" && (e17 = I5(e17));
  let a = new F1(e17, t, n);
  return await a.load(), a;
}
function k5(e17) {
  if (e17 == null) throw new Error("modelUrl in loadGraphModelSync() cannot be null. Please provide model artifacts or an IOHandler that loads the model");
  let t;
  if (e17 instanceof Array) {
    let [a, r] = e17;
    if (!a) throw new Error("modelJSON must be the first element of the array");
    if (!r || !(r instanceof ArrayBuffer)) throw new Error("An ArrayBuffer of weights must be the second element of the array");
    if (!("modelTopology" in a)) throw new Error("Model JSON is missing 'modelTopology'");
    if (!("weightsManifest" in a)) throw new Error("Model JSON is missing 'weightsManifest'");
    let s = jt.getWeightSpecs(a.weightsManifest), i = jt.getModelArtifactsForJSONSync(a, s, r);
    t = jt.fromMemorySync(i);
  } else if ("load" in e17) t = e17;
  else if ("modelTopology" in e17 && "weightSpecs" in e17 && "weightData" in e17) t = jt.fromMemorySync(e17);
  else throw new Error("Unknown model format");
  let n = new F1(t);
  return n.load(), n;
}
function I5(e17) {
  return e17.endsWith("/") || (e17 = e17 + "/"), `${e17}${v5}${x5}`;
}
var S5 = "4.22.0";
var lE = {};
_e(lE, { CSVDataset: () => xE, Dataset: () => ip, FileDataSource: () => TE, TextLineDataset: () => yE, URLDataSource: () => CE, array: () => q5, csv: () => i8, func: () => o8, generator: () => l8, microphone: () => p8, version_data: () => c8, webcam: () => u8, zip: () => K5 });
var N5 = xs(bm());
var T5 = xs(bm());
function C5(e17, t) {
  return om(e17, t);
}
function om(e17, t, n = /* @__PURE__ */ new Map(), a = /* @__PURE__ */ new Set()) {
  if (e17 == null) return null;
  if (typeof Blob == "function" && e17 instanceof Blob) return e17.slice();
  if (a.has(e17)) throw new Error("Circular references are not supported.");
  if (n.has(e17)) return n.get(e17);
  let r = t(e17);
  if (r.recurse && r.value !== null) throw new Error("A deep map function may not return both a value and recurse=true.");
  if (r.recurse) if (Hl(e17)) {
    let s = Array.isArray(e17) ? [] : {};
    a.add(e17);
    for (let i in e17) {
      let o = e17[i], l = om(o, t, n, a);
      s[i] = l;
    }
    return a.delete(e17), e17.__proto__ && (s.__proto__ = e17.__proto__), s;
  } else throw new Error(`Can't recurse into non-iterable type: ${e17}`);
  else return n.set(e17, r.value), r.value;
}
function E5(e17, t = pE) {
  return uE(e17, t);
}
function uE(e17, t, n = /* @__PURE__ */ new Set()) {
  let a = e17[0];
  if (n.has(a)) throw new Error("Circular references are not supported.");
  let r = t(e17);
  if (r.recurse && r.value !== null) throw new Error("A deep zip function may not return both a value and recurse=true.");
  if (r.recurse) if (Hl(a)) {
    let s = Array.isArray(a) ? [] : {};
    n.add(a);
    for (let i in a) {
      let o = e17.map((u) => u[i]), l = uE(o, t, n);
      s[i] = l;
    }
    return n.delete(a), s;
  } else throw new Error(`Can't recurse into non-iterable type: ${a}`);
  else return r.value;
}
function pE(e17) {
  return e17 === null ? null : Hl(e17[0]) ? { value: null, recurse: true } : { value: e17, recurse: false };
}
async function cE(e17, t) {
  let n = /* @__PURE__ */ new Map();
  om(e17, t, n);
  for (let a of Array.from(n.keys())) {
    let r = n.get(a);
    if (w.isPromise(r)) {
      let s = await r;
      n.set(a, s);
    }
  }
  return om(e17, t, n);
}
function Hl(e17) {
  let t = false;
  if (G().get("IS_BROWSER")) t = e17 instanceof TextDecoder;
  else {
    let { StringDecoder: n } = FS();
    t = e17 instanceof n;
  }
  return e17 != null && !ArrayBuffer.isView(e17) && (Array.isArray(e17) || typeof e17 == "object" && !(e17 instanceof Ce) && !(e17 instanceof Promise) && !t);
}
function _5(e17) {
  return e17 == null || A5(e17) || Array.isArray(e17) || typeof e17 == "object" && e17 instanceof Ce || w.isTypedArray(e17);
}
function A5(e17) {
  return e17 === null || typeof e17 != "object" && typeof e17 != "function";
}
function F5(e17) {
  return C5(e17, $5);
}
function $5(e17) {
  return e17 instanceof Ce ? { value: e17.clone(), recurse: false } : Hl(e17) ? { value: null, recurse: true } : { value: e17, recurse: false };
}
var dE = class {
  constructor(e17) {
    if (this.capacity = e17, this.begin = 0, this.end = 0, e17 == null) throw new RangeError("Can't create a ring buffer of unknown capacity.");
    if (e17 < 1) throw new RangeError("Can't create ring buffer of capacity < 1.");
    this.data = new Array(e17), this.doubledCapacity = 2 * e17;
  }
  wrap(e17) {
    for (; e17 < 0; ) e17 += this.doubledCapacity;
    return e17 % this.doubledCapacity;
  }
  get(e17) {
    if (e17 < 0) throw new RangeError("Can't get item at a negative index.");
    return this.data[e17 % this.capacity];
  }
  set(e17, t) {
    if (e17 < 0) throw new RangeError("Can't set item at a negative index.");
    this.data[e17 % this.capacity] = t;
  }
  length() {
    let e17 = this.end - this.begin;
    return e17 < 0 && (e17 = this.doubledCapacity + e17), e17;
  }
  isFull() {
    return this.length() === this.capacity;
  }
  isEmpty() {
    return this.length() === 0;
  }
  push(e17) {
    if (this.isFull()) throw new RangeError("Ring buffer is full.");
    this.set(this.end, e17), this.end = this.wrap(this.end + 1);
  }
  pushAll(e17) {
    for (let t of e17) this.push(t);
  }
  pop() {
    if (this.isEmpty()) throw new RangeError("Ring buffer is empty.");
    this.end = this.wrap(this.end - 1);
    let e17 = this.get(this.end);
    return this.set(this.end, void 0), e17;
  }
  unshift(e17) {
    if (this.isFull()) throw new RangeError("Ring buffer is full.");
    this.begin = this.wrap(this.begin - 1), this.set(this.begin, e17);
  }
  shift() {
    if (this.isEmpty()) throw new RangeError("Ring buffer is empty.");
    let e17 = this.get(this.begin);
    return this.set(this.begin, void 0), this.begin = this.wrap(this.begin + 1), e17;
  }
  shuffleExcise(e17) {
    if (this.isEmpty()) throw new RangeError("Ring buffer is empty.");
    let t = this.wrap(this.begin + e17), n = this.get(t);
    return this.set(t, this.pop()), n;
  }
};
var hE = class mE extends dE {
  constructor() {
    super(mE.INITIAL_CAPACITY);
  }
  isFull() {
    return false;
  }
  push(t) {
    super.isFull() && this.expand(), super.push(t);
  }
  unshift(t) {
    super.isFull() && this.expand(), super.unshift(t);
  }
  expand() {
    let t = this.capacity * 2, n = new Array(t), a = this.length();
    for (let r = 0; r < a; r++) n[r] = this.get(this.wrap(this.begin + r));
    this.data = n, this.capacity = t, this.doubledCapacity = 2 * this.capacity, this.begin = 0, this.end = a;
  }
};
hE.INITIAL_CAPACITY = 32;
function fE(e17) {
  return new M5(e17);
}
function $1(e17) {
  return new O5(e17);
}
function D5(e17, t) {
  return new gE(e17, t);
}
function R5(e17, t = es.FAIL) {
  return new H5(e17, t);
}
var sn = class {
  async toArray() {
    let e17 = [], t = await this.next();
    for (; !t.done; ) e17.push(t.value), t = await this.next();
    return e17;
  }
  async toArrayForTest() {
    let e17 = this.prefetch(100), t = [], n = await e17.next();
    for (; !n.done; ) t.push(n.value), n = await e17.next();
    return t;
  }
  async resolveFully() {
    let e17 = await this.next();
    for (; !e17.done; ) e17 = await this.next();
  }
  async resolveWhile(e17) {
    let t = await this.next(), n = e17(t.value);
    for (; !t.done && n; ) t = await this.next(), n = e17(t.value);
  }
  handleErrors(e17) {
    return new U5(this, e17);
  }
  filter(e17) {
    return new B5(this, e17);
  }
  map(e17) {
    return new V5(this, e17);
  }
  mapAsync(e17) {
    return new qI(this, e17);
  }
  serialMapAsync(e17) {
    return new qI(this, e17).serial();
  }
  flatmap(e17) {
    return new G5(this, e17);
  }
  async forEachAsync(e17) {
    return this.map(e17).resolveFully();
  }
  async serialForEach(e17) {
    return this.serialMapAsync(e17).resolveWhile((t) => t === true);
  }
  rowMajorBatch(e17, t = true) {
    return new W5(this, e17, t);
  }
  columnMajorBatch(e17, t = true, n = pE) {
    return this.rowMajorBatch(e17, t).map((a) => E5(a, n));
  }
  concatenate(e17, t) {
    return new gE(fE([this, e17]), t);
  }
  take(e17) {
    return e17 < 0 || e17 == null ? this : new z5(this, e17);
  }
  skip(e17) {
    return e17 < 0 || e17 == null ? this : new L5(this, e17);
  }
  prefetch(e17) {
    return new bE(this, e17);
  }
  shuffle(e17, t) {
    return new j5(this, e17, t);
  }
  serial() {
    return new P5(this);
  }
};
var M5 = class extends sn {
  constructor(e17) {
    super(), this.items = e17, this.trav = 0;
  }
  summary() {
    return `Array of ${this.items.length} items`;
  }
  async next() {
    if (this.trav >= this.items.length) return { value: null, done: true };
    let e17 = this.items[this.trav];
    return this.trav++, { value: F5(e17), done: false };
  }
};
var O5 = class extends sn {
  constructor(e17) {
    super(), this.nextFn = e17;
  }
  summary() {
    return "Function call";
  }
  async next() {
    try {
      return this.nextFn();
    } catch (e17) {
      throw e17.message = `Error thrown while iterating through a dataset: ${e17.message}`, e17;
    }
  }
};
var P5 = class extends sn {
  constructor(e17) {
    super(), this.upstream = e17, this.lastRead = Promise.resolve({ value: null, done: false });
  }
  summary() {
    return `${this.upstream.summary()} -> Serial`;
  }
  async next() {
    return this.lastRead = this.lastRead.then(() => this.serialNext()), this.lastRead;
  }
  async serialNext() {
    return this.upstream.next();
  }
};
var L5 = class extends sn {
  constructor(e17, t) {
    super(), this.upstream = e17, this.maxCount = t, this.count = 0, this.lastRead = Promise.resolve({ value: null, done: false });
  }
  summary() {
    return `${this.upstream.summary()} -> Skip`;
  }
  async next() {
    return this.lastRead = this.lastRead.then(() => this.serialNext()), this.lastRead;
  }
  async serialNext() {
    for (; this.count++ < this.maxCount; ) {
      let e17 = await this.upstream.next();
      if (e17.done) return e17;
      Ee(e17.value);
    }
    return this.upstream.next();
  }
};
var z5 = class extends sn {
  constructor(e17, t) {
    super(), this.upstream = e17, this.maxCount = t, this.count = 0;
  }
  summary() {
    return `${this.upstream.summary()} -> Take`;
  }
  async next() {
    return this.count++ >= this.maxCount ? { value: null, done: true } : this.upstream.next();
  }
};
var W5 = class extends sn {
  constructor(e17, t, n = true) {
    super(), this.upstream = e17, this.batchSize = t, this.enableSmallLastBatch = n, this.lastRead = Promise.resolve({ value: null, done: false });
  }
  summary() {
    return `${this.upstream.summary()} -> RowMajorBatch`;
  }
  async next() {
    return this.lastRead = this.lastRead.then(() => this.serialNext()), this.lastRead;
  }
  async serialNext() {
    let e17 = [];
    for (; e17.length < this.batchSize; ) {
      let t = await this.upstream.next();
      if (t.done) return this.enableSmallLastBatch && e17.length > 0 ? { value: e17, done: false } : { value: null, done: true };
      e17.push(t.value);
    }
    return { value: e17, done: false };
  }
};
var B5 = class extends sn {
  constructor(e17, t) {
    super(), this.upstream = e17, this.predicate = t, this.lastRead = Promise.resolve({ value: null, done: false });
  }
  summary() {
    return `${this.upstream.summary()} -> Filter`;
  }
  async next() {
    return this.lastRead = this.lastRead.then(() => this.serialNext()), this.lastRead;
  }
  async serialNext() {
    for (; ; ) {
      let e17 = await this.upstream.next();
      if (e17.done || this.predicate(e17.value)) return e17;
      Ee(e17.value);
    }
  }
};
var V5 = class extends sn {
  constructor(e17, t) {
    super(), this.upstream = e17, this.transform = t;
  }
  summary() {
    return `${this.upstream.summary()} -> Map`;
  }
  async next() {
    let e17 = await this.upstream.next();
    if (e17.done) return { value: null, done: true };
    let t = Wa.getTensorsInContainer(e17.value), n = this.transform(e17.value), a = Wa.getTensorsInContainer(n);
    for (let r of t) Wa.isTensorInList(r, a) || r.dispose();
    return { value: n, done: false };
  }
};
var U5 = class extends sn {
  constructor(e17, t) {
    super(), this.upstream = e17, this.handler = t, this.count = 0, this.lastRead = Promise.resolve({ value: null, done: false });
  }
  summary() {
    return `${this.upstream.summary()} -> handleErrors`;
  }
  async next() {
    return this.lastRead = this.lastRead.then(() => this.serialNext()), this.lastRead;
  }
  async serialNext() {
    for (; ; ) try {
      return await this.upstream.next();
    } catch (e17) {
      if (!this.handler(e17)) return { value: null, done: true };
    }
  }
};
var qI = class extends sn {
  constructor(e17, t) {
    super(), this.upstream = e17, this.transform = t;
  }
  summary() {
    return `${this.upstream.summary()} -> AsyncMap`;
  }
  async next() {
    let e17 = await this.upstream.next();
    if (e17.done) return { value: null, done: true };
    let t = Wa.getTensorsInContainer(e17.value), n = await this.transform(e17.value), a = Wa.getTensorsInContainer(n);
    for (let r of t) Wa.isTensorInList(r, a) || r.dispose();
    return { value: n, done: false };
  }
};
var D1 = class extends sn {
  constructor() {
    super(), this.outputQueue = new hE(), this.lastRead = Promise.resolve({ value: null, done: false });
  }
  async next() {
    return this.lastRead = this.lastRead.then(() => this.serialNext()), this.lastRead;
  }
  async serialNext() {
    for (; this.outputQueue.length() === 0; ) if (!await this.pump()) return { value: null, done: true };
    return { value: this.outputQueue.shift(), done: false };
  }
};
var G5 = class extends D1 {
  constructor(e17, t) {
    super(), this.upstream = e17, this.transform = t;
  }
  summary() {
    return `${this.upstream.summary()} -> Flatmap`;
  }
  async pump() {
    let e17 = await this.upstream.next();
    if (e17.done) return false;
    let t = Wa.getTensorsInContainer(e17.value), n = this.transform(e17.value), a = Wa.getTensorsInContainer(n);
    this.outputQueue.pushAll(n);
    for (let r of t) Wa.isTensorInList(r, a) || r.dispose();
    return true;
  }
};
var gE = class extends sn {
  constructor(e17, t) {
    super(), this.baseErrorHandler = t, this.lastRead = null, this.iterator = null, this.moreIterators = e17;
  }
  summary() {
    return "TODO: fill in upstream of chained summaries -> Chained";
  }
  async next() {
    return this.lastRead = this.readFromChain(this.lastRead), this.lastRead;
  }
  async readFromChain(e17) {
    if (await e17, this.iterator == null) {
      let n = await this.moreIterators.next();
      if (n.done) return { value: null, done: true };
      this.iterator = n.value, this.baseErrorHandler != null && (this.iterator = this.iterator.handleErrors(this.baseErrorHandler));
    }
    let t = await this.iterator.next();
    return t.done ? (this.iterator = null, this.readFromChain(e17)) : t;
  }
};
var es;
(function(e17) {
  e17[e17.FAIL = 0] = "FAIL", e17[e17.SHORTEST = 1] = "SHORTEST", e17[e17.LONGEST = 2] = "LONGEST";
})(es || (es = {}));
var H5 = class extends sn {
  constructor(e17, t = es.FAIL) {
    super(), this.iterators = e17, this.mismatchMode = t, this.count = 0, this.currentPromise = null;
  }
  summary() {
    return "{TODO: fill in upstream of zip summaries} -> Zip";
  }
  async nextState(e17) {
    await e17;
    let t = 0, n = 0;
    function a(s) {
      return s instanceof sn ? { value: s.next().then((i) => (t++, i.done && n++, i.value)), recurse: false } : { value: null, recurse: true };
    }
    let r = await cE(this.iterators, a);
    if (t === n) return { value: null, done: true };
    if (n > 0) switch (this.mismatchMode) {
      case es.FAIL:
        throw new Error(`Zipped streams should have the same length. Mismatched at element ${this.count}.`);
      case es.SHORTEST:
        return { value: null, done: true };
      case es.LONGEST:
      default:
    }
    return this.count++, { value: r, done: false };
  }
  async next() {
    return this.currentPromise = this.nextState(this.currentPromise), this.currentPromise;
  }
};
var bE = class extends sn {
  constructor(e17, t) {
    super(), this.upstream = e17, this.bufferSize = t, this.buffer = new dE(t);
  }
  summary() {
    return `${this.upstream.summary()} -> Prefetch`;
  }
  refill() {
    for (; !this.buffer.isFull(); ) {
      let e17 = this.upstream.next();
      this.buffer.push(e17);
    }
  }
  next() {
    return this.refill(), this.buffer.shift();
  }
};
var j5 = class extends bE {
  constructor(e17, t, n) {
    super(e17, t), this.upstream = e17, this.windowSize = t, this.upstreamExhausted = false, this.random = T5.alea(n || w.now().toString()), this.lastRead = Promise.resolve({ value: null, done: false });
  }
  async next() {
    return this.lastRead = this.lastRead.then(() => this.serialNext()), this.lastRead;
  }
  randomInt(e17) {
    return Math.floor(this.random() * e17);
  }
  chooseIndex() {
    return this.randomInt(this.buffer.length());
  }
  async serialNext() {
    for (this.upstreamExhausted || this.refill(); !this.buffer.isEmpty(); ) {
      let e17 = this.chooseIndex(), t = await this.buffer.shuffleExcise(e17);
      if (t.done) this.upstreamExhausted = true;
      else return this.refill(), t;
    }
    return { value: null, done: true };
  }
};
var ip = class {
  constructor() {
    this.size = null;
  }
  batch(e17, t = true) {
    let n = this;
    w.assert(e17 > 0, () => `batchSize needs to be positive, but it is
      ${e17}`);
    let a;
    return this.size === 1 / 0 || this.size == null ? a = this.size : t ? a = Math.ceil(this.size / e17) : a = Math.floor(this.size / e17), Kn(async () => (await n.iterator()).columnMajorBatch(e17, t, X5), a);
  }
  concatenate(e17) {
    let t = this, n;
    return this.size === 1 / 0 || e17.size === 1 / 0 ? n = 1 / 0 : this.size != null && e17.size != null ? n = this.size + e17.size : n = null, Kn(async () => (await t.iterator()).concatenate(await e17.iterator()), n);
  }
  filter(e17) {
    let t = this, n;
    return this.size === 1 / 0 ? n = 1 / 0 : n = null, Kn(async () => (await t.iterator()).filter((a) => O(() => e17(a))), n);
  }
  async forEachAsync(e17) {
    return (await this.iterator()).forEachAsync(e17);
  }
  map(e17) {
    let t = this;
    return Kn(async () => (await t.iterator()).map((n) => O(() => e17(n))), this.size);
  }
  mapAsync(e17) {
    let t = this;
    return Kn(async () => (await t.iterator()).mapAsync(e17), this.size);
  }
  prefetch(e17) {
    if (e17 == null) throw new RangeError("`Dataset.prefetch()` requires bufferSize to be specified.");
    let t = this;
    return Kn(async () => (await t.iterator()).prefetch(e17), this.size);
  }
  repeat(e17) {
    let t = this, n;
    return this.size != null && e17 > 0 ? n = this.size * e17 : e17 === 0 ? n = 0 : this.size != null && (e17 === void 0 || e17 < 0) ? n = 1 / 0 : n = null, Kn(async () => {
      let a = $1(async () => ({ value: await t.iterator(), done: false }));
      return D5(a.take(e17));
    }, n);
  }
  skip(e17) {
    let t = this, n;
    return this.size != null && e17 >= 0 && this.size >= e17 ? n = this.size - e17 : this.size != null && (this.size < e17 || e17 === void 0 || e17 < 0) ? n = 0 : n = null, Kn(async () => (await t.iterator()).skip(e17), n);
  }
  shuffle(e17, t, n = true) {
    if (e17 == null || e17 < 0) throw this.size == null ? new RangeError("`Dataset.shuffle()` requires bufferSize to be specified.") : new RangeError(`\`Dataset.shuffle()\` requires bufferSize to be specified.  If your data fits in main memory (for regular JS objects), and/or GPU memory (for \`tf.Tensor\`s), consider setting bufferSize to the dataset size (${this.size} elements)`);
    let a = this, r = N5.alea(t || w.now().toString());
    return Kn(async () => {
      let s = r.int32();
      return n && (s += r.int32()), (await a.iterator()).shuffle(e17, s.toString());
    }, this.size);
  }
  take(e17) {
    let t = this, n;
    return this.size != null && this.size > e17 ? n = e17 : this.size != null && this.size <= e17 ? n = this.size : n = null, Kn(async () => (await t.iterator()).take(e17), n);
  }
  async toArray() {
    if (this.size === 1 / 0) throw new Error("Can not convert infinite data stream to array.");
    return (await this.iterator()).toArray();
  }
  async toArrayForTest() {
    if (this.size === 1 / 0) throw new Error("Can not convert infinite data stream to array.");
    return (await this.iterator()).toArrayForTest();
  }
};
ip.MAX_BUFFER_SIZE = 1e4;
function Kn(e17, t = null) {
  return new class extends ip {
    constructor() {
      super(...arguments), this.size = t;
    }
    async iterator() {
      return e17();
    }
  }();
}
function q5(e17) {
  return Kn(async () => fE(e17), e17.length);
}
function K5(e17) {
  if (!Hl(e17)) throw new Error("The argument to zip() must be an object or array.");
  let t;
  if (Array.isArray(e17)) for (let n = 0; n < e17.length; n++) t = t == null ? e17[n].size : Math.min(t, e17[n].size);
  else if (e17 instanceof Object) for (let n in e17) t = t == null ? e17[n].size : Math.min(t, e17[n].size);
  return Kn(async () => {
    let n = await cE(e17, (a) => {
      if (a instanceof ip) return { value: a.iterator(), recurse: false };
      if (Hl(a)) return { value: null, recurse: true };
      throw new Error("Leaves of the structure passed to zip() must be Datasets, not primitives.");
    });
    return R5(n, es.SHORTEST);
  }, t);
}
function X5(e17) {
  if (e17 === null) return null;
  let t = e17[0];
  return _5(t) ? { value: Y5(e17), recurse: false } : { value: null, recurse: true };
}
function Y5(e17) {
  if (e17.length === 0) throw new Error("Can't make a batch of zero elements.");
  return e17[0] instanceof Ce ? At(e17) : bn(e17);
}
var yE = class extends ip {
  constructor(e17) {
    super(), this.input = e17;
  }
  async iterator() {
    return (await this.input.iterator()).decodeUTF8().split(`
`).map((e17) => (e17.endsWith("\r") && (e17 = e17.slice(0, -1)), e17));
  }
};
var Ch = '"';
var Jp = Symbol("out");
var KI = Symbol("field");
var Eh = Symbol("quote");
var bx = Symbol("quoteafterquote");
var XI = Symbol("quoteinquote");
var xE = class extends ip {
  async columnNames() {
    return this.columnNamesValidated || await this.setColumnNames(), this.configuredColumnsOnly ? Object.keys(this.columnConfigs) : this.fullColumnNames;
  }
  async setColumnNames() {
    let e17 = await this.maybeReadHeaderLine();
    if (!this.fullColumnNames && !e17) throw new Error("Column names must be provided if there is no header line.");
    this.fullColumnNames && e17 && w.assert(e17.length === this.fullColumnNames.length, () => "The length of provided columnNames (" + this.fullColumnNames.length.toString() + ") does not match the length of the header line read from file (" + e17.length.toString() + ")."), this.fullColumnNames || (this.fullColumnNames = e17);
    let t = this.fullColumnNames.reduce((a, r) => (a[r] = a[r] + 1 || 1, a), {}), n = Object.keys(t).filter((a) => t[a] > 1);
    if (w.assert(n.length === 0, () => "Duplicate column names found: " + n.toString()), this.columnConfigs) {
      for (let a of Object.keys(this.columnConfigs)) if (this.fullColumnNames.indexOf(a) === -1) throw new Error('The key "' + a + '" provided in columnConfigs does not match any of the column names (' + this.fullColumnNames.toString() + ").");
    }
    this.columnNamesValidated = true;
  }
  async maybeReadHeaderLine() {
    if (this.hasHeader) {
      let e17 = await (await this.base.iterator()).next();
      if (e17.done) throw new Error("No data was found for CSV parsing.");
      let t = e17.value;
      return this.parseRow(t, false);
    } else return null;
  }
  constructor(e17, t) {
    super(), this.input = e17, this.hasHeader = true, this.fullColumnNames = null, this.columnNamesValidated = false, this.columnConfigs = null, this.configuredColumnsOnly = false, this.delimiter = ",", this.delimWhitespace = false, this.base = new yE(e17), t || (t = {}), this.hasHeader = t.hasHeader !== false, this.fullColumnNames = t.columnNames, this.columnConfigs = t.columnConfigs, this.configuredColumnsOnly = t.configuredColumnsOnly, t.delimWhitespace ? (w.assert(t.delimiter == null, () => "Delimiter should not be provided when delimWhitespace is true."), this.delimWhitespace = true, this.delimiter = " ") : this.delimiter = t.delimiter ? t.delimiter : ",";
  }
  async iterator() {
    this.columnNamesValidated || await this.setColumnNames();
    let e17 = await this.base.iterator();
    return this.hasHeader && (e17 = e17.skip(1)), e17.map((t) => this.makeDataElement(t));
  }
  makeDataElement(e17) {
    let t = this.parseRow(e17), n = {}, a = {};
    for (let r = 0; r < this.fullColumnNames.length; r++) {
      let s = this.fullColumnNames[r], i = this.columnConfigs ? this.columnConfigs[s] : null;
      if (!(this.configuredColumnsOnly && !i)) {
        let o = t[r], l = null;
        if (o === "") if (i && i.default !== void 0) l = i.default;
        else {
          if (i && (i.required || i.isLabel)) throw new Error(`Required column ${s} is empty in this line: ${e17}`);
          l = void 0;
        }
        else {
          let u = Number(o);
          if (isNaN(u)) i && i.dtype === "bool" ? l = this.getBoolean(o) : l = o;
          else if (!i || !i.dtype) l = u;
          else switch (i.dtype) {
            case "float32":
              l = u;
              break;
            case "int32":
              l = Math.floor(u);
              break;
            case "bool":
              l = this.getBoolean(o);
              break;
            default:
              l = u;
          }
        }
        i && i.isLabel ? a[s] = l : n[s] = l;
      }
    }
    return Object.keys(a).length === 0 ? n : { xs: n, ys: a };
  }
  getBoolean(e17) {
    return e17 === "1" || e17.toLowerCase() === "true" ? 1 : 0;
  }
  parseRow(e17, t = true) {
    let n = [], a = 0, r = e17.length, s = Jp;
    for (let i = 0; i < r; i++) switch (s) {
      case Jp:
        switch (e17.charAt(i)) {
          case Ch:
            a = i + 1, s = Eh;
            break;
          case this.delimiter:
            if (a = i + 1, this.delimiter === " " && this.delimWhitespace) break;
            n.push(""), s = Jp;
            break;
          default:
            s = KI, a = i;
            break;
        }
        break;
      case KI:
        switch (e17.charAt(i)) {
          case this.delimiter:
            n.push(e17.substring(a, i)), s = Jp, a = i + 1;
            break;
          default:
        }
        break;
      case Eh:
        switch (e17.charAt(i)) {
          case Ch:
            s = bx;
            break;
          default:
        }
        break;
      case bx:
        switch (e17.charAt(i)) {
          case this.delimiter:
            n.push(e17.substring(a, i - 1)), s = Jp, a = i + 1;
            break;
          case Ch:
            s = Eh;
            break;
          default:
            s = XI;
            break;
        }
        break;
      case XI:
        switch (e17.charAt(i)) {
          case Ch:
            s = Eh;
            break;
          default:
        }
        break;
      default:
    }
    if (s === bx ? n.push(e17.substring(a, r - 1)) : n.push(e17.substring(a)), t && n.length !== this.fullColumnNames.length) throw new Error(`Invalid row in csv file. Should have ${this.fullColumnNames.length} elements in a row, but got ${n}`);
    return n;
  }
};
var Z5 = class vE extends sn {
  constructor(t) {
    super(), this.microphoneConfig = t, this.isClosed = false, this.fftSize = t.fftSize || 1024;
    let n = Math.log2(this.fftSize);
    if (this.fftSize < 0 || n < 4 || n > 14 || !Number.isInteger(n)) throw new Error(`Invalid fftSize: it must be a power of 2 between 2 to 4 and 2 to 14, but got ${this.fftSize}`);
    if (this.numFrames = t.numFramesPerSpectrogram || 43, this.sampleRateHz = t.sampleRateHz, this.columnTruncateLength = t.columnTruncateLength || this.fftSize, this.audioTrackConstraints = t.audioTrackConstraints, this.smoothingTimeConstant = t.smoothingTimeConstant || 0, this.includeSpectrogram = t.includeSpectrogram !== false, this.includeWaveform = t.includeWaveform === true, !this.includeSpectrogram && !this.includeWaveform) throw new Error("Both includeSpectrogram and includeWaveform are false. At least one type of data should be returned.");
  }
  summary() {
    return "microphone";
  }
  static async create(t = {}) {
    if (!G().get("IS_BROWSER")) throw new Error("microphone API is only supported in browser environment.");
    let n = new vE(t);
    return await n.start(), n;
  }
  async start() {
    try {
      this.stream = await navigator.mediaDevices.getUserMedia({ audio: this.audioTrackConstraints == null ? true : this.audioTrackConstraints, video: false });
    } catch (a) {
      throw new Error(`Error thrown while initializing video stream: ${a.message}`);
    }
    if (!this.stream) throw new Error("Could not obtain audio from microphone.");
    let t = window.AudioContext || window.webkitAudioContext;
    if (this.audioContext = new t(), !this.sampleRateHz) this.sampleRateHz = this.audioContext.sampleRate;
    else if (this.audioContext.sampleRate !== this.sampleRateHz) throw new Error(`Mismatch in sampling rate: Expected: ${this.sampleRateHz}; Actual: ${this.audioContext.sampleRate}`);
    let n = this.audioContext.createMediaStreamSource(this.stream);
    this.analyser = this.audioContext.createAnalyser(), this.analyser.fftSize = this.fftSize * 2, this.analyser.smoothingTimeConstant = this.smoothingTimeConstant, n.connect(this.analyser), this.freqData = new Float32Array(this.fftSize), this.timeData = new Float32Array(this.fftSize);
  }
  async next() {
    if (this.isClosed) return { value: null, done: true };
    let t, n, a = await this.getAudioData();
    if (this.includeSpectrogram) {
      let r = this.flattenQueue(a.freqDataQueue);
      t = this.getTensorFromAudioDataArray(r, [this.numFrames, this.columnTruncateLength, 1]);
    }
    if (this.includeWaveform) {
      let r = this.flattenQueue(a.timeDataQueue);
      n = this.getTensorFromAudioDataArray(r, [this.numFrames * this.fftSize, 1]);
    }
    return { value: { spectrogram: t, waveform: n }, done: false };
  }
  async capture() {
    return (await this.next()).value;
  }
  async getAudioData() {
    let t = [], n = [], a = 0;
    return new Promise((r) => {
      let s = setInterval(() => {
        this.includeSpectrogram && (this.analyser.getFloatFrequencyData(this.freqData), this.freqData[0] === -1 / 0 && r({ freqDataQueue: t, timeDataQueue: n }), t.push(this.freqData.slice(0, this.columnTruncateLength))), this.includeWaveform && (this.analyser.getFloatTimeDomainData(this.timeData), n.push(this.timeData.slice())), ++a === this.numFrames && (clearInterval(s), r({ freqDataQueue: t, timeDataQueue: n }));
      }, this.fftSize / this.sampleRateHz * 1e3);
    });
  }
  stop() {
    this.isClosed || (this.isClosed = true, this.analyser.disconnect(), this.audioContext.close(), this.stream != null && this.stream.getTracks().length > 0 && this.stream.getTracks()[0].stop());
  }
  toArray() {
    throw new Error("Can not convert infinite audio stream to array.");
  }
  getSampleRate() {
    return this.sampleRateHz;
  }
  flattenQueue(t) {
    let n = t[0].length, a = new Float32Array(t.length * n);
    return t.forEach((r, s) => a.set(r, s * n)), a;
  }
  getTensorFromAudioDataArray(t, n) {
    let a = new Float32Array(w.sizeFromShape(n));
    return a.set(t, a.length - t.length), bn(a, n);
  }
};
var J5 = class wE extends sn {
  constructor(t, n) {
    if (super(), this.webcamVideoElement = t, this.webcamConfig = n, this.isClosed = true, this.resize = false, this.needToResize()) if (this.resize = true, this.cropSize = [this.webcamConfig.resizeHeight, this.webcamConfig.resizeWidth], this.cropBoxInd = je([0], "int32"), this.webcamConfig.centerCrop) {
      let a = this.webcamConfig.resizeWidth * 1 / this.webcamVideoElement.width, r = this.webcamConfig.resizeHeight * 1 / this.webcamVideoElement.height, s = (1 - a) / 2, i = (1 - r) / 2, o = s + a, l = r + i;
      this.cropBox = Ea([i, s, l, o], [1, 4]);
    } else this.cropBox = Ea([0, 0, 1, 1], [1, 4]);
  }
  summary() {
    return "webcam";
  }
  static async create(t, n = {}) {
    if (!G().get("IS_BROWSER")) throw new Error("tf.data.webcam is only supported in browser environment.");
    if (!t) {
      if (t = document.createElement("video"), !n.resizeWidth || !n.resizeHeight) throw new Error("Please provide webcam video element, or resizeWidth and resizeHeight to create a hidden video element.");
      t.width = n.resizeWidth, t.height = n.resizeHeight;
    }
    let a = new wE(t, n);
    return await a.start(), a;
  }
  async start() {
    this.webcamConfig.facingMode && w.assert(this.webcamConfig.facingMode === "user" || this.webcamConfig.facingMode === "environment", () => `Invalid webcam facing mode: ${this.webcamConfig.facingMode}. Please provide 'user' or 'environment'`);
    try {
      this.stream = await navigator.mediaDevices.getUserMedia({ video: { deviceId: this.webcamConfig.deviceId, facingMode: this.webcamConfig.facingMode ? this.webcamConfig.facingMode : "user", width: this.webcamVideoElement.width, height: this.webcamVideoElement.height } });
    } catch (t) {
      throw t.message = `Error thrown while initializing video stream: ${t.message}`, t;
    }
    if (!this.stream) throw new Error("Could not obtain video from webcam.");
    try {
      this.webcamVideoElement.srcObject = this.stream;
    } catch (t) {
      console.log(t), this.webcamVideoElement.src = window.URL.createObjectURL(this.stream);
    }
    return this.webcamVideoElement.play(), this.isClosed = false, new Promise((t) => {
      this.webcamVideoElement.onloadedmetadata = () => {
        t();
      };
    });
  }
  async next() {
    if (this.isClosed) return { value: null, done: true };
    let t;
    try {
      t = qo.fromPixels(this.webcamVideoElement);
    } catch (n) {
      throw new Error(`Error thrown converting video to pixels: ${JSON.stringify(n)}`);
    }
    if (this.resize) try {
      return { value: this.cropAndResizeFrame(t), done: false };
    } catch (n) {
      throw new Error(`Error thrown cropping the video: ${n.message}`);
    } finally {
      t.dispose();
    }
    else return { value: t, done: false };
  }
  needToResize() {
    return !!(this.webcamConfig.resizeWidth && this.webcamConfig.resizeHeight && (this.webcamVideoElement.width !== this.webcamConfig.resizeWidth || this.webcamVideoElement.height !== this.webcamConfig.resizeHeight));
  }
  cropAndResizeFrame(t) {
    return O(() => {
      let n = Gt(re(t, "float32"), 0), a;
      a = Zn.cropAndResize(n, this.cropBox, this.cropBoxInd, this.cropSize, "bilinear");
      let r = a.shape;
      return W(a, r.slice(1));
    });
  }
  async capture() {
    return (await this.next()).value;
  }
  stop() {
    this.stream.getTracks().forEach((t) => t.stop());
    try {
      this.webcamVideoElement.srcObject = null;
    } catch (t) {
      console.log(t), this.webcamVideoElement.src = null;
    }
    this.isClosed = true;
  }
  toArray() {
    throw new Error("Can not convert infinite video stream to array.");
  }
};
var kE = class {
};
var IE = class extends sn {
  split(e17) {
    return new Q5(this, e17);
  }
};
var Q5 = class extends IE {
  constructor(e17, t) {
    super(), this.upstream = e17, this.impl = new e8(e17, t);
  }
  summary() {
    return this.impl.summary();
  }
  async next() {
    return this.impl.next();
  }
};
var e8 = class extends D1 {
  constructor(e17, t) {
    super(), this.upstream = e17, this.separator = t, this.carryover = "";
  }
  summary() {
    return `${this.upstream.summary()} -> Split('${this.separator}')`;
  }
  async pump() {
    let e17 = await this.upstream.next();
    if (e17.done) return this.carryover === "" ? false : (this.outputQueue.push(this.carryover), this.carryover = "", true);
    let t = e17.value.split(this.separator);
    t[0] = this.carryover + t[0];
    for (let n of t.slice(0, -1)) this.outputQueue.push(n);
    return this.carryover = t[t.length - 1], true;
  }
};
var t8 = class extends sn {
  decodeUTF8() {
    return new n8(this);
  }
};
var n8 = class extends IE {
  constructor(e17) {
    super(), this.upstream = e17, this.impl = new a8(e17);
  }
  summary() {
    return this.impl.summary();
  }
  async next() {
    return this.impl.next();
  }
};
var a8 = class extends D1 {
  constructor(e17) {
    if (super(), this.upstream = e17, G().get("IS_BROWSER")) this.decoder = new TextDecoder("utf-8");
    else {
      let { StringDecoder: t } = FS();
      this.decoder = new t("utf8");
    }
  }
  summary() {
    return `${this.upstream.summary()} -> Utf8`;
  }
  async pump() {
    let e17 = await this.upstream.next(), t;
    if (e17.done) return false;
    t = e17.value;
    let n;
    return G().get("IS_BROWSER") ? n = this.decoder.decode(t, { stream: true }) : n = this.decoder.write(Buffer.from(t.buffer)), this.outputQueue.push(n), true;
  }
};
var SE = class extends t8 {
  constructor(e17, t = {}) {
    super(), this.file = e17, this.options = t, w.assert(e17 instanceof Uint8Array || (G().get("IS_BROWSER") ? e17 instanceof File || e17 instanceof Blob : false), () => "FileChunkIterator only supports File, Blob and Uint8Array right now."), this.offset = t.offset || 0, this.chunkSize = t.chunkSize || 1024 * 1024;
  }
  summary() {
    return `FileChunks ${this.file}`;
  }
  async next() {
    return this.offset >= (this.file instanceof Uint8Array ? this.file.byteLength : this.file.size) ? { value: null, done: true } : { value: await new Promise((e17, t) => {
      let n = this.offset + this.chunkSize;
      if (this.file instanceof Uint8Array) e17(new Uint8Array(this.file.slice(this.offset, n)));
      else {
        let a = new FileReader();
        a.onload = (s) => {
          let i = a.result;
          if (i instanceof ArrayBuffer && (i = new Uint8Array(i)), !(i instanceof Uint8Array)) return t(new TypeError("FileReader returned unknown type."));
          e17(i);
        }, a.onabort = (s) => t(new Error("Aborted")), a.onerror = (s) => t(new Error(s.type));
        let r = this.file.slice(this.offset, n);
        a.readAsArrayBuffer(r);
      }
      this.offset = n;
    }), done: false };
  }
};
async function r8(e17, t = {}, n) {
  let a, r;
  typeof e17 == "string" ? a = e17 : (a = e17.url, r = s8(e17));
  let s = await (n || w.fetch)(a, r);
  if (s.ok) {
    let i = new Uint8Array(await s.arrayBuffer());
    return new SE(i, t);
  } else throw new Error(s.statusText);
}
var s8 = (e17) => ({ method: e17.method, headers: e17.headers, body: e17.body, mode: e17.mode, credentials: e17.credentials, cache: e17.cache, redirect: e17.redirect, referrer: e17.referrer, integrity: e17.integrity });
function NE(e17) {
  return typeof e17 == "string" && e17.slice(0, 7) === "file://";
}
var TE = class extends kE {
  constructor(e17, t = {}) {
    super(), this.input = e17, this.options = t;
  }
  async iterator() {
    if (NE(this.input) && G().get("IS_NODE")) {
      let e17 = Iv();
      this.input = e17.readFileSync(this.input.slice(7));
    }
    return new SE(this.input, this.options);
  }
};
var CE = class extends kE {
  constructor(e17, t = {}) {
    super(), this.url = e17, this.fileOptions = t;
  }
  async iterator() {
    return NE(this.url) ? new TE(this.url, this.fileOptions).iterator() : r8(this.url, this.fileOptions);
  }
};
function i8(e17, t = {}) {
  return new xE(new CE(e17), t);
}
function o8(e17) {
  let t = $1(e17);
  return Kn(async () => t);
}
function l8(e17) {
  return Kn(async () => {
    let t = await e17();
    return $1(() => t.next());
  });
}
async function u8(e17, t) {
  return J5.create(e17, t);
}
async function p8(e17) {
  return Z5.create(e17);
}
var c8 = "4.22.0";
function ge(e17, t) {
  Array.isArray(e17) || (e17 = [e17]), e17.forEach((n) => {
    n != null && w.assert(n.dtype !== "complex64", () => `${t} does not support complex64 tensors in the CPU backend.`);
  });
}
var d8 = mr.whereImpl;
var R1 = class EE extends Fc {
  nextDataId() {
    return EE.nextDataId++;
  }
  constructor() {
    super(), this.blockSize = 48, this.firstUse = true, this.data = new ym(this, Ta());
  }
  write(t, n, a) {
    this.firstUse && (this.firstUse = false, G().get("IS_NODE") && T.warn(`
============================
Hi, looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, visit https://github.com/tensorflow/tfjs-node for more details. 
============================`));
    let r = { id: this.nextDataId() };
    return this.data.set(r, { values: t, dtype: a, refCount: 1 }), r;
  }
  makeTensorInfo(t, n, a) {
    let r;
    if (n === "string" && a != null && a.length > 0 && w.isString(a[0])) {
      let s = a.map((i) => w.encodeString(i));
      r = this.write(s, t, n);
    } else r = this.write(a, t, n);
    return { dataId: r, shape: t, dtype: n };
  }
  refCount(t) {
    return this.data.has(t) ? this.data.get(t).refCount : 0;
  }
  incRef(t) {
    let n = this.data.get(t);
    n.refCount++;
  }
  decRef(t) {
    if (this.data.has(t)) {
      let n = this.data.get(t);
      n.refCount--;
    }
  }
  move(t, n, a, r, s) {
    this.data.set(t, { values: n, dtype: r, refCount: s });
  }
  numDataIds() {
    return this.data.numDataIds();
  }
  async read(t) {
    return this.readSync(t);
  }
  readSync(t) {
    let { dtype: n, complexTensorInfos: a } = this.data.get(t);
    if (n === "complex64") {
      let r = this.readSync(a.real.dataId), s = this.readSync(a.imag.dataId);
      return T.mergeRealAndImagArrays(r, s);
    }
    return w.convertBackendValuesAndArrayBuffer(this.data.get(t).values, n);
  }
  bufferSync(t) {
    let n = this.readSync(t.dataId);
    if (t.dtype === "string") try {
      let a = n.map((r) => w.decodeString(r));
      return Oe(t.shape, t.dtype, a);
    } catch (a) {
      throw new Error("Failed to decode encoded string bytes into utf-8");
    }
    return Oe(t.shape, t.dtype, n);
  }
  makeOutput(t, n, a) {
    return Ta().makeTensorFromTensorInfo(this.makeTensorInfo(n, a, t), this);
  }
  disposeData(t, n = false) {
    if (this.data.has(t)) {
      if (this.data.get(t).refCount--, !n && this.data.get(t).refCount > 0) return false;
      let { complexTensorInfos: a } = this.data.get(t);
      a != null && (this.disposeData(a.real.dataId, true), this.disposeData(a.imag.dataId, true)), this.data.delete(t);
    }
    return true;
  }
  disposeIntermediateTensorInfo(t) {
    this.disposeData(t.dataId);
  }
  async time(t) {
    let n = w.now();
    return t(), { kernelMs: w.now() - n };
  }
  memory() {
    return { unreliable: true, reasons: ["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."] };
  }
  where(t) {
    ge([t], "where");
    let n = this.readSync(t.dataId);
    return d8(t.shape, n);
  }
  dispose() {
  }
  floatPrecision() {
    return 32;
  }
  epsilon() {
    return super.epsilon();
  }
};
R1.nextDataId = 0;
var M1 = {};
_e(M1, { addImpl: () => FE, bincountImpl: () => P1, bincountReduceImpl: () => $E, bitwiseAndImpl: () => DE, castImpl: () => AE, ceilImpl: () => RE, concatImpl: () => L1, equalImpl: () => ME, expImpl: () => PE, expm1Impl: () => zE, floorDivImpl: () => BE, floorImpl: () => WE, gatherNdImpl: () => VE, gatherV2Impl: () => UE, greaterEqualImpl: () => HE, greaterImpl: () => GE, lessEqualImpl: () => qE, lessImpl: () => jE, linSpaceImpl: () => KE, logImpl: () => XE, maxImpl: () => YE, maximumImpl: () => ZE, minimumImpl: () => JE, multiplyImpl: () => z1, negImpl: () => QE, notEqualImpl: () => e_, prodImpl: () => t_, raggedGatherImpl: () => n_, raggedRangeImpl: () => a_, raggedTensorToTensorImpl: () => r_, rangeImpl: () => B1, rsqrtImpl: () => s_, scatterImpl: () => ni, sigmoidImpl: () => cK, simpleAbsImpl: () => _E, sliceImpl: () => um, sparseFillEmptyRowsImpl: () => o_, sparseReshapeImpl: () => l_, sparseSegmentReductionImpl: () => V1, sqrtImpl: () => mK, squaredDifferenceImpl: () => u_, staticRegexReplaceImpl: () => p_, stridedSliceImpl: () => c_, stringNGramsImpl: () => U1, stringSplitImpl: () => G1, stringToHashBucketFastImpl: () => H1, subImpl: () => d_, tileImpl: () => h_, topKImpl: () => f_, transposeImpl: () => W1, uniqueImpl: () => q1 });
function _E(e17) {
  let t = new Float32Array(e17.length);
  for (let n = 0; n < e17.length; ++n) t[n] = Math.abs(e17[n]);
  return t;
}
var h8 = (e17) => {
  let { x: t } = e17.inputs, n = e17.backend;
  ge(t, "abs");
  let a = new Float32Array(w.sizeFromShape(t.shape)), r = n.data.get(t.dataId).values;
  return a = _E(r), n.makeOutput(a, t.shape, t.dtype);
};
var m8 = { kernelName: Yl, backendName: "cpu", kernelFunc: h8 };
function Mt(e17) {
  return (t, n, a, r, s) => {
    let i = T.assertAndGetBroadcastShape(t, n), o = i.length, l = w.computeStrides(i), u = w.sizeFromShape(i), p = w.getTypedArrayFromDType(s, u), d = t.length, c = n.length, h = w.computeStrides(t), m = w.computeStrides(n), f = T.getBroadcastDims(t, i), g = T.getBroadcastDims(n, i);
    if (f.length + g.length === 0) for (let b = 0; b < p.length; ++b) p[b] = e17(a[b % a.length], r[b % r.length]);
    else for (let b = 0; b < p.length; ++b) {
      let y = w.indexToLoc(b, o, l), x = y.slice(-d);
      f.forEach((C) => x[C] = 0);
      let v = w.locToIndex(x, d, h), I = y.slice(-c);
      g.forEach((C) => I[C] = 0);
      let N = w.locToIndex(I, c, m);
      p[b] = e17(a[v], r[N]);
    }
    return [p, i];
  };
}
function Yn(e17) {
  let { inputs: t, backend: n } = e17, { real: a, imag: r } = t, s = n.data.get(a.dataId).values, i = n.data.get(r.dataId).values, o = n.makeTensorInfo(a.shape, "complex64"), l = n.data.get(o.dataId);
  return l.complexTensorInfos = { real: n.makeTensorInfo(a.shape, "float32", s), imag: n.makeTensorInfo(r.shape, "float32", i) }, o;
}
var f8 = { kernelName: wm, backendName: "cpu", kernelFunc: Yn };
function lm(e17, t, n = "float32") {
  if (n === "complex64") {
    let r = lm(e17, t, "float32"), s = lm(e17, t, "float32");
    return Yn({ inputs: { real: r, imag: s }, backend: e17 });
  }
  let a = w.makeZerosTypedArray(w.sizeFromShape(t), n);
  return e17.makeTensorInfo(t, n, a);
}
function cr(e17) {
  let { inputs: t, backend: n } = e17, { x: a } = t;
  return n.incRef(a.dataId), { dataId: a.dataId, shape: a.shape, dtype: a.dtype };
}
var g8 = { kernelName: eo, backendName: "cpu", kernelFunc: cr };
function yi(e17) {
  let { inputs: t, backend: n } = e17, { input: a } = t, r = n.data.get(a.dataId).complexTensorInfos.real, s = n.data.get(r.dataId).values;
  return n.makeTensorInfo(r.shape, r.dtype, s);
}
var b8 = { kernelName: Dm, backendName: "cpu", kernelFunc: yi };
function AE(e17, t, n, a) {
  if (a === "int32") {
    let r = Int32Array.from(e17);
    return [t, "int32", r];
  }
  if (a === "bool") {
    let r = w.toTypedArray([0], n), [s, i] = Mt((o, l) => o !== l ? 1 : 0)(t, [], e17, r, "bool");
    return [i, "bool", s];
  }
  throw new Error(`Error in Cast: failed to cast ${n} to ${a}`);
}
function bs(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r } = t, { dtype: s } = a;
  if (s === "complex64") {
    if (r.dtype === "complex64") return cr({ inputs: { x: r }, backend: n });
    let p = lm(n, r.shape, r.dtype), d = bs({ inputs: { x: r }, backend: n, attrs: { dtype: "float32" } }), c = Yn({ inputs: { real: d, imag: p }, backend: n });
    return n.disposeIntermediateTensorInfo(p), n.disposeIntermediateTensorInfo(d), c;
  }
  if (r.dtype === "complex64") {
    let p = yi({ inputs: { input: r }, backend: n }), d = bs({ inputs: { x: p }, backend: n, attrs: { dtype: s } });
    return n.disposeIntermediateTensorInfo(p), d;
  }
  if (!w.hasEncodingLoss(r.dtype, s)) {
    let p = cr({ inputs: { x: r }, backend: n });
    return { dataId: p.dataId, shape: p.shape, dtype: s };
  }
  let i = n.data.get(r.dataId).values, [o, l, u] = AE(i, r.shape, r.dtype, s);
  return n.makeTensorInfo(o, l, u);
}
var y8 = { kernelName: Mi, backendName: "cpu", kernelFunc: bs };
function Zt(e17, t, n, a) {
  return n == null ? ({ inputs: r, backend: s }) => {
    let { a: i, b: o } = r, l = s;
    ge([i, o], e17);
    let u = l.data.get(i.dataId).values, p = l.data.get(o.dataId).values, d = i.dtype === "string" ? T.fromUint8ToStringArray(u) : u, c = i.dtype === "string" ? T.fromUint8ToStringArray(p) : p, h = a || i.dtype, [m, f] = t(i.shape, o.shape, d, c, h);
    return l.makeTensorInfo(f, h, m);
  } : ({ inputs: r, backend: s }) => {
    let { a: i, b: o } = r, l = s;
    if (i.dtype === "complex64" || o.dtype === "complex64") {
      let u = bs({ inputs: { x: i }, backend: l, attrs: { dtype: "complex64" } }), p = l.data.get(u.dataId), d = p.complexTensorInfos.real, c = p.complexTensorInfos.imag, h = l.data.get(d.dataId).values, m = l.data.get(c.dataId).values, f = bs({ inputs: { x: o }, backend: l, attrs: { dtype: "complex64" } }), g = l.data.get(f.dataId), b = g.complexTensorInfos.real, y = g.complexTensorInfos.imag, x = l.data.get(b.dataId).values, v = l.data.get(y.dataId).values, [I, N, C] = n(i.shape, o.shape, h, m, x, v), _ = l.makeTensorInfo(C, "float32", I), F = l.makeTensorInfo(C, "float32", N), D = Yn({ inputs: { real: _, imag: F }, backend: l });
      return l.disposeIntermediateTensorInfo(u), l.disposeIntermediateTensorInfo(f), l.disposeIntermediateTensorInfo(_), l.disposeIntermediateTensorInfo(F), D;
    } else {
      let u = l.data.get(i.dataId).values, p = l.data.get(o.dataId).values, d = a || i.dtype, [c, h] = t(i.shape, o.shape, u, p, d);
      return l.makeTensorInfo(h, d, c);
    }
  };
}
function O1(e17) {
  return (t, n, a, r, s, i) => {
    let o = T.assertAndGetBroadcastShape(t, n), l = w.sizeFromShape(o), u = o.length, p = w.computeStrides(o), d = w.getTypedArrayFromDType("float32", l), c = w.getTypedArrayFromDType("float32", l), h = T.getBroadcastDims(t, o), m = T.getBroadcastDims(n, o), f = T.mergeRealAndImagArrays(a, r), g = T.mergeRealAndImagArrays(s, i), b = t.length, y = w.computeStrides(t), x = n.length, v = w.computeStrides(n);
    if (h.length + m.length === 0) for (let I = 0; I < d.length; I++) {
      let N = I % f.length, C = I % g.length, _ = e17(f[N * 2], f[N * 2 + 1], g[C * 2], g[C * 2 + 1]);
      d[I] = _.real, c[I] = _.imag;
    }
    else for (let I = 0; I < d.length; I++) {
      let N = w.indexToLoc(I, u, p), C = N.slice(-b);
      h.forEach((S) => C[S] = 0);
      let _ = w.locToIndex(C, b, y), F = N.slice(-x);
      m.forEach((S) => F[S] = 0);
      let D = w.locToIndex(F, x, v), $ = e17(f[_ * 2], f[_ * 2 + 1], g[D * 2], g[D * 2 + 1]);
      d[I] = $.real, c[I] = $.imag;
    }
    return [d, c, o];
  };
}
var FE = Mt((e17, t) => e17 + t);
var x8 = O1((e17, t, n, a) => ({ real: e17 + n, imag: t + a }));
var jl = Zt(vs, FE, x8);
var v8 = { kernelName: vs, backendName: "cpu", kernelFunc: jl };
function P1(e17, t, n, a, r) {
  let s = w.sizeFromShape(a), i = w.makeZerosTypedArray(r, n);
  for (let o = 0; o < e17.length; o++) {
    let l = e17[o];
    if (l < 0) throw new Error("Input x must be non-negative!");
    l >= r || (s > 0 ? i[l] += t[o] : i[l] += 1);
  }
  return i;
}
function $E(e17, t, n, a = false) {
  let r = e17.shape[0], s = e17.shape[1], i = Oe([r, n], t.dtype);
  for (let o = 0; o < r; o++) for (let l = 0; l < s; l++) {
    let u = e17.get(o, l);
    if (u < 0) throw new Error("Input x must be non-negative!");
    u >= n || (a ? i.set(1, o, u) : t.size > 0 ? i.set(i.get(o, u) + t.get(o, l), o, u) : i.set(i.get(o, u) + 1, o, u));
  }
  return i;
}
var DE = Mt((e17, t) => e17 & t);
var w8 = Zt(ru, DE);
var k8 = { kernelName: ru, backendName: "cpu", kernelFunc: w8 };
function fr(e17) {
  return (t, n, a) => {
    let r = w.getArrayFromDType(n, t.length);
    for (let s = 0; s < t.length; ++s) r[s] = e17(t[s], a);
    return r;
  };
}
function lt(e17, t, n) {
  let a = fr(t);
  return Fs(e17, a, n);
}
function Fs(e17, t, n) {
  return ({ inputs: a, attrs: r, backend: s }) => {
    let { x: i } = a;
    ge(i, e17);
    let o = s, l = o.data.get(i.dataId).values, u;
    if (i.dtype === "string") {
      if (!Array.isArray(l)) throw new Error("String tensor's value was not an instance of Array");
      u = T.fromUint8ToStringArray(l);
    } else u = l;
    let p = n || i.dtype, d = t(u, p, r);
    return o.makeTensorInfo(i.shape, p, d);
  };
}
var RE = fr((e17) => Math.ceil(e17));
var I8 = Fs(Oi, RE);
var S8 = { kernelName: Oi, backendName: "cpu", kernelFunc: I8 };
function L1(e17, t, n, a) {
  let r = w.getArrayFromDType(n, w.sizeFromShape(t));
  if (a && n !== "string") {
    let s = 0;
    e17.forEach((i) => {
      let o = w.sizeFromShape(i.shape);
      r.set(i.vals, s), s += o;
    });
  } else {
    let s = 0;
    e17.forEach((i) => {
      let o = n === "string" ? T.fromUint8ToStringArray(i.vals) : i.vals, l = 0;
      for (let u = 0; u < i.shape[0]; ++u) {
        let p = u * t[1] + s;
        for (let d = 0; d < i.shape[1]; ++d) r[p + d] = o[l++];
      }
      s += i.shape[1];
    });
  }
  return r;
}
var ME = Mt((e17, t) => e17 === t ? 1 : 0);
var OE = Zt(du, ME, null, "bool");
var N8 = { kernelName: du, backendName: "cpu", kernelFunc: OE };
var PE = fr((e17) => Math.exp(e17));
var LE = Fs(Ki, PE, "float32");
var T8 = { kernelName: Ki, backendName: "cpu", kernelFunc: LE };
var zE = fr((e17) => Math.expm1(e17));
var C8 = Fs(Xi, zE);
var E8 = { kernelName: Xi, backendName: "cpu", kernelFunc: C8 };
var WE = fr((e17) => Math.floor(e17));
var _8 = Fs(Yi, WE);
var A8 = { kernelName: Yi, backendName: "cpu", kernelFunc: _8 };
var BE = Mt((e17, t) => Math.floor(e17 / t));
var F8 = Zt(Zi, BE, null, "int32");
var $8 = { kernelName: Zi, backendName: "cpu", kernelFunc: F8 };
function VE(e17, t, n, a, r, s, i, o, l) {
  let u = Oe([a, s], n);
  for (let p = 0; p < a; p++) {
    let d = [], c = 0;
    for (let h = 0; h < r; h++) {
      let m = e17[p * r + h];
      c += m * i[h], d.push(m);
    }
    if (c < 0 || c >= l / s) throw new Error(`Invalid indices: ${d} does not index into ${o}`);
    for (let h = 0; h < s; h++) u.values[p * s + h] = t.get(...t.indexToLoc(c * s + h));
  }
  return u;
}
function UE(e17, t, n) {
  let a = Oe(n, e17.dtype);
  for (let r = 0; r < a.size; ++r) {
    let s = a.indexToLoc(r).slice(), i = s[0], o = s[2], l = t.locToIndex([i, o]);
    s[2] = t.values[l];
    let u = e17.locToIndex(s);
    0 <= u && u < e17.values.length && (a.values[r] = e17.values[u]);
  }
  return a;
}
var GE = Mt((e17, t) => e17 > t ? 1 : 0);
var D8 = Zt(bu, GE, null, "bool");
var R8 = { kernelName: bu, backendName: "cpu", kernelFunc: D8 };
var HE = Mt((e17, t) => e17 >= t ? 1 : 0);
var M8 = Zt(Qi, HE, null, "bool");
var O8 = { kernelName: Qi, backendName: "cpu", kernelFunc: M8 };
var jE = Mt((e17, t) => e17 < t ? 1 : 0);
var P8 = Zt(yu, jE, null, "bool");
var L8 = { kernelName: yu, backendName: "cpu", kernelFunc: P8 };
var qE = Mt((e17, t) => e17 <= t ? 1 : 0);
var z8 = Zt(xu, qE, null, "bool");
var W8 = { kernelName: xu, backendName: "cpu", kernelFunc: z8 };
function KE(e17, t, n) {
  let a = (t - e17) / (n - 1), r = w.makeZerosTypedArray(n, "float32");
  r[0] = e17;
  for (let s = 1; s < r.length; s++) r[s] = r[s - 1] + a;
  return r;
}
var XE = fr((e17) => Math.log(e17));
var B8 = Fs(so, XE);
var V8 = { kernelName: so, backendName: "cpu", kernelFunc: B8 };
function YE(e17, t, n, a) {
  let r = w.getTypedArrayFromDType(a, w.sizeFromShape(n));
  for (let s = 0; s < r.length; ++s) {
    let i = s * t, o = e17[i];
    for (let l = 0; l < t; ++l) {
      let u = e17[i + l];
      (Number.isNaN(u) || u > o) && (o = u);
    }
    r[s] = o;
  }
  return r;
}
var ZE = Mt((e17, t) => Math.max(e17, t));
var U8 = Zt(uo, ZE);
var G8 = { kernelName: uo, backendName: "cpu", kernelFunc: U8 };
var JE = Mt((e17, t) => Math.min(e17, t));
var H8 = Zt(mo, JE);
var j8 = { kernelName: mo, backendName: "cpu", kernelFunc: H8 };
var z1 = Mt((e17, t) => e17 * t);
var q8 = O1((e17, t, n, a) => ({ real: e17 * n - t * a, imag: e17 * a + t * n }));
var zf = Zt(bo, z1, q8);
var K8 = { kernelName: bo, backendName: "cpu", kernelFunc: zf };
function QE(e17, t, n) {
  let a = w.createScalarValue(-1, n);
  return z1([], t, a, e17, n);
}
function X8(e17) {
  let { inputs: t, backend: n } = e17, { x: a } = t;
  ge(a, "neg");
  let r = n.data.get(a.dataId).values, [s, i] = QE(r, a.shape, a.dtype);
  return n.makeTensorInfo(i, a.dtype, s);
}
var Y8 = { kernelName: Cu, backendName: "cpu", kernelFunc: X8 };
var e_ = Mt((e17, t) => e17 !== t ? 1 : 0);
var Z8 = Zt(Eu, e_, null, "bool");
var J8 = { kernelName: Eu, backendName: "cpu", kernelFunc: Z8 };
function W1(e17, t, n, a, r) {
  let s = t.length, i = w.sizeFromShape(t), o = w.computeStrides(t), l = w.computeStrides(r), u = w.getTypedArrayFromDType(n, w.sizeFromShape(r));
  for (let p = 0; p < i; ++p) {
    let d = w.indexToLoc(p, s, o), c = new Array(d.length);
    for (let m = 0; m < c.length; m++) c[m] = d[a[m]];
    let h = w.locToIndex(c, s, l);
    u[h] = e17[p];
  }
  return u;
}
function Vn(e17) {
  let { inputs: t, attrs: n, backend: a } = e17, { x: r } = t, { perm: s } = n;
  ge(r, "transpose");
  let i = r.shape.length, o = new Array(i);
  for (let p = 0; p < o.length; p++) o[p] = r.shape[s[p]];
  let l = a.data.get(r.dataId).values, u = W1(l, r.shape, r.dtype, s, o);
  return { dataId: a.write(u, o, r.dtype), shape: o, dtype: r.dtype };
}
var Q8 = { kernelName: Cr, backendName: "cpu", kernelFunc: Vn };
function t_(e17, t, n, a) {
  let [r, s] = T.computeOutAndReduceShapes(e17, a), i = fa(t, "int32"), o = w.makeZerosTypedArray(w.sizeFromShape(r), i), l = w.sizeFromShape(s);
  for (let u = 0; u < o.length; ++u) {
    let p = u * l, d = 1;
    for (let c = 0; c < l; ++c) d *= n[p + c];
    o[u] = d;
  }
  return { outVals: o, outShape: r, outDtype: i };
}
function eK(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r } = t, { axis: s, keepDims: i } = a;
  ge(r, "prod");
  let o = r.shape.length, l = w.parseAxisParam(s, r.shape), u = T.getAxesPermutation(l, o), p = l, d = r, c = [];
  u != null && (d = Vn({ inputs: { x: r }, backend: n, attrs: { perm: u } }), c.push(d), p = T.getInnerMostAxes(p.length, o));
  let h = n.data.get(d.dataId).values, { outVals: m, outShape: f, outDtype: g } = t_(d.shape, d.dtype, h, p), b = f;
  return i && (b = T.expandShapeToKeepDim(f, l)), c.forEach((y) => n.disposeIntermediateTensorInfo(y)), n.makeTensorInfo(b, g, m);
}
var tK = { kernelName: ko, backendName: "cpu", kernelFunc: eK };
function nK(e17, t, n) {
  e17.forEach((a, r) => {
    if (a < 0 || a >= n) {
      let s = w.indexToLoc(r, t.length, w.computeStrides(t)).join(",");
      throw new Error(`indices[${s}] = ${a} is not in [0, ${n})`);
    }
  });
}
function aK(e17, t) {
  for (let n = 0; n < e17.length; ++n) {
    let a = e17[n], r = n === e17.length - 1 ? t : e17[n + 1].length;
    if (a.length === 0) throw new Error("Ragged splits may not be empty");
    if (a[0] < 0) throw new Error("Ragged splits must be non-negative");
    if (a[a.length - 1] > r) throw new Error("Ragged splits must not point past values");
    for (let s = 1; s < a.length; ++s) if (a[s - 1] > a[s]) throw new Error("Ragged splits must be sorted in ascending order");
  }
}
function rK(e17, t, n, a) {
  let r = [], s = 0, i = t.length - 1 + n.length, o = new Array(i).fill(null).map(() => [0]);
  aK(n, a);
  let l = 1;
  for (let u = 0; u < t.length - 1; ++u) {
    l *= t[u];
    let p = t[u + 1];
    for (let d = 1; d < l + 1; ++d) o[u].push(d * p);
  }
  for (let u = 0; u < e17.length; ++u) {
    let p = e17[u], d = e17[u] + 1;
    for (let c = 0; c < n.length; ++c) {
      let h = n[c], m = c + t.length - 1;
      if (m >= 0) {
        let f = o[m], g = f[f.length - 1] - h[p];
        for (let b = p; b < d; ++b) o[m].push(h[b + 1] + g);
      }
      p = h[p], d = h[d];
    }
    d !== p && (r.push([p, d]), s += d - p);
  }
  return { outSplits: o, valueSlices: r, numValues: s };
}
function sK(e17) {
  let t = [];
  for (let n = 0; n < e17.length; ++n) {
    let a = e17[n].length, r = w.getArrayFromDType("int32", a);
    t.push(r), e17[n].forEach((s, i) => r[i] = s);
  }
  return t;
}
function YI(e17, t) {
  let n = e17.slice(0, t);
  for (; n.length < t; ) n.push(1);
  for (let a = t; a < e17.length; a++) n[t - 1] *= e17[a];
  return n;
}
function iK(e17, t, n, a, r, s) {
  let i = YI(t, 2)[1], o = YI(s, 2)[1], l = 0;
  for (let u of n) for (let p = u[0]; p < u[1]; ++p) {
    for (let d = 0; d < a; ++d) r[l * o + d] = e17[p * i + d];
    ++l;
  }
}
function oK(e17, t, n, a, r) {
  let s = t.slice();
  s[0] = r;
  let i = w.getArrayFromDType(n, w.sizeFromShape(s)), o = e17.length, l = o === 0 ? 0 : o / t[0];
  return iK(e17, t, a, l, i, s), [i, s];
}
function n_(e17, t, n, a, r, s, i, o) {
  if (e17.length === 0) throw new Error("paramsNestedSplits must be non empty");
  if (t[0].length === 0) throw new Error("Split tensors must not be scalars");
  let l = t[0][0] - 1;
  if (nK(s, i, l), a.length === 0) throw new Error("params.rank must be nonzero");
  let u = a[0], { outSplits: p, valueSlices: d, numValues: c } = rK(s, i, e17, u), h = sK(p), m = oK(n, a, r, d, c);
  return [h, m[0], m[1]];
}
var ZI = 2147483647;
function a_(e17, t, n, a, r, s, i) {
  if (t.length > 1) throw new Error("starts must be a scalar or vector");
  if (r.length > 1) throw new Error("limits must be a scalar or vector");
  if (i.length > 1) throw new Error("deltas must be a scalar or vector");
  let o = t.length === 0, l = r.length === 0, u = i.length === 0, p = [];
  o || p.push(t[0]), l || p.push(r[0]), u || p.push(i[0]);
  for (let g = 1; g < p.length; ++g) if (p[g] !== p[g - 1]) throw new Error("starts, limits, and deltas must have the same shape");
  let d = p.length === 0 ? 1 : p[0], c = w.getArrayFromDType("int32", d + 1);
  c[0] = 0;
  for (let g = 0; g < d; ++g) {
    let b = o ? e17[0] : e17[g], y = l ? a[0] : a[g], x = u ? s[0] : s[g];
    if (x === 0) throw new Error("Requires delta != 0");
    let v;
    if (x > 0 && y < b || x < 0 && y > b) v = 0;
    else if (v = Math.ceil(Math.abs((y - b) / x)), v > ZI) throw new Error(`Requires ((limit - start) / delta) <= ${ZI}`);
    c[g + 1] = c[g] + v;
  }
  let h = c[d], m = w.getArrayFromDType(n, h), f = 0;
  for (let g = 0; g < d; ++g) {
    let b = c[g + 1] - c[g], y = o ? e17[0] : e17[g], x = u ? s[0] : s[g];
    for (let v = 0; v < b; ++v) m[f++] = y, y += x;
  }
  return [c, m];
}
var Na = T.RowPartitionType;
var lK = class ov {
  constructor(t, n, a, r, s, i, o, l, u, p) {
    this.shape = t, this.shapeShape = n, this.values = a, this.valuesShape = r, this.valuesDType = s, this.defaultValue = i, this.defaultValueShape = o, this.rowPartitionValues = l, this.rowPartitionValuesShapes = u, this.rowPartitionTypes = T.getRowPartitionTypesHelper(p), this.raggedRank = T.getRaggedRank(this.rowPartitionTypes);
  }
  getRowPartitionTypeByDimension(t) {
    return this.rowPartitionTypes[0] === Na.FIRST_DIM_SIZE ? this.rowPartitionTypes[t + 1] : this.rowPartitionTypes[t];
  }
  getRowPartitionTensor(t) {
    return this.rowPartitionTypes[0] === Na.FIRST_DIM_SIZE ? this.rowPartitionValues[t + 1] : this.rowPartitionValues[t];
  }
  getMaxWidth(t) {
    let n = this.getRowPartitionTensor(t - 1);
    switch (this.getRowPartitionTypeByDimension(t - 1)) {
      case Na.VALUE_ROWIDS:
        return ov.getMaxWidthValueRowID(n);
      case Na.ROW_SPLITS:
        return ov.getMaxWidthRowSplit(n);
      default:
        throw new Error(`Cannot handle partition type ${Na[this.getRowPartitionTypeByDimension(t - 1)]}`);
    }
  }
  static getMaxWidthRowSplit(t) {
    let n = t.length;
    if (n === 0 || n === 1) return 0;
    let a = 0;
    for (let r = 0; r < n - 1; ++r) {
      let s = t[r + 1] - t[r];
      s > a && (a = s);
    }
    return a;
  }
  static getMaxWidthValueRowID(t) {
    let n = t.length;
    if (n === 0) return 0;
    let a = 0, r = t[0], s = 0;
    for (let i = 1; i < n; ++i) {
      let o = t[i];
      o !== r && (r = o, s = Math.max(i - a, s), a = i);
    }
    return Math.max(n - a, s);
  }
  tensorShapeFromTensor(t, n, a = true) {
    if (n.length === 0) {
      if (t[0] === -1) return [];
      throw new Error("The only valid scalar shape tensor is the fully unknown shape specified as -1.");
    }
    return QI(t, a);
  }
  calculateOutputSize(t) {
    let n = this.valuesShape, a = this.defaultValueShape;
    T.validateDefaultValueShape(a, n);
    let r = this.tensorShapeFromTensor(this.shape, this.shapeShape), s = T.combineRaggedTensorToTensorShapes(this.raggedRank, r, n);
    s[0] < 0 && (s[0] = t);
    for (let i = 1; i <= this.raggedRank; ++i) s[i] < 0 && (s[i] = this.getMaxWidth(i));
    return s;
  }
  calculateFirstParentOutputIndex(t, n, a) {
    let r = Math.min(t, a), s = [], i = 0;
    for (let o = 0; o < r; ++o, i += n) s.push(i);
    for (let o = r; o < t; ++o) s.push(-1);
    return w.assert(s.length === t, () => "Final length of result must be equal to firstDimension."), s;
  }
  calculateOutputIndexRowSplit(t, n, a, r) {
    let s = t.length, i = [];
    for (let o = 0; o < s - 1; ++o) {
      let l = t[o + 1] - t[o], u = Math.min(r, l), p = n[o];
      p === -1 && (u = 0);
      for (let d = 0; d < u; ++d) i.push(p), p += a;
      for (let d = 0; d < l - u; ++d) i.push(-1);
    }
    if (s > 0 && i.length !== t[s - 1]) throw new Error("Invalid row split size.");
    return i;
  }
  calculateOutputIndexValueRowID(t, n, a, r) {
    let s = t.length, i = [];
    if (s === 0) return [];
    let o = 0, l = t[0];
    if (l >= n.length) throw new Error(`Got currentValueRowId=${l}, which is not less than ${n.length}`);
    let u = n[l];
    i.push(u);
    for (let p = 1; p < s; ++p) {
      let d = t[p];
      if (d === l) u >= 0 && (++o, o < r ? u += a : u = -1);
      else {
        if (o = 0, l = d, d >= n.length) throw new Error(`Got nextValueRowId=${d} which is not less than ${n.length}`);
        u = n[d];
      }
      i.push(u);
    }
    if (i.length !== t.length) throw new Error("Invalid row ids.");
    return i;
  }
  calculateOutputIndex(t, n, a, r) {
    let s = this.getRowPartitionTensor(t), i = this.getRowPartitionTypeByDimension(t);
    switch (i) {
      case Na.VALUE_ROWIDS:
        return this.calculateOutputIndexValueRowID(s, n, a, r);
      case Na.ROW_SPLITS:
        if (s.length - 1 > n.length) throw new Error(`Row partition size is greater than output size: ${s.length - 1} > ${n.length}`);
        return this.calculateOutputIndexRowSplit(s, n, a, r);
      default:
        throw new Error(`Unsupported partition type: ${Na[i]}`);
    }
  }
  getFirstDimensionSize() {
    let t = this.rowPartitionValues[0];
    if (this.rowPartitionTypes.length === 0) throw new Error("No row_partition_types given.");
    let n = this.rowPartitionTypes[0];
    switch (n) {
      case Na.FIRST_DIM_SIZE:
        return t[0];
      case Na.VALUE_ROWIDS:
        throw new Error("Cannot handle VALUE_ROWIDS in first dimension.");
      case Na.ROW_SPLITS:
        return this.rowPartitionValuesShapes[0][0] - 1;
      default:
        throw new Error(`Cannot handle type ${Na[n]}`);
    }
  }
  compute() {
    if (this.rowPartitionValues[0].length <= 0) throw new Error("Invalid first partition input. Tensor requires at least one element.");
    let t = this.getFirstDimensionSize(), n = this.calculateOutputSize(t), a = new Array(this.raggedRank + 1);
    a[a.length - 1] = 1;
    for (let i = a.length - 2; i >= 0; --i) a[i] = a[i + 1] * n[i + 1];
    let r = QI(n, false), s = w.getArrayFromDType(this.valuesDType, w.sizeFromShape(r));
    if (a[0] * n[0] > 0) {
      let i = this.calculateFirstParentOutputIndex(t, a[0], n[0]);
      for (let o = 1; o <= this.raggedRank; ++o) i = this.calculateOutputIndex(o - 1, i, a[o], n[o]);
      this.setOutput(this.raggedRank, i, s, r);
    }
    return [r, s];
  }
  setOutput(t, n, a, r) {
    if (a.length === 0) return;
    let s = this.values, i = a, o = r.slice();
    o = o.slice(t + 1);
    let l = w.sizeFromShape(o), u = n.length, p = this.defaultValue;
    if (p.length !== l && p.length !== 1) {
      let m = this.defaultValueShape;
      O(() => {
        let f = W(p, m);
        p = ai(f, o).dataSync();
      });
    }
    let d = 0, c = 0, h = 0;
    for (let m = 0; m <= u; ++m) {
      let f = m < u ? n[m] : -1;
      if (f === h) {
        ++h;
        continue;
      }
      if (c < h) {
        let g = s.subarray(d * l), b = i.subarray(c * l), y = (h - c) * l;
        JI(b, g, y);
      }
      if (m >= u) {
        let g = a.length;
        f = Math.floor(g / l);
      }
      if (f > h) if (this.defaultValue.length === 1) i.subarray(h * l, f * l).fill(this.defaultValue[0]), h = f;
      else for (; f > h; ) {
        let g = i.slice(h * l);
        JI(g, p, l), ++h;
      }
      f < 0 ? (d = m + 1, c = h) : (d = m, c = h, h = c + 1);
    }
  }
};
function JI(e17, t, n) {
  for (let a = 0; a < n; a++) e17[a] = t[a];
}
function QI(e17, t) {
  let n = [];
  for (let a of e17) {
    if (a < 0) {
      if (!t) throw new Error(`Dimension ${a} must be >= 0`);
      if (a < -1) throw new Error(`Dimension ${a} must be >= -1`);
      a = -1;
    }
    n.push(a);
  }
  return n;
}
function r_(e17, t, n, a, r, s, i, o, l, u) {
  return new lK(e17, t, n, a, r, s, i, o, l, u).compute();
}
function B1(e17, t, n, a) {
  let r = e17 === t, s = e17 < t && n < 0, i = t < e17 && n > 1;
  if (r || s || i) return w.makeZerosTypedArray(0, a);
  let o = Math.abs(Math.ceil((t - e17) / n)), l = w.makeZerosTypedArray(o, a);
  t < e17 && n === 1 && (n = -1), l[0] = e17;
  for (let u = 1; u < l.length; u++) l[u] = l[u - 1] + n;
  return l;
}
var s_ = fr((e17) => 1 / Math.sqrt(e17));
var uK = Fs(Ao, s_);
var pK = { kernelName: Ao, backendName: "cpu", kernelFunc: uK };
function ni(e17, t, n, a, r, s, i, o, l, u) {
  let p = [a / r, r], d = e17.values, c = t.values;
  if (a === 0) return Oe(n, t.dtype);
  let h = l instanceof Wt ? l : Oe(p, t.dtype);
  typeof l == "string" || typeof l == "number" ? h.values.fill(l) : typeof l == "boolean" && h.values.fill(+l);
  for (let m = 0; m < s; m++) {
    let f = [], g = 0;
    for (let b = 0; b < i; b++) {
      let y = d[m * i + b];
      f.push(y), g += y * o[b];
    }
    if (g < 0 || g >= a / r) throw new Error(`Invalid indices: ${f} does not index into ${n}`);
    for (let b = 0; b < r; b++) u ? h.values[g * r + b] += c[m * r + b] : h.values[g * r + b] = t.rank === 0 ? c[0] : c[m * r + b];
  }
  return h;
}
var cK = fr((e17) => 1 / (1 + Math.exp(-e17)));
var i_ = lt(Mo, (e17) => 1 / (1 + Math.exp(-e17)));
var dK = { kernelName: Mo, backendName: "cpu", kernelFunc: i_ };
function um(e17, t, n, a, r) {
  let s = Kt.isSliceContinous(a, t, n), i = w.sizeFromShape(n), o = w.computeStrides(a);
  if (s) {
    let d = Kt.computeFlatOffset(t, o);
    return r === "string" ? e17.slice(d, d + i) : e17.subarray(d, d + i);
  }
  let l = r === "string" ? T.fromUint8ToStringArray(e17) : e17, u = Oe(a, r, l), p = Oe(n, r);
  for (let d = 0; d < p.size; ++d) {
    let c = p.indexToLoc(d), h = c.map((m, f) => m + t[f]);
    p.set(u.get(...h), ...c);
  }
  return r === "string" ? T.fromStringArrayToUint8(p.values) : p.values;
}
function xi(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r } = t, { begin: s, size: i } = a;
  ge(r, "slice");
  let [o, l] = Kt.parseSliceParams(r, s, i);
  Kt.assertParamsValid(r, o, l);
  let u = n.data.get(r.dataId).values, p = um(u, o, l, r.shape, r.dtype);
  return n.makeTensorInfo(l, r.dtype, p);
}
var hK = { kernelName: Bu, backendName: "cpu", kernelFunc: xi };
function o_(e17, t, n, a, r, s, i) {
  let o = t[0], l = s[0], u = new Array(l), p = new Array(o), d = t[1];
  if (l === 0) {
    if (o !== 0) throw new Error(T.getSparseFillEmptyRowsIndicesDenseShapeMismatch(o));
    let g = w.getArrayFromDType(n, 0), b = w.getArrayFromDType(r, 0);
    return [g, [0, d], b, u, p];
  }
  let c = true, h = 0, m = new Array(l).fill(0);
  for (let g = 0; g < o; ++g) {
    let b = e17[g * d];
    if (b < 0) throw new Error(T.getSparseFillEmptyRowsNegativeIndexErrorMessage(g, b));
    if (b >= l) throw new Error(T.getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(g, b, l));
    ++m[b], c = c && b >= h, h = b;
  }
  let f = true;
  for (let g = 0; g < l; ++g) {
    let b = m[g] === 0;
    u[g] = b, f = f && !b, m[g] = Math.max(m[g], 1), g > 0 && (m[g] += m[g - 1]);
  }
  if (f && c) {
    let g = e17, b = a;
    for (let y = 0; y < o; ++y) p[y] = y;
    return [g, [o, d], b, u, p];
  } else {
    let g = m[l - 1], b = w.getArrayFromDType(n, g * d), y = w.getArrayFromDType(r, g), x = new Array(l).fill(0);
    for (let v = 0; v < o; ++v) {
      let I = e17[v * d], N = x[I], C = (I === 0 ? 0 : m[I - 1]) + N;
      x[I]++;
      for (let _ = 0; _ < d; ++_) b[C * d + _] = e17[v * d + _];
      y[C] = a[v], p[v] = C;
    }
    for (let v = 0; v < l; ++v) if (x[v] === 0) {
      let I = v === 0 ? 0 : m[v - 1];
      b[I * d + 0] = v;
      for (let N = 1; N < d; ++N) b[I * d + N] = 0;
      y[I] = i;
    }
    return [b, [g, d], y, u, p];
  }
}
function l_(e17, t, n, a, r) {
  let s = w.sizeFromShape(a), i = t[0], o = r.length, l = [], u = 1, p = -1;
  for (let f = 0; f < o; ++f) {
    let g = r[f];
    if (g === -1) {
      if (p !== -1) throw new Error(T.getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(p, f));
      p = f, l.push(1);
    } else {
      if (g < 0) throw new Error(T.getSparseReshapeNegativeOutputDimErrorMessage(f, g));
      u *= g, l.push(g);
    }
  }
  if (p !== -1) {
    if (u <= 0) throw new Error(T.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage());
    let f = Math.trunc(s / u);
    if (u * f !== s) throw new Error(T.getSparseReshapeInputOutputMultipleErrorMessage(a, l));
    l[p] = f;
  }
  if (w.sizeFromShape(l) !== s) throw new Error(T.getSparseReshapeInputOutputMismatchErrorMessage(a, l));
  let d = a.length, c = [];
  if (d > 0) {
    c[d - 1] = 1;
    for (let f = d - 2; f >= 0; --f) c[f] = c[f + 1] * a[f + 1];
  }
  let h = [];
  if (o > 0) {
    h[o - 1] = 1;
    for (let f = o - 2; f >= 0; --f) h[f] = h[f + 1] * l[f + 1];
  }
  let m = w.getArrayFromDType(n, i * o);
  for (let f = 0; f < i; ++f) {
    let g = 0;
    for (let b = 0; b < d; ++b) g += e17[f * d + b] * c[b];
    for (let b = 0; b < o; ++b) m[f * o + b] = Math.trunc(g / h[b]), g %= h[b];
  }
  return [m, [i, o], l];
}
function V1(e17, t, n, a, r, s = false, i = 0) {
  let o = a.length, l = [t[0], e17.length / t[0]], u = l[1], p = o > 0 ? r[o - 1] + 1 : 0;
  if (p < 0) throw new Error(T.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());
  let d = t.slice();
  d[0] = p;
  let c = d.reduce((y, x) => y * x, 1), h = w.getArrayFromDType(n, c);
  if (o === 0) return p > 0 && h.fill(i), [h, d];
  if (p <= 0) throw new Error(T.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());
  let m = 0, f = 1, g = 0, b = r[m];
  for (; ; ) {
    let y = 0;
    if (f < o) {
      if (y = r[f], b === y) {
        ++f;
        continue;
      }
      if (b >= y) throw new Error(T.getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage());
    }
    if (b < 0 || b >= p) throw new Error(T.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(b, p));
    b > g && h.fill(i, g * u, b * u);
    for (let x = m; x < f; ++x) {
      let v = a[x];
      if (v < 0 || v >= l[0]) throw new Error(T.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(x, a[x], l[0]));
      for (let I = 0; I < u; I++) h[b * u + I] += e17[v * u + I];
    }
    if (s) for (let x = 0; x < u; x++) h[b * u + x] /= f - m;
    if (m = f, ++f, g = b + 1, b = y, f > o) break;
  }
  return g < p && h.fill(i, g * u, p * u), [h, d];
}
var mK = fr((e17) => Math.sqrt(e17));
var fK = lt(Po, (e17) => Math.sqrt(e17));
var gK = { kernelName: Po, backendName: "cpu", kernelFunc: fK };
var u_ = Mt((e17, t) => {
  let n = e17 - t;
  return n * n;
});
var bK = Zt(Wo, u_);
var yK = { kernelName: Wo, backendName: "cpu", kernelFunc: bK };
var p_ = fr((e17, t) => {
  let { pattern: n, replaceGlobal: a, rewrite: r } = t;
  return e17.replace(new RegExp(n, a ? "g" : ""), r);
});
var xK = Fs(Kc, p_);
var vK = { kernelName: Kc, backendName: "cpu", kernelFunc: xK };
function c_(e17, t, n, a) {
  let r = Oe(e17, t.dtype);
  for (let s = 0; s < r.size; s++) {
    let i = r.indexToLoc(s), o = new Array(i.length);
    for (let l = 0; l < o.length; l++) o[l] = i[l] * n[l] + a[l];
    r.set(t.get(...o), ...i);
  }
  return r;
}
var wK = class {
  constructor(e17, t, n, a, r, s) {
    this.separator = w.encodeString(e17), this.nGramWidths = t, this.leftPad = w.encodeString(n), this.rightPad = w.encodeString(a), this.padWidth = r, this.preserveShort = s;
  }
  getPadWidth(e17) {
    return Math.min(this.padWidth < 0 ? e17 - 1 : this.padWidth, e17 - 1);
  }
  getNumNGrams(e17, t) {
    let n = this.getPadWidth(t);
    return Math.max(0, e17 + 2 * n - t + 1);
  }
  createNGrams(e17, t, n, a, r, s) {
    for (let i = 0; i < r; ++i) {
      let o = this.getPadWidth(s), l = Math.max(0, o - i), u = Math.max(0, o - (r - (i + 1))), p = s - (l + u), d = t + (l > 0 ? 0 : i - o), c = 0;
      c += l * this.leftPad.length;
      for (let b = 0; b < p; ++b) c += e17[d + b].length;
      c += u * this.rightPad.length;
      let h = l + u + p - 1;
      c += h * this.separator.length, n[a + i] = new Uint8Array(c);
      let m = n[a + i], f = 0, g = (b) => b.forEach((y) => m[f++] = y);
      for (let b = 0; b < l; ++b) g(this.leftPad), g(this.separator);
      for (let b = 0; b < p - 1; ++b) g(e17[d + b]), g(this.separator);
      if (p > 0) {
        g(e17[d + p - 1]);
        for (let b = 0; b < u; ++b) g(this.separator), g(this.rightPad);
      } else {
        for (let b = 0; b < u - 1; ++b) g(this.rightPad), g(this.separator);
        g(this.rightPad);
      }
    }
  }
  compute(e17, t) {
    let n = e17.length, a = t.length;
    if (a > 0) {
      let o = t[0];
      if (o !== 0) throw new Error(`First split value must be 0, got ${o}`);
      for (let l = 1; l < a; ++l) {
        let u = t[l] >= o;
        if (u = u && t[l] <= n, !u) throw new Error(`Invalid split value ${t[l]}, must be in [${o}, ${n}]`);
        o = t[l];
      }
      if (o !== n) throw new Error(`Last split value must be data size. Expected ${n}, got ${o}`);
    }
    let r = a - 1, s = w.getArrayFromDType("int32", a);
    if (n === 0 || a === 0) {
      let o = new Array(n);
      for (let l = 0; l <= r; ++l) s[l] = 0;
      return [o, s];
    }
    s[0] = 0;
    for (let o = 1; o <= r; ++o) {
      let l = t[o] - t[o - 1], u = 0;
      this.nGramWidths.forEach((p) => {
        u += this.getNumNGrams(l, p);
      }), this.preserveShort && l > 0 && u === 0 && (u = 1), s[o] = s[o - 1] + u;
    }
    let i = new Array(s[r]);
    for (let o = 0; o < r; ++o) {
      let l = t[o], u = s[o];
      if (this.nGramWidths.forEach((p) => {
        let d = t[o + 1] - t[o], c = this.getNumNGrams(d, p);
        this.createNGrams(e17, l, i, u, c, p), u += c;
      }), this.preserveShort && u === s[o]) {
        let p = t[o + 1] - t[o];
        if (p === 0) continue;
        let d = p + 2 * this.padWidth;
        this.createNGrams(e17, l, i, u, 1, d);
      }
    }
    return [i, s];
  }
};
function U1(e17, t, n, a, r, s, i, o) {
  return new wK(n, a, r, s, i, o).compute(e17, t);
}
function kK(e17, t, n, a) {
  if (!e17.length) return;
  if (t.length === 0) {
    for (let s = 0; s < e17.length; ++s) a.push(e17.subarray(s, s + 1));
    return;
  }
  if (t.length === 1) {
    let s = t[0], i = e17.indexOf(s);
    for (; i !== -1; ) {
      let o = e17.subarray(0, i);
      (!n || o.length !== 0) && a.push(o), e17 = e17.subarray(i + 1), i = e17.indexOf(s);
    }
    (!n || e17.length !== 0) && a.push(e17);
    return;
  }
  let r = 0;
  for (let s = 0; s < e17.length + 1; s++) if (s === e17.length || t.indexOf(e17[s]) !== -1) {
    let i = e17.subarray(r, s);
    (!n || i.length !== 0) && a.push(i), r = s + 1;
  }
}
function G1(e17, t, n) {
  let a = e17.length, r = [], s = 0, i = 0, o = new Array(a);
  for (let c = 0; c < a; ++c) {
    let h = r.length;
    kK(e17[c], t, n, r);
    let m = r.length - h;
    o[c] = m, s += m, i = Math.max(i, m);
  }
  let l = w.getArrayFromDType("int32", s * 2), u = new Array(s), p = [a, i], d = 0;
  for (let c = 0; c < a; ++c) for (let h = 0; h < o[c]; ++h) l[d * 2] = c, l[d * 2 + 1] = h, u[d] = r[d], ++d;
  return [l, u, p];
}
function H1(e17, t) {
  let n = w.getArrayFromDType("int32", e17.length);
  for (let a = 0; a < e17.length; ++a) n[a] = w.fingerPrint64(e17[a]).modulo(t).getLowBitsUnsigned();
  return n;
}
var d_ = Mt((e17, t) => e17 - t);
var IK = O1((e17, t, n, a) => ({ real: e17 - n, imag: t - a }));
var j1 = Zt(Bo, d_, IK);
var SK = { kernelName: Bo, backendName: "cpu", kernelFunc: j1 };
function h_(e17, t) {
  let n = new Array(e17.rank);
  for (let r = 0; r < n.length; r++) n[r] = e17.shape[r] * t[r];
  let a = Oe(n, e17.dtype);
  for (let r = 0; r < a.values.length; ++r) {
    let s = a.indexToLoc(r), i = new Array(e17.rank);
    for (let l = 0; l < i.length; l++) i[l] = s[l] % e17.shape[l];
    let o = e17.locToIndex(i);
    a.values[r] = e17.values[o];
  }
  return a;
}
var nc = (e17, t) => {
  let n = t.value - e17.value;
  return n === 0 ? e17.index - t.index : n;
};
function m_(e17, t, n = 0, a = e17.length - 1) {
  for (; a > n; ) {
    if (a - n > 600) {
      let o = a - n + 1, l = t - n + 1, u = Math.log(o), p = 0.5 * Math.exp(2 * u / 3), d = 0.5 * Math.sqrt(u * p * (o - p) / o) * Math.sign(l - o / 2), c = Math.max(n, Math.floor(t - l * p / o + d)), h = Math.min(a, Math.floor(t + (o - l) * p / o + d));
      m_(e17, t, c, h);
    }
    let r = e17[t], s = n, i = a;
    for (w.swap(e17, n, t), nc(e17[a], r) > 0 && w.swap(e17, n, a); s < i; ) {
      for (w.swap(e17, s, i), s++, i--; nc(e17[s], r) < 0; ) s = s + 1;
      for (; nc(e17[i], r) > 0; ) i = i - 1;
    }
    nc(e17[n], r) === 0 ? w.swap(e17, n, i) : (i = i + 1, w.swap(e17, i, a)), i <= t && (n = i + 1), t <= i && (a = i - 1);
  }
}
function f_(e17, t, n, a, r) {
  let s = t[t.length - 1], [i, o] = [e17.length / s, s], l = w.getTypedArrayFromDType(n, i * a), u = w.getTypedArrayFromDType("int32", i * a);
  for (let d = 0; d < i; d++) {
    let c = d * o, h = e17.subarray(c, c + o), m = new Array(h.length);
    h.forEach((y, x) => m[x] = { value: y, index: x }), a < m.length && (m_(m, a), m = m.slice(0, a)), r && m.sort(nc);
    let f = d * a, g = l.subarray(f, f + a), b = u.subarray(f, f + a);
    for (let y = 0; y < a; y++) g[y] = m[y].value, b[y] = m[y].index;
  }
  let p = t.slice();
  return p[p.length - 1] = a, [Oe(p, n, l), Oe(p, "int32", u)];
}
function q1(e17, t, n, a) {
  let r = w.parseAxisParam(t, n)[0], s = [1, n[0], 1];
  for (let m = 0; m < r; m++) s[0] *= n[m];
  s[1] = n[r];
  for (let m = r + 1; m < n.length; m++) s[2] *= n[m];
  let i = /* @__PURE__ */ new Map(), o = new Int32Array(n[r]), l = new Wt(s, a, e17), u = [], p = s[0] === 1 && s[2] === 1;
  for (let m = 0; m < n[r]; m++) {
    let f;
    if (p) f = e17[m].toString();
    else {
      let b = [];
      for (let y = 0; y < s[0]; y++) for (let x = 0; x < s[2]; x++) b.push(l.get(y, m, x));
      f = b.join(",");
    }
    let g = i.get(f);
    if (g != null) o[m] = g;
    else {
      let b = i.size;
      i.set(f, b), o[m] = b, u.push(m);
    }
  }
  let d = s.slice();
  d[1] = i.size;
  let c = new Wt(d, a);
  u.forEach((m, f) => {
    for (let g = 0; g < s[0]; g++) for (let b = 0; b < s[2]; b++) c.set(l.get(g, m, b), g, f, b);
  });
  let h = n.slice();
  return h[r] = d[1], { outputValues: c.values, outputShape: h, indices: o };
}
var NK = "4.22.0";
Om("cpu", () => new R1(), 1);
var g_ = lt(ji, (e17) => e17 >= 0 ? e17 : Math.exp(e17) - 1);
var TK = { kernelName: ji, backendName: "cpu", kernelFunc: g_ };
function b_(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r } = t, { alpha: s } = a;
  ge([r], "leakyRelu");
  let i = w.sizeFromShape(r.shape), o = n.data.get(r.dataId).values, l = w.getTypedArrayFromDType("float32", i);
  for (let u = 0; u < o.length; u++) l[u] = o[u] < 0 ? s * o[u] : o[u];
  return n.makeTensorInfo(r.shape, "float32", l);
}
var CK = { kernelName: ro, backendName: "cpu", kernelFunc: b_ };
var EK = Mt((e17, t) => e17 < 0 ? t * e17 : e17);
function y_(e17) {
  let { inputs: t, backend: n } = e17, { x: a, alpha: r } = t;
  ge([a, r], "prelu");
  let s = n.data.get(a.dataId).values, i = n.data.get(r.dataId).values, [o, l] = EK(a.shape, r.shape, s, i, "float32");
  return n.makeTensorInfo(l, "float32", o);
}
var _K = { kernelName: wo, backendName: "cpu", kernelFunc: y_ };
var x_ = lt(So, (e17) => Math.max(0, e17));
var AK = { kernelName: So, backendName: "cpu", kernelFunc: x_ };
var v_ = lt(Co, (e17) => Math.min(Math.max(0, e17), 6));
var FK = { kernelName: Co, backendName: "cpu", kernelFunc: v_ };
function pm(e17, t, n, a, r) {
  if (n === "linear") return cr({ inputs: { x: t }, backend: e17 });
  if (n === "relu") return x_({ inputs: { x: t }, backend: e17 });
  if (n === "elu") return g_({ inputs: { x: t }, backend: e17 });
  if (n === "relu6") return v_({ inputs: { x: t }, backend: e17 });
  if (n === "prelu") return y_({ inputs: { x: t, alpha: a }, backend: e17 });
  if (n === "leakyrelu") return b_({ inputs: { x: t }, backend: e17, attrs: { alpha: r } });
  if (n === "sigmoid") return i_({ inputs: { x: t }, backend: e17 });
  throw new Error(`Activation ${n} has not been implemented for the CPU backend.`);
}
function xt(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r } = t, { shape: s } = a, i = w.sizeFromShape(r.shape), o = w.inferFromImplicitShape(s, i), l = w.sizeFromShape(o);
  w.assert(i === l, () => `The new shape (${o}) has ${l} elements and the old shape (${r.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`), n.incRef(r.dataId);
  let u = n.data.get(r.dataId);
  if (u.complexTensorInfos != null) {
    let p = u.complexTensorInfos.real, d = u.complexTensorInfos.imag;
    p.shape = o, d.shape = o;
  }
  return { dataId: r.dataId, shape: o, dtype: r.dtype };
}
var $K = { kernelName: Ru, backendName: "cpu", kernelFunc: xt };
function w_(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { a: r, b: s } = t, { transposeA: i, transposeB: o } = a;
  ge([r, s], "matMul");
  let l = r.shape.length, u = s.shape.length, p = i ? r.shape[l - 2] : r.shape[l - 1], d = o ? s.shape[u - 1] : s.shape[u - 2], c = i ? r.shape[l - 1] : r.shape[l - 2], h = o ? s.shape[u - 2] : s.shape[u - 1], m = r.shape.slice(0, -2), f = s.shape.slice(0, -2), g = w.sizeFromShape(m), b = w.sizeFromShape(f), y = Ju.assertAndGetBroadcastShape(r.shape.slice(0, -2), s.shape.slice(0, -2)).concat([c, h]);
  w.assert(p === d, () => `Error in matMul: inner shapes (${p}) and (${d}) of Tensors with shapes ${r.shape} and ${s.shape} and transposeA=${i} and transposeB=${o} must match.`);
  let x = i ? [g, p, c] : [g, c, p], v = o ? [b, h, d] : [b, d, h], I = xt({ inputs: { x: r }, backend: n, attrs: { shape: x } }), N = xt({ inputs: { x: s }, backend: n, attrs: { shape: v } }), C = i ? I.shape[1] : I.shape[2], _ = i ? I.shape[2] : I.shape[1], F = o ? N.shape[1] : N.shape[2], D = Math.max(g, b), $ = n.data.get(I.dataId).values, S = n.data.get(N.dataId).values, M = w.computeStrides(I.shape), B = w.computeStrides(N.shape), [U, H, q] = i ? [M[0], 1, M[1]] : [M[0], M[1], 1], [K, Z, J] = o ? [1, B[1], B[0]] : [B[1], 1, B[0]], ee = _ * F, ae = Oe([D, _, F], I.dtype), te = ae.values, se = n.blockSize;
  for (let ie = 0; ie < D; ie++) {
    let ve = ie % g, ue = ie % b;
    for (let ye = 0; ye < _; ye += se) {
      let ke = Math.min(ye + se, _);
      for (let Se = 0; Se < F; Se += se) {
        let Le = Math.min(Se + se, F);
        for (let Ue = 0; Ue < C; Ue += se) {
          let mt = Math.min(Ue + se, C);
          for (let st = ye; st < ke; st++) for (let tt = Se; tt < Le; tt++) {
            let nt = 0;
            for (let Re = Ue; Re < mt; Re++) {
              let gt = $[ve * U + st * H + Re * q], Gn = S[Re * K + tt * Z + ue * J];
              nt += gt * Gn;
            }
            te[ie * ee + (st * F + tt)] += nt;
          }
        }
      }
    }
  }
  return n.disposeIntermediateTensorInfo(I), n.disposeIntermediateTensorInfo(N), n.makeTensorInfo(y, ae.dtype, ae.values);
}
var DK = { kernelName: Ri, backendName: "cpu", kernelFunc: w_ };
function RK(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { a: r, b: s, bias: i, preluActivationWeights: o } = t, { transposeA: l, transposeB: u, activation: p, leakyreluAlpha: d } = a, c, h, m, f = [];
  c = w_({ inputs: { a: r, b: s }, attrs: { transposeA: l, transposeB: u }, backend: n }), i && (h = jl({ inputs: { a: c, b: i }, backend: n }), f.push(c), c = h), p && (m = pm(n, c, p, o, d), f.push(c), c = m);
  for (let g of f) n.disposeIntermediateTensorInfo(g);
  return c;
}
var MK = { kernelName: ii, backendName: "cpu", kernelFunc: RK };
var OK = lt(Ni, (e17) => Math.acos(e17));
var PK = { kernelName: Ni, backendName: "cpu", kernelFunc: OK };
var LK = lt(Ti, (e17) => Math.acosh(e17));
var zK = { kernelName: Ti, backendName: "cpu", kernelFunc: LK };
function WK(e17) {
  let { inputs: t, backend: n } = e17, a = t;
  ge(t, "addN");
  let r = a.map((o) => n.data.get(o.dataId).values), s = Oe(a[0].shape, a[0].dtype), i = s.values;
  for (let o = 0; o < a.length; o++) {
    let l = r[o];
    for (let u = 0; u < i.length; u++) i[u] += l[u];
  }
  return n.makeTensorInfo(s.shape, s.dtype, s.values);
}
var BK = { kernelName: Ci, backendName: "cpu", kernelFunc: WK };
function VK(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r } = t, { axis: s, keepDims: i } = a;
  ge(r, "all");
  let o = w.parseAxisParam(s, r.shape), l = o, u = T.getAxesPermutation(l, r.shape.length), p = r;
  u != null && (p = Vn({ inputs: { x: r }, backend: n, attrs: { perm: u } }), l = T.getInnerMostAxes(l.length, r.shape.length)), T.assertAxesAreInnerMostDims("all", l, p.shape.length);
  let [d, c] = T.computeOutAndReduceShapes(p.shape, l), h = w.sizeFromShape(c), m = w.makeZerosTypedArray(w.sizeFromShape(d), p.dtype), f = n.data.get(p.dataId).values;
  for (let b = 0; b < m.length; ++b) {
    let y = b * h, x = f[y];
    for (let v = 0; v < h; ++v) {
      let I = f[y + v];
      x = x && I;
    }
    m[b] = x;
  }
  u != null && n.disposeIntermediateTensorInfo(p);
  let g = n.makeTensorInfo(d, p.dtype, m);
  if (i) {
    let b = T.expandShapeToKeepDim(d, o), y = xt({ inputs: { x: g }, backend: n, attrs: { shape: b } });
    return n.disposeIntermediateTensorInfo(g), y;
  }
  return g;
}
var UK = { kernelName: Zl, backendName: "cpu", kernelFunc: VK };
function GK(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r } = t, { axis: s, keepDims: i } = a;
  ge(r, "any");
  let o = w.parseAxisParam(s, r.shape), l = o, u = T.getAxesPermutation(l, r.shape.length), p = r;
  u != null && (p = Vn({ inputs: { x: r }, backend: n, attrs: { perm: u } }), l = T.getInnerMostAxes(l.length, r.shape.length)), T.assertAxesAreInnerMostDims("any", l, p.shape.length);
  let [d, c] = T.computeOutAndReduceShapes(p.shape, l), h = w.sizeFromShape(c), m = w.makeZerosTypedArray(w.sizeFromShape(d), p.dtype), f = n.data.get(p.dataId).values;
  for (let b = 0; b < m.length; ++b) {
    let y = b * h, x = f[y];
    for (let v = 0; v < h; ++v) {
      let I = f[y + v];
      x = x || I;
    }
    m[b] = x;
  }
  u != null && n.disposeIntermediateTensorInfo(p);
  let g = n.makeTensorInfo(d, p.dtype, m);
  if (i) {
    let b = T.expandShapeToKeepDim(d, o), y = xt({ inputs: { x: g }, backend: n, attrs: { shape: b } });
    return n.disposeIntermediateTensorInfo(g), y;
  }
  return g;
}
var HK = { kernelName: Jl, backendName: "cpu", kernelFunc: GK };
function jK(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r } = t, { axis: s } = a;
  ge(r, "argMax");
  let i = w.parseAxisParam(s, r.shape), o = T.getAxesPermutation(i, r.shape.length), l = r, u = [];
  o != null && (l = Vn({ inputs: { x: r }, backend: n, attrs: { perm: o } }), u.push(l), i = T.getInnerMostAxes(i.length, l.shape.length)), i = [i[0]], T.assertAxesAreInnerMostDims("argMax", i, l.shape.length);
  let [p, d] = T.computeOutAndReduceShapes(l.shape, i), c = w.sizeFromShape(p), h = w.makeZerosTypedArray(c, "int32"), m = w.sizeFromShape(d), f = n.data.get(l.dataId).values;
  for (let g = 0; g < h.length; ++g) {
    let b = g * m, y = f[b], x = 0;
    for (let v = 0; v < m; ++v) {
      let I = f[b + v];
      I > y && (y = I, x = v);
    }
    h[g] = x;
  }
  return u.forEach((g) => n.disposeIntermediateTensorInfo(g)), n.makeTensorInfo(p, "int32", h);
}
var qK = { kernelName: Ql, backendName: "cpu", kernelFunc: jK };
function KK(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r } = t, { axis: s } = a;
  ge(r, "argMin");
  let i = w.parseAxisParam(s, r.shape), o = T.getAxesPermutation(i, r.shape.length), l = r, u = [];
  o != null && (l = Vn({ inputs: { x: r }, backend: n, attrs: { perm: o } }), u.push(l), i = T.getInnerMostAxes(i.length, l.shape.length)), i = [i[0]], T.assertAxesAreInnerMostDims("argMin", i, l.shape.length);
  let [p, d] = T.computeOutAndReduceShapes(l.shape, i), c = w.sizeFromShape(p), h = w.makeZerosTypedArray(c, "int32"), m = w.sizeFromShape(d), f = n.data.get(l.dataId).values;
  for (let g = 0; g < h.length; ++g) {
    let b = g * m, y = f[b], x = 0;
    for (let v = 0; v < m; ++v) {
      let I = f[b + v];
      I < y && (y = I, x = v);
    }
    h[g] = x;
  }
  return u.forEach((g) => n.disposeIntermediateTensorInfo(g)), n.makeTensorInfo(p, "int32", h);
}
var XK = { kernelName: eu, backendName: "cpu", kernelFunc: KK };
var YK = lt(Ei, (e17) => Math.asin(e17));
var ZK = { kernelName: Ei, backendName: "cpu", kernelFunc: YK };
var JK = lt(_i, (e17) => Math.asinh(e17));
var QK = { kernelName: _i, backendName: "cpu", kernelFunc: JK };
var eX = lt(Ai, (e17) => Math.atan(e17));
var tX = { kernelName: Ai, backendName: "cpu", kernelFunc: eX };
var nX = Mt((e17, t) => Math.atan2(e17, t));
var aX = Zt($i, nX);
var rX = { kernelName: $i, backendName: "cpu", kernelFunc: aX };
var sX = lt(Fi, (e17) => Math.atanh(e17));
var iX = { kernelName: Fi, backendName: "cpu", kernelFunc: sX };
function K1(e17, t, n, a, r, s) {
  let i = r.strideHeight, o = r.strideWidth, l = r.dilationHeight, u = r.dilationWidth, p = r.effectiveFilterHeight, d = r.effectiveFilterWidth, c = r.padInfo.top, h = r.padInfo.left, m = s === "max" ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY, f = Oe(r.outShape, n), g = f.values, b = r.outShape[1] * r.outShape[2] * r.outShape[3], y = r.outShape[2] * r.outShape[3], x = r.outShape[3];
  for (let v = 0; v < r.batchSize; ++v) {
    let I = v * b, N = v * a[0];
    for (let C = 0; C < r.inChannels; ++C) for (let _ = 0; _ < r.outHeight; ++_) {
      let F = _ * i - c, D = Math.max(0, F), $ = Math.min(r.inHeight, p + F), S = I + _ * y;
      for (let M = 0; M < r.outWidth; ++M) {
        let B = M * o - h, U = Math.max(0, B), H = Math.min(r.inWidth, d + B), q = m, K = 0, Z = 0;
        for (let ee = D; ee < $; ee += l) {
          let ae = N + ee * a[1];
          for (let te = U; te < H; te += u) {
            let se = ae + te * a[2], ie = e17[se + C];
            s === "max" && ie > q ? q = ie : s === "avg" && (K += ie, Z++);
          }
          if (isNaN(q)) break;
        }
        let J = S + M * x + C;
        g[J] = s === "avg" ? K / Z : q;
      }
    }
  }
  return f;
}
function k_(e17, t, n, a, r = false, s = false) {
  let i = Oe(a.outShape, "int32"), o = a.strideHeight, l = a.strideWidth, u = a.dilationHeight, p = a.dilationWidth, d = a.effectiveFilterHeight, c = a.effectiveFilterWidth, h = a.padInfo.top, m = a.padInfo.left, f = Oe(t, n, e17);
  for (let g = 0; g < a.batchSize; ++g) for (let b = 0; b < a.inChannels; ++b) for (let y = 0; y < a.outHeight; ++y) {
    let x = y * o - h, v = x;
    for (; v < 0; ) v += u;
    let I = Math.min(a.inHeight, d + x);
    for (let N = 0; N < a.outWidth; ++N) {
      let C = N * l - m, _ = C;
      for (; _ < 0; ) _ += p;
      let F = Math.min(a.inWidth, c + C), D = Number.NEGATIVE_INFINITY, $ = -1;
      for (let S = v; S < I; S += u) {
        let M = S - x;
        for (let B = _; B < F; B += p) {
          let U = B - C, H = f.get(g, S, B, b);
          H > D && (D = H, r ? $ = s ? ((g * a.inHeight + S) * a.inWidth + B) * a.inChannels + b : (S * a.inWidth + B) * a.inChannels + b : $ = M * c + U);
        }
      }
      i.set($, g, y, N, b);
    }
  }
  return i;
}
function I_(e17, t, n, a, r, s) {
  let i = r.strideDepth, o = r.strideHeight, l = r.strideWidth, u = r.dilationDepth, p = r.dilationHeight, d = r.dilationWidth, c = r.effectiveFilterDepth, h = r.effectiveFilterHeight, m = r.effectiveFilterWidth, f = r.padInfo.front, g = r.padInfo.top, b = r.padInfo.left, y = s === "max" ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY, x = Oe(r.outShape, n), v = x.values, I = r.outShape[1] * r.outShape[2] * r.outShape[3] * r.outShape[4], N = r.outShape[2] * r.outShape[3] * r.outShape[4], C = r.outShape[3] * r.outShape[4], _ = r.outShape[4];
  for (let F = 0; F < r.batchSize; ++F) {
    let D = F * I, $ = F * a[0];
    for (let S = 0; S < r.inChannels; ++S) for (let M = 0; M < r.outDepth; ++M) {
      let B = M * i - f, U = B;
      for (; U < 0; ) U += u;
      let H = Math.min(r.inDepth, c + B), q = D + M * N;
      for (let K = 0; K < r.outHeight; ++K) {
        let Z = K * o - g, J = Z;
        for (; J < 0; ) J += p;
        let ee = Math.min(r.inHeight, h + Z), ae = q + K * C;
        for (let te = 0; te < r.outWidth; ++te) {
          let se = te * l - b, ie = se;
          for (; ie < 0; ) ie += d;
          let ve = Math.min(r.inWidth, m + se), ue = ae + te * _, ye = y, ke = 0, Se = 0;
          for (let Ue = U; Ue < H; Ue += u) {
            let mt = $ + Ue * a[1];
            for (let st = J; st < ee; st += p) {
              let tt = mt + st * a[2];
              for (let nt = ie; nt < ve; nt += d) {
                let Re = tt + nt * a[3], gt = e17[Re + S];
                if (s === "max" && gt > ye ? ye = gt : s === "avg" && (ke += gt, Se++), isNaN(ye)) break;
              }
              if (isNaN(ye)) break;
            }
            if (isNaN(ye)) break;
          }
          let Le = ue + S;
          v[Le] = s === "avg" ? ke / Math.max(Se, 1) : ye;
        }
      }
    }
  }
  return x;
}
function oX(e17, t) {
  let n = Oe(t.outShape, "int32"), a = t.strideDepth, r = t.strideHeight, s = t.strideWidth, i = t.dilationDepth, o = t.dilationHeight, l = t.dilationWidth, u = t.effectiveFilterDepth, p = t.effectiveFilterHeight, d = t.effectiveFilterWidth, c = t.padInfo.front, h = t.padInfo.top, m = t.padInfo.left;
  for (let f = 0; f < t.batchSize; ++f) for (let g = 0; g < t.inChannels; ++g) for (let b = 0; b < t.outDepth; ++b) {
    let y = b * a - c, x = y;
    for (; x < 0; ) x += i;
    let v = Math.min(t.inDepth, u + y);
    for (let I = 0; I < t.outHeight; ++I) {
      let N = I * r - h, C = N;
      for (; C < 0; ) C += o;
      let _ = Math.min(t.inHeight, p + N);
      for (let F = 0; F < t.outWidth; ++F) {
        let D = F * s - m, $ = D;
        for (; $ < 0; ) $ += l;
        let S = Math.min(t.inWidth, d + D), M = Number.NEGATIVE_INFINITY, B = -1;
        for (let U = x; U < v; U += i) {
          let H = U - y;
          for (let q = C; q < _; q += o) {
            let K = q - N;
            for (let Z = $; Z < S; Z += l) {
              let J = Z - D, ee = e17.get(f, U, q, Z, g);
              ee >= M && (M = ee, B = H * p * d + K * p + J);
            }
          }
        }
        n.set(B, f, b, I, F, g);
      }
    }
  }
  return n;
}
function lX(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r } = t;
  ge(r, "avgPool");
  let { filterSize: s, strides: i, pad: o, dimRoundingMode: l } = a, u = 1;
  w.assert(T.eitherStridesOrDilationsAreOne(i, u), () => `Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${u}'`);
  let p = T.computePool2DInfo(r.shape, s, i, u, o, l), d;
  if (p.filterWidth === 1 && p.filterHeight === 1 && w.arraysEqual(p.inShape, p.outShape)) d = cr({ inputs: { x: r }, backend: n });
  else {
    let c = n.data.get(r.dataId).values, h = w.computeStrides(r.shape), m = K1(c, r.shape, r.dtype, h, p, "avg");
    d = n.makeTensorInfo(p.outShape, r.dtype, m.values);
  }
  return d;
}
var uX = { kernelName: Di, backendName: "cpu", kernelFunc: lX };
function pX(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r } = t, { filterSize: s, strides: i, pad: o, dimRoundingMode: l, dataFormat: u } = a;
  ge(r, "avgPool3d");
  let p = T.computePool3DInfo(r.shape, s, i, 1, o, l, u), d = n.data.get(r.dataId).values, c = I_(d, r.shape, r.dtype, w.computeStrides(r.shape), p, "avg");
  return n.makeTensorInfo(c.shape, "float32", c.values);
}
var cX = { kernelName: tu, backendName: "cpu", kernelFunc: pX };
function dX(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { dy: r, input: s } = t, { filterSize: i, strides: o, pad: l, dimRoundingMode: u } = a;
  ge([r, s], "avgPool3DGrad");
  let p = T.computePool3DInfo(s.shape, i, o, 1, l, u), d = p.strideDepth, c = p.strideHeight, h = p.strideWidth, m = p.filterDepth, f = p.filterHeight, g = p.filterWidth, b = p.dilationDepth, y = p.dilationHeight, x = p.dilationWidth, v = p.effectiveFilterDepth, I = p.effectiveFilterHeight, N = p.effectiveFilterWidth, C = v - 1 - p.padInfo.front, _ = N - 1 - p.padInfo.left, F = I - 1 - p.padInfo.top, D = Oe(s.shape, "float32"), $ = 1 / (m * f * g), S = n.bufferSync(r);
  for (let M = 0; M < p.batchSize; ++M) for (let B = 0; B < p.inChannels; ++B) for (let U = 0; U < p.inDepth; ++U) for (let H = 0; H < p.inHeight; ++H) for (let q = 0; q < p.inWidth; ++q) {
    let K = U - C, Z = H - F, J = q - _, ee = 0;
    for (let ae = 0; ae < v; ae += b) {
      let te = (K + ae) / d;
      if (!(te < 0 || te >= p.outDepth || Math.floor(te) !== te)) for (let se = 0; se < I; se += y) {
        let ie = (Z + se) / c;
        if (!(ie < 0 || ie >= p.outHeight || Math.floor(ie) !== ie)) for (let ve = 0; ve < N; ve += x) {
          let ue = (J + ve) / h;
          if (ue < 0 || ue >= p.outWidth || Math.floor(ue) !== ue) continue;
          let ye = S.get(M, te, ie, ue, B);
          ee += ye;
        }
      }
    }
    D.set(ee * $, M, U, H, q, B);
  }
  return n.makeTensorInfo(D.shape, D.dtype, D.values);
}
var hX = { kernelName: Rc, backendName: "cpu", kernelFunc: dX };
function mX(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { dy: r, input: s } = t, i = s;
  ge([r, s], "avgPoolGrad");
  let { filterSize: o, strides: l, pad: u } = a, p = T.computePool2DInfo(i.shape, o, l, 1, u), d = p.strideHeight, c = p.strideWidth, h = p.filterHeight, m = p.filterWidth, f = p.dilationHeight, g = p.dilationWidth, b = p.effectiveFilterHeight, y = p.effectiveFilterWidth, x = y - 1 - p.padInfo.left, v = b - 1 - p.padInfo.top, I = Oe(i.shape, "float32"), N = 1 / (h * m), C = n.data.get(r.dataId).values, _ = Oe(r.shape, "float32", C);
  for (let F = 0; F < p.batchSize; ++F) for (let D = 0; D < p.inChannels; ++D) for (let $ = 0; $ < p.inHeight; ++$) for (let S = 0; S < p.inWidth; ++S) {
    let M = $ - v, B = S - x, U = 0;
    for (let H = 0; H < b; H += f) {
      let q = (M + H) / d;
      if (!(q < 0 || q >= p.outHeight || Math.floor(q) !== q)) for (let K = 0; K < y; K += g) {
        let Z = (B + K) / c;
        if (Z < 0 || Z >= p.outWidth || Math.floor(Z) !== Z) continue;
        let J = _.get(F, q, Z, D);
        U += J;
      }
    }
    I.set(U * N, F, $, S, D);
  }
  return n.makeTensorInfo(I.shape, I.dtype, I.values);
}
var fX = { kernelName: Dc, backendName: "cpu", kernelFunc: mX };
function gX(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r, scale: s, offset: i, mean: o, variance: l } = t;
  w.assert(o.shape.length === l.shape.length, () => "Batch normalization gradient requires mean and variance to have equal ranks."), w.assert(i == null || o.shape.length === i.shape.length, () => "Batch normalization gradient requires mean and offset to have equal ranks."), w.assert(s == null || o.shape.length === s.shape.length, () => "Batch normalization gradient requires mean and scale to have equal ranks."), ge([r, o, l, s, i], "batchNorm");
  let { varianceEpsilon: u } = a;
  u == null && (u = 1e-3);
  let p = n.data.get(r.dataId).values, d = n.data.get(o.dataId).values, c = n.data.get(l.dataId).values, h = s ? n.data.get(s.dataId).values : new Float32Array([1]), m = i ? n.data.get(i.dataId).values : new Float32Array([0]), f = new Float32Array(p.length), g = m.length, b = h.length, y = c.length, x = d.length, v = 0, I = 0, N = 0, C = 0;
  for (let _ = 0; _ < p.length; ++_) f[_] = m[v++] + (p[_] - d[I++]) * h[N++] / Math.sqrt(c[C++] + u), v >= g && (v = 0), I >= x && (I = 0), N >= b && (N = 0), C >= y && (C = 0);
  return n.makeTensorInfo(r.shape, r.dtype, f);
}
var bX = { kernelName: Ji, backendName: "cpu", kernelFunc: gX };
function yX(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r } = t, { blockShape: s, crops: i } = a;
  ge([r], "batchToSpaceND");
  let o = s.reduce((b, y) => b * y), l = T.getReshaped(r.shape, s, o), u = T.getPermuted(l.length, s.length), p = T.getReshapedPermuted(r.shape, s, o), d = T.getSliceBeginCoords(i, s.length), c = T.getSliceSize(p, i, s.length), h = xt({ inputs: { x: r }, backend: n, attrs: { shape: l } }), m = Vn({ inputs: { x: h }, backend: n, attrs: { perm: u } }), f = xt({ inputs: { x: m }, backend: n, attrs: { shape: p } }), g = xi({ inputs: { x: f }, backend: n, attrs: { begin: d, size: c } });
  return n.disposeIntermediateTensorInfo(h), n.disposeIntermediateTensorInfo(m), n.disposeIntermediateTensorInfo(f), g;
}
var xX = { kernelName: nu, backendName: "cpu", kernelFunc: yX };
function vX(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r, weights: s } = t, { size: i } = a, o = n.data.get(r.dataId).values, l = n.data.get(s.dataId).values, u = P1(o, l, s.dtype, s.shape, i);
  return n.makeTensorInfo([i], s.dtype, u);
}
var wX = { kernelName: au, backendName: "cpu", kernelFunc: vX };
function kX(e17) {
  let { inputs: t, backend: n } = e17, { s0: a, s1: r } = t, s = n.data.get(a.dataId).values, i = n.data.get(r.dataId).values, o = T.assertAndGetBroadcastShape(Array.from(s), Array.from(i));
  return n.makeTensorInfo([o.length], "int32", Int32Array.from(o));
}
var IX = { kernelName: Mc, backendName: "cpu", kernelFunc: kX };
var SX = lt(ws, (e17, t) => {
  let n = t;
  return e17 > n.clipValueMax ? n.clipValueMax : e17 < n.clipValueMin ? n.clipValueMin : e17;
});
var NX = { kernelName: ws, backendName: "cpu", kernelFunc: SX };
var TX = (e17) => {
  let { x: t } = e17.inputs, n = e17.backend, a = new Float32Array(w.sizeFromShape(t.shape)), r = n.data.get(t.dataId), s = r.complexTensorInfos.real, i = r.complexTensorInfos.imag, o = n.data.get(s.dataId).values, l = n.data.get(i.dataId).values;
  for (let u = 0; u < o.length; u++) {
    let p = o[u], d = l[u];
    a[u] = Math.hypot(p, d);
  }
  return n.makeOutput(a, t.shape, "float32");
};
var CX = { kernelName: Oc, backendName: "cpu", kernelFunc: TX };
function ql(e17) {
  let { inputs: t, backend: n } = e17, { input: a } = t, r = n.data.get(a.dataId).complexTensorInfos.imag, s = n.data.get(r.dataId).values;
  return n.makeTensorInfo(r.shape, r.dtype, s);
}
var EX = { kernelName: _m, backendName: "cpu", kernelFunc: ql };
function Kl(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { axis: r } = a, s = w.parseAxisParam(r, t[0].shape)[0], i = t.map((f) => f.shape);
  T.assertParamsConsistent(i, s);
  let o = T.computeOutShape(t.map((f) => f.shape), s);
  if (w.sizeFromShape(o) === 0) return n.makeTensorInfo(o, t[0].dtype, []);
  let l = t.filter((f) => w.sizeFromShape(f.shape) > 0);
  if (l.length === 1) return cr({ inputs: { x: l[0] }, backend: n });
  if (l[0].dtype === "complex64") {
    let f = l.map((v) => yi({ inputs: { input: v }, backend: n })), g = l.map((v) => ql({ inputs: { input: v }, backend: n })), b = Kl({ inputs: f, backend: n, attrs: { axis: s } }), y = Kl({ inputs: g, backend: n, attrs: { axis: s } }), x = Yn({ inputs: { real: b, imag: y }, backend: n });
    return f.forEach((v) => n.disposeIntermediateTensorInfo(v)), g.forEach((v) => n.disposeIntermediateTensorInfo(v)), n.disposeIntermediateTensorInfo(b), n.disposeIntermediateTensorInfo(y), x;
  }
  let u = l.map((f) => {
    let g = [-1, w.sizeFromShape(f.shape.slice(s))];
    return xt({ inputs: { x: f }, backend: n, attrs: { shape: g } });
  }), p = u.map((f) => ({ vals: n.data.get(f.dataId).values, shape: f.shape }));
  o = T.computeOutShape(u.map((f) => f.shape), 1);
  let d = u[0].shape[0] === 1, c = L1(p, o, t[0].dtype, d), h = T.computeOutShape(l.map((f) => f.shape), s), m = n.makeTensorInfo(h, t[0].dtype, c);
  return u.forEach((f) => n.disposeIntermediateTensorInfo(f)), m;
}
var _X = { kernelName: su, backendName: "cpu", kernelFunc: Kl };
function S_(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r, filter: s } = t, { strides: i, pad: o, dataFormat: l, dilations: u, dimRoundingMode: p } = a;
  ge([r, s], "conv2d");
  let d = T.convertConv2DDataFormat(l), c = T.computeConv2DInfo(r.shape, s.shape, i, u, o, p, false, d), h = c.filterHeight, m = c.filterWidth, f = c.dilationHeight, g = c.dilationWidth, b = c.padInfo.left, y = c.padInfo.top, x = c.dataFormat === "channelsLast", v = new Wt(c.outShape, r.dtype), I = w.computeStrides(r.shape), N = w.computeStrides(s.shape), C = I[0], _ = x ? I[1] : I[2], F = x ? I[2] : 1, D = x ? 1 : I[1], $ = v.strides[0], S = x ? v.strides[1] : v.strides[2], M = x ? v.strides[2] : 1, B = x ? 1 : v.strides[1], U = n.data.get(r.dataId).values, H = n.data.get(s.dataId).values, q = v.values;
  for (let K = 0; K < c.batchSize; ++K) {
    let Z = K * C, J = K * $;
    for (let ee = 0; ee < c.outHeight; ++ee) {
      let ae = J + ee * S, te = ee * c.strideHeight - y;
      for (let se = 0; se < h; ++se) {
        let ie = te + se * f;
        if (ie < 0 || ie >= c.inHeight) continue;
        let ve = se * N[0], ue = Z + ie * _;
        for (let ye = 0; ye < c.outWidth; ++ye) {
          let ke = ae + ye * M, Se = ye * c.strideWidth - b;
          for (let Le = 0; Le < m; ++Le) {
            let Ue = Se + Le * g;
            if (Ue < 0 || Ue >= c.inWidth) continue;
            let mt = ve + Le * N[1], st = ue + Ue * F, tt = mt;
            for (let nt = 0; nt < c.inChannels; ++nt) {
              let Re = U[st + nt * D];
              for (let gt = 0; gt < c.outChannels; ++gt) q[ke + gt * B] += Re * H[tt + gt];
              tt += c.outChannels;
            }
          }
        }
      }
    }
  }
  return n.makeTensorInfo(v.shape, v.dtype, q);
}
var AX = { kernelName: Pi, backendName: "cpu", kernelFunc: S_ };
function FX(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r, dy: s } = t, { strides: i, pad: o, dataFormat: l, dimRoundingMode: u, filterShape: p } = a;
  ge([r, s], "conv2dBackpropFilter");
  let d = T.convertConv2DDataFormat(l), c = T.computeConv2DInfo(r.shape, p, i, 1, o, u, false, d), { strideHeight: h, strideWidth: m, filterHeight: f, filterWidth: g } = c, b = c.dataFormat === "channelsLast", y = new Wt(c.filterShape, "float32"), x = c.padInfo.left, v = c.padInfo.top, I = n.data.get(r.dataId).values, N = n.data.get(s.dataId).values, C = new Wt(r.shape, r.dtype, I), _ = new Wt(s.shape, s.dtype, N);
  for (let F = 0; F < f; ++F) {
    let D = Math.max(0, Math.ceil((v - F) / h)), $ = Math.min(c.outHeight, (c.inHeight + v - F) / h);
    for (let S = 0; S < g; ++S) {
      let M = Math.max(0, Math.ceil((x - S) / m)), B = Math.min(c.outWidth, (c.inWidth + x - S) / m);
      for (let U = 0; U < c.inChannels; ++U) for (let H = 0; H < c.outChannels; ++H) {
        let q = 0;
        for (let K = 0; K < c.batchSize; ++K) for (let Z = D; Z < $; ++Z) {
          let J = F + Z * h - v;
          for (let ee = M; ee < B; ++ee) {
            let ae = S + ee * m - x;
            b ? q += C.get(K, J, ae, U) * _.get(K, Z, ee, H) : q += C.get(K, U, J, ae) * _.get(K, H, Z, ee);
          }
        }
        y.set(q, F, S, U, H);
      }
    }
  }
  return n.makeTensorInfo(y.shape, y.dtype, y.values);
}
var $X = { kernelName: km, backendName: "cpu", kernelFunc: FX };
function DX(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { dy: r, filter: s } = t, { inputShape: i, strides: o, pad: l, dataFormat: u, dimRoundingMode: p } = a;
  ge([r, s], "conv2dBackpropInput");
  let d = w.computeStrides(s.shape), c = w.computeStrides(r.shape), h = T.convertConv2DDataFormat(u), m = T.computeConv2DInfo(i, s.shape, o, 1, l, p, false, h), f = new Wt(m.inShape, "float32"), g = f.values, b = n.data.get(r.dataId).values, y = n.data.get(s.dataId).values, [x, v, I] = d, { batchSize: N, filterHeight: C, filterWidth: _, inChannels: F, inHeight: D, inWidth: $, outChannels: S, outHeight: M, outWidth: B, strideHeight: U, strideWidth: H } = m;
  h = m.dataFormat;
  let q = C - 1 - m.padInfo.top, K = _ - 1 - m.padInfo.left, Z = h === "channelsLast", J = f.strides[0], ee = Z ? f.strides[1] : f.strides[2], ae = Z ? f.strides[2] : 1, te = Z ? 1 : f.strides[1], se = c[0], ie = Z ? c[1] : c[2], ve = Z ? c[2] : 1, ue = Z ? 1 : c[1];
  for (let ye = 0; ye < N; ++ye) for (let ke = 0; ke < F; ++ke) for (let Se = 0; Se < D; ++Se) {
    let Le = Se - q, Ue = Math.max(0, Math.ceil(Le / U)), mt = Math.min(M, (C + Le) / U);
    for (let st = 0; st < $; ++st) {
      let tt = st - K, nt = Math.max(0, Math.ceil(tt / H)), Re = Math.min(B, (_ + tt) / H), gt = 0;
      for (let Ot = Ue; Ot < mt; ++Ot) {
        let ia = Ot * U - Le;
        for (let un = nt; un < Re; ++un) {
          let Fn = un * H - tt, oa = se * ye + ie * Ot + ve * un, $n = x * (C - 1 - ia) + v * (_ - 1 - Fn) + I * ke;
          for (let ut = 0; ut < S; ++ut) {
            let Dn = b[oa + ue * ut], Hn = y[$n + ut];
            gt += Dn * Hn;
          }
        }
      }
      let Gn = J * ye + ee * Se + ae * st + te * ke;
      g[Gn] = gt;
    }
  }
  return n.makeTensorInfo(f.shape, f.dtype, f.values);
}
var RX = { kernelName: Li, backendName: "cpu", kernelFunc: DX };
function MX(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r, filter: s } = t, { strides: i, pad: o, dilations: l } = a;
  ge([r, s], "conv3d");
  let u = T.computeConv3DInfo(r.shape, s.shape, i, l, o), { filterDepth: p, filterHeight: d, filterWidth: c, dilationDepth: h, dilationHeight: m, dilationWidth: f, padInfo: g } = u, b = g.front, y = g.left, x = g.top, v = new Wt(u.outShape, r.dtype), I = n.data.get(r.dataId).values, N = n.data.get(s.dataId).values, C = v.values, _ = w.computeStrides(r.shape), F = w.computeStrides(s.shape);
  for (let D = 0; D < u.batchSize; ++D) {
    let $ = D * _[0], S = D * v.strides[0];
    for (let M = 0; M < u.outDepth; ++M) {
      let B = S + M * v.strides[1], U = M * u.strideDepth - b;
      for (let H = 0; H < p; ++H) {
        let q = U + H * h;
        if (q < 0 || q >= u.inDepth) continue;
        let K = H * F[0], Z = $ + q * _[1];
        for (let J = 0; J < u.outHeight; ++J) {
          let ee = B + J * v.strides[2], ae = J * u.strideHeight - x;
          for (let te = 0; te < d; ++te) {
            let se = ae + te * m;
            if (se < 0 || se >= u.inHeight) continue;
            let ie = K + te * F[1], ve = Z + se * _[2];
            for (let ue = 0; ue < u.outWidth; ++ue) {
              let ye = ee + ue * u.outChannels, ke = ue * u.strideWidth - y;
              for (let Se = 0; Se < c; ++Se) {
                let Le = ke + Se * f;
                if (Le < 0 || Le >= u.inWidth) continue;
                let Ue = ie + Se * F[2], mt = ve + Le * u.inChannels, st = Ue;
                for (let tt = 0; tt < u.inChannels; ++tt) {
                  let nt = I[mt + tt];
                  for (let Re = 0; Re < u.outChannels; ++Re) C[ye + Re] += nt * N[st + Re];
                  st += u.outChannels;
                }
              }
            }
          }
        }
      }
    }
  }
  return n.makeTensorInfo(v.shape, v.dtype, v.values);
}
var OX = { kernelName: zi, backendName: "cpu", kernelFunc: MX };
function PX(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r, dy: s } = t, { strides: i, pad: o, filterShape: l } = a;
  ge([r, s], "conv3dBackpropFilterV2");
  let u = w.computeStrides(r.shape), p = w.computeStrides(s.shape), d = T.computeConv3DInfo(r.shape, l, i, 1, o), c = d.strideDepth, h = d.strideHeight, m = d.strideWidth, f = d.filterDepth, g = d.filterHeight, b = d.filterWidth, y = new Wt(d.filterShape, "float32"), x = y.values, [v, I, N, C] = y.strides, _ = n.data.get(s.dataId).values, [F, D, $, S] = p, M = n.data.get(r.dataId).values, [B, U, H, q] = u, K = d.padInfo.front, Z = d.padInfo.left, J = d.padInfo.top;
  for (let ee = 0; ee < f; ++ee) {
    let ae = Math.max(0, Math.ceil((K - ee) / c)), te = Math.min(d.outDepth, (d.inDepth + K - ee) / c), se = ee * v;
    for (let ie = 0; ie < g; ++ie) {
      let ve = Math.max(0, Math.ceil((J - ie) / h)), ue = Math.min(d.outHeight, (d.inHeight + J - ie) / h), ye = ie * I + se;
      for (let ke = 0; ke < b; ++ke) {
        let Se = Math.max(0, Math.ceil((Z - ke) / m)), Le = Math.min(d.outWidth, (d.inWidth + Z - ke) / m), Ue = ke * N + ye;
        for (let mt = 0; mt < d.inChannels; ++mt) {
          let st = mt * C + Ue;
          for (let tt = 0; tt < d.outChannels; ++tt) {
            let nt = 0;
            for (let Re = 0; Re < d.batchSize; ++Re) {
              let gt = Re * B, Gn = Re * F;
              for (let Ot = ae; Ot < te; ++Ot) {
                let ia = (ee + Ot * c - K) * U + gt, un = Ot * D + Gn;
                for (let Fn = ve; Fn < ue; ++Fn) {
                  let oa = (ie + Fn * h - J) * H + ia, $n = Fn * $ + un;
                  for (let ut = Se; ut < Le; ++ut) {
                    let Dn = (ke + ut * m - Z) * q + oa, Hn = ut * S + $n;
                    nt += M[Dn + mt] * _[Hn + tt];
                  }
                }
              }
            }
            x[st + tt] = nt;
          }
        }
      }
    }
  }
  return n.makeTensorInfo(y.shape, y.dtype, y.values);
}
var LX = { kernelName: iu, backendName: "cpu", kernelFunc: PX };
function zX(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { dy: r, filter: s } = t, { pad: i, strides: o, inputShape: l } = a;
  ge([r], "conv3dBackpropInputV2");
  let u = w.computeStrides(r.shape), p = w.computeStrides(s.shape), d = T.computeConv3DInfo(l, s.shape, o, 1, i), c = new Wt(d.inShape, "float32"), h = c.values, [m, f, g, b] = c.strides, y = n.data.get(r.dataId).values, [x, v, I, N] = u, C = n.data.get(s.dataId).values, [_, F, D, $] = p, { batchSize: S, filterDepth: M, filterHeight: B, filterWidth: U, inChannels: H, inDepth: q, inHeight: K, inWidth: Z, outChannels: J, outDepth: ee, outHeight: ae, outWidth: te, strideDepth: se, strideHeight: ie, strideWidth: ve } = d, ue = M - 1 - d.padInfo.front, ye = B - 1 - d.padInfo.top, ke = U - 1 - d.padInfo.left;
  for (let Se = 0; Se < S; ++Se) for (let Le = 0; Le < H; ++Le) for (let Ue = 0; Ue < q; ++Ue) {
    let mt = Ue - ue, st = Math.max(0, Math.ceil(mt / se)), tt = Math.min(ee, (M + mt) / se);
    for (let nt = 0; nt < K; ++nt) {
      let Re = nt - ye, gt = Math.max(0, Math.ceil(Re / ie)), Gn = Math.min(ae, (B + Re) / ie);
      for (let Ot = 0; Ot < Z; ++Ot) {
        let ia = Ot - ke, un = Math.max(0, Math.ceil(ia / ve)), Fn = Math.min(te, (U + ia) / ve), oa = 0;
        for (let $n = st; $n < tt; ++$n) {
          let ut = $n * se - mt;
          for (let Dn = gt; Dn < Gn; ++Dn) {
            let Hn = Dn * ie - Re;
            for (let xr = un; xr < Fn; ++xr) {
              let ml = xr * ve - ia, Za = x * Se + v * $n + I * Dn + N * xr, Wp = _ * (M - 1 - ut) + F * (B - 1 - Hn) + D * (U - 1 - ml) + $ * Le;
              for (let Ia = 0; Ia < J; ++Ia) {
                let Ur = y[Za + Ia], Jt = C[Wp + Ia];
                oa += Ur * Jt;
              }
            }
          }
        }
        h[m * Se + f * Ue + g * nt + b * Ot + Le] = oa;
      }
    }
  }
  return n.makeTensorInfo(c.shape, c.dtype, c.values);
}
var WX = { kernelName: ou, backendName: "cpu", kernelFunc: zX };
var BX = lt(Wi, (e17) => Math.cos(e17));
var VX = { kernelName: Wi, backendName: "cpu", kernelFunc: BX };
var UX = lt(Bi, (e17) => Math.cosh(e17));
var GX = { kernelName: Bi, backendName: "cpu", kernelFunc: UX };
function HX(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { image: r, boxes: s, boxInd: i } = t, { cropSize: o, method: l, extrapolationValue: u } = a, [p, d, c, h] = r.shape, m = s.shape[0], [f, g] = o, b = Oe([m, f, g, h], "float32"), y = n.data.get(s.dataId).values, x = n.data.get(i.dataId).values, v = n.data.get(r.dataId).values, I = w.computeStrides(r.shape), N = w.computeStrides(b.shape);
  for (let C = 0; C < m; C++) {
    let _ = C * 4, F = y[_], D = y[_ + 1], $ = y[_ + 2], S = y[_ + 3], M = x[C];
    if (M >= p) continue;
    let B = f > 1 ? ($ - F) * (d - 1) / (f - 1) : 0, U = g > 1 ? (S - D) * (c - 1) / (g - 1) : 0;
    for (let H = 0; H < f; H++) {
      let q = f > 1 ? F * (d - 1) + H * B : 0.5 * (F + $) * (d - 1);
      if (q < 0 || q > d - 1) {
        for (let K = 0; K < g; K++) for (let Z = 0; Z < h; Z++) {
          let J = Z + K * N[2] + H * N[1] + C * N[0];
          b.values[J] = u;
        }
        continue;
      }
      if (l === "bilinear") {
        let K = Math.floor(q), Z = Math.ceil(q), J = q - K;
        for (let ee = 0; ee < g; ee++) {
          let ae = g > 1 ? D * (c - 1) + ee * U : 0.5 * (D + S) * (c - 1);
          if (ae < 0 || ae > c - 1) {
            for (let ve = 0; ve < h; ve++) {
              let ue = ve + ee * N[2] + H * N[1] + C * N[0];
              b.values[ue] = u;
            }
            continue;
          }
          let te = Math.floor(ae), se = Math.ceil(ae), ie = ae - te;
          for (let ve = 0; ve < h; ve++) {
            let ue = ve + te * I[2] + K * I[1] + M * I[0], ye = v[ue];
            ue = ve + se * I[2] + K * I[1] + M * I[0];
            let ke = v[ue];
            ue = ve + te * I[2] + Z * I[1] + M * I[0];
            let Se = v[ue];
            ue = ve + se * I[2] + Z * I[1] + M * I[0];
            let Le = v[ue], Ue = ye + (ke - ye) * ie, mt = Se + (Le - Se) * ie;
            ue = ve + ee * N[2] + H * N[1] + C * N[0], b.values[ue] = Ue + (mt - Ue) * J;
          }
        }
      } else for (let K = 0; K < g; ++K) {
        let Z = g > 1 ? D * (c - 1) + K * U : 0.5 * (D + S) * (c - 1);
        if (Z < 0 || Z > c - 1) {
          for (let ae = 0; ae < h; ae++) {
            let te = ae + K * N[2] + H * N[1] + C * N[0];
            b.values[te] = u;
          }
          continue;
        }
        let J = Math.round(Z), ee = Math.round(q);
        for (let ae = 0; ae < h; ae++) {
          let te = ae + J * I[2] + ee * I[1] + M * I[0], se = ae + K * N[2] + H * N[1] + C * N[0];
          b.values[se] = v[te];
        }
      }
    }
  }
  return n.makeTensorInfo(b.shape, b.dtype, b.values);
}
var jX = { kernelName: uu, backendName: "cpu", kernelFunc: HX };
function qX(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r } = t, { axis: s, exclusive: i, reverse: o } = a;
  ge(r, "cumprod");
  let l = T.getAxesPermutation([s], r.shape.length), u = r;
  l != null && (u = Vn({ inputs: { x: r }, backend: n, attrs: { perm: l } }));
  let p = T.getInnerMostAxes(1, r.shape.length)[0];
  if (p !== u.shape.length - 1) throw new Error(`backend.cumprod in CPU expects an inner-most axis=${u.shape.length - 1} but got axis=${p}`);
  let d = fa(u.dtype, "int32"), c = w.makeOnesTypedArray(w.sizeFromShape(u.shape), d), h = n.data.get(u.dataId).values, m = u.shape[u.shape.length - 1], f = o ? (b, y) => b + m - y - 1 : (b, y) => b + y;
  for (let b = 0; b < h.length; b += m) for (let y = 0; y < m; y++) {
    let x = f(b, y);
    if (y === 0) c[x] = i ? 1 : h[x];
    else {
      let v = f(b, y - 1);
      c[x] = i ? h[v] * c[v] : h[x] * c[v];
    }
  }
  let g = n.makeTensorInfo(u.shape, d, c);
  if (l != null) {
    let b = T.getUndoAxesPermutation(l), y = Vn({ inputs: { x: g }, backend: n, attrs: { perm: b } });
    return n.disposeIntermediateTensorInfo(g), n.disposeIntermediateTensorInfo(u), y;
  }
  return g;
}
var KX = { kernelName: lu, backendName: "cpu", kernelFunc: qX };
function XX(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r } = t, { axis: s, exclusive: i, reverse: o } = a;
  ge(r, "cumsum");
  let l = T.getAxesPermutation([s], r.shape.length), u = r;
  l != null && (u = Vn({ inputs: { x: r }, backend: n, attrs: { perm: l } }));
  let p = T.getInnerMostAxes(1, r.shape.length)[0];
  if (p !== u.shape.length - 1) throw new Error(`backend.cumsum in CPU expects an inner-most axis=${u.shape.length - 1} but got axis=${p}`);
  let d = fa(u.dtype, "int32"), c = w.makeZerosTypedArray(w.sizeFromShape(u.shape), d), h = n.data.get(u.dataId).values, m = u.shape[u.shape.length - 1], f = o ? (b, y) => b + m - y - 1 : (b, y) => b + y;
  for (let b = 0; b < h.length; b += m) for (let y = 0; y < m; y++) {
    let x = f(b, y);
    if (y === 0) c[x] = i ? 0 : h[x];
    else {
      let v = f(b, y - 1);
      c[x] = i ? h[v] + c[v] : h[x] + c[v];
    }
  }
  let g = n.makeTensorInfo(u.shape, d, c);
  if (l != null) {
    let b = T.getUndoAxesPermutation(l), y = Vn({ inputs: { x: g }, backend: n, attrs: { perm: b } });
    return n.disposeIntermediateTensorInfo(g), n.disposeIntermediateTensorInfo(u), y;
  }
  return g;
}
var YX = { kernelName: Vi, backendName: "cpu", kernelFunc: XX };
function ZX(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r, weights: s } = t, { size: i, binaryOutput: o } = a;
  if (r.shape.length === 1) {
    let l = n.data.get(r.dataId).values, u = n.data.get(s.dataId).values, p = P1(l, u, s.dtype, s.shape, i);
    return n.makeTensorInfo([i], s.dtype, p);
  } else if (r.shape.length === 2) {
    let l = n.bufferSync(r), u = n.bufferSync(s), p = $E(l, u, i, o);
    return n.makeTensorInfo(p.shape, s.dtype, p.values);
  }
  throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`);
}
var JX = { kernelName: Pc, backendName: "cpu", kernelFunc: ZX };
function QX(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r } = t, { blockSize: s, dataFormat: i } = a;
  w.assert(i === "NHWC", () => `Only NHWC dataFormat supported on CPU for depthToSpace. Got ${i}`);
  let o = r.shape[0], l = r.shape[1], u = r.shape[2], p = r.shape[3], d = l * s, c = u * s, h = p / (s * s), m = n.data.get(r.dataId).values, f = new Float32Array(o * d * c * h), g = 0;
  for (let b = 0; b < o; ++b) for (let y = 0; y < d; ++y) {
    let x = Math.floor(y / s), v = y % s;
    for (let I = 0; I < c; ++I) {
      let N = Math.floor(I / s), C = I % s, _ = (v * s + C) * h;
      for (let F = 0; F < h; ++F) {
        let D = F + _ + p * (N + u * (x + l * b));
        f[g++] = m[D];
      }
    }
  }
  return n.makeTensorInfo([o, d, c, h], r.dtype, f);
}
var eY = { kernelName: pu, backendName: "cpu", kernelFunc: QX };
function N_(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r, filter: s } = t, { strides: i, pad: o, dilations: l, dimRoundingMode: u } = a;
  ge([r, s], "depthwiseConv2DNative");
  let p = w.computeStrides(r.shape), d = w.computeStrides(s.shape), c = l;
  c == null && (c = [1, 1]), w.assert(T.eitherStridesOrDilationsAreOne(i, c), () => `Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${c}'`);
  let h = T.computeConv2DInfo(r.shape, s.shape, i, c, o, u, true), { filterHeight: m, filterWidth: f, dilationHeight: g, dilationWidth: b, padInfo: y } = h, x = y.left, v = y.top, I = h.outChannels / h.inChannels, N = new Wt(h.outShape, r.dtype), C = n.data.get(r.dataId).values, _ = n.data.get(s.dataId).values, F = N.values;
  for (let D = 0; D < h.batchSize; ++D) {
    let $ = D * p[0], S = D * N.strides[0];
    for (let M = 0; M < h.outHeight; ++M) {
      let B = S + M * N.strides[1], U = M * h.strideHeight - v;
      for (let H = 0; H < m; ++H) {
        let q = U + H * g;
        if (q < 0 || q >= h.inHeight) continue;
        let K = H * d[0], Z = $ + q * p[1];
        for (let J = 0; J < h.outWidth; ++J) {
          let ee = B + J * N.strides[2], ae = J * h.strideWidth - x;
          for (let te = 0; te < f; ++te) {
            let se = ae + te * b;
            if (se < 0 || se >= h.inWidth) continue;
            let ie = K + te * d[1], ve = Z + se * h.inChannels, ue = ee, ye = ie;
            for (let ke = 0; ke < h.inChannels; ++ke) {
              let Se = C[ve + ke];
              for (let Le = 0; Le < I; ++Le) F[ue + Le] += Se * _[ye + Le];
              ue += I, ye += I;
            }
          }
        }
      }
    }
  }
  return n.makeTensorInfo(N.shape, N.dtype, N.values);
}
var tY = { kernelName: Ui, backendName: "cpu", kernelFunc: N_ };
function nY(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r, dy: s } = t, { strides: i, dilations: o, pad: l, dimRoundingMode: u, filterShape: p } = a;
  ge([r, s], "depthwiseConv2dNativeBackpropFilter");
  let d = T.computeConv2DInfo(r.shape, p, i, o, l, u, true), { strideHeight: c, strideWidth: h, filterHeight: m, filterWidth: f } = d, g = new Wt(d.filterShape, "float32"), b = d.padInfo.left, y = d.padInfo.top, x = d.outChannels / d.inChannels, v = n.data.get(r.dataId).values, I = new Wt(r.shape, r.dtype, v), N = n.data.get(s.dataId).values, C = new Wt(s.shape, s.dtype, N);
  for (let _ = 0; _ < m; ++_) {
    let F = Math.max(0, Math.ceil((y - _) / c)), D = Math.min(d.outHeight, (d.inHeight + y - _) / c);
    for (let $ = 0; $ < f; ++$) {
      let S = Math.max(0, Math.ceil((b - $) / h)), M = Math.min(d.outWidth, (d.inWidth + b - $) / h);
      for (let B = 0; B < d.outChannels; ++B) {
        let U = Math.trunc(B / x), H = B % x, q = 0;
        for (let K = 0; K < d.batchSize; ++K) for (let Z = F; Z < D; ++Z) {
          let J = _ + Z * c - y;
          for (let ee = S; ee < M; ++ee) {
            let ae = $ + ee * h - b;
            q += I.get(K, J, ae, U) * C.get(K, Z, ee, B);
          }
        }
        g.set(q, _, $, U, H);
      }
    }
  }
  return n.makeTensorInfo(g.shape, g.dtype, g.values);
}
var aY = { kernelName: Im, backendName: "cpu", kernelFunc: nY };
function rY(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { dy: r, filter: s } = t, { strides: i, dilations: o, pad: l, dimRoundingMode: u, inputShape: p } = a;
  ge([r, s], "depthwiseConv2DNativeBackpropInput");
  let d = w.computeStrides(r.shape), c = w.computeStrides(s.shape), h = T.computeConv2DInfo(p, s.shape, i, o, l, u, true), m = new Wt(h.inShape, "float32"), f = m.values, [g, b, y] = m.strides, x = n.data.get(r.dataId).values, [v, I, N] = d, C = n.data.get(s.dataId).values, [_, F, D] = c, { batchSize: $, filterHeight: S, filterWidth: M, inChannels: B, inHeight: U, inWidth: H, outChannels: q, outHeight: K, outWidth: Z, strideHeight: J, strideWidth: ee } = h, ae = S - 1 - h.padInfo.top, te = M - 1 - h.padInfo.left, se = q / B;
  for (let ie = 0; ie < $; ++ie) for (let ve = 0; ve < B; ++ve) for (let ue = 0; ue < U; ++ue) {
    let ye = ue - ae, ke = Math.max(0, Math.ceil(ye / J)), Se = Math.min(K, (S + ye) / J);
    for (let Le = 0; Le < H; ++Le) {
      let Ue = Le - te, mt = Math.max(0, Math.ceil(Ue / ee)), st = Math.min(Z, (M + Ue) / ee), tt = 0;
      for (let nt = ke; nt < Se; ++nt) {
        let Re = nt * J - ye;
        for (let gt = mt; gt < st; ++gt) {
          let Gn = gt * ee - Ue, Ot = v * ie + I * nt + N * gt, ia = _ * (S - 1 - Re) + F * (M - 1 - Gn) + D * ve;
          for (let un = 0; un < se; ++un) {
            let Fn = ve * se + un, oa = x[Ot + Fn], $n = C[ia + un];
            tt += oa * $n;
          }
        }
      }
      f[g * ie + b * ue + y * Le + ve] = tt;
    }
  }
  return n.makeTensorInfo(m.shape, m.dtype, m.values);
}
var sY = { kernelName: Sm, backendName: "cpu", kernelFunc: rY };
function iY(e17) {
  let { inputs: t, backend: n } = e17, { x: a } = t, r = w.sizeFromShape(a.shape), s = n.data.get(a.dataId).values, i = Oe([r, r], a.dtype), o = i.values;
  for (let u = 0; u < s.length; u++) o[u * r + u] = s[u];
  let l = [...a.shape, ...a.shape];
  return n.makeTensorInfo(l, i.dtype, i.values);
}
var oY = { kernelName: Lc, backendName: "cpu", kernelFunc: iY };
var lY = { kernelName: Gi, backendName: "cpu", kernelFunc: ({ inputs: e17, backend: t, attrs: n }) => {
  let { x: a, filter: r } = e17, { strides: s, pad: i, dilations: o } = n, l = t, u = l.data.get(a.dataId).values, p = a.shape.length, d = l.data.get(r.dataId).values, c = r.shape.length, { batchSize: h, inHeight: m, inWidth: f, inChannels: g, outHeight: b, outWidth: y, padInfo: x, strideHeight: v, strideWidth: I, filterHeight: N, filterWidth: C, dilationHeight: _, dilationWidth: F, outShape: D } = T.computeDilation2DInfo(a.shape, r.shape, s, i, "NHWC", o), $ = w.sizeFromShape(D), S = D.length, M = w.getArrayFromDType(a.dtype, $);
  for (let B = 0; B < h; ++B) for (let U = 0; U < b; ++U) {
    let H = U * v - x.top;
    for (let q = 0; q < y; ++q) {
      let K = q * I - x.left;
      for (let Z = 0; Z < g; ++Z) {
        let J = Number.MIN_SAFE_INTEGER;
        for (let ae = 0; ae < N; ++ae) {
          let te = H + ae * _;
          if (te >= 0 && te < m) for (let se = 0; se < C; ++se) {
            let ie = K + se * F;
            if (ie >= 0 && ie < f) {
              let ve = w.locToIndex([B, te, ie, Z], p, w.computeStrides(a.shape)), ue = w.locToIndex([ae, se, Z], c, w.computeStrides(r.shape)), ye = u[ve] + d[ue];
              ye > J && (J = ye);
            }
          }
        }
        let ee = w.locToIndex([B, U, q, Z], S, w.computeStrides(D));
        M[ee] = J;
      }
    }
  }
  return { dataId: l.write(w.toTypedArray(M, a.dtype), D, a.dtype), shape: D, dtype: a.dtype };
} };
var uY = { kernelName: Rl, backendName: "cpu", kernelFunc: ({ inputs: e17, backend: t, attrs: n }) => {
  let { x: a, filter: r, dy: s } = e17, { strides: i, pad: o, dilations: l } = n, u = t, p = w.toNestedArray(a.shape, u.data.get(a.dataId).values), d = w.toNestedArray(r.shape, u.data.get(r.dataId).values), { batchSize: c, inHeight: h, inWidth: m, inChannels: f, outHeight: g, outWidth: b, padInfo: y, strideHeight: x, strideWidth: v, filterHeight: I, filterWidth: N, dilationHeight: C, dilationWidth: _, outShape: F } = T.computeDilation2DInfo(a.shape, r.shape, i, o, "NHWC", l);
  w.assert(s.rank === F.length, () => `Error in ${Rl}, dy must have the same rank as output ${F.length}, but got ${s.rank}`);
  let D = w.toNestedArray(F, u.data.get(s.dataId).values), $ = w.makeZerosNestedTypedArray(r.shape, r.dtype);
  for (let S = 0; S < c; ++S) for (let M = 0; M < g; ++M) {
    let B = M * x - y.top;
    for (let U = 0; U < b; ++U) {
      let H = U * v - y.left;
      for (let q = 0; q < f; ++q) {
        let K = Number.MIN_SAFE_INTEGER, Z = 0, J = 0;
        for (let ee = 0; ee < I; ++ee) {
          let ae = B + ee * C;
          if (ae >= 0 && ae < h) for (let te = 0; te < N; ++te) {
            let se = H + te * _;
            if (se >= 0 && se < m) {
              let ie = p[S][ae][se][q] + d[ee][te][q];
              ie > K && (K = ie, Z = ee, J = te);
            }
          }
        }
        $[Z][J][q] += D[S][M][U][q];
      }
    }
  }
  return { dataId: u.write(w.toTypedArray($, a.dtype), r.shape, r.dtype), shape: r.shape, dtype: r.dtype };
} };
var pY = { kernelName: Dl, backendName: "cpu", kernelFunc: ({ inputs: e17, backend: t, attrs: n }) => {
  let { x: a, filter: r, dy: s } = e17, { strides: i, pad: o, dilations: l } = n, u = t, p = w.toNestedArray(a.shape, u.data.get(a.dataId).values), d = w.toNestedArray(r.shape, u.data.get(r.dataId).values), { batchSize: c, inHeight: h, inWidth: m, inChannels: f, outHeight: g, outWidth: b, padInfo: y, strideHeight: x, strideWidth: v, filterHeight: I, filterWidth: N, dilationHeight: C, dilationWidth: _, outShape: F } = T.computeDilation2DInfo(a.shape, r.shape, i, o, "NHWC", l);
  w.assert(s.rank === F.length, () => `Error in ${Dl}, dy must have the same rank as output ${F.length}, but got ${s.rank}`);
  let D = w.toNestedArray(F, u.data.get(s.dataId).values), $ = w.makeZerosNestedTypedArray(a.shape, a.dtype);
  for (let S = 0; S < c; ++S) for (let M = 0; M < g; ++M) {
    let B = M * x - y.top;
    for (let U = 0; U < b; ++U) {
      let H = U * v - y.left;
      for (let q = 0; q < f; ++q) {
        let K = Number.MIN_SAFE_INTEGER, Z = B < 0 ? 0 : B, J = H < 0 ? 0 : H;
        for (let ee = 0; ee < I; ++ee) {
          let ae = B + ee * C;
          if (ae >= 0 && ae < h) for (let te = 0; te < N; ++te) {
            let se = H + te * _;
            if (se >= 0 && se < m) {
              let ie = p[S][ae][se][q] + d[ee][te][q];
              ie > K && (K = ie, Z = ae, J = se);
            }
          }
        }
        $[S][Z][J][q] += D[S][M][U][q];
      }
    }
  }
  return { dataId: u.write(w.toTypedArray($, a.dtype), a.shape, a.dtype), shape: a.shape, dtype: a.dtype };
} };
function cY(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { image: r } = t, { canvas: s, options: i } = a, { contextOptions: o, imageOptions: l } = i || {}, u = (l == null ? void 0 : l.alpha) || 1, p = (o == null ? void 0 : o.contextType) || "2d";
  if (p !== "2d") throw new Error(`Context type ${o.contextType} is not supported by the CPU backend.`);
  let d = s.getContext(p, (o == null ? void 0 : o.contextAttributes) || {});
  if (d == null) throw new Error(`Could not get the context with ${p} type.`);
  let [c, h] = r.shape.slice(0, 2), m = r.shape.length === 2 ? 1 : r.shape[2], f = n.data.get(r.dataId).values, g = r.dtype === "float32" ? 255 : 1, b = new Uint8ClampedArray(h * c * 4);
  for (let x = 0; x < c * h; ++x) {
    let v = [0, 0, 0, 255 * u];
    for (let N = 0; N < m; N++) {
      let C = f[x * m + N];
      if (r.dtype === "float32") {
        if (C < 0 || C > 1) throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${C}.`);
      } else if (r.dtype === "int32" && (C < 0 || C > 255)) throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${C}.`);
      m === 1 ? (v[0] = C * g, v[1] = C * g, v[2] = C * g) : v[N] = C * g;
    }
    let I = x * 4;
    b[I + 0] = Math.round(v[0]), b[I + 1] = Math.round(v[1]), b[I + 2] = Math.round(v[2]), b[I + 3] = Math.round(v[3]);
  }
  s.width = h, s.height = c;
  let y = new ImageData(b, h, c);
  return d.putImageData(y, 0, 0), r;
}
var dY = { kernelName: Nm, backendName: "cpu", kernelFunc: cY };
function Ed(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r } = t, { axis: s, keepDims: i } = a;
  ge(r, "sum");
  let o;
  r.dtype === "bool" ? o = bs({ inputs: { x: r }, backend: n, attrs: { dtype: "int32" } }) : o = cr({ inputs: { x: r }, backend: n });
  let l = o.shape.length, u = w.parseAxisParam(s, o.shape), p = T.getAxesPermutation(u, l), d = u, c = o;
  p != null && (c = Vn({ inputs: { x: o }, backend: n, attrs: { perm: p } }), d = T.getInnerMostAxes(d.length, l)), T.assertAxesAreInnerMostDims("sum", d, c.shape.length);
  let [h, m] = T.computeOutAndReduceShapes(c.shape, d), f = T.upcastType(c.dtype, "int32"), g = lm(n, h, f), b = w.sizeFromShape(m), y = n.data.get(g.dataId).values, x = n.data.get(c.dataId).values;
  for (let v = 0; v < y.length; ++v) {
    let I = v * b, N = 0;
    for (let C = 0; C < b; ++C) N += x[I + C];
    y[v] = N;
  }
  if (i) {
    let v = T.expandShapeToKeepDim(g.shape, u), I = g;
    g = xt({ inputs: { x: g }, backend: n, attrs: { shape: v } }), n.disposeIntermediateTensorInfo(I);
  }
  return n.disposeIntermediateTensorInfo(o), p != null && n.disposeIntermediateTensorInfo(c), g;
}
var hY = { kernelName: Lo, backendName: "cpu", kernelFunc: Ed };
function mY(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { equation: r } = a, s = t, { allDims: i, summedDims: o, idDims: l } = T.decodeEinsumEquation(r, s.length);
  T.checkEinsumDimSizes(i.length, l, s);
  let { path: u, steps: p } = T.getEinsumComputePath(o, l), d = p.length, c = null, h = i.length, m = [];
  for (let f = 0; f < d; ++f) {
    for (let g of p[f]) {
      let { permutationIndices: b, expandDims: y } = T.getEinsumPermutation(h, l[g]), x;
      T.isIdentityPermutation(b) ? x = s[g] : (x = Vn({ inputs: { x: s[g] }, backend: n, attrs: { perm: b } }), m.push(x));
      let v = x.shape.slice();
      for (let I = 0; I < y.length; ++I) v.splice(y[I], 0, 1);
      w.arraysEqual(x.shape, v) || (x = xt({ inputs: { x }, backend: n, attrs: { shape: v } }), m.push(x)), c === null ? c = x : (c = zf({ inputs: { a: x, b: c }, backend: n }), m.push(c));
    }
    f < d - 1 && (u[f] >= 0 && (c = Ed({ inputs: { x: c }, backend: n, attrs: { axis: u[f] - (i.length - h), keepDims: false } }), m.push(c)), h--);
  }
  for (let f of m) f !== c && n.disposeIntermediateTensorInfo(f);
  return c;
}
var fY = { kernelName: Tm, backendName: "cpu", kernelFunc: mY };
function gY(e17) {
  let { inputs: t, backend: n } = e17, { dy: a, y: r } = t;
  ge([a, r], "eluGrad");
  let s = new Float32Array(w.sizeFromShape(r.shape)), i = n.data.get(r.dataId).values, o = n.data.get(a.dataId).values;
  for (let l = 0; l < i.length; ++l) {
    let u = i[l];
    u >= 0 ? s[l] = o[l] : s[l] = o[l] * (u + 1);
  }
  return n.makeTensorInfo(r.shape, "float32", s);
}
var bY = { kernelName: cu, backendName: "cpu", kernelFunc: gY };
var yY = T.ERF_P;
var xY = T.ERF_A1;
var vY = T.ERF_A2;
var wY = T.ERF_A3;
var kY = T.ERF_A4;
var IY = T.ERF_A5;
var SY = lt(qi, (e17) => {
  let t = Math.sign(e17), n = Math.abs(e17), a = 1 / (1 + yY * n);
  return t * (1 - ((((IY * a + kY) * a + wY) * a + vY) * a + xY) * a * Math.exp(-n * n));
});
var NY = { kernelName: qi, backendName: "cpu", kernelFunc: SY };
function cm(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { input: r } = t, { dim: s } = a, i = r.shape.length, o = r.shape.slice(), l = s;
  return s < 0 && (w.assert(-(i + 1) <= s, () => `Axis must be in the interval [${-(i + 1)}, ${i}]`), l = i + s + 1), o.splice(l, 0, 1), xt({ inputs: { x: r }, backend: n, attrs: { shape: o } });
}
var TY = { kernelName: hu, backendName: "cpu", kernelFunc: cm };
var CY = Mt((e17, t) => e17 / t);
var X1 = Zt(Hi, CY);
var lv = { kernelName: Hi, backendName: "cpu", kernelFunc: X1 };
function T_(e17, t, n) {
  let a = e17.shape, r = a[0], s = a[1], i = n.data.get(e17.dataId), o = i.complexTensorInfos.real, l = i.complexTensorInfos.imag, u = [r, s], p = w.sizeFromShape(u), d = w.getTypedArrayFromDType("float32", p), c = w.getTypedArrayFromDType("float32", p);
  for (let g = 0; g < r; g++) {
    let b = xi({ inputs: { x: o }, backend: n, attrs: { begin: [g, 0], size: [1, s] } }), y = xi({ inputs: { x: l }, backend: n, attrs: { begin: [g, 0], size: [1, s] } }), x = Yn({ inputs: { real: b, imag: y }, backend: n }), { real: v, imag: I } = EY(x, t, n), N = T.mergeRealAndImagArrays(v, I);
    for (let C = 0; C < s; C++) {
      let _ = T.getComplexWithIndex(N, C);
      d[g * s + C] = _.real, c[g * s + C] = _.imag;
    }
    n.disposeIntermediateTensorInfo(b), n.disposeIntermediateTensorInfo(y), n.disposeIntermediateTensorInfo(x);
  }
  let h = n.makeTensorInfo(u, "float32", d), m = n.makeTensorInfo(u, "float32", c), f = Yn({ inputs: { real: h, imag: m }, backend: n });
  return n.disposeIntermediateTensorInfo(h), n.disposeIntermediateTensorInfo(m), f;
}
function EY(e17, t, n) {
  let a = w.sizeFromShape(e17.shape), r = n.data.get(e17.dataId), s = n.data.get(r.complexTensorInfos.real.dataId).values, i = n.data.get(r.complexTensorInfos.imag.dataId).values;
  if (_Y(a)) {
    let o = uv(s, i, a, t, n), l = [e17.shape[0], e17.shape[1]];
    if (t) {
      let u = n.makeTensorInfo(l, "float32", o.real), p = n.makeTensorInfo(l, "float32", o.imag), d = n.makeTensorInfo([], "float32", w.createScalarValue(a, "float32")), c = cr({ inputs: { x: d }, backend: n }), h = lv.kernelFunc({ inputs: { a: u, b: d }, backend: n }), m = lv.kernelFunc({ inputs: { a: p, b: c }, backend: n }), f = n.data.get(h.dataId).values, g = n.data.get(m.dataId).values;
      return n.disposeIntermediateTensorInfo(u), n.disposeIntermediateTensorInfo(p), n.disposeIntermediateTensorInfo(d), n.disposeIntermediateTensorInfo(c), n.disposeIntermediateTensorInfo(h), n.disposeIntermediateTensorInfo(m), { real: f, imag: g };
    }
    return o;
  } else {
    let o = T.mergeRealAndImagArrays(s, i), l = AY(o, a, t);
    return T.splitRealAndImagArrays(l);
  }
}
function _Y(e17) {
  return (e17 & e17 - 1) === 0;
}
function uv(e17, t, n, a, r) {
  if (n === 1) return { real: e17, imag: t };
  let s = T.mergeRealAndImagArrays(e17, t), i = n / 2, o = T.complexWithEvenIndex(s), l = o.real, u = o.imag, p = [l.length], d = r.makeTensorInfo(p, "float32", l), c = r.makeTensorInfo(p, "float32", u), h = Yn({ inputs: { real: d, imag: c }, backend: r }), m = T.complexWithOddIndex(s), f = m.real, g = m.imag, b = [f.length], y = r.makeTensorInfo(b, "float32", f), x = r.makeTensorInfo(b, "float32", g), v = Yn({ inputs: { real: y, imag: x }, backend: r }), I = uv(l, u, i, a, r), N = I.real, C = I.imag, _ = [N.length], F = r.makeTensorInfo(_, "float32", N), D = r.makeTensorInfo(_, "float32", C), $ = Yn({ inputs: { real: F, imag: D }, backend: r }), S = uv(f, g, i, a, r), M = S.real, B = S.imag, U = [M.length], H = r.makeTensorInfo(U, "float32", M), q = r.makeTensorInfo(U, "float32", B), K = Yn({ inputs: { real: H, imag: q }, backend: r }), Z = T.exponents(n, a), J = [Z.real.length], ee = r.makeTensorInfo(J, "float32", Z.real), ae = r.makeTensorInfo(J, "float32", Z.imag), te = Yn({ inputs: { real: ee, imag: ae }, backend: r }), se = zf({ inputs: { a: te, b: K }, backend: r }), ie = jl({ inputs: { a: $, b: se }, backend: r }), ve = j1({ inputs: { a: $, b: se }, backend: r }), ue = yi({ inputs: { input: ie }, backend: r }), ye = yi({ inputs: { input: ve }, backend: r }), ke = ql({ inputs: { input: ie }, backend: r }), Se = ql({ inputs: { input: ve }, backend: r }), Le = Kl({ inputs: [ue, ye], backend: r, attrs: { axis: 0 } }), Ue = Kl({ inputs: [ke, Se], backend: r, attrs: { axis: 0 } }), mt = r.data.get(Le.dataId).values, st = r.data.get(Ue.dataId).values;
  return r.disposeIntermediateTensorInfo(d), r.disposeIntermediateTensorInfo(c), r.disposeIntermediateTensorInfo(h), r.disposeIntermediateTensorInfo(y), r.disposeIntermediateTensorInfo(x), r.disposeIntermediateTensorInfo(v), r.disposeIntermediateTensorInfo(F), r.disposeIntermediateTensorInfo(D), r.disposeIntermediateTensorInfo($), r.disposeIntermediateTensorInfo(H), r.disposeIntermediateTensorInfo(q), r.disposeIntermediateTensorInfo(K), r.disposeIntermediateTensorInfo(ee), r.disposeIntermediateTensorInfo(ae), r.disposeIntermediateTensorInfo(te), r.disposeIntermediateTensorInfo(se), r.disposeIntermediateTensorInfo(ie), r.disposeIntermediateTensorInfo(ve), r.disposeIntermediateTensorInfo(ue), r.disposeIntermediateTensorInfo(ke), r.disposeIntermediateTensorInfo(ye), r.disposeIntermediateTensorInfo(Se), r.disposeIntermediateTensorInfo(Le), r.disposeIntermediateTensorInfo(Ue), { real: mt, imag: st };
}
function AY(e17, t, n) {
  let a = new Float32Array(t * 2);
  for (let r = 0; r < t; r++) {
    let s = 0, i = 0;
    for (let o = 0; o < t; o++) {
      let l = T.exponent(r * o, t, n), u = T.getComplexWithIndex(e17, o);
      s += u.real * l.real - u.imag * l.imag, i += u.real * l.imag + u.imag * l.real;
    }
    n && (s /= t, i /= t), T.assignToTypedArray(a, s, i, r);
  }
  return a;
}
function FY(e17) {
  let { inputs: t, backend: n } = e17, { input: a } = t, r = w.sizeFromShape(a.shape), s = a.shape[a.shape.length - 1], i = r / s, o = xt({ inputs: { x: a }, backend: n, attrs: { shape: [i, s] } }), l = T_(o, false, n), u = xt({ inputs: { x: l }, backend: n, attrs: { shape: a.shape } });
  return n.disposeIntermediateTensorInfo(o), n.disposeIntermediateTensorInfo(l), u;
}
var $Y = { kernelName: Cm, backendName: "cpu", kernelFunc: FY };
function Y1(e17) {
  let { backend: t, attrs: n } = e17, { shape: a, value: r, dtype: s } = n, i = s || w.inferDtype(r), o = w.getArrayFromDType(i, w.sizeFromShape(a));
  return RY(o, r, i), t.makeTensorInfo(a, i, o);
}
var DY = { kernelName: zc, backendName: "cpu", kernelFunc: Y1 };
function RY(e17, t, n) {
  e17.fill(t);
}
var MY = { kernelName: mu, backendName: "cpu", kernelFunc: ({ inputs: e17, attrs: t, backend: n }) => {
  let { image: a } = e17, r = n, s = w.getTypedArrayFromDType(a.dtype, w.sizeFromShape(a.shape)), [i, o, l, u] = a.shape, p = r.data.get(a.dataId).values;
  for (let d = 0; d < i; d++) {
    let c = d * l * o * u;
    for (let h = 0; h < o; h++) {
      let m = h * (l * u);
      for (let f = 0; f < l; f++) {
        let g = f * u;
        for (let b = 0; b < u; b++) {
          let y = Math.round(l - f - 1), x = c + m + g + b, v = p[x];
          if (y >= 0 && y < l) {
            let I = y * u, N = c + m + I + b;
            v = p[N];
          }
          s[x] = v;
        }
      }
    }
  }
  return { dataId: r.write(s, a.shape, a.dtype), shape: a.shape, dtype: a.dtype };
} };
function OY(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r, filter: s, bias: i, preluActivationWeights: o } = t, { strides: l, pad: u, dataFormat: p, dilations: d, dimRoundingMode: c, activation: h, leakyreluAlpha: m } = a, f = S_({ inputs: { x: r, filter: s }, backend: n, attrs: { strides: l, pad: u, dataFormat: p, dilations: d, dimRoundingMode: c } });
  if (i) {
    let g = f;
    if (p === "NCHW" && i.shape.length === 1 && i.shape[0] !== 1) {
      let b = xt({ inputs: { x: i }, backend: n, attrs: { shape: [i.shape[0], 1, 1] } });
      f = jl({ inputs: { a: f, b }, backend: n }), n.disposeIntermediateTensorInfo(b);
    } else f = jl({ inputs: { a: f, b: i }, backend: n });
    n.disposeIntermediateTensorInfo(g);
  }
  if (h) {
    let g = f;
    if (p === "NCHW" && h === "prelu" && o.shape.length === 1 && o.shape[0] !== 1) {
      let b = xt({ inputs: { x: o }, backend: n, attrs: { shape: [o.shape[0], 1, 1] } });
      f = pm(n, f, h, b, m), n.disposeIntermediateTensorInfo(b);
    } else f = pm(n, f, h, o, m);
    n.disposeIntermediateTensorInfo(g);
  }
  return f;
}
var PY = { kernelName: oi, backendName: "cpu", kernelFunc: OY };
function LY(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r, filter: s, bias: i, preluActivationWeights: o } = t, { strides: l, pad: u, dataFormat: p, dilations: d, dimRoundingMode: c, activation: h, leakyreluAlpha: m } = a, f = N_({ inputs: { x: r, filter: s }, backend: n, attrs: { strides: l, pad: u, dataFormat: p, dilations: d, dimRoundingMode: c } });
  if (i) {
    let g = f;
    f = jl({ inputs: { a: f, b: i }, backend: n }), n.disposeIntermediateTensorInfo(g);
  }
  if (h) {
    let g = f;
    f = pm(n, f, h, o, m), n.disposeIntermediateTensorInfo(g);
  }
  return f;
}
var zY = { kernelName: li, backendName: "cpu", kernelFunc: LY };
function WY(e17) {
  let { inputs: t, backend: n } = e17, { params: a, indices: r } = t, s = w.sizeFromShape(a.shape), i = r.shape, o = i[i.length - 1], [l, u, p, d] = T.prepareAndValidate(a, r);
  if (u === 0) return n.makeTensorInfo(l, a.dtype, []);
  let c = n.data.get(r.dataId).values, h = n.bufferSync(a), m = VE(c, h, a.dtype, u, o, p, d, a.shape, s);
  return n.makeTensorInfo(l, a.dtype, m.values);
}
var BY = { kernelName: gu, backendName: "cpu", kernelFunc: WY };
function VY(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r, indices: s } = t, { axis: i, batchDims: o } = a;
  ge([r, s], "gatherV2");
  let l = w.parseAxisParam(i, r.shape)[0], u = n.data.get(s.dataId).values, p = r.shape[l];
  for (let v = 0; v < u.length; ++v) {
    let I = u[v];
    w.assert(I <= p - 1 && I >= 0, () => `GatherV2: the index value ${I} is not in [0, ${p - 1}]`);
  }
  let d = o;
  o == null && (d = 0);
  let c = w.sizeFromShape(s.shape), h = T.segment_util.collectGatherOpShapeInfo(r, s, l, d), m = xt({ inputs: { x: r }, backend: n, attrs: { shape: [h.batchSize, h.outerSize, h.dimSize, h.sliceSize] } }), f = xt({ inputs: { x: s }, backend: n, attrs: { shape: [h.batchSize, c / h.batchSize] } }), g = [h.batchSize, h.outerSize, c / h.batchSize, h.sliceSize], b = n.bufferSync(f), y = n.bufferSync(m), x = UE(y, b, g);
  return n.disposeIntermediateTensorInfo(m), n.disposeIntermediateTensorInfo(f), n.makeTensorInfo(h.outputShape, x.dtype, x.values);
}
var UY = { kernelName: fu, backendName: "cpu", kernelFunc: VY };
function GY(e17) {
  let { inputs: t, backend: n } = e17, { input: a } = t, r = w.sizeFromShape(a.shape), s = a.shape[a.shape.length - 1], i = r / s, o = xt({ inputs: { x: a }, backend: n, attrs: { shape: [i, s] } }), l = T_(o, true, n), u = xt({ inputs: { x: l }, backend: n, attrs: { shape: a.shape } });
  return n.disposeIntermediateTensorInfo(o), n.disposeIntermediateTensorInfo(l), u;
}
var HY = { kernelName: Em, backendName: "cpu", kernelFunc: GY };
var jY = lt(to, (e17) => Number.isFinite(e17) ? 1 : 0, "bool");
var qY = { kernelName: to, backendName: "cpu", kernelFunc: jY };
var KY = lt(no, (e17) => Math.abs(e17) === 1 / 0 ? 1 : 0, "bool");
var XY = { kernelName: no, backendName: "cpu", kernelFunc: KY };
var YY = lt(ao, (e17) => Number.isNaN(e17) ? 1 : 0, "bool");
var ZY = { kernelName: ao, backendName: "cpu", kernelFunc: YY };
function JY(e17) {
  let { backend: t, attrs: n } = e17, { start: a, stop: r, num: s } = n, i = KE(a, r, s);
  return t.makeTensorInfo([i.length], "float32", i);
}
var QY = { kernelName: vu, backendName: "cpu", kernelFunc: JY };
var e7 = lt(io, (e17) => Math.log1p(e17));
var t7 = { kernelName: io, backendName: "cpu", kernelFunc: e7 };
var n7 = Mt((e17, t) => e17 && t);
var a7 = Zt(wu, n7, null, "bool");
var r7 = { kernelName: wu, backendName: "cpu", kernelFunc: a7 };
var s7 = lt(ku, (e17) => e17 ? 0 : 1, "bool");
var i7 = { kernelName: ku, backendName: "cpu", kernelFunc: s7 };
var o7 = Mt((e17, t) => e17 || t);
var l7 = Zt(Iu, o7, null, "bool");
var u7 = { kernelName: Iu, backendName: "cpu", kernelFunc: l7 };
function p7(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r } = t, { depthRadius: s, bias: i, alpha: o, beta: l } = a;
  ge(r, "LRN");
  let u = r.shape[3], p = u - 1, d = n.data.get(r.dataId).values, c = w.sizeFromShape(r.shape), h = new Float32Array(c);
  function m(f) {
    let g = f % u, b = f - g + Math.max(0, g - s), y = f - g + Math.min(g + s, p), x = 0;
    for (; b <= y; b++) {
      let v = d[b];
      x += v * v;
    }
    return x;
  }
  for (let f = 0; f < c; f++) {
    let g = m(f), b = d[f] * Math.pow(i + o * g, -l);
    h[f] = b;
  }
  return n.makeTensorInfo(r.shape, r.dtype, h);
}
var c7 = { kernelName: oo, backendName: "cpu", kernelFunc: p7 };
function d7(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r, y: s, dy: i } = t, { depthRadius: o, bias: l, alpha: u, beta: p } = a;
  ge(i, "LRNGrad");
  let d = w.sizeFromShape(i.shape), c = i.shape[3], h = n.data.get(i.dataId).values, m = n.data.get(r.dataId).values, f = n.data.get(s.dataId).values, g = new Float32Array(d), b = d;
  for (let y = 0; y < b; y++) {
    let x = y % c, v = y - x + Math.max(0, x - o), I = y - x + Math.min(c, x + o + 1), N = 0;
    for (let C = v; C < I; C++) N += Math.pow(m[C], 2);
    N = u * N + l;
    for (let C = v; C < I; C++) {
      let _ = -2 * u * p * m[C] * f[y] / N;
      y === C && (_ += Math.pow(N, -p)), _ *= h[y], g[C] += _;
    }
  }
  return n.makeTensorInfo(i.shape, r.dtype, g);
}
var h7 = { kernelName: Su, backendName: "cpu", kernelFunc: d7 };
function C_(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r } = t, { reductionIndices: s, keepDims: i } = a, o = n, l = r.shape, u = l.length, p = w.parseAxisParam(s, l), d = p, c = T.getAxesPermutation(d, u), h = o.data.get(r.dataId).values;
  if (c != null) {
    let v = new Array(u);
    for (let I = 0; I < v.length; I++) v[I] = l[c[I]];
    h = W1(h, l, r.dtype, c, v), d = T.getInnerMostAxes(d.length, u), l = v;
  }
  ge(r, "max"), T.assertAxesAreInnerMostDims("max", d, u);
  let [m, f] = T.computeOutAndReduceShapes(l, d), g = w.sizeFromShape(f), b = YE(h, g, m, r.dtype), y = o.write(b, m, r.dtype), x = m;
  return i && (x = T.expandShapeToKeepDim(m, p)), { dataId: y, shape: x, dtype: r.dtype };
}
var m7 = { kernelName: lo, backendName: "cpu", kernelFunc: C_ };
function f7(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r } = t;
  ge(r, "maxPool");
  let { filterSize: s, strides: i, pad: o, dimRoundingMode: l } = a, u = 1;
  w.assert(T.eitherStridesOrDilationsAreOne(i, u), () => `Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${u}'`);
  let p = T.computePool2DInfo(r.shape, s, i, u, o, l), d;
  if (p.filterWidth === 1 && p.filterHeight === 1 && w.arraysEqual(p.inShape, p.outShape)) d = cr({ inputs: { x: r }, backend: n });
  else {
    let c = n.data.get(r.dataId).values, h = w.computeStrides(r.shape), m = K1(c, r.shape, r.dtype, h, p, "max");
    d = n.makeTensorInfo(p.outShape, r.dtype, m.values);
  }
  return d;
}
var g7 = { kernelName: po, backendName: "cpu", kernelFunc: f7 };
function b7(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r } = t, { filterSize: s, strides: i, pad: o, dimRoundingMode: l, dataFormat: u } = a;
  ge(r, "maxPool3d");
  let p = T.computePool3DInfo(r.shape, s, i, 1, o, l, u), d = n.data.get(r.dataId).values, c = I_(d, r.shape, r.dtype, w.computeStrides(r.shape), p, "max");
  return n.makeTensorInfo(c.shape, "float32", c.values);
}
var y7 = { kernelName: Nu, backendName: "cpu", kernelFunc: b7 };
function x7(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { dy: r, input: s } = t, { filterSize: i, strides: o, pad: l, dimRoundingMode: u } = a;
  ge([r, s], "maxPool3DGrad");
  let p = T.computePool3DInfo(s.shape, i, o, 1, l, u), d = n.bufferSync(s), c = oX(d, p), h = p.strideDepth, m = p.strideHeight, f = p.strideWidth, g = p.dilationDepth, b = p.dilationHeight, y = p.dilationWidth, x = p.effectiveFilterDepth, v = p.effectiveFilterHeight, I = p.effectiveFilterWidth, N = x - 1 - p.padInfo.front, C = I - 1 - p.padInfo.left, _ = v - 1 - p.padInfo.top, F = Oe(s.shape, "float32"), D = n.bufferSync(r);
  for (let $ = 0; $ < p.batchSize; ++$) for (let S = 0; S < p.inChannels; ++S) for (let M = 0; M < p.inDepth; ++M) for (let B = 0; B < p.inHeight; ++B) for (let U = 0; U < p.inWidth; ++U) {
    let H = M - N, q = B - _, K = U - C, Z = 0;
    for (let J = 0; J < x; J += g) {
      let ee = (H + J) / h;
      if (!(ee < 0 || ee >= p.outDepth || Math.floor(ee) !== ee)) for (let ae = 0; ae < v; ae += b) {
        let te = (q + ae) / m;
        if (!(te < 0 || te >= p.outHeight || Math.floor(te) !== te)) for (let se = 0; se < I; se += y) {
          let ie = (K + se) / f;
          if (ie < 0 || ie >= p.outWidth || Math.floor(ie) !== ie) continue;
          let ve = x * v * I - 1 - c.get($, ee, te, ie, S), ue = J * v * I + ae * I + se, ye = ve === ue ? 1 : 0;
          if (ye === 0) continue;
          let ke = D.get($, ee, te, ie, S);
          Z += ke * ye;
        }
      }
    }
    F.set(Z, $, M, B, U, S);
  }
  return n.makeTensorInfo(F.shape, F.dtype, F.values);
}
var v7 = { kernelName: Bc, backendName: "cpu", kernelFunc: x7 };
function w7(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { dy: r, input: s, output: i } = t, o = s;
  ge([s, i], "maxPoolGrad");
  let { filterSize: l, strides: u, pad: p, dimRoundingMode: d } = a, c = T.computePool2DInfo(o.shape, l, u, 1, p, d), h = n.data.get(o.dataId).values, m = Oe(c.outShape, o.dtype, k_(h, o.shape, o.dtype, c).values), f = c.strideHeight, g = c.strideWidth, b = c.dilationHeight, y = c.dilationWidth, x = c.effectiveFilterHeight, v = c.effectiveFilterWidth, I = v - 1 - c.padInfo.left, N = x - 1 - c.padInfo.top, C = Oe(o.shape, "float32"), _ = n.data.get(r.dataId).values, F = Oe(r.shape, "float32", _);
  for (let D = 0; D < c.batchSize; ++D) for (let $ = 0; $ < c.inChannels; ++$) for (let S = 0; S < c.inHeight; ++S) for (let M = 0; M < c.inWidth; ++M) {
    let B = S - N, U = M - I, H = 0;
    for (let q = 0; q < x; q += b) {
      let K = (B + q) / f;
      if (!(K < 0 || K >= c.outHeight || Math.floor(K) !== K)) for (let Z = 0; Z < v; Z += y) {
        let J = (U + Z) / g;
        if (J < 0 || J >= c.outWidth || Math.floor(J) !== J) continue;
        let ee = x * v - 1 - m.get(D, K, J, $), ae = q * v + Z, te = ee === ae ? 1 : 0;
        if (te === 0) continue;
        let se = F.get(D, K, J, $);
        H += se * te;
      }
    }
    C.set(H, D, S, M, $);
  }
  return n.makeTensorInfo(C.shape, C.dtype, C.values);
}
var k7 = { kernelName: Wc, backendName: "cpu", kernelFunc: w7 };
function I7(e17, t, n, a, r) {
  let s = w.computeStrides(t), i = K1(e17, t, n, s, r, "max"), o = k_(e17, t, n, r, true, a);
  return [i.values, o.values];
}
var S7 = { kernelName: Vc, backendName: "cpu", kernelFunc: ({ inputs: e17, attrs: t, backend: n }) => {
  let { x: a } = e17, { filterSize: r, strides: s, pad: i, includeBatchInIndex: o } = t, l = n;
  ge(a, "MaxPoolWithArgmax");
  let u = l.data.get(a.dataId).values, p = T.computePool2DInfo(a.shape, r, s, [1, 1], i), [d, c] = I7(u, a.shape, a.dtype, o, p), h = l.write(d, p.outShape, a.dtype), m = l.write(c, p.outShape, a.dtype);
  return [{ dataId: h, shape: p.outShape, dtype: a.dtype }, { dataId: m, shape: p.outShape, dtype: "int32" }];
} };
function N7(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r } = t, { axis: s, keepDims: i } = a, o = w.parseAxisParam(s, r.shape), l = T.computeOutAndReduceShapes(r.shape, o)[1], u = w.sizeFromShape(l), p = [], d = n.makeTensorInfo([], "float32", new Float32Array([u]));
  p.push(d);
  let c = bs({ inputs: { x: r }, backend: n, attrs: { dtype: "float32" } });
  p.push(c);
  let h = X1({ inputs: { a: c, b: d }, backend: n });
  p.push(h);
  let m = Ed({ inputs: { x: h }, backend: n, attrs: { axis: s, keepDims: i } });
  return p.forEach((f) => n.disposeIntermediateTensorInfo(f)), m;
}
var T7 = { kernelName: co, backendName: "cpu", kernelFunc: N7 };
function C7(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r } = t, { axis: s, keepDims: i } = a;
  ge(r, "min");
  let o = w.parseAxisParam(s, r.shape), l = o, u = T.getAxesPermutation(l, r.shape.length), p = r;
  u != null && (p = Vn({ inputs: { x: r }, backend: n, attrs: { perm: u } }), l = T.getInnerMostAxes(l.length, r.shape.length)), T.assertAxesAreInnerMostDims("min", l, p.shape.length);
  let [d, c] = T.computeOutAndReduceShapes(p.shape, l), h = w.sizeFromShape(c), m = w.makeZerosTypedArray(w.sizeFromShape(d), p.dtype), f = n.data.get(p.dataId).values;
  for (let b = 0; b < m.length; ++b) {
    let y = b * h, x = f[y];
    for (let v = 0; v < h; ++v) {
      let I = f[y + v];
      (Number.isNaN(I) || I < x) && (x = I);
    }
    m[b] = x;
  }
  u != null && n.disposeIntermediateTensorInfo(p);
  let g = n.makeTensorInfo(d, p.dtype, m);
  if (i) {
    let b = T.expandShapeToKeepDim(d, o), y = xt({ inputs: { x: g }, backend: n, attrs: { shape: b } });
    return n.disposeIntermediateTensorInfo(g), y;
  }
  return g;
}
var E7 = { kernelName: ho, backendName: "cpu", kernelFunc: C7 };
function _7(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r } = t, { paddings: s, mode: i } = a;
  ge(r, "mirrorPad");
  let o = s.map((y, x) => y[0] + r.shape[x] + y[1]), l = s.map((y) => y[0]), u = s.map((y, x) => y[0] + r.shape[x]), p = i === "reflect" ? 0 : 1, d = n.data.get(r.dataId).values, c = r.shape.length, h = w.computeStrides(r.shape), m = w.sizeFromShape(o), f = o.length, g = w.computeStrides(o), b = w.getTypedArrayFromDType(r.dtype, m);
  for (let y = 0; y < m; y++) {
    let x = w.indexToLoc(y, f, g);
    for (let I = 0; I < f; I++) x[I] < l[I] ? x[I] = l[I] * 2 - x[I] - p : x[I] >= u[I] && (x[I] = (u[I] - 1) * 2 - x[I] + p);
    x = x.map((I, N) => I - l[N]);
    let v = w.locToIndex(x, c, h);
    b[y] = d[v];
  }
  return { dataId: n.write(b, o, r.dtype), shape: o, dtype: r.dtype };
}
var A7 = { kernelName: fo, backendName: "cpu", kernelFunc: _7 };
var F7 = Mt((e17, t) => {
  let n = e17 % t;
  return e17 < 0 && t < 0 || e17 >= 0 && t >= 0 ? n : (n + t) % t;
});
var $7 = Zt(go, F7);
var D7 = { kernelName: go, backendName: "cpu", kernelFunc: $7 };
var R7 = xs(bm());
function E_(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { logits: r } = t, { dim: s } = a, i = r.shape.length, o = s;
  if (o === -1 && (o = i - 1), o !== i - 1) throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${i} and dim was ${o}`);
  let l = w.parseAxisParam([o], r.shape), u = C_({ inputs: { x: r }, backend: n, attrs: { reductionIndices: l, keepDims: false } }), p = T.expandShapeToKeepDim(u.shape, l), d = xt({ inputs: { x: u }, backend: n, attrs: { shape: p } }), c = j1({ inputs: { a: r, b: d }, backend: n }), h = LE({ inputs: { x: c }, backend: n }), m = Ed({ inputs: { x: h }, backend: n, attrs: { axis: l, keepDims: false } }), f = xt({ inputs: { x: m }, backend: n, attrs: { shape: p } }), g = X1({ inputs: { a: h, b: f }, backend: n });
  return n.disposeIntermediateTensorInfo(u), n.disposeIntermediateTensorInfo(d), n.disposeIntermediateTensorInfo(c), n.disposeIntermediateTensorInfo(h), n.disposeIntermediateTensorInfo(m), n.disposeIntermediateTensorInfo(f), g;
}
var M7 = { kernelName: zo, backendName: "cpu", kernelFunc: E_ };
function O7(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { logits: r } = t, { numSamples: s, seed: i, normalized: o } = a;
  ge(r, "multinomial");
  let l = o ? r : E_({ inputs: { logits: r }, backend: n, attrs: { dim: -1 } }), u = l.shape[0], p = l.shape[1], d = n.data.get(l.dataId).values, c = [u, s], h = w.makeZerosTypedArray(w.sizeFromShape(c), "int32");
  for (let m = 0; m < u; ++m) {
    let f = m * p, g = new Float32Array(p - 1);
    g[0] = d[f];
    for (let x = 1; x < g.length; ++x) g[x] = g[x - 1] + d[f + x];
    let b = R7.alea(i.toString()), y = m * s;
    for (let x = 0; x < s; ++x) {
      let v = b();
      h[y + x] = g.length;
      for (let I = 0; I < g.length; I++) if (v < g[I]) {
        h[y + x] = I;
        break;
      }
    }
  }
  return o || n.disposeIntermediateTensorInfo(l), n.makeTensorInfo(c, "int32", h);
}
var P7 = { kernelName: Tu, backendName: "cpu", kernelFunc: O7 };
var L7 = mr.nonMaxSuppressionV3Impl;
function z7(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { boxes: r, scores: s } = t, { maxOutputSize: i, iouThreshold: o, scoreThreshold: l } = a;
  ge(r, "NonMaxSuppression");
  let u = n.data.get(r.dataId).values, p = n.data.get(s.dataId).values, { selectedIndices: d } = L7(u, p, i, o, l);
  return n.makeTensorInfo([d.length], "int32", new Int32Array(d));
}
var W7 = { kernelName: _u, backendName: "cpu", kernelFunc: z7 };
var B7 = mr.nonMaxSuppressionV4Impl;
function V7(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { boxes: r, scores: s } = t, { maxOutputSize: i, iouThreshold: o, scoreThreshold: l, padToMaxOutputSize: u } = a;
  ge(r, "NonMaxSuppressionPadded");
  let p = n.data.get(r.dataId).values, d = n.data.get(s.dataId).values, { selectedIndices: c, validOutputs: h } = B7(p, d, i, o, l, u);
  return [n.makeTensorInfo([c.length], "int32", new Int32Array(c)), n.makeTensorInfo([], "int32", new Int32Array([h]))];
}
var U7 = { kernelName: Au, backendName: "cpu", kernelFunc: V7 };
var G7 = mr.nonMaxSuppressionV5Impl;
function H7(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { boxes: r, scores: s } = t, { maxOutputSize: i, iouThreshold: o, scoreThreshold: l, softNmsSigma: u } = a;
  ge(r, "NonMaxSuppressionWithScore");
  let p = n.data.get(r.dataId).values, d = n.data.get(s.dataId).values, c = i, h = o, m = l, f = u, { selectedIndices: g, selectedScores: b } = G7(p, d, c, h, m, f);
  return [n.makeTensorInfo([g.length], "int32", new Int32Array(g)), n.makeTensorInfo([b.length], "float32", new Float32Array(b))];
}
var j7 = { kernelName: Fu, backendName: "cpu", kernelFunc: H7 };
function q7(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { indices: r } = t, { dtype: s, depth: i, onValue: o, offValue: l } = a;
  ge(r, "oneHot");
  let u = w.sizeFromShape(r.shape), p = new Float32Array(u * i);
  p.fill(l);
  let d = n.data.get(r.dataId).values;
  for (let c = 0; c < u; ++c) d[c] >= 0 && d[c] < i && (p[c * i + d[c]] = o);
  return n.makeTensorInfo([...r.shape, i], s, p);
}
var K7 = { kernelName: yo, backendName: "cpu", kernelFunc: q7 };
function dm(e17) {
  let { inputs: t, backend: n } = e17, { x: a } = t;
  if (a.dtype === "string") throw new Error("zerosLike is not supported for string tensors");
  if (a.dtype === "complex64") {
    let r = yi({ inputs: { input: a }, backend: n }), s = dm({ inputs: { x: r }, backend: n }), i = ql({ inputs: { input: a }, backend: n }), o = dm({ inputs: { x: i }, backend: n }), l = Yn({ inputs: { real: s, imag: o }, backend: n });
    return n.disposeIntermediateTensorInfo(r), n.disposeIntermediateTensorInfo(s), n.disposeIntermediateTensorInfo(i), n.disposeIntermediateTensorInfo(o), l;
  } else return Y1({ backend: n, attrs: { shape: a.shape, value: 0, dtype: a.dtype } });
}
var X7 = { kernelName: Yu, backendName: "cpu", kernelFunc: dm };
function __(e17) {
  let { inputs: t, backend: n } = e17, { x: a } = t;
  if (a.dtype === "string") throw new Error("onesLike is not supported for string tensors");
  if (a.dtype === "complex64") {
    let r = yi({ inputs: { input: a }, backend: n }), s = __({ inputs: { x: r }, backend: n }), i = ql({ inputs: { input: a }, backend: n }), o = dm({ inputs: { x: i }, backend: n }), l = Yn({ inputs: { real: s, imag: o }, backend: n });
    return n.disposeIntermediateTensorInfo(r), n.disposeIntermediateTensorInfo(s), n.disposeIntermediateTensorInfo(i), n.disposeIntermediateTensorInfo(o), l;
  } else return Y1({ backend: n, attrs: { shape: a.shape, value: 1, dtype: a.dtype } });
}
var Y7 = { kernelName: $u, backendName: "cpu", kernelFunc: __ };
function A_(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { axis: r } = a;
  if (t.length === 1) return cm({ inputs: { input: t[0] }, backend: n, attrs: { dim: r } });
  let s = t[0].shape, i = t[0].dtype;
  t.forEach((p) => {
    w.assertShapesMatch(s, p.shape, "All tensors passed to stack must have matching shapes"), w.assert(i === p.dtype, () => "All tensors passed to stack must have matching dtypes");
  });
  let o = [], l = t.map((p) => {
    let d = cm({ inputs: { input: p }, backend: n, attrs: { dim: r } });
    return o.push(d), d;
  }), u = Kl({ inputs: l, backend: n, attrs: { axis: r } });
  return o.forEach((p) => n.disposeIntermediateTensorInfo(p)), u;
}
var Z7 = { kernelName: Du, backendName: "cpu", kernelFunc: A_ };
function J7(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r } = t, { paddings: s, constantValue: i } = a;
  ge(r, "pad");
  let o = s.map((b, y) => b[0] + r.shape[y] + b[1]), l = s.map((b) => b[0]), u = n.data.get(r.dataId).values, p = w.sizeFromShape(r.shape), d = r.shape.length, c = w.computeStrides(r.shape), h = w.sizeFromShape(o), m = o.length, f = w.computeStrides(o), g = w.getTypedArrayFromDType(r.dtype, h);
  i !== 0 && g.fill(i);
  for (let b = 0; b < p; b++) {
    let y = w.indexToLoc(b, d, c).map((v, I) => v + l[I]), x = w.locToIndex(y, m, f);
    g[x] = u[b];
  }
  return { dataId: n.write(g, o, r.dtype), shape: o, dtype: r.dtype };
}
var F_ = { kernelName: xo, backendName: "cpu", kernelFunc: J7 };
var Q7 = Mt((e17, t) => Math.pow(e17, t));
var eZ = Zt(vo, Q7);
var tZ = { kernelName: vo, backendName: "cpu", kernelFunc: eZ };
function nZ(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { paramsNestedSplits: r, paramsDenseValues: s, indices: i } = t, { outputRaggedRank: o } = a, l = r.map((b) => n.data.get(b.dataId).values), u = r.map((b) => b.shape), p = n.data.get(s.dataId).values, d = n.data.get(i.dataId).values, [c, h, m] = n_(l, u, p, s.shape, s.dtype, d, i.shape, o), f = c.map((b) => n.makeTensorInfo([b.length], "int32", b)), g = n.makeTensorInfo(m, s.dtype, h);
  return f.concat([g]);
}
var aZ = { kernelName: Am, backendName: "cpu", kernelFunc: nZ };
function rZ(e17) {
  let { inputs: t, backend: n } = e17, { starts: a, limits: r, deltas: s } = t, i = n.data.get(a.dataId).values, o = n.data.get(r.dataId).values, l = n.data.get(s.dataId).values, [u, p] = a_(i, a.shape, a.dtype, o, r.shape, l, s.shape), d = n.makeTensorInfo([u.length], "int32", u), c = n.makeTensorInfo([p.length], a.dtype, p);
  return [d, c];
}
var sZ = { kernelName: Fm, backendName: "cpu", kernelFunc: rZ };
function iZ(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { shape: r, values: s, defaultValue: i, rowPartitionTensors: o } = t, { rowPartitionTypes: l } = a, u = n.data.get(r.dataId).values, p = n.data.get(s.dataId).values, d = n.data.get(i.dataId).values, c = o.map((g) => n.data.get(g.dataId).values), h = o.map((g) => g.shape), [m, f] = r_(u, r.shape, p, s.shape, s.dtype, d, i.shape, c, h, l);
  return n.makeTensorInfo(m, s.dtype, f);
}
var oZ = { kernelName: $m, backendName: "cpu", kernelFunc: iZ };
function lZ(e17) {
  let { backend: t, attrs: n } = e17, { start: a, stop: r, dtype: s, step: i } = n, o = B1(a, r, i, s);
  return t.makeTensorInfo([o.length], s, o);
}
var uZ = { kernelName: Uc, backendName: "cpu", kernelFunc: lZ };
var pZ = lt(Io, (e17) => 1 / e17);
var cZ = { kernelName: Io, backendName: "cpu", kernelFunc: pZ };
function dZ(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { images: r } = t, { alignCorners: s, halfPixelCenters: i, size: o } = a;
  ge(r, "resizeBilinear");
  let l = w.computeStrides(r.shape), [u, p] = o, [d, c, h, m] = r.shape, f = n.data.get(r.dataId).values, g = new Float32Array(w.sizeFromShape([d, u, p, m])), b = [s && u > 1 ? c - 1 : c, s && p > 1 ? h - 1 : h], y = [s && u > 1 ? u - 1 : u, s && p > 1 ? p - 1 : p], x = 0, v = b[0] / y[0], I = b[1] / y[1];
  for (let N = 0; N < d; N++) for (let C = 0; C < u; C++) {
    let _;
    i ? _ = v * (C + 0.5) - 0.5 : _ = v * C;
    let F = Math.max(0, Math.floor(_)), D = _ - F, $ = Math.min(c - 1, Math.ceil(_)), S = N * l[0] + F * l[1], M = N * l[0] + $ * l[1];
    for (let B = 0; B < p; B++) {
      let U;
      i ? U = I * (B + 0.5) - 0.5 : U = I * B;
      let H = Math.max(0, Math.floor(U)), q = U - H, K = Math.min(h - 1, Math.ceil(U)), Z = S + H * l[2], J = M + H * l[2], ee = S + K * l[2], ae = M + K * l[2];
      for (let te = 0; te < m; te++) {
        let se = f[Z + te], ie = f[J + te], ve = f[ee + te], ue = f[ae + te], ye = se + (ve - se) * q, ke = ie + (ue - ie) * q, Se = ye + (ke - ye) * D;
        g[x++] = Se;
      }
    }
  }
  return n.makeTensorInfo([d, u, p, m], "float32", g);
}
var hZ = { kernelName: To, backendName: "cpu", kernelFunc: dZ };
function mZ(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { images: r, dy: s } = t, { alignCorners: i } = a;
  ge([s, r], "resizeBilinearGrad");
  let o = w.computeStrides(r.shape), [l, u, p, d] = r.shape, [, c, h] = s.shape, m = new Float32Array(l * u * p * d), f = [i && c > 1 ? u - 1 : u, i && h > 1 ? p - 1 : p], g = [i && c > 1 ? c - 1 : c, i && h > 1 ? h - 1 : h], b = f[0] / g[0], y = f[1] / g[1], x = n.data.get(s.dataId).values, v = 0;
  for (let I = 0; I < l; I++) {
    let N = I * o[0];
    for (let C = 0; C < c; C++) {
      let _ = C * b, F = Math.floor(_), D = Math.min(Math.ceil(_), u - 1), $ = N + F * o[1], S = N + D * o[1], M = _ - F, B = 1 - M;
      for (let U = 0; U < h; U++) {
        let H = U * y, q = Math.floor(H), K = Math.min(Math.ceil(H), p - 1), Z = H - q, J = 1 - Z, ee = $ + q * o[2], ae = $ + K * o[2], te = S + q * o[2], se = S + K * o[2], ie = B * J, ve = B * Z, ue = M * J, ye = M * Z;
        for (let ke = 0; ke < d; ke++) {
          let Se = x[v++];
          m[ee + ke] += Se * ie, m[ae + ke] += Se * ve, m[te + ke] += Se * ue, m[se + ke] += Se * ye;
        }
      }
    }
  }
  return n.makeTensorInfo([l, p, u, d], "float32", m);
}
var fZ = { kernelName: Ou, backendName: "cpu", kernelFunc: mZ };
function gZ(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { images: r } = t, { alignCorners: s, halfPixelCenters: i, size: o } = a;
  ge(r, "resizeNearestNeighbor");
  let l = w.computeStrides(r.shape), [u, p] = o, [d, c, h, m] = r.shape, f = n.data.get(r.dataId).values, g = new Float32Array(d * u * p * m), b = [s && u > 1 ? c - 1 : c, s && p > 1 ? h - 1 : h], y = [s && u > 1 ? u - 1 : u, s && p > 1 ? p - 1 : p], x = b[0] / y[0], v = b[1] / y[1], I = 0;
  for (let N = 0; N < d; N++) {
    let C = N * l[0];
    for (let _ = 0; _ < u; _++) {
      let F = i ? x * (_ + 0.5) : x * _, D = Math.min(c - 1, s ? Math.round(F) : Math.floor(F));
      i && (D = Math.max(0, D));
      let $ = C + D * l[1];
      for (let S = 0; S < p; S++) {
        let M = i ? v * (S + 0.5) : v * S, B = Math.min(h - 1, s ? Math.round(M) : Math.floor(M));
        i && (B = Math.max(0, B));
        let U = $ + B * l[2];
        for (let H = 0; H < m; H++) {
          let q = f[U + H];
          g[I++] = q;
        }
      }
    }
  }
  return n.makeTensorInfo([d, u, p, m], r.dtype, g);
}
var bZ = { kernelName: No, backendName: "cpu", kernelFunc: gZ };
function yZ(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { images: r, dy: s } = t, { alignCorners: i } = a;
  ge([s, r], "resizeNearestNeighborGrad");
  let o = w.computeStrides(r.shape), l = w.computeStrides(s.shape), [u, p, d, c] = r.shape, [, h, m] = s.shape, f = new Float32Array(u * p * d * c), g = n.data.get(s.dataId).values, b = [i && h > 1 ? p - 1 : p, i && m > 1 ? d - 1 : d], y = [i && h > 1 ? h - 1 : h, i && m > 1 ? m - 1 : m], x = b[0] / y[0], v = b[1] / y[1], I = 1 / x, N = 1 / v, C = Math.ceil(I) * 2 + 2, _ = Math.ceil(N) * 2 + 2;
  for (let F = 0; F < u; F++) {
    let D = F * o[0];
    for (let $ = 0; $ < p; $++) {
      let S = D + $ * o[1], M = Math.floor($ * I), B = Math.floor(M - C / 2);
      for (let U = 0; U < d; U++) {
        let H = S + U * o[2], q = Math.floor(U * N), K = Math.floor(q - _ / 2);
        for (let Z = 0; Z < c; Z++) {
          let J = 0;
          for (let ee = 0; ee < C; ee++) {
            let ae = ee + B;
            if (ae < 0 || ae >= h) continue;
            let te = D + ae * l[1], se = ae * x, ie = Math.min(p - 1, i ? Math.round(se) : Math.floor(se));
            if ($ === ie) for (let ve = 0; ve < _; ve++) {
              let ue = ve + K;
              if (ue < 0 || ue >= m) continue;
              let ye = te + ue * l[2], ke = ue * v, Se = Math.min(d - 1, i ? Math.round(ke) : Math.floor(ke));
              U === Se && (J += g[ye + Z]);
            }
          }
          f[H + Z] = J;
        }
      }
    }
  }
  return n.makeTensorInfo(r.shape, r.dtype, f);
}
var xZ = { kernelName: Mu, backendName: "cpu", kernelFunc: yZ };
function vZ(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r } = t, { dims: s } = a;
  ge(r, "reverse");
  let i = r.shape.length, o = w.parseAxisParam(s, r.shape);
  if (i === 0) return cr({ inputs: { x: r }, backend: n });
  let l = new Wt(r.shape, r.dtype), u = n.bufferSync(r);
  for (let p = 0; p < l.size; p++) {
    let d = l.indexToLoc(p), c = d.slice();
    o.forEach((h) => c[h] = r.shape[h] - 1 - c[h]), l.set(u.get(...c), ...d);
  }
  return n.makeTensorInfo(l.shape, l.dtype, l.values);
}
var wZ = { kernelName: Eo, backendName: "cpu", kernelFunc: vZ };
var kZ = { kernelName: Zu, backendName: "cpu", kernelFunc: ({ inputs: e17, attrs: t, backend: n }) => {
  let { image: a } = e17, { radians: r, fillValue: s, center: i } = t, o = n, l = w.getTypedArrayFromDType(a.dtype, w.sizeFromShape(a.shape)), [u, p, d, c] = a.shape, [h, m] = T.getImageCenter(i, p, d), f = 255, g = Math.sin(r), b = Math.cos(r), y = o.data.get(a.dataId).values;
  for (let x = 0; x < u; x++) {
    let v = x * d * p * c;
    for (let I = 0; I < p; I++) {
      let N = I * (d * c);
      for (let C = 0; C < d; C++) {
        let _ = C * c;
        for (let F = 0; F < c; F++) {
          let D = [u, I, C, F], $ = D[2], S = D[1], M = ($ - h) * b - (S - m) * g, B = ($ - h) * g + (S - m) * b;
          M = Math.round(M + h), B = Math.round(B + m);
          let U = s;
          if (typeof s != "number" && (F === 3 ? U = f : U = s[F]), M >= 0 && M < d && B >= 0 && B < p) {
            let q = B * (d * c), K = M * c, Z = v + q + K + F;
            U = y[Z];
          }
          let H = v + N + _ + F;
          l[H] = U;
        }
      }
    }
  }
  return { dataId: o.write(l, a.shape, a.dtype), shape: a.shape, dtype: a.dtype };
} };
var IZ = lt(_o, (e17) => {
  let t = Math.floor(e17);
  return e17 - t < 0.5 ? Math.floor(e17) : e17 - t > 0.5 ? Math.ceil(e17) : t % 2 === 0 ? t : t + 1;
});
var SZ = { kernelName: _o, backendName: "cpu", kernelFunc: IZ };
function NZ(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { indices: r, updates: s } = t, { shape: i } = a, { sliceRank: o, numUpdates: l, sliceSize: u, strides: p, outputSize: d } = T.calculateShapes(s, r, i), c = true, h = n.bufferSync(r), m = n.bufferSync(s), f = ni(h, m, i, d, u, l, o, p, 0, c);
  return n.makeTensorInfo(i, f.dtype, f.values);
}
var TZ = { kernelName: Pu, backendName: "cpu", kernelFunc: NZ };
function CZ(e17, t) {
  let n = 0, a = e17.length, r = 0;
  for (; n < a; ) r = Math.floor((n + a) / 2), e17[r] < t ? n = r + 1 : a = r;
  return a;
}
function EZ(e17, t) {
  let n = 0, a = e17.length, r = 0;
  for (; n < a; ) r = Math.floor((n + a) / 2), e17[r] <= t ? n = r + 1 : a = r;
  return a;
}
function _Z(e17, t, n, a, r, s) {
  let i = w.getArrayFromDType("int32", n * r);
  for (let o = 0; o < n; ++o) {
    let l = e17.slice(o * a, (o + 1) * a), u = o * r;
    for (let p = 0; p < r; ++p) i[u + p] = s === "left" ? CZ(l, t[p + u]) : EZ(l, t[p + u]);
  }
  return i;
}
function AZ(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { sortedSequence: r, values: s } = t, { side: i } = a, o = n.data.get(r.dataId).values, l = n.data.get(s.dataId).values, u = _Z(o, l, r.shape[0], r.shape[1], s.shape[1], i);
  return n.makeTensorInfo(s.shape, "int32", u);
}
var FZ = { kernelName: zu, backendName: "cpu", kernelFunc: AZ };
function $Z(e17) {
  let { inputs: t, backend: n } = e17, { condition: a, t: r, e: s } = t;
  ge([a, r, s], "select");
  let i = a.shape.length, o = n.data.get(a.dataId).values, l = n.data.get(r.dataId).values, u = n.data.get(s.dataId).values, p = fa(r.dtype, s.dtype), d = w.makeZerosTypedArray(w.sizeFromShape(r.shape), p), c = 0, h = i === 0 || i > 1 || r.shape.length === 1 ? 1 : w.sizeFromShape(r.shape.slice(1));
  for (let m = 0; m < o.length; m++) for (let f = 0; f < h; f++) o[m] === 1 ? d[c++] = l[m] : d[c++] = u[m];
  return n.makeTensorInfo(r.shape, p, d);
}
var DZ = { kernelName: Wu, backendName: "cpu", kernelFunc: $Z };
var RZ = T.SELU_SCALEALPHA;
var MZ = T.SELU_SCALE;
var OZ = lt(Fo, (e17) => e17 >= 0 ? MZ * e17 : RZ * (Math.exp(e17) - 1));
var PZ = { kernelName: Fo, backendName: "cpu", kernelFunc: OZ };
var LZ = lt(Ro, (e17) => e17 < 0 ? -1 : e17 > 0 ? 1 : 0);
var zZ = { kernelName: Ro, backendName: "cpu", kernelFunc: LZ };
var WZ = lt($o, (e17) => Math.sin(e17));
var BZ = { kernelName: $o, backendName: "cpu", kernelFunc: WZ };
var VZ = lt(Do, (e17) => Math.sinh(e17));
var UZ = { kernelName: Do, backendName: "cpu", kernelFunc: VZ };
var GZ = 11920928955078125e-23;
var eS = Math.log(GZ) + 2;
var HZ = lt(Oo, (e17) => {
  let t = e17 > -eS, n = e17 < eS, a = Math.exp(e17), r;
  return n ? r = a : t ? r = e17 : r = Math.log(1 + a), r;
});
var jZ = { kernelName: Oo, backendName: "cpu", kernelFunc: HZ };
function qZ(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r } = t, { blockShape: s, paddings: i } = a;
  ge([r], "spaceToBatchND");
  let o = w.sizeFromShape(s), l = [[0, 0]];
  l.push(...i);
  for (let g = 1 + s.length; g < r.shape.length; ++g) l.push([0, 0]);
  let u = F_.kernelFunc({ inputs: { x: r }, backend: n, attrs: { paddings: l, constantValue: 0 } }), p = T.getReshaped(u.shape, s, o, false), d = T.getPermuted(p.length, s.length, false), c = T.getReshapedPermuted(u.shape, s, o, false), h = xt({ inputs: { x: u }, backend: n, attrs: { shape: p } }), m = Vn({ inputs: { x: h }, backend: n, attrs: { perm: d } }), f = xt({ inputs: { x: m }, backend: n, attrs: { shape: c } });
  return n.disposeIntermediateTensorInfo(u), n.disposeIntermediateTensorInfo(h), n.disposeIntermediateTensorInfo(m), f;
}
var KZ = { kernelName: Vu, backendName: "cpu", kernelFunc: qZ };
function XZ(e17) {
  let { inputs: t, backend: n } = e17, { indices: a, values: r, denseShape: s, defaultValue: i } = t;
  if (s.shape.length !== 1) throw new Error(`Dense shape must be a vector, saw:
        ${s.shape}`);
  if (a.shape.length !== 2) throw new Error(`Indices must be a matrix, saw:
        ${a.shape}`);
  if (r.shape.length !== 1) throw new Error(`Values must be a vector, saw:
        ${r.shape}`);
  if (i.shape.length !== 0) throw new Error(`Default value must be a scalar, saw:
        ${i.shape}`);
  let o = n.data.get(a.dataId).values, l = n.data.get(r.dataId).values, u = n.data.get(s.dataId).values, p = n.data.get(i.dataId).values[0], [d, c, h, m, f] = o_(o, a.shape, a.dtype, l, r.dtype, u, p);
  return [n.makeTensorInfo(c, a.dtype, d), n.makeTensorInfo([c[0]], r.dtype, h), n.makeTensorInfo([m.length], "bool", new Uint8Array(m.map((g) => Number(g)))), n.makeTensorInfo([f.length], a.dtype, new Int32Array(f))];
}
var YZ = { kernelName: Gc, backendName: "cpu", kernelFunc: XZ };
function ZZ(e17) {
  let { inputs: t, backend: n } = e17, { inputIndices: a, inputShape: r, newShape: s } = t;
  if (a.shape.length !== 2) throw new Error(`Input indices should be a matrix but received shape
        ${a.shape}`);
  if (r.shape.length !== 1) throw new Error(`Input shape should be a vector but received shape
        ${r.shape}`);
  if (s.shape.length !== 1) throw new Error(`Target shape should be a vector but received shape ${s.shape}`);
  let i = Array.from(n.data.get(r.dataId).values), o = n.data.get(a.dataId).values, l = Array.from(n.data.get(s.dataId).values), [u, p, d] = l_(o, a.shape, a.dtype, i, l);
  return [n.makeTensorInfo(p, a.dtype, u), n.makeTensorInfo([d.length], s.dtype, new Int32Array(d))];
}
var JZ = { kernelName: Gu, backendName: "cpu", kernelFunc: ZZ };
function QZ(e17) {
  let { inputs: t, backend: n } = e17, { data: a, indices: r, segmentIds: s } = t;
  if (a.shape.length < 1) throw new Error("Data should be at least 1 dimensional but received scalar");
  if (r.shape.length !== 1) throw new Error(`Indices should be a vector but received shape
          ${r.shape}`);
  if (s.shape.length !== 1) throw new Error(`Segment ids should be a vector but received shape
          ${s.shape}`);
  if (r.shape[0] !== s.shape[0]) throw new Error("segmentIds and indices should have same size.");
  let i = n.data.get(a.dataId).values, o = n.data.get(r.dataId).values, l = n.data.get(s.dataId).values, [u, p] = V1(i, a.shape, a.dtype, o, l, true);
  return n.makeTensorInfo(p, a.dtype, u);
}
var eJ = { kernelName: Hc, backendName: "cpu", kernelFunc: QZ };
function tJ(e17) {
  let { inputs: t, backend: n } = e17, { data: a, indices: r, segmentIds: s } = t;
  if (a.shape.length < 1) throw new Error("Data should be at least 1 dimensional but received scalar");
  if (r.shape.length !== 1) throw new Error(`Indices should be a vector but received shape
         ${r.shape}`);
  if (s.shape.length !== 1) throw new Error(`Segment ids should be a vector but received shape
         ${s.shape}`);
  if (r.shape[0] !== s.shape[0]) throw new Error("segmentIds and indices should have same size.");
  let i = n.data.get(a.dataId).values, o = n.data.get(r.dataId).values, l = n.data.get(s.dataId).values, [u, p] = V1(i, a.shape, a.dtype, o, l);
  return n.makeTensorInfo(p, a.dtype, u);
}
var nJ = { kernelName: jc, backendName: "cpu", kernelFunc: tJ };
function aJ(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { sparseIndices: r, sparseValues: s, defaultValue: i } = t, { outputShape: o } = a, { sliceRank: l, numUpdates: u, sliceSize: p, strides: d, outputSize: c } = T.calculateShapes(s, r, o), h = false, m = n.bufferSync(r), f;
  switch (s.dtype) {
    case "bool": {
      let g = n.bufferSync(s), b = !!n.data.get(i.dataId).values[0];
      f = ni(m, g, o, c, p, u, l, d, b, h);
      break;
    }
    case "float32": {
      let g = n.bufferSync(s), b = n.data.get(i.dataId).values[0];
      f = ni(m, g, o, c, p, u, l, d, b, h);
      break;
    }
    case "int32": {
      let g = n.bufferSync(s), b = n.data.get(i.dataId).values[0];
      f = ni(m, g, o, c, p, u, l, d, b, h);
      break;
    }
    case "string": {
      let g = n.bufferSync(s), b = w.decodeString(n.data.get(i.dataId).values[0]);
      f = ni(m, g, o, c, p, u, l, d, b, h);
      break;
    }
    default:
      throw new Error(`Unsupported type ${s.dtype}`);
  }
  return n.makeTensorInfo(o, f.dtype, f.values);
}
var rJ = { kernelName: Hu, backendName: "cpu", kernelFunc: aJ };
function sJ(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r } = t, { numOrSizeSplits: s, axis: i } = a, o = w.parseAxisParam(i, r.shape)[0], l = T.prepareSplitSize(r, s, o), u = new Array(r.shape.length).fill(0), p = r.shape.slice();
  return l.map((d) => {
    let c = [...p];
    c[o] = d;
    let h = xi({ inputs: { x: r }, backend: n, attrs: { begin: u, size: c } });
    return u[o] += d, h;
  });
}
var iJ = { kernelName: Uu, backendName: "cpu", kernelFunc: sJ };
var oJ = { kernelName: qc, backendName: "cpu", kernelFunc: ({ inputs: e17, backend: t }) => {
  let { x: n } = e17, a = t;
  ge(n, "square");
  let r = a.data.get(n.dataId).values, s = new Float32Array(r.length);
  for (let i = 0; i < r.length; ++i) {
    let o = r[i];
    s[i] = o * o;
  }
  return { dataId: a.write(s, n.shape, n.dtype), shape: n.shape, dtype: n.dtype };
} };
var lJ = lt(Is, (e17, t) => {
  let n = t;
  return isNaN(e17) ? NaN : e17 > 0 ? 1 : n.alpha;
});
var uJ = { kernelName: Is, backendName: "cpu", kernelFunc: lJ };
function pJ(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r } = t, { begin: s, end: i, strides: o, beginMask: l, endMask: u, ellipsisMask: p, newAxisMask: d, shrinkAxisMask: c } = a;
  ge(r, "stridedSlice");
  let { finalShapeSparse: h, finalShape: m, isIdentity: f, sliceDim0: g, isSimpleSlice: b, begin: y, end: x, strides: v } = Kt.sliceInfo(r.shape, s, i, o, l, u, p, d, c), I;
  if (f) I = xt({ inputs: { x: r }, backend: n, attrs: { shape: m } });
  else if (g || b) {
    w.assert(r.shape.length >= 1, () => `Input must have rank at least 1, got: ${r.shape.length}`);
    let N = Kt.computeOutShape(y, x, v), C = xi({ inputs: { x: r }, backend: n, attrs: { begin: y, size: N } });
    I = xt({ inputs: { x: C }, backend: n, attrs: { shape: m } }), n.disposeIntermediateTensorInfo(C);
  } else {
    let N = n.bufferSync(r), C = c_(h, N, v, y);
    I = n.makeTensorInfo(m, C.dtype, C.values);
  }
  return I;
}
var cJ = { kernelName: ju, backendName: "cpu", kernelFunc: pJ };
function dJ(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { separator: r, nGramWidths: s, leftPad: i, rightPad: o, padWidth: l, preserveShortSequences: u } = a, { data: p, dataSplits: d } = t, c = n.data.get(p.dataId).values, h = n.data.get(d.dataId).values, [m, f] = U1(c, h, r, s, i, o, l, u);
  return [n.makeTensorInfo([m.length], "string", m), n.makeTensorInfo(d.shape, "int32", f)];
}
var hJ = { kernelName: Xc, backendName: "cpu", kernelFunc: dJ };
function mJ(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { skipEmpty: r } = a, { input: s, delimiter: i } = t;
  if (s.dtype !== "string") throw new Error("Input must be of datatype string");
  if (s.shape.length !== 1) throw new Error(`Input must be a vector, got shape: ${s.shape}`);
  if (i.shape.length !== 0) throw new Error(`Delimiter must be a scalar, got shape: ${i.shape}`);
  let o = n.data.get(s.dataId).values, l = n.data.get(i.dataId).values[0], [u, p, d] = G1(o, l, r), c = p.length;
  return [n.makeTensorInfo([c, 2], "int32", u), n.makeTensorInfo([c], "string", p), n.makeTensorInfo([2], "int32", new Int32Array(d))];
}
var fJ = { kernelName: Yc, backendName: "cpu", kernelFunc: mJ };
function gJ(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { numBuckets: r } = a, { input: s } = t;
  if (s.dtype !== "string") throw new Error("Input must be of datatype string");
  if (r <= 0) throw new Error("Number of buckets must be at least 1");
  let i = n.data.get(s.dataId).values, o = H1(i, r);
  return n.makeTensorInfo(s.shape, "int32", o);
}
var bJ = { kernelName: Zc, backendName: "cpu", kernelFunc: gJ };
var yJ = lt(Vo, (e17) => Math.tan(e17));
var xJ = { kernelName: Vo, backendName: "cpu", kernelFunc: yJ };
var vJ = lt(Uo, (e17) => Math.tanh(e17));
var wJ = { kernelName: Uo, backendName: "cpu", kernelFunc: vJ };
function kJ(e17) {
  let { inputs: t, backend: n } = e17, { tensor: a, indices: r, updates: s } = t, { sliceRank: i, numUpdates: o, sliceSize: l, strides: u, outputSize: p } = T.calculateShapes(s, r, a.shape), d = false, c = n.bufferSync(r), h = n.bufferSync(s), m = n.bufferSync(a), f = ni(c, h, a.shape, p, l, o, i, u, m, d);
  return n.makeTensorInfo(a.shape, f.dtype, f.values);
}
var IJ = { kernelName: Lu, backendName: "cpu", kernelFunc: kJ };
function SJ(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r } = t, { reps: s } = a;
  ge(r, "tile");
  let i = h_(n.bufferSync(r), s);
  return n.makeTensorInfo(i.shape, i.dtype, i.values);
}
var NJ = { kernelName: ks, backendName: "cpu", kernelFunc: SJ };
function TJ(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r } = t, { k: s, sorted: i } = a;
  ge(r, "topk");
  let o = n.data.get(r.dataId).values, [l, u] = f_(o, r.shape, r.dtype, s, i);
  return [n.makeTensorInfo(l.shape, l.dtype, l.values), n.makeTensorInfo(u.shape, u.dtype, u.values)];
}
var CJ = { kernelName: qu, backendName: "cpu", kernelFunc: TJ };
function EJ(e17) {
  let { inputs: t, attrs: n, backend: a } = e17, { image: r, transforms: s } = t, { interpolation: i, fillMode: o, fillValue: l, outputShape: u } = n, [p, d, c, h] = r.shape, [m, f] = u != null ? u : [d, c], g = [p, m, f, h], b = w.computeStrides(r.shape), y = b[0], x = b[1], v = b[2], I = w.computeStrides(g), N = I[0], C = I[1], _ = I[2], F = w.getTypedArrayFromDType(r.dtype, w.sizeFromShape(g));
  F.fill(l);
  let D = a.data.get(r.dataId).values, $ = a.data.get(s.dataId).values;
  for (let S = 0; S < p; ++S) {
    let M = s.shape[0] === 1 ? $ : $.subarray(S * 8, S * 8 + 8);
    for (let B = 0; B < m; ++B) for (let U = 0; U < f; ++U) for (let H = 0; H < h; ++H) {
      let q, K = M[6] * U + M[7] * B + 1;
      if (K === 0) continue;
      let Z = (M[0] * U + M[1] * B + M[2]) / K, J = (M[3] * U + M[4] * B + M[5]) / K, ee = tS(Z, c, o), ae = tS(J, d, o);
      switch (i) {
        case "nearest":
          q = RJ(D, d, c, y, x, v, S, ae, ee, H, l);
          break;
        case "bilinear":
          q = MJ(D, d, c, y, x, v, S, ae, ee, H, l);
          break;
        default:
          throw new Error(`Error in Transform: Expect 'nearest' or 'bilinear', but got ${i}`);
      }
      let te = S * N + B * C + U * _ + H;
      F[te] = q;
    }
    return a.makeTensorInfo(g, r.dtype, F);
  }
  return { dataId: a.write(F, g, r.dtype), shape: r.shape, dtype: r.dtype };
}
var _J = { kernelName: Ku, backendName: "cpu", kernelFunc: EJ };
function tS(e17, t, n) {
  switch (n) {
    case "reflect":
      return AJ(e17, t);
    case "wrap":
      return FJ(e17, t);
    case "nearest":
      return DJ(e17, t);
    case "constant":
    default:
      return $J(e17, t);
  }
}
function AJ(e17, t) {
  let n = e17;
  if (n < 0) if (t <= 1) n = 0;
  else {
    let a = 2 * t;
    n < a && (n = a * Math.trunc(-n / a) + n), n = n < -t ? n + a : -n - 1;
  }
  else if (n > t - 1) if (t <= 1) n = 0;
  else {
    let a = 2 * t;
    n -= a * Math.trunc(n / a), n >= t && (n = a - n - 1);
  }
  return w.clamp(0, n, t - 1);
}
function FJ(e17, t) {
  let n = e17;
  if (n < 0) if (t <= 1) n = 0;
  else {
    let a = t - 1;
    n += t * (Math.trunc(-n / a) + 1);
  }
  else if (n > t - 1) if (t <= 1) n = 0;
  else {
    let a = t - 1;
    n -= t * Math.trunc(n / a);
  }
  return w.clamp(0, n, t - 1);
}
function $J(e17, t) {
  return e17;
}
function DJ(e17, t) {
  return w.clamp(0, e17, t - 1);
}
function ac(e17, t, n, a, r, s, i, o, l, u, p) {
  let d = i * a + o * r + l * s + u;
  return 0 <= o && o < t && 0 <= l && l < n ? e17[d] : p;
}
function RJ(e17, t, n, a, r, s, i, o, l, u, p) {
  let d = Math.round(o), c = Math.round(l);
  return ac(e17, t, n, a, r, s, i, d, c, u, p);
}
function MJ(e17, t, n, a, r, s, i, o, l, u, p) {
  let d = Math.floor(o), c = Math.floor(l), h = d + 1, m = c + 1, f = (m - l) * ac(e17, t, n, a, r, s, i, d, c, u, p) + (l - c) * ac(e17, t, n, a, r, s, i, d, m, u, p), g = (m - l) * ac(e17, t, n, a, r, s, i, h, c, u, p) + (l - c) * ac(e17, t, n, a, r, s, i, h, m, u, p);
  return (h - o) * f + (o - d) * g;
}
function OJ(e17) {
  let { inputs: t, attrs: n, backend: a } = e17, { axis: r } = n, { x: s } = t;
  ge(s, "unique");
  let i = a.data.get(s.dataId).values, { outputValues: o, outputShape: l, indices: u } = q1(i, r, s.shape, s.dtype);
  return [a.makeTensorInfo(l, s.dtype, o), a.makeTensorInfo([u.length], "int32", u)];
}
var PJ = { kernelName: Jc, backendName: "cpu", kernelFunc: OJ };
function LJ(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { value: r } = t, { axis: s } = a;
  s < 0 && (s += r.shape.length);
  let i = r.shape.length, o = r.shape[s], l = new Array(i - 1), u = 0;
  for (let h = 0; h < i; h++) h !== s && (l[u++] = r.shape[h]);
  let p = new Array(i).fill(0), d = r.shape.slice();
  d[s] = 1;
  let c = new Array(o);
  for (let h = 0; h < c.length; h++) {
    p[s] = h;
    let m = xi({ inputs: { x: r }, backend: n, attrs: { begin: p, size: d } });
    c[h] = xt({ inputs: { x: m }, backend: n, attrs: { shape: l } }), n.disposeIntermediateTensorInfo(m);
  }
  return c;
}
var zJ = { kernelName: Xu, backendName: "cpu", kernelFunc: LJ };
function WJ(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r, segmentIds: s } = t, { numSegments: i } = a;
  ge(r, "unsortedSegmentSum");
  let o = r.shape.length, l = s.shape.length, u = [], p = [], d = o - l, c = s;
  for (let m = 0; m < d; ++m) {
    let f = cm({ inputs: { input: c }, backend: n, attrs: { dim: m + 1 } });
    c = f, p.push(f);
  }
  for (let m = 0; m < i; ++m) {
    let f = w.createScalarValue(m, "int32"), g = n.makeTensorInfo([], "int32", f), b = OE({ inputs: { a: g, b: c }, backend: n }), y = bs({ inputs: { x: b }, backend: n, attrs: { dtype: "float32" } }), x = zf({ inputs: { a: y, b: r }, backend: n }), v = Ed({ inputs: { x }, backend: n, attrs: { axis: 0, keepDims: false } });
    u.push(v), p.push(g), p.push(b), p.push(y), p.push(x), p.push(v);
  }
  let h = A_({ inputs: u, backend: n, attrs: { axis: 0 } });
  return p.forEach((m) => n.disposeIntermediateTensorInfo(m)), h;
}
var BJ = { kernelName: Qc, backendName: "cpu", kernelFunc: WJ };
var VJ = [MK, m8, PK, zK, v8, BK, UK, HK, qK, XK, ZK, QK, tX, rX, iX, uX, cX, hX, fX, DK, bX, xX, wX, k8, IX, y8, S8, NX, f8, CX, _X, AX, $X, RX, OX, LX, WX, VX, GX, jX, KX, YX, JX, eY, tY, aY, sY, oY, lY, uY, pY, dY, fY, TK, bY, N8, NY, T8, TY, E8, $Y, DY, MY, A8, $8, PY, zY, BY, UY, R8, O8, g8, HY, EX, qY, XY, ZY, CK, L8, W8, QY, V8, t7, r7, i7, u7, c7, h7, m7, G8, g7, y7, v7, k7, S7, T7, E7, j8, A7, D7, P7, K8, Y8, W7, U7, j7, J8, K7, Y7, Z7, F_, tZ, _K, tK, aZ, sZ, oZ, uZ, b8, lv, cZ, AK, FK, $K, hZ, fZ, bZ, xZ, wZ, kZ, SZ, pK, TZ, FZ, DZ, PZ, dK, zZ, BZ, UZ, hK, M7, jZ, KZ, YZ, JZ, eJ, nJ, rJ, iJ, gK, oJ, yK, vK, uJ, cJ, hJ, fJ, bJ, SK, hY, xJ, wJ, IJ, NJ, CJ, _J, Q8, PJ, zJ, BJ, X7];
for (let e17 of VJ) ed(e17);
var $_ = {};
_e($_, { assertNotComplex: () => lp, bindCanvasToFramebuffer: () => QJ, bindColorTextureToFramebuffer: () => Ph, bindTextureToProgramUniformSampler: () => K_, bindTextureUnit: () => H_, bindVertexBufferToProgramAttribute: () => pv, callAndCheck: () => de, canBeRepresented: () => R_, createFragmentShader: () => P_, createFramebuffer: () => G_, createProgram: () => L_, createStaticIndexBuffer: () => B_, createStaticVertexBuffer: () => W_, createTexture: () => V_, createVertexShader: () => O_, getBatchDim: () => vi, getExtensionOrThrow: () => rc, getFramebufferErrorMessage: () => X_, getMaxTexturesInShader: () => Q_, getNumChannels: () => ZJ, getProgramUniformLocation: () => q_, getProgramUniformLocationOrThrow: () => j_, getRowsCols: () => wi, getShapeAs3D: () => ic, getTextureShapeFromLogicalShape: () => Z_, getWebGLDisjointQueryTimerVersion: () => eA, getWebGLErrorMessage: () => M_, getWebGLMaxTextureSize: () => J_, hasExtension: () => da, isCapableOfRenderingToFloatTexture: () => tA, isDownloadFloatTextureEnabled: () => nA, isReshapeFree: () => Tc, isWebGLFenceEnabled: () => aA, isWebGLVersionEnabled: () => dv, linkProgram: () => z_, logShaderSourceAndInfoLog: () => J1, resetMaxTextureSize: () => e9, resetMaxTexturesInShader: () => t9, unbindColorTextureFromFramebuffer: () => cv, unbindTextureUnit: () => JJ, validateFramebuffer: () => sc, validateProgram: () => Oh, validateTextureSize: () => U_ });
var ei = {};
var _h = { alpha: false, antialias: false, premultipliedAlpha: false, preserveDrawingBuffer: false, depth: false, stencil: false, failIfMajorPerformanceCaveat: true };
function D_(e17, t) {
  ei[e17] = t;
}
function ja(e17, t) {
  if (!(e17 in ei) || t != null) {
    let a = GJ(e17, t);
    if (a !== null) ei[e17] = a;
    else return console.log("Could not get context for WebGL version", e17), null;
  }
  let n = ei[e17];
  return n == null || n.isContextLost() ? (delete ei[e17], ja(e17)) : (n.disable(n.DEPTH_TEST), n.disable(n.STENCIL_TEST), n.disable(n.BLEND), n.disable(n.DITHER), n.disable(n.POLYGON_OFFSET_FILL), n.disable(n.SAMPLE_COVERAGE), n.enable(n.SCISSOR_TEST), n.enable(n.CULL_FACE), n.cullFace(n.BACK), ei[e17]);
}
function UJ(e17) {
  if (!G().getBool("IS_SAFARI") && typeof OffscreenCanvas != "undefined" && e17 === 2) return new OffscreenCanvas(300, 150);
  if (typeof document != "undefined") return document.createElement("canvas");
  throw new Error("Cannot create a canvas in this context");
}
function GJ(e17, t) {
  if (e17 !== 1 && e17 !== 2) throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");
  let n = t == null ? UJ(e17) : t;
  return n.addEventListener("webglcontextlost", (a) => {
    a.preventDefault(), delete ei[e17];
  }, false), G().getBool("SOFTWARE_WEBGL_ENABLED") && (_h.failIfMajorPerformanceCaveat = false), e17 === 1 ? n.getContext("webgl", _h) || n.getContext("experimental-webgl", _h) : n.getContext("webgl2", _h);
}
var Nc;
(function(e17) {
  e17[e17.DENSE = 0] = "DENSE", e17[e17.SHARED_BATCH = 1] = "SHARED_BATCH";
})(Nc || (Nc = {}));
var ca;
(function(e17) {
  e17[e17.RENDER = 0] = "RENDER", e17[e17.UPLOAD = 1] = "UPLOAD", e17[e17.PIXELS = 2] = "PIXELS", e17[e17.DOWNLOAD = 3] = "DOWNLOAD";
})(ca || (ca = {}));
var cn;
(function(e17) {
  e17[e17.UNPACKED_FLOAT16 = 0] = "UNPACKED_FLOAT16", e17[e17.UNPACKED_FLOAT32 = 1] = "UNPACKED_FLOAT32", e17[e17.PACKED_4X1_UNSIGNED_BYTE = 2] = "PACKED_4X1_UNSIGNED_BYTE", e17[e17.PACKED_2X2_FLOAT32 = 3] = "PACKED_2X2_FLOAT32", e17[e17.PACKED_2X2_FLOAT16 = 4] = "PACKED_2X2_FLOAT16";
})(cn || (cn = {}));
function _d(e17, t) {
  return [t, e17];
}
function HJ(e17, t) {
  return e17 * t;
}
function Ah(e17) {
  let t = w.sizeFromShape(e17), n = Math.ceil(t / 4);
  return w.sizeToSquarishShape(n);
}
function op(e17, t) {
  return [Math.max(1, Math.ceil(t / 2)), Math.max(1, Math.ceil(e17 / 2))];
}
function jJ(e17, t) {
  let [n, a] = op(e17, t);
  return n * a * 4;
}
function Z1(e17, t) {
  let n = e17, a, r, s, i, o, l, u, p, d, c;
  return G().getNumber("WEBGL_VERSION") === 2 ? (a = n.R32F, r = n.R16F, s = n.RGBA16F, i = n.RGBA32F, o = n.RED, u = 4, p = 1, d = n.HALF_FLOAT, c = n.FLOAT, l = n.RGBA8) : (a = e17.RGBA, r = e17.RGBA, s = e17.RGBA, i = n.RGBA, o = e17.RGBA, u = 4, p = 4, d = t != null ? t.HALF_FLOAT_OES : null, c = e17.FLOAT, l = e17.RGBA), { internalFormatFloat: a, internalFormatHalfFloat: r, internalFormatPackedHalfFloat: s, internalFormatPackedFloat: i, textureFormatFloat: o, downloadTextureFormat: l, downloadUnpackNumChannels: u, defaultNumChannels: p, textureTypeHalfFloat: d, textureTypeFloat: c };
}
function de(e17, t) {
  let n = t();
  return G().getBool("DEBUG") && qJ(e17), n;
}
function qJ(e17) {
  let t = e17.getError();
  if (t !== e17.NO_ERROR) throw new Error("WebGL Error: " + M_(e17, t));
}
var KJ = 596e-10;
var XJ = 65504;
function R_(e17) {
  return !!(G().getBool("WEBGL_RENDER_FLOAT32_ENABLED") || e17 === 0 || KJ < Math.abs(e17) && Math.abs(e17) < XJ);
}
function M_(e17, t) {
  switch (t) {
    case e17.NO_ERROR:
      return "NO_ERROR";
    case e17.INVALID_ENUM:
      return "INVALID_ENUM";
    case e17.INVALID_VALUE:
      return "INVALID_VALUE";
    case e17.INVALID_OPERATION:
      return "INVALID_OPERATION";
    case e17.INVALID_FRAMEBUFFER_OPERATION:
      return "INVALID_FRAMEBUFFER_OPERATION";
    case e17.OUT_OF_MEMORY:
      return "OUT_OF_MEMORY";
    case e17.CONTEXT_LOST_WEBGL:
      return "CONTEXT_LOST_WEBGL";
    default:
      return `Unknown error code ${t}`;
  }
}
function rc(e17, t) {
  return Or(e17, () => e17.getExtension(t), 'Extension "' + t + '" not supported on this browser.');
}
function O_(e17, t) {
  let n = Or(e17, () => e17.createShader(e17.VERTEX_SHADER), "Unable to create vertex WebGLShader.");
  if (de(e17, () => e17.shaderSource(n, t)), de(e17, () => e17.compileShader(n)), e17.getShaderParameter(n, e17.COMPILE_STATUS) === false) throw console.log(e17.getShaderInfoLog(n)), new Error("Failed to compile vertex shader.");
  return n;
}
function P_(e17, t) {
  let n = Or(e17, () => e17.createShader(e17.FRAGMENT_SHADER), "Unable to create fragment WebGLShader.");
  if (de(e17, () => e17.shaderSource(n, t)), de(e17, () => e17.compileShader(n)), G().get("ENGINE_COMPILE_ONLY")) return n;
  if (e17.getShaderParameter(n, e17.COMPILE_STATUS) === false) throw J1(t, e17.getShaderInfoLog(n)), new Error("Failed to compile fragment shader.");
  return n;
}
var YJ = /ERROR: [0-9]+:([0-9]+):/g;
function J1(e17, t) {
  let n = YJ.exec(t);
  if (n == null) {
    console.log(`Couldn't parse line number in error: ${t}`), console.log(e17);
    return;
  }
  let a = +n[1], r = e17.split(`
`), s = r.length.toString().length + 2, i = r.map((d, c) => w.rightPad((c + 1).toString(), s) + d), o = 0;
  for (let d = 0; d < i.length; d++) o = Math.max(i[d].length, o);
  let l = i.slice(0, a - 1), u = i.slice(a - 1, a), p = i.slice(a);
  console.log(l.join(`
`)), console.log(t.split(`
`)[0]), console.log(`%c ${w.rightPad(u[0], o)}`, "border:1px solid red; background-color:#e3d2d2; color:#a61717"), console.log(p.join(`
`));
}
function L_(e17) {
  return Or(e17, () => e17.createProgram(), "Unable to create WebGLProgram.");
}
function z_(e17, t) {
  if (de(e17, () => e17.linkProgram(t)), !G().get("ENGINE_COMPILE_ONLY") && e17.getProgramParameter(t, e17.LINK_STATUS) === false) throw console.log(e17.getProgramInfoLog(t)), new Error("Failed to link vertex and fragment shaders.");
}
function Oh(e17, t) {
  if (de(e17, () => e17.validateProgram(t)), e17.getProgramParameter(t, e17.VALIDATE_STATUS) === false) throw console.log(e17.getProgramInfoLog(t)), new Error("Shader program validation failed.");
}
function W_(e17, t) {
  let n = Or(e17, () => e17.createBuffer(), "Unable to create WebGLBuffer");
  return de(e17, () => e17.bindBuffer(e17.ARRAY_BUFFER, n)), de(e17, () => e17.bufferData(e17.ARRAY_BUFFER, t, e17.STATIC_DRAW)), n;
}
function B_(e17, t) {
  let n = Or(e17, () => e17.createBuffer(), "Unable to create WebGLBuffer");
  return de(e17, () => e17.bindBuffer(e17.ELEMENT_ARRAY_BUFFER, n)), de(e17, () => e17.bufferData(e17.ELEMENT_ARRAY_BUFFER, t, e17.STATIC_DRAW)), n;
}
function ZJ() {
  return G().getNumber("WEBGL_VERSION") === 2 ? 1 : 4;
}
function V_(e17) {
  return Or(e17, () => e17.createTexture(), "Unable to create WebGLTexture.");
}
function U_(e17, t) {
  let n = G().getNumber("WEBGL_MAX_TEXTURE_SIZE");
  if (e17 <= 0 || t <= 0) {
    let a = `[${e17}x${t}]`;
    throw new Error("Requested texture size " + a + " is invalid.");
  }
  if (e17 > n || t > n) {
    let a = `[${e17}x${t}]`, r = `[${n}x${n}]`;
    throw new Error("Requested texture size " + a + " greater than WebGL maximum on this browser / GPU " + r + ".");
  }
}
function G_(e17) {
  return Or(e17, () => e17.createFramebuffer(), "Unable to create WebGLFramebuffer.");
}
function pv(e17, t, n, a, r, s, i) {
  let o = e17.getAttribLocation(t, n);
  return o === -1 ? false : (de(e17, () => e17.bindBuffer(e17.ARRAY_BUFFER, a)), de(e17, () => e17.vertexAttribPointer(o, r, e17.FLOAT, false, s, i)), de(e17, () => e17.enableVertexAttribArray(o)), true);
}
function H_(e17, t, n) {
  Y_(e17, n), de(e17, () => e17.activeTexture(e17.TEXTURE0 + n)), de(e17, () => e17.bindTexture(e17.TEXTURE_2D, t));
}
function JJ(e17, t) {
  Y_(e17, t), de(e17, () => e17.activeTexture(e17.TEXTURE0 + t)), de(e17, () => e17.bindTexture(e17.TEXTURE_2D, null));
}
function j_(e17, t, n) {
  return Or(e17, () => e17.getUniformLocation(t, n), 'uniform "' + n + '" not present in program.');
}
function q_(e17, t, n) {
  return e17.getUniformLocation(t, n);
}
function K_(e17, t, n, a) {
  de(e17, () => H_(e17, t, a)), de(e17, () => e17.uniform1i(n, a));
}
function QJ(e17) {
  de(e17, () => e17.bindFramebuffer(e17.FRAMEBUFFER, null)), de(e17, () => e17.viewport(0, 0, e17.canvas.width, e17.canvas.height)), de(e17, () => e17.scissor(0, 0, e17.canvas.width, e17.canvas.height));
}
function Ph(e17, t, n) {
  de(e17, () => e17.bindFramebuffer(e17.FRAMEBUFFER, n)), de(e17, () => e17.framebufferTexture2D(e17.FRAMEBUFFER, e17.COLOR_ATTACHMENT0, e17.TEXTURE_2D, t, 0));
}
function cv(e17, t) {
  de(e17, () => e17.bindFramebuffer(e17.FRAMEBUFFER, t)), de(e17, () => e17.framebufferTexture2D(e17.FRAMEBUFFER, e17.COLOR_ATTACHMENT0, e17.TEXTURE_2D, null, 0));
}
function sc(e17) {
  let t = e17.checkFramebufferStatus(e17.FRAMEBUFFER);
  if (t !== e17.FRAMEBUFFER_COMPLETE) throw new Error("Error binding framebuffer: " + X_(e17, t));
}
function X_(e17, t) {
  switch (t) {
    case e17.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:
      return "FRAMEBUFFER_INCOMPLETE_ATTACHMENT";
    case e17.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:
      return "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";
    case e17.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:
      return "FRAMEBUFFER_INCOMPLETE_DIMENSIONS";
    case e17.FRAMEBUFFER_UNSUPPORTED:
      return "FRAMEBUFFER_UNSUPPORTED";
    default:
      return `unknown error ${t}`;
  }
}
function Or(e17, t, n) {
  let a = de(e17, () => t());
  if (a == null) throw new Error(n);
  return a;
}
function Y_(e17, t) {
  let n = e17.MAX_COMBINED_TEXTURE_IMAGE_UNITS - 1, a = t + e17.TEXTURE0;
  if (a < e17.TEXTURE0 || a > n) {
    let r = `[gl.TEXTURE0, gl.TEXTURE${n}]`;
    throw new Error(`textureUnit must be in ${r}.`);
  }
}
function vi(e17, t = 2) {
  return w.sizeFromShape(e17.slice(0, e17.length - t));
}
function wi(e17) {
  if (e17.length === 0) throw Error("Cannot get rows and columns of an empty shape array.");
  return [e17.length > 1 ? e17[e17.length - 2] : 1, e17[e17.length - 1]];
}
function ic(e17) {
  let t = [1, 1, 1];
  return e17.length === 0 || e17.length === 1 && e17[0] === 1 || (t = [vi(e17), ...wi(e17)]), t;
}
function Z_(e17, t = false) {
  let n = G().getNumber("WEBGL_MAX_TEXTURE_SIZE"), a = G().getNumber("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE");
  a === 1 / 0 && G().getBool("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE") && (a = n / 2), t && (n = n * 2, a = a * 2, e17 = e17.map((o, l) => l >= e17.length - 2 ? w.nearestLargerEven(e17[l]) : e17[l]), e17.length === 1 && (e17 = [2, e17[0]])), e17.length !== 2 && (e17 = w.squeezeShape(e17).newShape);
  let r = w.sizeFromShape(e17), s = null;
  e17.length <= 1 && r <= n ? s = [1, r] : e17.length === 2 && e17[0] <= n && e17[1] <= n ? s = e17 : e17.length === 3 && e17[0] * e17[1] <= n && e17[2] <= n ? s = [e17[0] * e17[1], e17[2]] : e17.length === 3 && e17[0] <= n && e17[1] * e17[2] <= n ? s = [e17[0], e17[1] * e17[2]] : e17.length === 4 && e17[0] * e17[1] * e17[2] <= n && e17[3] <= n ? s = [e17[0] * e17[1] * e17[2], e17[3]] : e17.length === 4 && e17[0] <= n && e17[1] * e17[2] * e17[3] <= n && (s = [e17[0], e17[1] * e17[2] * e17[3]]);
  let i = s != null && Math.max(...s) > a && Math.min(...s) <= (t ? 2 : 1) && Math.min(...s) > 0;
  if (s == null || i) if (t) {
    let o = vi(e17), l = 2, u = 2;
    e17.length && ([l, u] = wi(e17)), r = o * (l / 2) * (u / 2), s = w.sizeToSquarishShape(r).map((p) => p * 2);
  } else s = w.sizeToSquarishShape(r);
  return s;
}
function Fh(e17) {
  return e17 % 2 === 0;
}
function Tc(e17, t) {
  if (e17 = e17.slice(-2), t = t.slice(-2), w.arraysEqual(e17, t) || !e17.length || !t.length || e17[0] === 0 || e17[1] === 0 || t[0] === 0 || t[1] === 0) return true;
  if (e17.length !== t.length) {
    let n = e17[e17.length - 1], a = t[t.length - 1];
    if (n === a || Fh(n) && Fh(a) && (e17[0] === 1 || t[0] === 1)) return true;
  }
  return e17[1] === t[1] && Fh(e17[0]) && Fh(t[0]);
}
var Lh;
var zh;
function J_(e17) {
  if (Lh == null) {
    let t = ja(e17);
    Lh = t.getParameter(t.MAX_TEXTURE_SIZE);
  }
  return Lh;
}
function e9() {
  Lh = null;
}
function t9() {
  zh = null;
}
function Q_(e17) {
  if (zh == null) {
    let t = ja(e17);
    zh = t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS);
  }
  return Math.min(16, zh);
}
function eA(e17) {
  if (e17 === 0) return 0;
  let t, n = ja(e17);
  return da(n, "EXT_disjoint_timer_query_webgl2") && e17 === 2 ? t = 2 : da(n, "EXT_disjoint_timer_query") ? t = 1 : t = 0, t;
}
function da(e17, t) {
  return e17.getExtension(t) != null;
}
function dv(e17) {
  try {
    if (ja(e17) != null) return true;
  } catch (t) {
    return console.log("Error when getting WebGL context: ", t), false;
  }
  return false;
}
function tA(e17) {
  if (e17 === 0) return false;
  let t = ja(e17);
  if (e17 === 1) {
    if (!da(t, "OES_texture_float")) return false;
  } else if (!da(t, "EXT_color_buffer_float")) return false;
  return hv(t);
}
function nA(e17) {
  if (e17 === 0) return false;
  let t = ja(e17);
  if (e17 === 1) {
    if (!da(t, "OES_texture_float") || !da(t, "WEBGL_color_buffer_float")) return false;
  } else {
    if (da(t, "EXT_color_buffer_float")) return hv(t);
    let n = "EXT_color_buffer_half_float";
    if (da(t, n)) {
      let a = t.getExtension(n);
      return n9(t, a);
    }
    return false;
  }
  return hv(t);
}
function hv(e17) {
  let t = Z1(e17), n = e17.createTexture();
  e17.bindTexture(e17.TEXTURE_2D, n), e17.texImage2D(e17.TEXTURE_2D, 0, t.internalFormatFloat, 1, 1, 0, t.textureFormatFloat, t.textureTypeFloat, null);
  let a = e17.createFramebuffer();
  e17.bindFramebuffer(e17.FRAMEBUFFER, a), e17.framebufferTexture2D(e17.FRAMEBUFFER, e17.COLOR_ATTACHMENT0, e17.TEXTURE_2D, n, 0);
  let r = e17.checkFramebufferStatus(e17.FRAMEBUFFER) === e17.FRAMEBUFFER_COMPLETE;
  return e17.bindTexture(e17.TEXTURE_2D, null), e17.bindFramebuffer(e17.FRAMEBUFFER, null), e17.deleteTexture(n), e17.deleteFramebuffer(a), r;
}
function n9(e17, t) {
  let n = Z1(e17, t), a = e17.createTexture();
  e17.bindTexture(e17.TEXTURE_2D, a), e17.texImage2D(e17.TEXTURE_2D, 0, n.internalFormatHalfFloat, 1, 1, 0, n.textureFormatFloat, n.textureTypeHalfFloat, null);
  let r = e17.createFramebuffer();
  e17.bindFramebuffer(e17.FRAMEBUFFER, r), e17.framebufferTexture2D(e17.FRAMEBUFFER, e17.COLOR_ATTACHMENT0, e17.TEXTURE_2D, a, 0);
  let s = e17.checkFramebufferStatus(e17.FRAMEBUFFER) === e17.FRAMEBUFFER_COMPLETE;
  return e17.bindTexture(e17.TEXTURE_2D, null), e17.bindFramebuffer(e17.FRAMEBUFFER, null), e17.deleteTexture(a), e17.deleteFramebuffer(r), s;
}
function aA(e17) {
  return e17 !== 2 ? false : ja(e17).fenceSync != null;
}
function lp(e17, t) {
  Array.isArray(e17) || (e17 = [e17]), e17.forEach((n) => {
    n != null && w.assert(n.dtype !== "complex64", () => `${t} does not support complex64 tensors in the WebGL backend.`);
  });
}
var be = G();
be.registerFlag("HAS_WEBGL", () => be.getNumber("WEBGL_VERSION") > 0);
be.registerFlag("WEBGL_VERSION", () => dv(2) ? 2 : dv(1) ? 1 : 0);
be.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS", () => false);
be.registerFlag("WEBGL_BUFFER_SUPPORTED", () => be.get("WEBGL_VERSION") === 2);
be.registerFlag("WEBGL_CPU_FORWARD", () => true);
be.registerFlag("WEBGL_FORCE_F16_TEXTURES", () => false);
be.registerFlag("WEBGL_PACK", () => be.getBool("HAS_WEBGL"));
be.registerFlag("WEBGL_PACK_NORMALIZATION", () => be.getBool("WEBGL_PACK"));
be.registerFlag("WEBGL_PACK_CLIP", () => be.getBool("WEBGL_PACK"));
be.registerFlag("WEBGL_PACK_DEPTHWISECONV", () => be.getBool("WEBGL_PACK"));
be.registerFlag("WEBGL_PACK_BINARY_OPERATIONS", () => be.getBool("WEBGL_PACK"));
be.registerFlag("WEBGL_PACK_UNARY_OPERATIONS", () => be.getBool("WEBGL_PACK"));
be.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS", () => be.getBool("WEBGL_PACK"));
be.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS", () => be.getBool("WEBGL_PACK"));
be.registerFlag("WEBGL_PACK_REDUCE", () => be.getBool("WEBGL_PACK"));
be.registerFlag("WEBGL_LAZILY_UNPACK", () => be.getBool("WEBGL_PACK"));
be.registerFlag("WEBGL_CONV_IM2COL", () => be.getBool("WEBGL_PACK"));
be.registerFlag("WEBGL_PACK_CONV2DTRANSPOSE", () => be.getBool("WEBGL_PACK"));
be.registerFlag("WEBGL_MAX_TEXTURE_SIZE", () => J_(be.getNumber("WEBGL_VERSION")));
be.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER", () => Q_(be.getNumber("WEBGL_VERSION")));
be.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION", () => {
  let e17 = be.getNumber("WEBGL_VERSION");
  return e17 === 0 ? 0 : eA(e17);
});
be.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE", () => be.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") > 0 && !ad.isMobile());
be.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE", () => tA(be.getNumber("WEBGL_VERSION")));
be.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED", () => be.getBool("WEBGL_FORCE_F16_TEXTURES") ? false : be.getBool("WEBGL_RENDER_FLOAT32_CAPABLE"));
be.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED", () => nA(be.getNumber("WEBGL_VERSION")));
be.registerFlag("WEBGL_FENCE_API_ENABLED", () => aA(be.getNumber("WEBGL_VERSION")));
be.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM", () => be.getBool("WEBGL_RENDER_FLOAT32_ENABLED") ? 4 : 0);
be.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD", () => -1, (e17) => {
  if (typeof e17 != "number") throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be a number but got ${e17}.`);
  if (e17 < 0 && e17 !== -1) throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${e17}.`);
});
be.registerFlag("WEBGL_FLUSH_THRESHOLD", () => ad.isMobile() ? 1 : -1, (e17) => {
  if (typeof e17 != "number") throw new Error(`WEBGL_FLUSH_THRESHOLD must be a number but got ${e17}.`);
  if (e17 < 0 && e17 !== -1) throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${e17}.`);
});
be.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD", () => 128);
be.registerFlag("WEBGL_USE_SHAPES_UNIFORMS", () => false);
be.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD", () => 1e5);
be.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD", () => 128);
be.registerFlag("WEBGL_EXP_CONV", () => false);
be.registerFlag("SOFTWARE_WEBGL_ENABLED", () => be.getBool("IS_TEST"));
be.registerFlag("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE", () => 1 / 0);
be.registerFlag("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE", () => false);
be.registerFlag("WEBGL2_ISNAN_CUSTOM", () => false);
be.registerFlag("ENGINE_COMPILE_ONLY", () => false);
function En() {
  let e17, t, n, a, r, s, i, o, l, u;
  return G().getNumber("WEBGL_VERSION") === 2 ? (e17 = "#version 300 es", t = "in", n = "out", a = "in", r = "texture", s = "outputColor", i = "out vec4 outputColor;", o = G().getBool("WEBGL2_ISNAN_CUSTOM") ? `
      bool isnan_custom(float val) {
        uint floatToUint = floatBitsToUint(val);
        return (floatToUint & 0x7fffffffu) > 0x7f800000u;
      }

      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan_custom(val.x),
          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));
      }

      #define isnan(value) isnan_custom(value)
    ` : "", l = "", u = `
      #define round(value) newRound(value)
      int newRound(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 newRound(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `) : (e17 = "", t = "attribute", n = "varying", a = "varying", r = "texture2D", s = "gl_FragColor", i = "", o = `
      #define isnan(value) isnan_custom(value)
      bool isnan_custom(float val) {
        return (val > 0. || val < 1. || val == 0.) ? false : true;
      }
      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));
      }
    `, l = `
      uniform float INFINITY;

      bool isinf(float val) {
        return abs(val) == INFINITY;
      }
      bvec4 isinf(vec4 val) {
        return equal(abs(val), vec4(INFINITY));
      }
    `, u = `
      int round(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 round(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `), { version: e17, attribute: t, varyingVs: n, varyingFs: a, texture2D: r, output: s, defineOutput: i, defineSpecialNaN: o, defineSpecialInf: l, defineRound: u };
}
function Zo(e17, t, n = "index") {
  let a = w.computeStrides(t);
  return a.map((r, s) => {
    let i = `int ${e17[s]} = ${n} / ${r}`, o = s === a.length - 1 ? `int ${e17[s + 1]} = ${n} - ${e17[s]} * ${r}` : `index -= ${e17[s]} * ${r}`;
    return `${i}; ${o};`;
  }).join("");
}
function Wf(e17, t, n = "index") {
  let a = w.computeStrides(t);
  return a.map((r, s) => {
    let i = `int ${e17[s]} = ${n} / outShapeStrides[${s}]`, o = s === a.length - 1 ? `int ${e17[s + 1]} = ${n} - ${e17[s]} * outShapeStrides[${s}]` : `index -= ${e17[s]} * outShapeStrides[${s}]`;
    return `${i}; ${o};`;
  }).join("");
}
function a9(e17, t) {
  let n = e17.length, a = e17.map((s) => `${t}[${s}]`), r = new Array(n - 1);
  r[n - 2] = a[n - 1];
  for (let s = n - 3; s >= 0; --s) r[s] = `(${r[s + 1]} * ${a[s + 1]})`;
  return r;
}
function r9(e17, t, n = "index") {
  let a = e17.map((s, i) => i), r = a9(a, t);
  return r.map((s, i) => {
    let o = `int ${e17[i]} = ${n} / ${r[i]}`, l = i === r.length - 1 ? `int ${e17[i + 1]} = ${n} - ${e17[i]} * ${r[i]}` : `index -= ${e17[i]} * ${r[i]}`;
    return `${o}; ${l};`;
  }).join("");
}
function Q1(e17) {
  let t = w.computeStrides(e17).map((n) => n.toString());
  return `
  int getFlatIndex(ivec3 coords) {
    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;
  }
`;
}
function ek() {
  return `
  int getFlatIndex(ivec3 coords) {
    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;
  }
`;
}
var rA = `
  const float FLOAT_MAX = 1.70141184e38;
  const float FLOAT_MIN = 1.17549435e-38;

  lowp vec4 encode_float(highp float v) {
    if (isnan(v)) {
      return vec4(255, 255, 255, 255);
    }

    highp float av = abs(v);

    if(av < FLOAT_MIN) {
      return vec4(0.0, 0.0, 0.0, 0.0);
    } else if(v > FLOAT_MAX) {
      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;
    } else if(v < -FLOAT_MAX) {
      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;
    }

    highp vec4 c = vec4(0,0,0,0);

    highp float e = floor(log2(av));
    highp float m = exp2(fract(log2(av))) - 1.0;

    c[2] = floor(128.0 * m);
    m -= c[2] / 128.0;
    c[1] = floor(32768.0 * m);
    m -= c[1] / 32768.0;
    c[0] = floor(8388608.0 * m);

    highp float ebias = e + 127.0;
    c[3] = floor(ebias / 2.0);
    ebias -= c[3] * 2.0;
    c[2] += floor(ebias) * 128.0;

    c[3] += 128.0 * step(0.0, -v);

    return c / 255.0;
  }
`;
var { getBroadcastDims: sA } = T;
function s9(e17, t, n) {
  let a = [];
  if (e17.forEach((c) => {
    let h = w.sizeFromShape(c.shapeInfo.logicalShape);
    if (c.shapeInfo.isUniform ? a.push(`uniform float ${c.name}${h > 1 ? `[${h}]` : ""};`) : (a.push(`uniform sampler2D ${c.name};`), a.push(`uniform int offset${c.name};`)), n.enableShapeUniforms) {
      let { uniformShape: m } = tk(n.packedInputs, c.shapeInfo.logicalShape, c.shapeInfo.texShape);
      switch (m.length) {
        case 1:
          a.push(`uniform int ${c.name}Shape;`);
          break;
        case 2:
          a.push(`uniform ivec2 ${c.name}Shape;`);
          break;
        case 3:
          a.push(`uniform ivec3 ${c.name}Shape;`);
          break;
        case 4:
          a.push(`uniform ivec4 ${c.name}Shape;`);
          break;
        default:
          break;
      }
      a.push(`uniform ivec2 ${c.name}TexShape;`);
    }
  }), n.enableShapeUniforms) {
    switch (t.logicalShape.length) {
      case 1:
        a.push("uniform int outShape;");
        break;
      case 2:
        a.push("uniform ivec2 outShape;"), a.push("uniform int outShapeStrides;");
        break;
      case 3:
        a.push("uniform ivec3 outShape;"), a.push("uniform ivec2 outShapeStrides;");
        break;
      case 4:
        a.push("uniform ivec4 outShape;"), a.push("uniform ivec3 outShapeStrides;");
        break;
      default:
        break;
    }
    a.push("uniform ivec2 outTexShape;");
  }
  n.customUniforms && n.customUniforms.forEach((c) => {
    a.push(`uniform ${c.type} ${c.name}${c.arrayIndex ? `[${c.arrayIndex}]` : ""};`);
  });
  let r = a.join(`
`), s = e17.map((c) => i9(c, t, n.packedInputs, n.enableShapeUniforms)).join(`
`), i = t.texShape, o = En(), l = u9(o), u, p, d = d9(o);
  return t.isPacked ? (u = o9(t.logicalShape, i, n.enableShapeUniforms), p = c9(o)) : (u = l9(t.logicalShape, i, n.enableShapeUniforms), p = p9(o)), n.packedInputs && (d += g9), [d, l, p, r, u, s, n.userCode].join(`
`);
}
function up(e17, t = false) {
  let n = e17.shapeInfo.logicalShape;
  switch (n.length) {
    case 0:
      return E9(e17, t);
    case 1:
      return A9(e17, t);
    case 2:
      return $9(e17, t);
    case 3:
      return R9(e17, t);
    case 4:
      return O9(e17, t);
    case 5:
      return P9(e17);
    case 6:
      return L9(e17);
    default:
      throw new Error(`${n.length}-D input sampling is not yet supported`);
  }
}
function iA(e17, t) {
  switch (e17.shapeInfo.logicalShape.length) {
    case 0:
      return C9(e17);
    case 1:
      return _9(e17, t);
    case 2:
      return F9(e17, t);
    case 3:
      return D9(e17, t);
    default:
      return M9(e17, t);
  }
}
function i9(e17, t, n = false, a) {
  let r = "";
  n ? r += iA(e17, a) : r += up(e17, a);
  let s = e17.shapeInfo.logicalShape, i = t.logicalShape;
  return s.length <= i.length && (n ? r += z9(e17, t) : r += W9(e17, t)), r;
}
function o9(e17, t, n) {
  switch (e17.length) {
    case 0:
      return oA();
    case 1:
      return b9(e17, t, n);
    case 2:
      return N9(e17, t, n);
    case 3:
      return x9(e17, t, n);
    default:
      return w9(e17, t, n);
  }
}
function l9(e17, t, n) {
  switch (e17.length) {
    case 0:
      return oA();
    case 1:
      return y9(e17, t, n);
    case 2:
      return T9(e17, t, n);
    case 3:
      return v9(e17, t, n);
    case 4:
      return k9(e17, t, n);
    case 5:
      return I9(e17, t);
    case 6:
      return S9(e17, t);
    default:
      throw new Error(`${e17.length}-D output sampling is not yet supported`);
  }
}
function u9(e17) {
  return `
    float sampleTexture(sampler2D textureSampler, vec2 uv) {
      return ${e17.texture2D}(textureSampler, uv).r;
    }
  `;
}
function p9(e17) {
  return `
    void setOutput(float val) {
      ${e17.output} = vec4(val, 0, 0, 0);
    }
  `;
}
function c9(e17) {
  return `
    void setOutput(vec4 val) {
      ${e17.output} = val;
    }
  `;
}
function d9(e17) {
  return `${e17.version}
    precision highp float;
    precision highp int;
    precision highp sampler2D;
    ${e17.varyingFs} vec2 resultUV;
    ${e17.defineOutput}
    const vec2 halfCR = vec2(0.5, 0.5);

    struct ivec5
    {
      int x;
      int y;
      int z;
      int w;
      int u;
    };

    struct ivec6
    {
      int x;
      int y;
      int z;
      int w;
      int u;
      int v;
    };

    uniform float NAN;
    ${e17.defineSpecialNaN}
    ${e17.defineSpecialInf}
    ${e17.defineRound}

    int imod(int x, int y) {
      return x - y * (x / y);
    }

    int idiv(int a, int b, float sign) {
      int res = a / b;
      int mod = imod(a, b);
      if (sign < 0. && mod != 0) {
        res -= 1;
      }
      return res;
    }

    //Based on the work of Dave Hoskins
    //https://www.shadertoy.com/view/4djSRW
    #define HASHSCALE1 443.8975
    float random(float seed){
      vec2 p = resultUV * seed;
      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);
      p3 += dot(p3, p3.yzx + 19.19);
      return fract((p3.x + p3.y) * p3.z);
    }

    ${h9}
    ${m9}
    ${f9}
  `;
}
var h9 = `
vec2 uvFromFlat(int texNumR, int texNumC, int index) {
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {
  int texelIndex = index / 2;
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`;
var m9 = `
vec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,
  int texNumC, int row, int col) {
  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`;
var f9 = `
vec2 packedUVfrom3D(int texNumR, int texNumC,
    int texelsInBatch, int texelsInLogicalRow, int b,
    int row, int col) {
  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`;
var g9 = `
  float getChannel(vec4 frag, vec2 innerDims) {
    vec2 modCoord = mod(innerDims, 2.);
    return modCoord.x == 0. ?
      (modCoord.y == 0. ? frag.r : frag.g) :
      (modCoord.y == 0. ? frag.b : frag.a);
  }
  float getChannel(vec4 frag, int dim) {
    float modCoord = mod(float(dim), 2.);
    return modCoord == 0. ? frag.r : frag.g;
  }
`;
function oA() {
  return `
    int getOutputCoords() {
      return 0;
    }
  `;
}
function b9(e17, t, n) {
  let a = [Math.ceil(t[0] / 2), Math.ceil(t[1] / 2)];
  return a[0] === 1 ? n ? `
      int getOutputCoords() {
        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));
      }
    ` : `
      int getOutputCoords() {
        return 2 * int(resultUV.x * ${a[1]}.0);
      }
    ` : a[1] === 1 ? n ? `
      int getOutputCoords() {
        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));
      }
    ` : `
      int getOutputCoords() {
        return 2 * int(resultUV.y * ${a[0]}.0);
      }
    ` : n ? `
    int getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);
    }
  ` : `
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${a[0]}, ${a[1]}));
      return 2 * (resTexRC.x * ${a[1]} + resTexRC.y);
    }
  `;
}
function y9(e17, t, n) {
  return t[0] === 1 ? n ? `
      int getOutputCoords() {
        return int(resultUV.x * float(outTexShape[1]));
      }
    ` : `
      int getOutputCoords() {
        return int(resultUV.x * ${t[1]}.0);
      }
    ` : t[1] === 1 ? n ? `
      int getOutputCoords() {
        return int(resultUV.y * float(outTexShape[0]));
      }
    ` : `
      int getOutputCoords() {
        return int(resultUV.y * ${t[0]}.0);
      }
    ` : n ? `
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(outTexShape[0], outTexShape[1]));
      return resTexRC.x * outTexShape[1] + resTexRC.y;
    }
  ` : `
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${t[0]}, ${t[1]}));
      return resTexRC.x * ${t[1]} + resTexRC.y;
    }
  `;
}
function x9(e17, t, n) {
  if (n) return `
    ivec3 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));
      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;

      int b = index / texelsInBatch;
      index -= b * texelsInBatch;

      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec3(b, r, c);
    }
  `;
  let a = [Math.ceil(t[0] / 2), Math.ceil(t[1] / 2)], r = Math.ceil(e17[2] / 2), s = r * Math.ceil(e17[1] / 2);
  return `
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${a[0]}, ${a[1]}));
      int index = resTexRC.x * ${a[1]} + resTexRC.y;

      int b = index / ${s};
      index -= b * ${s};

      int r = 2 * (index / ${r});
      int c = imod(index, ${r}) * 2;

      return ivec3(b, r, c);
    }
  `;
}
function v9(e17, t, n) {
  if (n) return `
  ivec3 getOutputCoords() {
    ivec2 resTexRC = ivec2(resultUV.yx *
                           vec2(outTexShape[0], outTexShape[1]));
    int index = resTexRC.x * outTexShape[1] + resTexRC.y;
    ${Wf(["r", "c", "d"], e17)}
    return ivec3(r, c, d);
  }
`;
  let a = Zo(["r", "c", "d"], e17);
  return `
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${t[0]}, ${t[1]}));
      int index = resTexRC.x * ${t[1]} + resTexRC.y;
      ${a}
      return ivec3(r, c, d);
    }
  `;
}
function w9(e17, t, n) {
  if (n) return `
    ivec4 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;

      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));
      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));
      int texelsInBatchN = texelsInBatch * outShape[1];

      int b2 = index / texelsInBatchN;
      index -= b2 * texelsInBatchN;

      int b = index / texelsInBatch;
      index -= b * texelsInBatch;

      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec4(b2, b, r, c);
    }
  `;
  let a = [Math.ceil(t[0] / 2), Math.ceil(t[1] / 2)], r = Math.ceil(e17[e17.length - 1] / 2), s = r * Math.ceil(e17[e17.length - 2] / 2), i = s, o = "", l = "b, r, c";
  for (let u = 2; u < e17.length - 1; u++) i *= e17[e17.length - u - 1], o = `
      int b${u} = index / ${i};
      index -= b${u} * ${i};
    ` + o, l = `b${u}, ` + l;
  return `
    ivec${e17.length} getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${a[0]}, ${a[1]}));
      int index = resTexRC.x * ${a[1]} + resTexRC.y;

      ${o}

      int b = index / ${s};
      index -= b * ${s};

      int r = 2 * (index / ${r});
      int c = imod(index, ${r}) * 2;

      return ivec${e17.length}(${l});
    }
  `;
}
function k9(e17, t, n) {
  if (n) return `
    ivec4 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(outTexShape[0], outTexShape[1]));
      int index = resTexRC.x * outTexShape[1] + resTexRC.y;
      ${Wf(["r", "c", "d", "d2"], e17)}
      return ivec4(r, c, d, d2);
    }
  `;
  let a = Zo(["r", "c", "d", "d2"], e17);
  return `
    ivec4 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${t[0]}, ${t[1]}));
      int index = resTexRC.x * ${t[1]} + resTexRC.y;
      ${a}
      return ivec4(r, c, d, d2);
    }
  `;
}
function I9(e17, t) {
  let n = Zo(["r", "c", "d", "d2", "d3"], e17);
  return `
    ivec5 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},
                             ${t[1]}));

      int index = resTexRC.x * ${t[1]} + resTexRC.y;

      ${n}

      ivec5 outShape = ivec5(r, c, d, d2, d3);
      return outShape;
    }
  `;
}
function S9(e17, t) {
  let n = Zo(["r", "c", "d", "d2", "d3", "d4"], e17);
  return `
    ivec6 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${t[0]}, ${t[1]}));
      int index = resTexRC.x * ${t[1]} + resTexRC.y;

      ${n}

      ivec6 result = ivec6(r, c, d, d2, d3, d4);
      return result;
    }
  `;
}
function N9(e17, t, n) {
  let a = [Math.ceil(t[0] / 2), Math.ceil(t[1] / 2)];
  if (w.arraysEqual(e17, t)) return n ? `
      ivec2 getOutputCoords() {
        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));
      }
    ` : `
      ivec2 getOutputCoords() {
        return 2 * ivec2(resultUV.yx * vec2(${a[0]}, ${a[1]}));
      }
    `;
  let r = Math.ceil(e17[1] / 2);
  return n ? `
    ivec2 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));

      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;
      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec2(r, c);
    }
  ` : `
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${a[0]}, ${a[1]}));

      int index = resTexRC.x * ${a[1]} + resTexRC.y;
      int r = 2 * (index / ${r});
      int c = imod(index, ${r}) * 2;

      return ivec2(r, c);
    }
  `;
}
function T9(e17, t, n) {
  return w.arraysEqual(e17, t) ? n ? `
      ivec2 getOutputCoords() {
        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));
      }
    ` : `
      ivec2 getOutputCoords() {
        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));
      }
    ` : e17[1] === 1 ? n ? `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(outTexShape[0], outTexShape[1]));
        int index = resTexRC.x * outTexShape[1] + resTexRC.y;
        return ivec2(index, 0);
      }
    ` : `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${t[0]}, ${t[1]}));
        int index = resTexRC.x * ${t[1]} + resTexRC.y;
        return ivec2(index, 0);
      }
    ` : e17[0] === 1 ? n ? `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(outTexShape[0], outTexShape[1]));
        int index = resTexRC.x * outTexShape[1] + resTexRC.y;
        return ivec2(0, index);
      }
    ` : `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${t[0]}, ${t[1]}));
        int index = resTexRC.x * ${t[1]} + resTexRC.y;
        return ivec2(0, index);
      }
    ` : n ? `
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(outTexShape[0], outTexShape[1]));
      int index = resTexRC.x * outTexShape[1] + resTexRC.y;
      int r = index / outShape[1];
      int c = index - r * outShape[1];
      return ivec2(r, c);
    }
  ` : `
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${t[0]}, ${t[1]}));
      int index = resTexRC.x * ${t[1]} + resTexRC.y;
      int r = index / ${e17[1]};
      int c = index - r * ${e17[1]};
      return ivec2(r, c);
    }
  `;
}
function Jo(e17) {
  return `offset${e17}`;
}
function C9(e17) {
  let t = e17.name, n = "get" + t.charAt(0).toUpperCase() + t.slice(1), a = En();
  return `
    vec4 ${n}() {
      return ${a.texture2D}(${t}, halfCR);
    }
  `;
}
function E9(e17, t) {
  let n = e17.name, a = "get" + n.charAt(0).toUpperCase() + n.slice(1);
  if (e17.shapeInfo.isUniform) return `float ${a}() {return ${n};}`;
  let [r, s] = e17.shapeInfo.texShape;
  if (r === 1 && s === 1) return `
      float ${a}() {
        return sampleTexture(${n}, halfCR);
      }
    `;
  let i = Jo(n);
  if (t) return `
    float ${a}() {
      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], ${i});
      return sampleTexture(${n}, uv);
    }
  `;
  let [o, l] = e17.shapeInfo.texShape;
  return `
    float ${a}() {
      vec2 uv = uvFromFlat(${o}, ${l}, ${i});
      return sampleTexture(${n}, uv);
    }
  `;
}
function _9(e17, t) {
  let n = e17.name, a = "get" + n.charAt(0).toUpperCase() + n.slice(1), r = e17.shapeInfo.texShape, s = En();
  if (t) return `
    vec4 ${a}(int index) {
      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));
      vec2 uv = packedUVfrom1D(
        packedTexShape[0], packedTexShape[1], index);
      return ${s.texture2D}(${n}, uv);
    }
  `;
  let i = [Math.ceil(r[0] / 2), Math.ceil(r[1] / 2)];
  return `
    vec4 ${a}(int index) {
      vec2 uv = packedUVfrom1D(
        ${i[0]}, ${i[1]}, index);
      return ${s.texture2D}(${n}, uv);
    }
  `;
}
function A9(e17, t) {
  let n = e17.name, a = "get" + n.charAt(0).toUpperCase() + n.slice(1);
  if (e17.shapeInfo.isUniform) return `
      float ${a}(int index) {
        ${pp(e17)}
      }
    `;
  let r = e17.shapeInfo.texShape, s = r[0], i = r[1];
  if (i === 1 && s === 1) return `
      float ${a}(int index) {
        return sampleTexture(${n}, halfCR);
      }
    `;
  let o = Jo(n);
  return i === 1 ? t ? `
      float ${a}(int index) {
        vec2 uv = vec2(0.5, (float(index + ${o}) + 0.5) / float(${n}TexShape[0]));
        return sampleTexture(${n}, uv);
      }
    ` : `
      float ${a}(int index) {
        vec2 uv = vec2(0.5, (float(index + ${o}) + 0.5) / ${s}.0);
        return sampleTexture(${n}, uv);
      }
    ` : s === 1 ? t ? `
      float ${a}(int index) {
        vec2 uv = vec2((float(index + ${o}) + 0.5) / float(${n}TexShape[1]), 0.5);
        return sampleTexture(${n}, uv);
      }
    ` : `
      float ${a}(int index) {
        vec2 uv = vec2((float(index + ${o}) + 0.5) / ${i}.0, 0.5);
        return sampleTexture(${n}, uv);
      }
    ` : t ? `
    float ${a}(int index) {
      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], index + ${o});
      return sampleTexture(${n}, uv);
    }
  ` : `
    float ${a}(int index) {
      vec2 uv = uvFromFlat(${s}, ${i}, index + ${o});
      return sampleTexture(${n}, uv);
    }
  `;
}
function F9(e17, t) {
  let n = e17.shapeInfo.logicalShape, a = e17.name, r = "get" + a.charAt(0).toUpperCase() + a.slice(1), s = e17.shapeInfo.texShape, i = s[0], o = s[1], l = En();
  if (s != null && w.arraysEqual(n, s)) return t ? `
      vec4 ${r}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${a}TexShape[1], ${a}TexShape[0]);

        return ${l.texture2D}(${a}, uv);
      }
    ` : `
      vec4 ${r}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${o}.0, ${i}.0);

        return ${l.texture2D}(${a}, uv);
      }
    `;
  if (t) return `
    vec4 ${r}(int row, int col) {
      ivec2 packedTexShape = ivec2(ceil(float(${a}TexShape[0]) / 2.0), ceil(float(${a}TexShape[1]) / 2.0));
      int valuesPerRow = int(ceil(float(${a}Shape[1]) / 2.0));
      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);
      return ${l.texture2D}(${a}, uv);
    }
  `;
  let u = [Math.ceil(s[0] / 2), Math.ceil(s[1] / 2)], p = Math.ceil(n[1] / 2);
  return `
    vec4 ${r}(int row, int col) {
      vec2 uv = packedUVfrom2D(${p}, ${u[0]}, ${u[1]}, row, col);
      return ${l.texture2D}(${a}, uv);
    }
  `;
}
function $9(e17, t) {
  let n = e17.shapeInfo.logicalShape, a = e17.name, r = "get" + a.charAt(0).toUpperCase() + a.slice(1), s = e17.shapeInfo.texShape;
  if (s != null && w.arraysEqual(n, s)) {
    if (t) return `
      float ${r}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${a}TexShape[1], ${a}TexShape[0]);
        return sampleTexture(${a}, uv);
      }
    `;
    let c = s[0], h = s[1];
    return `
    float ${r}(int row, int col) {
      vec2 uv = (vec2(col, row) + halfCR) / vec2(${h}.0, ${c}.0);
      return sampleTexture(${a}, uv);
    }
  `;
  }
  let { newShape: i, keptDims: o } = w.squeezeShape(n), l = i;
  if (l.length < n.length) {
    let c = cp(e17, l), h = ["row", "col"];
    return `
      ${up(c, t)}
      float ${r}(int row, int col) {
        return ${r}(${dp(h, o)});
      }
    `;
  }
  if (e17.shapeInfo.isUniform) return `
      float ${r}(int row, int col) {
        int index = round(dot(vec2(row, col), vec2(${n[1]}, 1)));
        ${pp(e17)}
      }
    `;
  let u = s[0], p = s[1], d = Jo(a);
  return p === 1 ? t ? `
      float ${r}(int row, int col) {
        float index = dot(vec3(row, col, ${d}), vec3(${a}Shape[1], 1, 1));
        vec2 uv = vec2(0.5, (index + 0.5) / float(${a}TexShape[0]));
        return sampleTexture(${a}, uv);
      }
    ` : `
    float ${r}(int row, int col) {
      float index = dot(vec3(row, col, ${d}), vec3(${n[1]}, 1, 1));
      vec2 uv = vec2(0.5, (index + 0.5) / ${u}.0);
      return sampleTexture(${a}, uv);
    }
  ` : u === 1 ? t ? `
      float ${r}(int row, int col) {
        float index = dot(vec3(row, col, ${d}), vec3(${a}Shape[1], 1, 1));
        vec2 uv = vec2((index + 0.5) / float(${a}TexShape[1]), 0.5);
        return sampleTexture(${a}, uv);
      }
    ` : `
    float ${r}(int row, int col) {
      float index = dot(vec3(row, col, ${d}), vec3(${n[1]}, 1, 1));
      vec2 uv = vec2((index + 0.5) / ${p}.0, 0.5);
      return sampleTexture(${a}, uv);
    }
  ` : t ? `
      float ${r}(int row, int col) {
        // Explicitly use integer operations as dot() only works on floats.
        int index = row * ${a}Shape[1] + col + ${d};
        vec2 uv = uvFromFlat(${a}TexShape[0], ${a}TexShape[1], index);
        return sampleTexture(${a}, uv);
      }
    ` : `
  float ${r}(int row, int col) {
    // Explicitly use integer operations as dot() only works on floats.
    int index = row * ${n[1]} + col + ${d};
    vec2 uv = uvFromFlat(${u}, ${p}, index);
    return sampleTexture(${a}, uv);
  }
`;
}
function D9(e17, t) {
  let n = e17.shapeInfo.logicalShape, a = e17.name, r = "get" + a.charAt(0).toUpperCase() + a.slice(1), s = e17.shapeInfo.texShape, i = [Math.ceil(s[0] / 2), Math.ceil(s[1] / 2)];
  if (n[0] === 1) {
    let c = n.slice(1), h = [1, 2], m = cp(e17, c), f = ["b", "row", "col"];
    return `
        ${iA(m, t)}
        vec4 ${r}(int b, int row, int col) {
          return ${r}(${dp(f, h)});
        }
      `;
  }
  let o = En();
  if (t) return `
    vec4 ${r}(int b, int row, int col) {
      ivec2 packedTexShape = ivec2(ceil(float(${a}TexShape[0]) / 2.0), ceil(float(${a}TexShape[1]) / 2.0));
      int valuesPerRow = int(ceil(float(${a}Shape[2]) / 2.0));
      int texelsInBatch = valuesPerRow * int(ceil(float(${a}Shape[1]) / 2.0));
      vec2 uv = packedUVfrom3D(
        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);
      return ${o.texture2D}(${a}, uv);
    }
  `;
  let l = i[0], u = i[1], p = Math.ceil(n[2] / 2), d = p * Math.ceil(n[1] / 2);
  return `
    vec4 ${r}(int b, int row, int col) {
      vec2 uv = packedUVfrom3D(
        ${l}, ${u}, ${d}, ${p}, b, row, col);
      return ${o.texture2D}(${a}, uv);
    }
  `;
}
function R9(e17, t) {
  let n = e17.shapeInfo.logicalShape, a = e17.name, r = "get" + a.charAt(0).toUpperCase() + a.slice(1), s = n[1] * n[2], i = n[2], { newShape: o, keptDims: l } = w.squeezeShape(n), u = o;
  if (u.length < n.length) {
    let f = cp(e17, u), g = ["row", "col", "depth"];
    return `
        ${up(f, t)}
        float ${r}(int row, int col, int depth) {
          return ${r}(${dp(g, l)});
        }
      `;
  }
  if (e17.shapeInfo.isUniform) return `
      float ${r}(int row, int col, int depth) {
        int index = round(dot(vec3(row, col, depth),
                          vec3(${s}, ${i}, 1)));
        ${pp(e17)}
      }
    `;
  let p = e17.shapeInfo.texShape, d = p[0], c = p[1], h = e17.shapeInfo.flatOffset;
  if (c === s && h == null) return t ? `
      float ${r}(int row, int col, int depth) {
        int stride1 = ${a}Shape[2];
        float texR = float(row);
        float texC = dot(vec2(col, depth), vec2(stride1, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${a}TexShape[1], ${a}TexShape[0]);
        return sampleTexture(${a}, uv);
      }
    ` : `
        float ${r}(int row, int col, int depth) {
          float texR = float(row);
          float texC = dot(vec2(col, depth), vec2(${i}, 1));
          vec2 uv = (vec2(texC, texR) + halfCR) /
                     vec2(${c}.0, ${d}.0);
          return sampleTexture(${a}, uv);
        }
      `;
  if (c === i && h == null) return t ? `
      float ${r}(int row, int col, int depth) {
        float texR = dot(vec2(row, col), vec2(${a}Shape[1], 1));
        float texC = float(depth);
        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${a}TexShape[1], ${a}TexShape[0]);
        return sampleTexture(${a}, uv);
      }
    ` : `
    float ${r}(int row, int col, int depth) {
      float texR = dot(vec2(row, col), vec2(${n[1]}, 1));
      float texC = float(depth);
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${c}.0, ${d}.0);
      return sampleTexture(${a}, uv);
    }
  `;
  let m = Jo(a);
  return t ? `
    float ${r}(int row, int col, int depth) {
      // Explicitly use integer operations as dot() only works on floats.
      int stride0 = ${a}Shape[1] * ${a}Shape[2];
      int stride1 = ${a}Shape[2];
      int index = row * stride0 + col * stride1 + depth + ${m};
      vec2 uv = uvFromFlat(${a}TexShape[0], ${a}TexShape[1], index);
      return sampleTexture(${a}, uv);
    }
    ` : `
      float ${r}(int row, int col, int depth) {
        // Explicitly use integer operations as dot() only works on floats.
        int index = row * ${s} + col * ${i} + depth + ${m};
        vec2 uv = uvFromFlat(${d}, ${c}, index);
        return sampleTexture(${a}, uv);
      }
  `;
}
function M9(e17, t) {
  let n = e17.name, a = "get" + n.charAt(0).toUpperCase() + n.slice(1), r = En();
  if (t) return `
    vec4 ${a}(int b2, int b, int row, int col) {
      int valuesPerRow = int(ceil(float(${n}Shape[3]) / 2.0));
      int texelsInBatch = valuesPerRow * int(ceil(float(${n}Shape[2]) / 2.0));
      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);
      texelsInBatch *= ${n}Shape[1];
      index = b2 * texelsInBatch + index;
      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));
      int texR = index / packedTexShape[1];
      int texC = index - texR * packedTexShape[1];
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${r.texture2D}(${n}, uv);
    }
  `;
  let s = e17.shapeInfo.logicalShape, i = s.length, o = e17.shapeInfo.texShape, l = [Math.ceil(o[0] / 2), Math.ceil(o[1] / 2)], u = l[0], p = l[1], d = Math.ceil(s[i - 1] / 2), c = d * Math.ceil(s[i - 2] / 2), h = "int b, int row, int col", m = `b * ${c} + (row / 2) * ${d} + (col / 2)`;
  for (let f = 2; f < i - 1; f++) h = `int b${f}, ` + h, c *= s[i - f - 1], m = `b${f} * ${c} + ` + m;
  return `
    vec4 ${a}(${h}) {
      int index = ${m};
      int texR = index / ${p};
      int texC = index - texR * ${p};
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${p}, ${u});
      return ${r.texture2D}(${n}, uv);
    }
  `;
}
function O9(e17, t) {
  let n = e17.shapeInfo.logicalShape, a = e17.name, r = "get" + a.charAt(0).toUpperCase() + a.slice(1), s = n[3], i = n[2] * s, o = n[1] * i, { newShape: l, keptDims: u } = w.squeezeShape(n);
  if (l.length < n.length) {
    let y = cp(e17, l), x = ["row", "col", "depth", "depth2"];
    return `
      ${up(y, t)}
      float ${r}(int row, int col, int depth, int depth2) {
        return ${r}(${dp(x, u)});
      }
    `;
  }
  if (e17.shapeInfo.isUniform) return `
      float ${r}(int row, int col, int depth, int depth2) {
        int index = round(dot(vec4(row, col, depth, depth2),
                          vec4(${o}, ${i}, ${s}, 1)));
        ${pp(e17)}
      }
    `;
  let p = e17.shapeInfo.flatOffset, d = e17.shapeInfo.texShape, c = d[0], h = d[1], m = `int stride2 = ${a}Shape[3];`, f = `int stride1 = ${a}Shape[2] * stride2;`, g = `int stride0 = ${a}Shape[1] * stride1;`;
  if (h === o && p == null) return t ? `
      float ${r}(int row, int col, int depth, int depth2) {
        ${m}
        ${f}
        float texR = float(row);
        float texC =
            dot(vec3(col, depth, depth2),
                vec3(stride1, stride2, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${a}TexShape[1], ${a}TexShape[0]);
        return sampleTexture(${a}, uv);
      }
    ` : `
      float ${r}(int row, int col, int depth, int depth2) {
        float texR = float(row);
        float texC =
            dot(vec3(col, depth, depth2),
                vec3(${i}, ${s}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${h}.0, ${c}.0);
        return sampleTexture(${a}, uv);
      }
    `;
  if (h === s && p == null) return t ? `
      float ${r}(int row, int col, int depth, int depth2) {
        float texR = dot(vec3(row, col, depth),
                         vec3(${a}Shape[1] * ${a}Shape[2], ${a}Shape[2], 1));
        float texC = float(depth2);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${a}TexShape[1], ${a}TexShape[0]);
        return sampleTexture(${a}, uv);
      }
    ` : `
      float ${r}(int row, int col, int depth, int depth2) {
        float texR = dot(vec3(row, col, depth),
                         vec3(${n[1] * n[2]}, ${n[2]}, 1));
        float texC = float(depth2);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${h}.0, ${c}.0);
        return sampleTexture(${a}, uv);
      }
    `;
  let b = Jo(a);
  return t ? `
    float ${r}(int row, int col, int depth, int depth2) {
      // Explicitly use integer operations as dot() only works on floats.
      ${m}
      ${f}
      ${g}
      int index = row * stride0 + col * stride1 +
          depth * stride2 + depth2;
      vec2 uv = uvFromFlat(${a}TexShape[0], ${a}TexShape[1], index + ${b});
      return sampleTexture(${a}, uv);
    }
  ` : `
    float ${r}(int row, int col, int depth, int depth2) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${o} + col * ${i} +
          depth * ${s} + depth2;
      vec2 uv = uvFromFlat(${c}, ${h}, index + ${b});
      return sampleTexture(${a}, uv);
    }
  `;
}
function P9(e17) {
  let t = e17.shapeInfo.logicalShape, n = e17.name, a = "get" + n.charAt(0).toUpperCase() + n.slice(1), r = t[4], s = t[3] * r, i = t[2] * s, o = t[1] * i, { newShape: l, keptDims: u } = w.squeezeShape(t);
  if (l.length < t.length) {
    let f = cp(e17, l), g = ["row", "col", "depth", "depth2", "depth3"];
    return `
      ${up(f)}
      float ${a}(int row, int col, int depth, int depth2, int depth3) {
        return ${a}(${dp(g, u)});
      }
    `;
  }
  if (e17.shapeInfo.isUniform) return `
      float ${a}(int row, int col, int depth, int depth2, int depth3) {
        float index = dot(
          vec4(row, col, depth, depth2),
          vec4(${o}, ${i}, ${s}, ${r})) +
          depth3;
        ${pp(e17)}
      }
    `;
  let p = e17.shapeInfo.flatOffset, d = e17.shapeInfo.texShape, c = d[0], h = d[1];
  if (h === o && p == null) return `
      float ${a}(int row, int col, int depth, int depth2, int depth3) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
                         vec4(${i}, ${s}, ${r}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${h}.0, ${c}.0);
        return sampleTexture(${n}, uv);
      }
    `;
  if (h === r && p == null) return `
      float ${a}(int row, int col, int depth, int depth2, int depth3) {
        float texR = dot(
          vec4(row, col, depth, depth2),
          vec4(${t[1] * t[2] * t[3]},
               ${t[2] * t[3]}, ${t[3]}, 1));
        int texC = depth3;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${h}.0, ${c}.0);
        return sampleTexture(${n}, uv);
      }
    `;
  let m = Jo(n);
  return `
    float ${a}(int row, int col, int depth, int depth2, int depth3) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${o} + col * ${i} + depth * ${s} +
          depth2 * ${r} + depth3 + ${m};
      vec2 uv = uvFromFlat(${c}, ${h}, index);
      return sampleTexture(${n}, uv);
    }
  `;
}
function L9(e17) {
  let t = e17.shapeInfo.logicalShape, n = e17.name, a = "get" + n.charAt(0).toUpperCase() + n.slice(1), { newShape: r, keptDims: s } = w.squeezeShape(t);
  if (r.length < t.length) {
    let g = cp(e17, r), b = ["row", "col", "depth", "depth2", "depth3", "depth4"];
    return `
      ${up(g)}
      float ${a}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        return ${a}(${dp(b, s)});
      }
    `;
  }
  let i = t[5], o = t[4] * i, l = t[3] * o, u = t[2] * l, p = t[1] * u;
  if (e17.shapeInfo.isUniform) return `
      float ${a}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
        int index = round(dot(
          vec4(row, col, depth, depth2),
          vec4(${p}, ${u}, ${l}, ${o})) +
          dot(
            vec2(depth3, depth4),
            vec2(${i}, 1)));
        ${pp(e17)}
      }
    `;
  let d = e17.shapeInfo.flatOffset, c = e17.shapeInfo.texShape, h = c[0], m = c[1];
  if (m === p && d == null) return `
      float ${a}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
          vec4(${u}, ${l}, ${o}, ${i})) +
               float(depth4);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${m}.0, ${h}.0);
        return sampleTexture(${n}, uv);
      }
    `;
  if (m === i && d == null) return `
      float ${a}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        float texR = dot(vec4(row, col, depth, depth2),
          vec4(${t[1] * t[2] * t[3] * t[4]},
               ${t[2] * t[3] * t[4]},
               ${t[3] * t[4]},
               ${t[4]})) + float(depth3);
        int texC = depth4;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${m}.0, ${h}.0);
        return sampleTexture(${n}, uv);
      }
    `;
  let f = Jo(n);
  return `
    float ${a}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${p} + col * ${u} + depth * ${l} +
          depth2 * ${o} + depth3 * ${i} + depth4 + ${f};
      vec2 uv = uvFromFlat(${h}, ${m}, index);
      return sampleTexture(${n}, uv);
    }
  `;
}
function pp(e17) {
  let t = e17.name, n = w.sizeFromShape(e17.shapeInfo.logicalShape);
  return n < 2 ? `return ${t};` : `
    for (int i = 0; i < ${n}; i++) {
      if (i == index) {
        return ${t}[i];
      }
    }
  `;
}
function z9(e17, t) {
  let n = e17.name, a = n.charAt(0).toUpperCase() + n.slice(1), r = "get" + a + "AtOutCoords", s = e17.shapeInfo.logicalShape.length, i = t.logicalShape.length, o = sA(e17.shapeInfo.logicalShape, t.logicalShape), l = ht(i), u = i - s, p, d = ["x", "y", "z", "w", "u", "v"];
  s === 0 ? p = "" : i < 2 && o.length >= 1 ? p = "coords = 0;" : p = o.map((g) => `coords.${d[g + u]} = 0;`).join(`
`);
  let c = "";
  i < 2 && s > 0 ? c = "coords" : c = e17.shapeInfo.logicalShape.map((g, b) => `coords.${d[b + u]}`).join(", ");
  let h = "return outputValue;", m = w.sizeFromShape(e17.shapeInfo.logicalShape) === 1, f = w.sizeFromShape(t.logicalShape) === 1;
  if (s === 1 && !m && !f) h = `
      return vec4(outputValue.xy, outputValue.xy);
    `;
  else if (m && !f) i === 1 ? h = `
        return vec4(outputValue.x, outputValue.x, 0., 0.);
      ` : h = `
        return vec4(outputValue.x);
      `;
  else if (o.length) {
    let g = s - 2, b = s - 1;
    o.indexOf(g) > -1 && o.indexOf(b) > -1 ? h = "return vec4(outputValue.x);" : o.indexOf(g) > -1 ? h = "return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);" : o.indexOf(b) > -1 && (h = "return vec4(outputValue.xx, outputValue.zz);");
  }
  return `
    vec4 ${r}() {
      ${l} coords = getOutputCoords();
      ${p}
      vec4 outputValue = get${a}(${c});
      ${h}
    }
  `;
}
function W9(e17, t) {
  let n = e17.name, a = n.charAt(0).toUpperCase() + n.slice(1), r = "get" + a + "AtOutCoords", s = t.texShape, i = e17.shapeInfo.texShape, o = e17.shapeInfo.logicalShape.length, l = t.logicalShape.length;
  if (!e17.shapeInfo.isUniform && o === l && e17.shapeInfo.flatOffset == null && w.arraysEqual(i, s)) return `
      float ${r}() {
        return sampleTexture(${n}, resultUV);
      }
    `;
  let u = ht(l), p = sA(e17.shapeInfo.logicalShape, t.logicalShape), d = l - o, c, h = ["x", "y", "z", "w", "u", "v"];
  o === 0 ? c = "" : l < 2 && p.length >= 1 ? c = "coords = 0;" : c = p.map((f) => `coords.${h[f + d]} = 0;`).join(`
`);
  let m = "";
  return l < 2 && o > 0 ? m = "coords" : m = e17.shapeInfo.logicalShape.map((f, g) => `coords.${h[g + d]}`).join(", "), `
    float ${r}() {
      ${u} coords = getOutputCoords();
      ${c}
      return get${a}(${m});
    }
  `;
}
function ht(e17) {
  if (e17 <= 1) return "int";
  if (e17 === 2) return "ivec2";
  if (e17 === 3) return "ivec3";
  if (e17 === 4) return "ivec4";
  if (e17 === 5) return "ivec5";
  if (e17 === 6) return "ivec6";
  throw Error(`GPU for rank ${e17} is not yet supported`);
}
function tk(e17, t, n) {
  let { newShape: a, keptDims: r } = w.squeezeShape(t), s = t.length, i = e17 && s === 3 && t[0] === 1, o = i ? t.slice(1) : a, l = !e17 && s > 1 && !w.arraysEqual(t, n) && a.length < s || i;
  return { useSqueezeShape: l, uniformShape: l ? o : t, keptDims: r };
}
function cp(e17, t) {
  let n = JSON.parse(JSON.stringify(e17));
  return n.shapeInfo.logicalShape = t, n;
}
function dp(e17, t) {
  return t.map((n) => e17[n]).join(", ");
}
function B9(e17, t, n, a) {
  let r = n.map((p, d) => {
    let c = { logicalShape: p.shape, texShape: p.isUniform ? null : p.texData.texShape, isUniform: p.isUniform, isPacked: p.isUniform ? false : p.texData.isPacked, flatOffset: null };
    return p.texData != null && p.texData.slice != null && p.texData.slice.flatOffset > 0 && (c.flatOffset = p.texData.slice.flatOffset), { name: t.variableNames[d], shapeInfo: c };
  }), s = r.map((p) => p.shapeInfo), i = { logicalShape: a.shape, texShape: a.texData.texShape, isUniform: false, isPacked: a.texData.isPacked, flatOffset: null }, o = s9(r, i, t), l = P_(e17.gl, o), u = e17.createProgram(l);
  return G().get("ENGINE_COMPILE_ONLY") ? { program: t, fragmentShader: l, source: o, webGLProgram: u, inShapeInfos: s, outShapeInfo: i, variablesLocations: null, customUniformLocations: null, infLoc: null, nanLoc: null, outShapeLocation: null, outShapeStridesLocation: null, outTexShapeLocation: null } : (e17.buildVao(u), Object.assign({ program: t, fragmentShader: l, source: o, webGLProgram: u, inShapeInfos: s, outShapeInfo: i }, lA(e17, t, u)));
}
function lA(e17, t, n) {
  let a = [], r = [], s, i, o, l = null, u = null;
  u = e17.getUniformLocation(n, "NAN", false), G().getNumber("WEBGL_VERSION") === 1 && (l = e17.getUniformLocation(n, "INFINITY", false));
  let p = false;
  for (let d of t.variableNames) {
    let c = { name: d, uniform: e17.getUniformLocation(n, d, p), offset: e17.getUniformLocation(n, `offset${d}`, p) };
    t.enableShapeUniforms && (c.shape = e17.getUniformLocation(n, `${d}Shape`, p), c.texShape = e17.getUniformLocation(n, `${d}TexShape`, p)), a.push(c);
  }
  if (t.enableShapeUniforms && (s = e17.getUniformLocation(n, "outShape", p), o = e17.getUniformLocation(n, "outShapeStrides", p), i = e17.getUniformLocation(n, "outTexShape", p)), t.customUniforms) for (let d of t.customUniforms) r.push(e17.getUniformLocation(n, d.name, p));
  return { variablesLocations: a, customUniformLocations: r, infLoc: l, nanLoc: u, outShapeLocation: s, outShapeStridesLocation: o, outTexShapeLocation: i };
}
function nS(e17, t) {
  if (e17.length !== t.length) throw Error(`Binary was compiled with ${e17.length} inputs, but was executed with ${t.length} inputs`);
  e17.forEach((n, a) => {
    let r = n.logicalShape, s = t[a], i = s.shape;
    if (!w.arraysEqual(r, i)) throw Error(`Binary was compiled with different shapes than the current args. Shapes ${r} and ${i} must match`);
    if (n.isUniform && s.isUniform) return;
    let o = n.texShape, l = s.isUniform ? null : s.texData.texShape;
    if (!w.arraysEqual(o, l)) throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${o} and ${l} must match`);
  });
}
function V9(e17, t, n, a, r) {
  t.program.enableShapeUniforms || (nS(t.inShapeInfos, n), nS([t.outShapeInfo], [a]));
  let s = a.texData.texture, i = a.texData.texShape;
  a.texData.isPacked ? e17.setOutputPackedMatrixTexture(s.texture, i[0], i[1]) : e17.setOutputMatrixTexture(s.texture, i[0], i[1]), e17.setProgram(t.webGLProgram), e17.bindVertexArray(t.webGLProgram.vao), G().getNumber("WEBGL_VERSION") === 1 && t.infLoc !== null && e17.gl.uniform1f(t.infLoc, 1 / 0), t.nanLoc !== null && e17.gl.uniform1f(t.nanLoc, NaN);
  for (let l = 0; l < n.length; ++l) {
    let u = n[l], { uniform: p, offset: d, shape: c, texShape: h } = t.variablesLocations[l];
    if (c) {
      let { uniformShape: m } = tk(t.program.packedInputs, u.shape, u.texData.texShape);
      switch (m.length) {
        case 1:
          e17.gl.uniform1iv(c, new Int32Array(m));
          break;
        case 2:
          e17.gl.uniform2iv(c, new Int32Array(m));
          break;
        case 3:
          e17.gl.uniform3iv(c, new Int32Array(m));
          break;
        case 4:
          e17.gl.uniform4iv(c, new Int32Array(m));
          break;
        default:
          break;
      }
    }
    if (h && e17.gl.uniform2i(h, u.texData.texShape[0], u.texData.texShape[1]), p != null) {
      if (u.isUniform) {
        if (w.sizeFromShape(u.shape) < 2) e17.gl.uniform1f(p, u.uniformValues[0]);
        else {
          let m = u.uniformValues;
          m instanceof Float32Array || (m = new Float32Array(m)), e17.gl.uniform1fv(p, m);
        }
        continue;
      }
      u.texData.slice != null && d != null && e17.gl.uniform1i(d, u.texData.slice.flatOffset), e17.setInputMatrixTexture(u.texData.texture.texture, p, l);
    }
  }
  let o = t.outShapeLocation;
  if (o) switch (a.shape.length) {
    case 1:
      e17.gl.uniform1iv(o, new Int32Array(a.shape));
      break;
    case 2:
      e17.gl.uniform2iv(o, new Int32Array(a.shape));
      break;
    case 3:
      e17.gl.uniform3iv(o, new Int32Array(a.shape));
      break;
    case 4:
      e17.gl.uniform4iv(o, new Int32Array(a.shape));
      break;
    default:
      break;
  }
  if (t.outShapeStridesLocation) {
    let l = w.computeStrides(a.shape);
    switch (a.shape.length) {
      case 2:
        e17.gl.uniform1iv(t.outShapeStridesLocation, new Int32Array(l));
        break;
      case 3:
        e17.gl.uniform2iv(t.outShapeStridesLocation, new Int32Array(l));
        break;
      case 4:
        e17.gl.uniform3iv(t.outShapeStridesLocation, new Int32Array(l));
        break;
      default:
        break;
    }
  }
  if (t.outTexShapeLocation && e17.gl.uniform2i(t.outTexShapeLocation, a.texData.texShape[0], a.texData.texShape[1]), t.program.customUniforms && r) for (let l = 0; l < t.program.customUniforms.length; ++l) {
    let u = t.program.customUniforms[l], p = t.customUniformLocations[l], d = r[l];
    if (u.type === "float") e17.gl.uniform1fv(p, d);
    else if (u.type === "vec2") e17.gl.uniform2fv(p, d);
    else if (u.type === "vec3") e17.gl.uniform3fv(p, d);
    else if (u.type === "vec4") e17.gl.uniform4fv(p, d);
    else if (u.type === "int") e17.gl.uniform1iv(p, d);
    else if (u.type === "ivec2") e17.gl.uniform2iv(p, d);
    else if (u.type === "ivec3") e17.gl.uniform3iv(p, d);
    else if (u.type === "ivec4") e17.gl.uniform4iv(p, d);
    else throw Error(`uniform type ${u.type} is not supported yet.`);
  }
  e17.executeProgram();
}
function U9(e17, t, n) {
  let a = "";
  t.concat(n).forEach((i) => {
    let o = i.texData != null && i.texData.slice != null && i.texData.slice.flatOffset > 0;
    if (e17.enableShapeUniforms && !i.isUniform) {
      let l = i.texData.texShape, { useSqueezeShape: u, uniformShape: p, keptDims: d } = tk(e17.packedInputs, i.shape, l), c = "", h = "", m = "";
      if (p.length === 1 && e17.packedInputs) {
        let I = [Math.ceil(l[0] / 2), Math.ceil(l[1] / 2)];
        c = `${I[0] > 1}_${I[1] > 1}`;
      } else if (p.length === 2 && !e17.packedInputs) h = `${p[0] > 1}_${p[1] > 1}`;
      else if (p.length > 2 && !e17.packedInputs) {
        let I = w.computeStrides(p);
        m = `${I[0] === l[1]}_${I[I.length - 1] === l[1]}`;
      }
      let f = i.shape.length, g = p.length === 2 && w.arraysEqual(i.shape, l), b = w.sizeFromShape(i.shape) === 1, y = T.getBroadcastDims(i.shape, n.shape), x = !e17.packedInputs && f === n.shape.length && w.arraysEqual(l, n.texData.texShape), v = e17.packedInputs || p.length > 2 ? "" : `${l[0] > 1}_${l[1] > 1}`;
      a += `${f}_${x}_${u ? d : ""}_${p.length}_${b}_${y}_${g}_${c}_${h}_${m}_${v}_${o}`;
    } else {
      let l = i.isUniform ? "uniform" : i.texData.texShape;
      a += `${i.shape}_${l}_${o}`;
    }
  });
  let r = e17.userCode, s = e17.constructor.name;
  return s += "_" + a + "_" + r + `${G().getNumber("WEBGL_VERSION")}`, s;
}
function vn(e17) {
  return G().getBool("WEBGL_USE_SHAPES_UNIFORMS") && e17 <= 4;
}
var G9 = class {
  constructor(e17) {
    this.variableNames = ["A"], this.packedInputs = false, this.packedOutput = true, this.outPackingScheme = Nc.DENSE, this.customUniforms = [{ name: "texShape", type: "ivec2" }];
    let t = En();
    this.outputShape = e17, this.enableShapeUniforms = vn(this.outputShape.length), this.userCode = `
      ivec3 outCoordsFromFlatIndex(int index) {
        ${this.enableShapeUniforms ? Wf(["r", "c", "d"], e17) : Zo(["r", "c", "d"], e17)}
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));
        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getA(rc.x, rc.y, rc.z);
        }

        ${t.output} = result;
      }
    `;
  }
};
var H9 = class {
  constructor(e17) {
    this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = true, this.outPackingScheme = Nc.DENSE, this.customUniforms = [{ name: "texShape", type: "ivec2" }];
    let t = En();
    this.outputShape = e17, this.enableShapeUniforms = vn(this.outputShape.length), this.userCode = `
      ivec3 outCoordsFromFlatIndex(int index) {
        ${this.enableShapeUniforms ? Wf(["r", "c", "d"], e17) : Zo(["r", "c", "d"], e17)}
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));
        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));
        }

        ${t.output} = result;
      }
    `;
  }
};
var j9 = class {
  constructor(e17) {
    this.variableNames = ["A"], this.outTexUsage = ca.DOWNLOAD;
    let t = En();
    this.outputShape = e17, this.userCode = `
      ${rA}

      void main() {
        float x = getAAtOutCoords();
        ${t.output} = encode_float(x);
      }
    `;
  }
};
var q9 = class {
  constructor(e17) {
    this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = false, this.outTexUsage = ca.DOWNLOAD;
    let t = En();
    this.outputShape = e17, this.userCode = `
      ${rA}

      void main() {
        ivec3 coords = getOutputCoords();
        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));
        ${t.output} = encode_float(x);
      }
    `;
  }
};
var K9 = { R: 0, G: 1, B: 2, A: 3 };
var aS = class {
  constructor(e17, t = false, n = "RGBA") {
    this.variableNames = ["A"], this.customUniforms = [{ name: "texShape", type: "ivec2" }];
    let a = En();
    this.outputShape = e17, this.enableShapeUniforms = vn(this.outputShape.length);
    let r = "result";
    t && (r = "floor(result * 255. + 0.5)");
    let s = "";
    for (let i = 0; i < n.length; i++) {
      let o = n[i];
      s += `
          if(offset == ${i}) {
            result = values[${K9[o]}];
          }`;
    }
    this.userCode = `
      ${this.enableShapeUniforms ? ek() : Q1(e17)}

      void main() {
        ivec3 coords = getOutputCoords();
        int flatIndex = getFlatIndex(coords);
        float result = 0.;
        int offset = imod(flatIndex, ${n.length});

        flatIndex = idiv(flatIndex, ${n.length}, 1.);

        int r = flatIndex / texShape[1];
        if (r < texShape[0]) {
          int c = imod(flatIndex, texShape[1]);
          vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);
          vec4 values = ${a.texture2D}(A, uv);
          ${s}
        }
        ${a.output} = vec4(${r}, 0., 0., 0.);
      }
    `;
  }
};
var X9 = class {
  constructor(e17, t = false) {
    this.variableNames = ["A"], this.packedInputs = false, this.packedOutput = true, this.customUniforms = [{ name: "texShape", type: "ivec2" }];
    let n = En();
    this.outputShape = e17, this.enableShapeUniforms = vn(this.outputShape.length);
    let a = "", r = "result";
    t && (r = "floor(result * 255. + 0.5)");
    for (let s = 0; s <= 1; s++) for (let i = 0; i <= 1; i++) {
      let o = s * 2 + i;
      a += `
          localCoords = coords;
          if(localCoords[2] + ${i} < ${this.enableShapeUniforms ? "outShape[2]" : `${e17[2]}`}) {
          localCoords[2] += ${i};
          if (localCoords[1] + ${s} < ${this.enableShapeUniforms ? "outShape[1]" : `${e17[1]}`}) {
            localCoords[1] += ${s};

            flatIndex = getFlatIndex(localCoords);
            offset = imod(flatIndex, 4);

            flatIndex = idiv(flatIndex, 4, 1.);

            int r = flatIndex / texShape[1];
            int c = imod(flatIndex, texShape[1]);
            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);
            values = ${n.texture2D}(A, uv);

            if (offset == 0) {
              result[${o}] = values[0];
            } else if (offset == 1) {
              result[${o}] = values[1];
            } else if (offset == 2) {
              result[${o}] = values[2];
            } else {
              result[${o}] = values[3];
            }
          }
        }
        `;
    }
    this.userCode = `
        ${this.enableShapeUniforms ? ek() : Q1(e17)}

        void main() {
          ivec3 coords = getOutputCoords();

          vec4 result = vec4(0.);
          int flatIndex, r, c, offset;
          ivec3 localCoords;
          vec2 uv;
          vec4 values;

          ${a}

          ${n.output} = ${r};
        }
    `;
  }
};
var uA = {};
_e(uA, { bindVertexProgramAttributeStreams: () => yA, createBufferFromOutputTexture: () => wA, createFloat16MatrixTexture: () => mA, createFloat16PackedMatrixTexture: () => bA, createFloat32MatrixTexture: () => hA, createIndexBuffer: () => dA, createPackedMatrixTexture: () => gA, createUnsignedBytesMatrixTexture: () => fA, createVertexBuffer: () => cA, createVertexShader: () => pA, downloadByteEncodedFloatMatrixFromOutputTexture: () => IA, downloadFloat32MatrixFromBuffer: () => kA, downloadMatrixFromPackedOutputTexture: () => NA, downloadPackedMatrixFromBuffer: () => SA, getInternalFormatForFloat16MatrixTexture: () => ak, getInternalFormatForFloat16PackedMatrixTexture: () => ik, getInternalFormatForFloat32MatrixTexture: () => nk, getInternalFormatForPackedMatrixTexture: () => sk, getInternalFormatForUnsignedBytesMatrixTexture: () => rk, uploadDenseMatrixToTexture: () => xA, uploadPixelDataToTexture: () => vA });
function pA(e17) {
  let t = En(), n = `${t.version}
    precision highp float;
    ${t.attribute} vec3 clipSpacePos;
    ${t.attribute} vec2 uv;
    ${t.varyingVs} vec2 resultUV;

    void main() {
      gl_Position = vec4(clipSpacePos, 1);
      resultUV = uv;
    }`;
  return O_(e17, n);
}
function cA(e17) {
  let t = new Float32Array([-1, 1, 0, 0, 1, -1, -1, 0, 0, 0, 1, 1, 0, 1, 1, 1, -1, 0, 1, 0]);
  return W_(e17, t);
}
function dA(e17) {
  let t = new Uint16Array([0, 1, 2, 2, 1, 3]);
  return B_(e17, t);
}
function Ad(e17, t, n, a, r, s) {
  U_(t, n);
  let i = V_(e17), o = e17.TEXTURE_2D;
  return de(e17, () => e17.bindTexture(o, i)), de(e17, () => e17.texParameteri(o, e17.TEXTURE_WRAP_S, e17.CLAMP_TO_EDGE)), de(e17, () => e17.texParameteri(o, e17.TEXTURE_WRAP_T, e17.CLAMP_TO_EDGE)), de(e17, () => e17.texParameteri(o, e17.TEXTURE_MIN_FILTER, e17.NEAREST)), de(e17, () => e17.texParameteri(o, e17.TEXTURE_MAG_FILTER, e17.NEAREST)), G().getNumber("WEBGL_VERSION") === 1 ? de(e17, () => e17.texImage2D(o, 0, a, t, n, 0, r, s, null)) : de(e17, () => e17.texStorage2D(o, 1, a, t, n)), de(e17, () => e17.bindTexture(e17.TEXTURE_2D, null)), { texture: i, texShape: [n, t] };
}
function nk(e17) {
  return e17.internalFormatFloat;
}
function hA(e17, t, n, a) {
  let [r, s] = _d(t, n);
  return Ad(e17, r, s, nk(a), a.textureFormatFloat, e17.FLOAT);
}
function ak(e17) {
  return e17.internalFormatHalfFloat;
}
function mA(e17, t, n, a) {
  let [r, s] = _d(t, n);
  return Ad(e17, r, s, ak(a), a.textureFormatFloat, a.textureTypeHalfFloat);
}
function rk(e17) {
  return e17.downloadTextureFormat;
}
function fA(e17, t, n, a) {
  let [r, s] = _d(t, n);
  return Ad(e17, r, s, rk(a), e17.RGBA, e17.UNSIGNED_BYTE);
}
function sk(e17) {
  return e17.internalFormatPackedFloat;
}
function gA(e17, t, n, a) {
  let [r, s] = op(t, n);
  return Ad(e17, r, s, sk(a), e17.RGBA, e17.FLOAT);
}
function ik(e17) {
  return e17.internalFormatPackedHalfFloat;
}
function bA(e17, t, n, a) {
  let [r, s] = op(t, n);
  return Ad(e17, r, s, ik(a), e17.RGBA, a.textureTypeHalfFloat);
}
function yA(e17, t, n) {
  return de(e17, () => e17.bindBuffer(e17.ARRAY_BUFFER, n)), pv(e17, t, "clipSpacePos", n, 3, 20, 0) && pv(e17, t, "uv", n, 2, 20, 12);
}
function xA(e17, t, n, a, r, s) {
  de(e17, () => e17.bindTexture(e17.TEXTURE_2D, t));
  let i, o, l;
  r instanceof Uint8Array ? (i = new Uint8Array(n * a * 4), o = e17.UNSIGNED_BYTE, l = e17.RGBA) : (i = new Float32Array(n * a * 4), o = e17.FLOAT, l = s.internalFormatPackedFloat), i.set(r), G().getNumber("WEBGL_VERSION") === 2 ? de(e17, () => e17.texSubImage2D(e17.TEXTURE_2D, 0, 0, 0, n, a, e17.RGBA, o, i)) : de(e17, () => e17.texImage2D(e17.TEXTURE_2D, 0, l, n, a, 0, e17.RGBA, o, i)), de(e17, () => e17.bindTexture(e17.TEXTURE_2D, null));
}
function vA(e17, t, n) {
  de(e17, () => e17.bindTexture(e17.TEXTURE_2D, t)), n.data instanceof Uint8Array ? G().getNumber("WEBGL_VERSION") === 2 ? de(e17, () => e17.texSubImage2D(e17.TEXTURE_2D, 0, 0, 0, n.width, n.height, e17.RGBA, e17.UNSIGNED_BYTE, n.data)) : de(e17, () => e17.texImage2D(e17.TEXTURE_2D, 0, e17.RGBA, n.width, n.height, 0, e17.RGBA, e17.UNSIGNED_BYTE, n.data)) : G().getNumber("WEBGL_VERSION") === 2 ? de(e17, () => e17.texSubImage2D(e17.TEXTURE_2D, 0, 0, 0, e17.RGBA, e17.UNSIGNED_BYTE, n)) : de(e17, () => e17.texImage2D(e17.TEXTURE_2D, 0, e17.RGBA, e17.RGBA, e17.UNSIGNED_BYTE, n)), de(e17, () => e17.bindTexture(e17.TEXTURE_2D, null));
}
function wA(e17, t, n, a) {
  let r = e17.createBuffer();
  de(e17, () => e17.bindBuffer(e17.PIXEL_PACK_BUFFER, r));
  let s = 4 * 4 * t * n;
  return de(e17, () => e17.bufferData(e17.PIXEL_PACK_BUFFER, s, e17.STREAM_READ)), de(e17, () => e17.readPixels(0, 0, n, t, e17.RGBA, e17.FLOAT, 0)), de(e17, () => e17.bindBuffer(e17.PIXEL_PACK_BUFFER, null)), r;
}
function kA(e17, t, n) {
  let a = e17, r = new Float32Array(n);
  return a.bindBuffer(a.PIXEL_PACK_BUFFER, t), a.getBufferSubData(a.PIXEL_PACK_BUFFER, 0, r), a.bindBuffer(a.PIXEL_PACK_BUFFER, null), r;
}
function IA(e17, t, n, a) {
  let [r, s] = _d(t, n), i = 4, o = new Uint8Array(HJ(t * n, i));
  return de(e17, () => e17.readPixels(0, 0, r, s, a.downloadTextureFormat, e17.UNSIGNED_BYTE, o)), new Float32Array(o.buffer);
}
function SA(e17, t, n, a, r, s, i, o) {
  let l = e17, u = new Float32Array(jJ(s, i));
  return l.bindBuffer(l.PIXEL_PACK_BUFFER, t), l.getBufferSubData(l.PIXEL_PACK_BUFFER, 0, u), l.bindBuffer(l.PIXEL_PACK_BUFFER, null), u;
}
function NA(e17, t, n) {
  let a = new Float32Array(t * n * 4);
  return de(e17, () => e17.readPixels(0, 0, n, t, e17.RGBA, e17.FLOAT, a)), a;
}
var Wh = class {
  constructor(e17) {
    this.outputTexture = null, this.program = null, this.disposed = false, this.itemsToPoll = [];
    let t = G().getNumber("WEBGL_VERSION");
    if (e17 != null ? (this.gl = e17, D_(t, e17)) : this.gl = ja(t), e17 = this.gl, G().getNumber("WEBGL_VERSION") === 2) {
      let r = e17;
      this.createVertexArray = () => de(r, () => r.createVertexArray()), this.bindVertexArray = (s) => de(r, () => r.bindVertexArray(s)), this.deleteVertexArray = (s) => de(r, () => r.deleteVertexArray(s)), this.getVertexArray = () => de(r, () => r.getParameter(r.VERTEX_ARRAY_BINDING));
    } else if (e17 != null) {
      let r = e17.getExtension("OES_vertex_array_object");
      if (r == null) throw new Error("All WebGL1 implementations are expected to offer OES_vertex_array_object.");
      this.createVertexArray = () => de(e17, () => r.createVertexArrayOES()), this.bindVertexArray = (s) => de(e17, () => r.bindVertexArrayOES(s)), this.deleteVertexArray = (s) => de(e17, () => r.deleteVertexArrayOES(s)), this.getVertexArray = () => de(e17, () => e17.getParameter(r.VERTEX_ARRAY_BINDING_OES));
    }
    let n = "WEBGL_color_buffer_float", a = "EXT_color_buffer_half_float";
    if (this.parallelCompilationExtension = this.gl.getExtension("KHR_parallel_shader_compile"), G().getNumber("WEBGL_VERSION") === 1) {
      let r = "OES_texture_float", s = "OES_texture_half_float";
      if (this.textureFloatExtension = rc(this.gl, r), da(this.gl, s)) this.textureHalfFloatExtension = rc(this.gl, s);
      else if (G().get("WEBGL_FORCE_F16_TEXTURES")) throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");
      if (this.colorBufferFloatExtension = this.gl.getExtension(n), da(this.gl, a)) this.colorBufferHalfFloatExtension = rc(this.gl, a);
      else if (G().get("WEBGL_FORCE_F16_TEXTURES")) throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");
    } else if (n = "EXT_color_buffer_float", da(this.gl, n)) this.colorBufferFloatExtension = this.gl.getExtension(n);
    else if (da(this.gl, a)) this.colorBufferHalfFloatExtension = this.gl.getExtension(a);
    else throw new Error("GL context does not support color renderable floats");
    this.vertexBuffer = cA(this.gl), this.indexBuffer = dA(this.gl), this.framebuffer = G_(this.gl), this.textureConfig = Z1(this.gl, this.textureHalfFloatExtension);
  }
  get debug() {
    return G().getBool("DEBUG");
  }
  dispose() {
    if (this.disposed) return;
    this.program != null && console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."), this.outputTexture != null && console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");
    let e17 = this.gl;
    de(e17, () => e17.finish()), de(e17, () => e17.bindFramebuffer(e17.FRAMEBUFFER, null)), de(e17, () => e17.deleteFramebuffer(this.framebuffer)), de(e17, () => e17.bindBuffer(e17.ARRAY_BUFFER, null)), de(e17, () => e17.bindBuffer(e17.ELEMENT_ARRAY_BUFFER, null)), de(e17, () => e17.deleteBuffer(this.indexBuffer)), this.disposed = true;
  }
  createFloat32MatrixTexture(e17, t) {
    return this.throwIfDisposed(), hA(this.gl, e17, t, this.textureConfig);
  }
  createFloat16MatrixTexture(e17, t) {
    return this.throwIfDisposed(), mA(this.gl, e17, t, this.textureConfig);
  }
  createUnsignedBytesMatrixTexture(e17, t) {
    return this.throwIfDisposed(), fA(this.gl, e17, t, this.textureConfig);
  }
  uploadPixelDataToTexture(e17, t) {
    this.throwIfDisposed(), vA(this.gl, e17, t);
  }
  uploadDenseMatrixToTexture(e17, t, n, a) {
    this.throwIfDisposed(), xA(this.gl, e17, t, n, a, this.textureConfig);
  }
  createFloat16PackedMatrixTexture(e17, t) {
    return this.throwIfDisposed(), bA(this.gl, e17, t, this.textureConfig);
  }
  createPackedMatrixTexture(e17, t) {
    return this.throwIfDisposed(), gA(this.gl, e17, t, this.textureConfig);
  }
  deleteMatrixTexture(e17) {
    this.throwIfDisposed(), this.outputTexture === e17 && (cv(this.gl, this.framebuffer), this.outputTexture = null), de(this.gl, () => this.gl.deleteTexture(e17));
  }
  downloadByteEncodedFloatMatrixFromOutputTexture(e17, t, n) {
    return this.downloadMatrixDriver(e17, () => IA(this.gl, t, n, this.textureConfig));
  }
  downloadPackedMatrixFromBuffer(e17, t, n, a, r, s) {
    return SA(this.gl, e17, t, n, a, r, s, this.textureConfig);
  }
  downloadFloat32MatrixFromBuffer(e17, t) {
    return kA(this.gl, e17, t);
  }
  createBufferFromTexture(e17, t, n) {
    this.bindTextureToFrameBuffer(e17);
    let a = wA(this.gl, t, n, this.textureConfig);
    return this.unbindTextureToFrameBuffer(), a;
  }
  createAndWaitForFence() {
    let e17 = this.createFence(this.gl);
    return this.pollFence(e17);
  }
  createFence(e17) {
    let t, n;
    if (G().getBool("WEBGL_FENCE_API_ENABLED")) {
      let a = e17, r = a.fenceSync(a.SYNC_GPU_COMMANDS_COMPLETE, 0);
      e17.flush(), n = () => {
        let s = a.clientWaitSync(r, 0, 0);
        return s === a.ALREADY_SIGNALED || s === a.CONDITION_SATISFIED;
      }, t = r;
    } else G().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") > 0 ? (t = this.beginQuery(), this.endQuery(), n = () => this.isQueryAvailable(t, G().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))) : n = () => true;
    return { query: t, isFencePassed: n };
  }
  downloadMatrixFromPackedTexture(e17, t, n) {
    return this.downloadMatrixDriver(e17, () => NA(this.gl, t, n));
  }
  createProgram(e17) {
    this.throwIfDisposed();
    let t = this.gl;
    this.vertexShader == null && (this.vertexShader = pA(t));
    let n = L_(t);
    de(t, () => t.attachShader(n, this.vertexShader)), de(t, () => t.attachShader(n, e17)), z_(t, n);
    let a = Object.assign(n, { vao: this.createVertexArray() });
    return this.debug && Oh(t, a), a;
  }
  buildVao(e17) {
    this.setProgram(e17), this.bindVertexArray(e17.vao);
    let t = this.gl;
    de(t, () => t.bindBuffer(t.ELEMENT_ARRAY_BUFFER, this.indexBuffer)), yA(t, e17, this.vertexBuffer);
  }
  deleteProgram(e17) {
    this.throwIfDisposed(), e17 === this.program && (this.program = null), e17 != null && (de(this.gl, () => this.gl.deleteProgram(e17)), this.deleteVertexArray(e17.vao));
  }
  setProgram(e17) {
    this.throwIfDisposed(), this.program = e17, this.program != null && this.debug && Oh(this.gl, this.program), de(this.gl, () => this.gl.useProgram(e17));
  }
  getUniformLocation(e17, t, n = true) {
    return this.throwIfDisposed(), n ? j_(this.gl, e17, t) : q_(this.gl, e17, t);
  }
  getAttributeLocation(e17, t) {
    return this.throwIfDisposed(), de(this.gl, () => this.gl.getAttribLocation(e17, t));
  }
  getUniformLocationNoThrow(e17, t) {
    return this.throwIfDisposed(), this.gl.getUniformLocation(e17, t);
  }
  setInputMatrixTexture(e17, t, n) {
    this.throwIfDisposed(), this.throwIfNoProgram(), K_(this.gl, e17, t, n);
  }
  setOutputMatrixTexture(e17, t, n) {
    this.setOutputMatrixTextureDriver(e17, n, t);
  }
  setOutputPackedMatrixTexture(e17, t, n) {
    this.throwIfDisposed();
    let [a, r] = op(t, n);
    this.setOutputMatrixTextureDriver(e17, a, r);
  }
  setOutputMatrixWriteRegion(e17, t, n, a) {
    this.setOutputMatrixWriteRegionDriver(n, e17, a, t);
  }
  setOutputPackedMatrixWriteRegion(e17, t, n, a) {
    throw new Error("setOutputPackedMatrixWriteRegion not implemented.");
  }
  debugValidate() {
    this.program != null && Oh(this.gl, this.program), sc(this.gl);
  }
  executeProgram() {
    this.throwIfDisposed(), this.throwIfNoProgram();
    let e17 = this.gl;
    if (this.debug) {
      let t = this.getVertexArray();
      console.assert(t === this.program.vao, "VAO changed between setProgram and executeProgram!"), this.debugValidate();
    }
    de(e17, () => e17.drawElements(e17.TRIANGLES, 6, e17.UNSIGNED_SHORT, 0));
  }
  blockUntilAllProgramsCompleted() {
    this.throwIfDisposed(), de(this.gl, () => this.gl.finish());
  }
  getQueryTimerExtension() {
    return this.disjointQueryTimerExtension == null && (this.disjointQueryTimerExtension = rc(this.gl, G().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") === 2 ? "EXT_disjoint_timer_query_webgl2" : "EXT_disjoint_timer_query")), this.disjointQueryTimerExtension;
  }
  getQueryTimerExtensionWebGL2() {
    return this.getQueryTimerExtension();
  }
  getQueryTimerExtensionWebGL1() {
    return this.getQueryTimerExtension();
  }
  beginQuery() {
    if (G().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") === 2) {
      let n = this.gl, a = this.getQueryTimerExtensionWebGL2(), r = n.createQuery();
      return n.beginQuery(a.TIME_ELAPSED_EXT, r), r;
    }
    let e17 = this.getQueryTimerExtensionWebGL1(), t = e17.createQueryEXT();
    return e17.beginQueryEXT(e17.TIME_ELAPSED_EXT, t), t;
  }
  endQuery() {
    if (G().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") === 2) {
      let t = this.gl, n = this.getQueryTimerExtensionWebGL2();
      t.endQuery(n.TIME_ELAPSED_EXT);
      return;
    }
    let e17 = this.getQueryTimerExtensionWebGL1();
    e17.endQueryEXT(e17.TIME_ELAPSED_EXT);
  }
  async waitForQueryAndGetTime(e17) {
    return await w.repeatedTry(() => this.disposed || this.isQueryAvailable(e17, G().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))), this.getQueryTime(e17, G().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"));
  }
  getQueryTime(e17, t) {
    if (t === 0) return null;
    if (t === 2) {
      let n = this.gl;
      return n.getQueryParameter(e17, n.QUERY_RESULT) / 1e6;
    } else {
      let n = this.getQueryTimerExtensionWebGL1();
      return n.getQueryObjectEXT(e17, n.QUERY_RESULT_EXT) / 1e6;
    }
  }
  isQueryAvailable(e17, t) {
    if (t === 0) return true;
    if (t === 2) {
      let n = this.gl, a = this.getQueryTimerExtensionWebGL2(), r = n.getQueryParameter(e17, n.QUERY_RESULT_AVAILABLE);
      return this.disjoint == null && (this.disjoint = this.gl.getParameter(a.GPU_DISJOINT_EXT)), r && !this.disjoint;
    } else {
      let n = this.getQueryTimerExtensionWebGL1(), a = n.getQueryObjectEXT(e17, n.QUERY_RESULT_AVAILABLE_EXT);
      return this.disjoint == null && (this.disjoint = this.gl.getParameter(n.GPU_DISJOINT_EXT)), a && !this.disjoint;
    }
  }
  pollFence(e17) {
    return new Promise((t) => {
      this.addItemToPoll(() => e17.isFencePassed(), () => t());
    });
  }
  pollItems() {
    let e17 = Y9(this.itemsToPoll.map((t) => t.isDoneFn));
    for (let t = 0; t <= e17; ++t) {
      let { resolveFn: n } = this.itemsToPoll[t];
      n();
    }
    this.itemsToPoll = this.itemsToPoll.slice(e17 + 1);
  }
  addItemToPoll(e17, t) {
    if (this.itemsToPoll.push({ isDoneFn: e17, resolveFn: t }), this.itemsToPoll.length > 1) return;
    let n;
    "setTimeoutCustom" in G().platform && (n = G().platform.setTimeoutCustom.bind(G().platform)), w.repeatedTry(() => (this.pollItems(), this.itemsToPoll.length === 0), () => 0, null, n);
  }
  bindTextureToFrameBuffer(e17) {
    this.throwIfDisposed(), Ph(this.gl, e17, this.framebuffer), this.debug && sc(this.gl);
  }
  unbindTextureToFrameBuffer() {
    this.outputTexture != null ? (Ph(this.gl, this.outputTexture, this.framebuffer), this.debug && sc(this.gl)) : cv(this.gl, this.framebuffer);
  }
  downloadMatrixDriver(e17, t) {
    this.bindTextureToFrameBuffer(e17);
    let n = t();
    return this.unbindTextureToFrameBuffer(), n;
  }
  setOutputMatrixTextureDriver(e17, t, n) {
    this.throwIfDisposed();
    let a = this.gl;
    Ph(a, e17, this.framebuffer), this.debug && sc(a), this.outputTexture = e17, de(a, () => a.viewport(0, 0, t, n)), de(a, () => a.scissor(0, 0, t, n));
  }
  setOutputMatrixWriteRegionDriver(e17, t, n, a) {
    this.throwIfDisposed(), de(this.gl, () => this.gl.scissor(e17, t, n, a));
  }
  throwIfDisposed() {
    if (this.disposed) throw new Error("Attempted to use disposed GPGPUContext.");
  }
  throwIfNoProgram() {
    if (this.program == null) throw new Error("No GPU program is currently set.");
  }
};
function Y9(e17) {
  let t = 0;
  for (; t < e17.length && e17[t](); ++t) ;
  return t - 1;
}
var { addImpl: Z9, bincountImpl: TA, bincountReduceImpl: J9, bitwiseAndImpl: Q9, castImpl: eQ, ceilImpl: tQ, concatImpl: nQ, equalImpl: aQ, expImpl: rQ, expm1Impl: sQ, floorImpl: iQ, gatherNdImpl: oQ, gatherV2Impl: lQ, greaterImpl: uQ, greaterEqualImpl: pQ, lessImpl: cQ, lessEqualImpl: dQ, linSpaceImpl: hQ, logImpl: mQ, maxImpl: fQ, maximumImpl: gQ, minimumImpl: bQ, multiplyImpl: yQ, negImpl: xQ, notEqualImpl: vQ, prodImpl: wQ, raggedGatherImpl: kQ, raggedRangeImpl: IQ, raggedTensorToTensorImpl: SQ, rangeImpl: NQ, rsqrtImpl: TQ, scatterImpl: CQ, sigmoidImpl: EQ, simpleAbsImpl: CA, sliceImpl: _Q, sparseFillEmptyRowsImpl: AQ, sparseReshapeImpl: FQ, sparseSegmentReductionImpl: EA, sqrtImpl: $Q, staticRegexReplaceImpl: DQ, stridedSliceImpl: RQ, stringNGramsImpl: MQ, stringSplitImpl: OQ, stringToHashBucketFastImpl: PQ, subImpl: LQ, tileImpl: zQ, topKImpl: WQ, transposeImpl: ok, uniqueImpl: BQ } = M1;
function _A(e17, t) {
  return ["x", "y", "z", "w", "u", "v"].slice(0, t).map((n) => `${e17}.${n}`);
}
function In(e17, t) {
  return t === 1 ? [e17] : _A(e17, t);
}
function VQ(e17, t) {
  if (e17 === 1) return "rc";
  let n = "";
  for (let a = 0; a < e17; a++) n += t[a], a < e17 - 1 && (n += ",");
  return n;
}
var UQ = class {
  constructor(e17) {
    if (this.variableNames = ["A"], this.packedInputs = false, this.packedOutput = true, this.outputShape = e17, this.rank = e17.length, this.enableShapeUniforms = vn(this.outputShape.length), this.rank === 0) this.userCode = `
        void main() {
          setOutput(vec4(getA(), 0., 0., 0.));
        }
      `;
    else {
      let t = In("rc", this.rank), n = ht(this.rank), a = this.getOutOfBoundsCondition(t), r = this.getSetup(t), s = this.getOutput(t);
      this.userCode = `
        void main() {
          ${n} rc = getOutputCoords();

          if(${a}) {
            setOutput(vec4(0));
          } else {
            ${r}

            setOutput(vec4(${s}));
          }
        }
      `;
    }
  }
  getSourceCoordsArr(e17) {
    let t = [];
    for (let n = 0; n <= 1; n++) for (let a = 0; a <= 1; a++) {
      let r = `${n === 0 ? "r" : "rp1"}, ${a === 0 ? "c" : "cp1"}`;
      for (let s = 2; s < this.rank; s++) r = `${e17[e17.length - 1 - s]},` + r;
      t.push(r);
    }
    return t;
  }
  getOutOfBoundsCondition(e17) {
    if (this.rank === 1) return `rc > ${this.enableShapeUniforms ? "outShape" : this.outputShape[0]}`;
    let t = "";
    for (let n = this.rank - 2; n < this.rank; n++) t += `${e17[n]} >= ${this.enableShapeUniforms ? `outShape[${n}]` : this.outputShape[n]}`, n < this.rank - 1 && (t += "||");
    return t;
  }
  getSetup(e17) {
    if (this.rank === 1) return "";
    let t = e17.slice(-2), n = this.enableShapeUniforms ? `outShape[${this.rank} - 1]` : this.outputShape[this.rank - 1], a = this.enableShapeUniforms ? `outShape[${this.rank} - 2]` : this.outputShape[this.rank - 2];
    return `
      int r = ${t[0]};
      int c = ${t[1]};
      int rp1 = r + 1;
      int cp1 = c + 1;

      bool cEdge = cp1 >= ${n};
      bool rEdge = rp1 >= ${a};
    `;
  }
  getOutput(e17) {
    let t = this.getSourceCoordsArr(e17);
    return this.rank === 1 ? `getA(rc), (rc + 1 >= ${this.enableShapeUniforms ? "outShape" : this.outputShape[0]} ? 0. : getA(rc + 1)), 0, 0` : `getA(${t[0]}),
            cEdge ? 0. : getA(${t[1]}),
            rEdge ? 0. : getA(${t[2]}),
            rEdge || cEdge ? 0. : getA(${t[3]})`;
  }
};
var AA = class {
  constructor(e17, t) {
    this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = true, this.customUniforms = [{ name: "inputShape", type: "ivec3" }], this.outputShape = e17, this.enableShapeUniforms = vn(this.outputShape.length);
    let n = "";
    for (let a = 0; a < 4; a++) {
      let r = "thisRC = rc;";
      a % 2 === 1 && (r += "thisRC.z += 1;"), a > 1 && (r += "thisRC.y += 1;"), n += `
        ${r}
        ${a > 0 ? "if(thisRC.y < rows && thisRC.z < cols){" : ""}
          int flatIndex = getFlatIndex(thisRC);

          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);
          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));

          result[${a}] =
            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);
        ${a > 0 ? "}" : ""}
      `;
    }
    this.userCode = `
      ${GQ(t, this.enableShapeUniforms)}
      ${this.enableShapeUniforms ? ek() : Q1(e17)}

      void main() {
        ivec3 rc = getOutputCoords();

        vec4 result = vec4(0.);

        ivec3 thisRC;
        int rows = ${this.enableShapeUniforms ? "outShape[1]" : e17[1]};
        int cols = ${this.enableShapeUniforms ? "outShape[2]" : e17[2]};

        ${n}

        setOutput(result);
      }
    `;
  }
};
function GQ(e17, t) {
  return `
    ivec3 inputCoordsFromReshapedOutCoords(int index) {
      ${t ? r9(["r", "c", "d"], "inputShape") : Zo(["r", "c", "d"], e17)}
      return ivec3(r, c, d);
    }
  `;
}
var HQ = class {
  constructor(e17) {
    this.gpgpu = e17, this.numUsedTextures = 0, this.numFreeTextures = 0, this._numBytesAllocated = 0, this._numBytesFree = 0, this.freeTextures = {}, this.usedTextures = {}, this.logEnabled = false;
  }
  acquireTexture(e17, t, n) {
    let a = sS(t, n), r = iS(e17, a, n);
    r in this.freeTextures || (this.freeTextures[r] = []), r in this.usedTextures || (this.usedTextures[r] = []);
    let s = rS(e17, a, this.gpgpu.gl, this.gpgpu.textureConfig, n);
    if (this.freeTextures[r].length > 0) {
      this.numFreeTextures--, this.numUsedTextures++, this._numBytesFree -= s, this.log();
      let o = this.freeTextures[r].pop();
      return this.usedTextures[r].push(o), o;
    }
    let i;
    return a === cn.PACKED_2X2_FLOAT32 ? i = this.gpgpu.createPackedMatrixTexture(e17[0], e17[1]) : a === cn.PACKED_2X2_FLOAT16 ? i = this.gpgpu.createFloat16PackedMatrixTexture(e17[0], e17[1]) : a === cn.UNPACKED_FLOAT32 ? i = this.gpgpu.createFloat32MatrixTexture(e17[0], e17[1]) : a === cn.UNPACKED_FLOAT16 ? i = this.gpgpu.createFloat16MatrixTexture(e17[0], e17[1]) : a === cn.PACKED_4X1_UNSIGNED_BYTE && (i = this.gpgpu.createUnsignedBytesMatrixTexture(e17[0], e17[1])), this.usedTextures[r].push(i), this.numUsedTextures++, this._numBytesAllocated += s, this.log(), i;
  }
  releaseTexture(e17, t, n, a) {
    if (this.freeTextures == null) return;
    let r = sS(n, a), s = iS(t, r, a);
    s in this.freeTextures || (this.freeTextures[s] = []);
    let i = rS(t, r, this.gpgpu.gl, this.gpgpu.textureConfig, a), o = G().getNumber("WEBGL_DELETE_TEXTURE_THRESHOLD");
    o !== -1 && this._numBytesAllocated > o ? (this.gpgpu.deleteMatrixTexture(e17.texture), this._numBytesAllocated -= i) : (this.freeTextures[s].push(e17), this.numFreeTextures++, this._numBytesFree += i), this.numUsedTextures--;
    let l = this.usedTextures[s], u = l && l.indexOf(e17);
    if (u == null || u < 0) throw new Error("Cannot release a texture that was never provided by this texture manager");
    l[u] = l[l.length - 1], l.pop(), this.log();
  }
  log() {
    if (!this.logEnabled) return;
    let e17 = this.numFreeTextures + this.numUsedTextures;
    console.log("Free/Used", `${this.numFreeTextures} / ${this.numUsedTextures}`, `(${e17})`);
    let t = this._numBytesFree / this._numBytesAllocated;
    console.log(`Bytes allocated: ${this._numBytesAllocated}`), console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100 * t)}%)`);
  }
  get numBytesAllocated() {
    return this._numBytesAllocated;
  }
  get numBytesFree() {
    return this._numBytesFree;
  }
  getNumUsedTextures() {
    return this.numUsedTextures;
  }
  getNumFreeTextures() {
    return this.numFreeTextures;
  }
  dispose() {
    if (this.freeTextures != null) {
      for (let e17 in this.freeTextures) this.freeTextures[e17].forEach((t) => {
        this.gpgpu.deleteMatrixTexture(t.texture);
      });
      for (let e17 in this.usedTextures) this.usedTextures[e17].forEach((t) => {
        this.gpgpu.deleteMatrixTexture(t.texture);
      });
      this.freeTextures = null, this.usedTextures = null, this.numUsedTextures = 0, this.numFreeTextures = 0, this._numBytesAllocated = 0, this._numBytesFree = 0;
    }
  }
};
function jQ(e17, t) {
  let n = e17;
  if (t === n.R32F) return 4;
  if (t === n.R16F) return 2;
  if (t === n.RGBA32F || t === e17.RGBA) return 16;
  if (t === n.RGBA16F) return 8;
  if (t === n.RGBA8) return 4;
  throw new Error(`Unknown internal format ${t}`);
}
function rS(e17, t, n, a, r) {
  let s = qQ(t, a), i;
  if (r) {
    let [l, u] = op(e17[0], e17[1]);
    i = l * u;
  } else {
    let [l, u] = _d(e17[0], e17[1]);
    i = l * u;
  }
  let o = jQ(n, s);
  return i * o;
}
function qQ(e17, t) {
  switch (e17) {
    case cn.PACKED_2X2_FLOAT32:
      return sk(t);
    case cn.PACKED_2X2_FLOAT16:
      return ik(t);
    case cn.UNPACKED_FLOAT32:
      return nk(t);
    case cn.UNPACKED_FLOAT16:
      return ak(t);
    case cn.PACKED_4X1_UNSIGNED_BYTE:
      return rk(t);
    default:
      throw new Error(`Unknown physical texture type ${e17}`);
  }
}
function KQ(e17) {
  return G().getBool("WEBGL_RENDER_FLOAT32_ENABLED") ? e17 ? cn.PACKED_2X2_FLOAT32 : cn.UNPACKED_FLOAT32 : e17 ? cn.PACKED_2X2_FLOAT16 : cn.UNPACKED_FLOAT16;
}
function sS(e17, t) {
  if (e17 === ca.UPLOAD) return cn.PACKED_2X2_FLOAT32;
  if (e17 === ca.RENDER || e17 == null) return KQ(t);
  if (e17 === ca.DOWNLOAD || e17 === ca.PIXELS) return cn.PACKED_4X1_UNSIGNED_BYTE;
  throw new Error(`Unknown logical texture type ${e17}`);
}
function iS(e17, t, n) {
  return `${e17[0]}_${e17[1]}_${t}_${n}`;
}
var rr = class {
  constructor(e17, t) {
    this.variableNames = ["A"], this.outputShape = e17, this.enableShapeUniforms = vn(this.outputShape.length), this.userCode = `
      float unaryOperation(float x) {
        ${t}
      }

      void main() {
        float x = getAAtOutCoords();
        float y = unaryOperation(x);

        setOutput(y);
      }
    `;
  }
};
var Da = "if (isnan(x)) return x;";
var XQ = "return x;";
var oS = "return abs(x);";
var YQ = "return (x >= 0.0) ? x : (exp(x) - 1.0);";
var ZQ = Da + `
  return (x < 0.0) ? 0.0 : x;
`;
var JQ = Da + `
  return (x < 0.0) ? 0.0 : min(6.0, x);
`;
var Yr = "return x;";
var QQ = "return 1.0 / (1.0 + exp(-1.0 * x));";
var eee = "return x;";
var tee = `
  vec4 result;

  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);
  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);
  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);
  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);

  return result;
`;
var nee = `
  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;
var aee = `
  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;
var ree = "return 1.0 / (1.0 + exp(-1.0 * x));";
var ts = class {
  constructor(e17, t) {
    this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = true, this.outputShape = e17, this.enableShapeUniforms = vn(this.outputShape.length), this.userCode = `
      vec4 unaryOperation(vec4 x) {
        ${t}
      }

      void main() {
        vec4 x = getAAtOutCoords();
        vec4 y = unaryOperation(x);

        setOutput(y);
      }
    `;
  }
};
var see = class {
  constructor(e17) {
    this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = false, this.outputShape = e17, this.enableShapeUniforms = vn(this.outputShape.length);
    let t = e17.length, n = In("rc", t), a = ht(t), r = VQ(t, n), s = n.slice(-2), i = t <= 1 ? "rc" : `vec2(${s.join(",")})`;
    this.userCode = `
      void main() {
        ${a} rc = getOutputCoords();
        vec4 packedInput = getA(${r});

        setOutput(getChannel(packedInput, ${i}));
      }
    `;
  }
};
var iee = mr.whereImpl;
var oee = 1e-7;
var lee = 1e-4;
var yx = {};
function uee(e17) {
  return e17 in yx || (yx[e17] = {}), yx[e17];
}
var pee = G().getNumber("CPU_HANDOFF_SIZE_THRESHOLD");
var cee = 600;
function dee() {
  return G().global.screen == null ? 1024 : G().global.screen.height * G().global.screen.width * window.devicePixelRatio * cee / 1024 / 1024;
}
var lk = class FA extends Fc {
  nextDataId() {
    return FA.nextDataId++;
  }
  constructor(t) {
    if (super(), this.pendingRead = /* @__PURE__ */ new WeakMap(), this.pendingDisposal = /* @__PURE__ */ new WeakSet(), this.dataRefCount = /* @__PURE__ */ new WeakMap(), this.numBytesInGPU = 0, this.uploadWaitMs = 0, this.downloadWaitMs = 0, this.lastGlFlushTime = 0, this.warnedAboutMemory = false, this.pendingDeletes = 0, this.disposed = false, !G().getBool("HAS_WEBGL")) throw new Error("WebGL is not supported on this device");
    let n;
    if (t != null) {
      if (t instanceof Wh) n = t;
      else {
        let a = ja(G().getNumber("WEBGL_VERSION"), t);
        n = new Wh(a);
      }
      this.binaryCache = {}, this.gpgpuCreatedLocally = false;
    } else {
      let a = ja(G().getNumber("WEBGL_VERSION"));
      n = new Wh(a), this.binaryCache = uee(G().getNumber("WEBGL_VERSION")), this.gpgpuCreatedLocally = true;
    }
    this.gpgpu = n, this.canvas = this.gpgpu.gl.canvas, this.textureManager = new HQ(this.gpgpu), this.numMBBeforeWarning = dee(), this.texData = new ym(this, Ta());
  }
  numDataIds() {
    return this.texData.numDataIds() - this.pendingDeletes;
  }
  writeTexture(t, n, a, r, s, i) {
    let o = this.makeTensorInfo(n, a), l = this.texData.get(o.dataId);
    l.isPacked = false, l.texture = { texture: t, texShape: [r, s] }, l.texShape = [r, s];
    let u = ic(n), p = new aS(u, false, i), d = this.runWebGLProgram(p, [o], a, [[r, s]]);
    return d.shape = n, l.texture = null, this.disposeIntermediateTensorInfo(o), d.dataId;
  }
  write(t, n, a) {
    if ((G().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS") || G().getBool("DEBUG")) && this.checkNumericalProblems(t), a === "complex64" && t != null) throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");
    let r = { id: this.nextDataId() };
    return this.texData.set(r, { shape: n, dtype: a, values: t, usage: ca.UPLOAD, refCount: 1 }), r;
  }
  refCount(t) {
    return this.texData.has(t) ? this.texData.get(t).refCount : 0;
  }
  incRef(t) {
    let n = this.texData.get(t);
    n.refCount++;
  }
  decRef(t) {
    if (this.texData.has(t)) {
      let n = this.texData.get(t);
      n.refCount--;
    }
  }
  move(t, n, a, r, s) {
    if (G().getBool("DEBUG") && this.checkNumericalProblems(n), r === "complex64") throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");
    this.texData.set(t, { shape: a, dtype: r, values: n, usage: ca.UPLOAD, refCount: s });
  }
  disposeIntermediateTensorInfo(t) {
    this.disposeData(t.dataId);
  }
  readSync(t) {
    let n = this.texData.get(t), { values: a, dtype: r, complexTensorInfos: s, slice: i, shape: o, isPacked: l } = n;
    if (i != null) {
      let c;
      l ? c = new ts(o, Yr) : c = new rr(o, Yr);
      let h = this.runWebGLProgram(c, [{ dataId: t, shape: o, dtype: r }], r), m = this.readSync(h.dataId);
      return this.disposeIntermediateTensorInfo(h), m;
    }
    if (a != null) return this.convertAndCacheOnCPU(t);
    if (r === "string") return a;
    let u = this.activeTimers != null, p;
    u && (p = w.now());
    let d;
    if (r === "complex64") {
      let c = this.readSync(s.real.dataId), h = this.readSync(s.imag.dataId);
      d = T.mergeRealAndImagArrays(c, h);
    } else d = this.getValuesFromTexture(t);
    return u && (this.downloadWaitMs += w.now() - p), this.convertAndCacheOnCPU(t, d);
  }
  async read(t) {
    if (this.pendingRead.has(t)) {
      let m = this.pendingRead.get(t);
      return new Promise((f) => m.push(f));
    }
    let n = this.texData.get(t), { values: a, shape: r, slice: s, dtype: i, complexTensorInfos: o, isPacked: l } = n;
    if (s != null) {
      let m;
      l ? m = new ts(r, Yr) : m = new rr(r, Yr);
      let f = this.runWebGLProgram(m, [{ dataId: t, shape: r, dtype: i }], i), g = this.read(f.dataId);
      return this.disposeIntermediateTensorInfo(f), g;
    }
    if (a != null) return this.convertAndCacheOnCPU(t);
    if (G().getBool("DEBUG") && !G().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED") && G().getNumber("WEBGL_VERSION") === 2) throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");
    let u = null, p;
    if (i !== "complex64" && G().get("WEBGL_BUFFER_SUPPORTED")) {
      p = this.decode(t);
      let m = this.texData.get(p.dataId);
      u = this.gpgpu.createBufferFromTexture(m.texture.texture, ...Ah(r));
    }
    this.pendingRead.set(t, []), i !== "complex64" && await this.gpgpu.createAndWaitForFence();
    let d;
    if (i === "complex64") {
      let m = await Promise.all([this.read(o.real.dataId), this.read(o.imag.dataId)]), f = m[0], g = m[1];
      d = T.mergeRealAndImagArrays(f, g);
    } else if (u == null) d = this.getValuesFromTexture(t);
    else {
      let m = w.sizeFromShape(r);
      d = this.gpgpu.downloadFloat32MatrixFromBuffer(u, m);
    }
    if (p != null && this.disposeIntermediateTensorInfo(p), u != null) {
      let m = this.gpgpu.gl;
      de(m, () => m.deleteBuffer(u));
    }
    let c = this.convertAndCacheOnCPU(t, d), h = this.pendingRead.get(t);
    return this.pendingRead.delete(t), h.forEach((m) => m(c)), this.pendingDisposal.has(t) && (this.pendingDisposal.delete(t), this.disposeData(t) && Ta().removeDataId(t, this), this.pendingDeletes--), c;
  }
  readToGPU(t, n = {}) {
    let a = this.texData.get(t), { values: r, shape: s, slice: i, dtype: o, isPacked: l, texture: u } = a;
    if (o === "complex64") throw new Error("Does not support reading texture for complex64 dtype.");
    if (i != null) {
      let h;
      l ? h = new ts(s, Yr) : h = new rr(s, Yr);
      let m = this.runWebGLProgram(h, [{ dataId: t, shape: s, dtype: o }], o), f = this.readToGPU(m, n);
      return this.disposeIntermediateTensorInfo(m), f;
    }
    if (u == null) throw r != null ? new Error("Data is not on GPU but on CPU.") : new Error("There is no data on GPU or CPU.");
    let p = this.decode(t, n.customTexShape), d = Ta().makeTensorFromTensorInfo(p), c = this.texData.get(p.dataId);
    return Object.assign({ tensorRef: d }, c.texture);
  }
  bufferSync(t) {
    let n = this.readSync(t.dataId);
    if (t.dtype === "string") try {
      let a = n.map((r) => w.decodeString(r));
      return Oe(t.shape, t.dtype, a);
    } catch (a) {
      throw new Error("Failed to decode encoded string bytes into utf-8");
    }
    return Oe(t.shape, t.dtype, n);
  }
  checkNumericalProblems(t) {
    if (t != null) for (let n = 0; n < t.length; n++) {
      let a = t[n];
      if (!R_(a)) throw G().getBool("WEBGL_RENDER_FLOAT32_CAPABLE") ? Error(`The value ${a} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`) : Error(`The value ${a} cannot be represented on this device.`);
    }
  }
  getValuesFromTexture(t) {
    let { shape: n, dtype: a, isPacked: r } = this.texData.get(t), s = w.sizeFromShape(n);
    if (G().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")) {
      let c = this.decode(t), h = this.texData.get(c.dataId), m = this.gpgpu.downloadMatrixFromPackedTexture(h.texture.texture, ...Ah(n)).subarray(0, s);
      return this.disposeIntermediateTensorInfo(c), m;
    }
    let i = G().getBool("WEBGL_PACK") && r === true, o = i ? ic(n) : n, l = i ? new q9(o) : new j9(o), u = this.runWebGLProgram(l, [{ shape: o, dtype: a, dataId: t }], "float32"), p = this.texData.get(u.dataId), d = this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(p.texture.texture, p.texShape[0], p.texShape[1]).subarray(0, s);
    return this.disposeIntermediateTensorInfo(u), d;
  }
  timerAvailable() {
    return G().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0;
  }
  time(t) {
    let n = this.activeTimers, a = [], r = false;
    this.programTimersStack == null ? (this.programTimersStack = a, r = true) : this.activeTimers.push(a), this.activeTimers = a, t();
    let s = w.flatten(this.activeTimers.map((l) => l.query)).filter((l) => l != null), i = w.flatten(this.activeTimers.map((l) => l.name)).filter((l) => l != null);
    this.activeTimers = n, r && (this.programTimersStack = null);
    let o = { uploadWaitMs: this.uploadWaitMs, downloadWaitMs: this.downloadWaitMs, kernelMs: null, wallMs: null };
    return (async () => {
      if (G().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0) {
        let l = await Promise.all(s);
        o.kernelMs = w.sum(l), o.getExtraProfileInfo = () => l.map((u, p) => ({ name: i[p], ms: u })).map((u) => `${u.name}: ${u.ms}`).join(", ");
      } else o.kernelMs = { error: "WebGL query timers are not supported in this environment." };
      return this.uploadWaitMs = 0, this.downloadWaitMs = 0, o;
    })();
  }
  memory() {
    return { unreliable: false, numBytesInGPU: this.numBytesInGPU, numBytesInGPUAllocated: this.textureManager.numBytesAllocated, numBytesInGPUFree: this.textureManager.numBytesFree };
  }
  startTimer() {
    return G().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0 ? this.gpgpu.beginQuery() : { startMs: w.now(), endMs: null };
  }
  endTimer(t) {
    return G().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0 ? (this.gpgpu.endQuery(), t) : (t.endMs = w.now(), t);
  }
  async getQueryTime(t) {
    if (G().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0) return this.gpgpu.waitForQueryAndGetTime(t);
    let n = t;
    return n.endMs - n.startMs;
  }
  disposeData(t, n = false) {
    if (this.pendingDisposal.has(t)) return false;
    if (!this.texData.has(t)) return true;
    if (n ? this.texData.get(t).refCount = 0 : this.texData.get(t).refCount--, !n && this.texData.get(t).refCount > 0) return false;
    if (this.pendingRead.has(t)) return this.pendingDisposal.add(t), this.pendingDeletes++, false;
    this.releaseGPUData(t);
    let { complexTensorInfos: a } = this.texData.get(t);
    return a != null && (this.disposeData(a.real.dataId, n), this.disposeData(a.imag.dataId, n)), this.texData.delete(t), true;
  }
  releaseGPUData(t) {
    let { texture: n, dtype: a, texShape: r, usage: s, isPacked: i, slice: o } = this.texData.get(t), l = o && o.origDataId || t, u = this.dataRefCount.get(l);
    u > 1 ? this.dataRefCount.set(l, u - 1) : (this.dataRefCount.delete(l), n != null && (this.numBytesInGPU -= this.computeBytes(r, a), this.textureManager.releaseTexture(n, r, s, i)));
    let p = this.texData.get(t);
    p.texture = null, p.texShape = null, p.isPacked = false, p.slice = null;
  }
  getTexture(t) {
    return this.uploadToGPU(t), this.texData.get(t).texture.texture;
  }
  getDataInfo(t) {
    return this.texData.get(t);
  }
  shouldExecuteOnCPU(t, n = pee) {
    return G().getBool("WEBGL_CPU_FORWARD") && t.every((a) => this.texData.get(a.dataId).texture == null && w.sizeFromShape(a.shape) < n);
  }
  getGPGPUContext() {
    return this.gpgpu;
  }
  where(t) {
    T.warn("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");
    let n = t.dataSync();
    return iee(t.shape, n);
  }
  packedUnaryOp(t, n, a) {
    let r = new ts(t.shape, n), s = this.compileAndRun(r, [t], a);
    return Ta().makeTensorFromTensorInfo(s);
  }
  abs(t) {
    if (this.shouldExecuteOnCPU([t]) && t.dtype !== "complex64") {
      let r = CA(this.texData.get(t.dataId).values);
      return this.makeOutput(t.shape, t.dtype, r);
    }
    if (G().getBool("WEBGL_PACK_UNARY_OPERATIONS")) return this.packedUnaryOp(t, oS, t.dtype);
    let n = new rr(t.shape, oS), a = this.compileAndRun(n, [t]);
    return Ta().makeTensorFromTensorInfo(a);
  }
  makeTensorInfo(t, n, a) {
    let r;
    if (n === "string" && a != null && a.length > 0 && w.isString(a[0])) {
      let s = a.map((i) => w.encodeString(i));
      r = this.write(s, t, n);
    } else r = this.write(a, t, n);
    return this.texData.get(r).usage = null, { dataId: r, shape: t, dtype: n };
  }
  makeOutput(t, n, a) {
    return Ta().makeTensorFromTensorInfo(this.makeTensorInfo(t, n, a), this);
  }
  unpackTensor(t) {
    let n = new see(t.shape);
    return this.runWebGLProgram(n, [t], t.dtype);
  }
  packTensor(t) {
    let n = new UQ(t.shape);
    return this.runWebGLProgram(n, [t], t.dtype, null, true);
  }
  packedReshape(t, n) {
    let a = [vi(t.shape), ...wi(t.shape)], r = { dtype: t.dtype, shape: a, dataId: t.dataId }, s = [vi(n), ...wi(n)], i = new AA(s, a), o = true, l = [a], u = this.runWebGLProgram(i, [r], t.dtype, l, o);
    return { dataId: u.dataId, shape: n, dtype: u.dtype };
  }
  decode(t, n) {
    let a = this.texData.get(t), { isPacked: r, shape: s, dtype: i } = a;
    if (n != null) {
      let c = w.sizeFromShape(s), h = n[0] * n[1] * 4;
      w.assert(c <= h, () => "customTexShape is too small. Row * Column * 4 should be equal or larger than the size of the tensor data.");
    }
    let o = ic(s), l;
    r ? l = new H9(o) : l = new G9(o);
    let u = true, p = [n != null ? n : Ah(o)], d = this.runWebGLProgram(l, [{ shape: o, dtype: i, dataId: t }], i, p, u, n);
    return { dtype: i, shape: s, dataId: d.dataId };
  }
  runWebGLProgram(t, n, a, r, s = false, i) {
    let o = this.makeTensorInfo(t.outputShape, a), l = this.texData.get(o.dataId);
    if (t.packedOutput && (l.isPacked = true), t.outPackingScheme === Nc.DENSE) {
      let b = i != null ? i : Ah(t.outputShape);
      l.texShape = b.map((y) => y * 2);
    }
    if (t.outTexUsage != null && (l.usage = t.outTexUsage), w.sizeFromShape(o.shape) === 0) return l.values = w.getTypedArrayFromDType(o.dtype, 0), o;
    let u = [], p = n.map((b) => {
      if (b.dtype === "complex64") throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");
      let y = this.texData.get(b.dataId);
      if (y.texture == null) {
        if (!t.packedInputs && w.sizeFromShape(b.shape) <= G().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM")) return { shape: b.shape, texData: null, isUniform: true, uniformValues: y.values };
        t.packedInputs && (y.isPacked = true, y.shape = b.shape);
      }
      if (this.uploadToGPU(b.dataId), !!y.isPacked != !!t.packedInputs) b = y.isPacked ? this.unpackTensor(b) : this.packTensor(b), u.push(b), y = this.texData.get(b.dataId);
      else if (y.isPacked && !Tc(y.shape, b.shape)) {
        let x = b, v = b.shape;
        b.shape = y.shape, b = this.packedReshape(b, v), u.push(b), y = this.texData.get(b.dataId), x.shape = v;
      }
      return { shape: b.shape, texData: y, isUniform: false };
    });
    this.uploadToGPU(o.dataId);
    let d = { shape: o.shape, texData: l, isUniform: false }, c = U9(t, p, d), h = this.getAndSaveBinary(c, () => B9(this.gpgpu, t, p, d)), m = this.activeTimers != null, f;
    m && (f = this.startTimer()), G().get("ENGINE_COMPILE_ONLY") || V9(this.gpgpu, h, p, d, r), u.forEach((b) => this.disposeIntermediateTensorInfo(b)), m && (f = this.endTimer(f), this.activeTimers.push({ name: t.constructor.name, query: this.getQueryTime(f) }));
    let g = G().getNumber("WEBGL_FLUSH_THRESHOLD");
    if (g > 0) {
      let b = w.now();
      b - this.lastGlFlushTime > g && (this.gpgpu.gl.flush(), this.lastGlFlushTime = b);
    }
    if (!G().getBool("WEBGL_LAZILY_UNPACK") && l.isPacked && s === false) {
      let b = this.unpackTensor(o);
      return this.disposeIntermediateTensorInfo(o), b;
    }
    return o;
  }
  compileAndRun(t, n, a, r, s = false) {
    return a = a || n[0].dtype, this.runWebGLProgram(t, n, a, r, s);
  }
  getAndSaveBinary(t, n) {
    return t in this.binaryCache || (this.binaryCache[t] = n()), this.binaryCache[t];
  }
  getTextureManager() {
    return this.textureManager;
  }
  dispose() {
    this.disposed || (G().getBool("IS_TEST") || Object.keys(this.binaryCache).forEach((t) => {
      this.gpgpu.deleteProgram(this.binaryCache[t].webGLProgram), delete this.binaryCache[t];
    }), this.textureManager.dispose(), this.canvas != null && typeof HTMLCanvasElement != "undefined" && this.canvas instanceof HTMLCanvasElement ? this.canvas.remove() : this.canvas = null, this.gpgpuCreatedLocally && (this.gpgpu.program = null, this.gpgpu.dispose()), this.disposed = true);
  }
  floatPrecision() {
    return this.floatPrecisionValue == null && (this.floatPrecisionValue = O(() => {
      if (!G().get("WEBGL_RENDER_FLOAT32_ENABLED")) {
        let t = G().getBool("DEBUG");
        G().set("DEBUG", false);
        let n = this.abs(xe(1e-8)).dataSync()[0];
        if (G().set("DEBUG", t), n > 0) return 32;
      }
      return 16;
    })), this.floatPrecisionValue;
  }
  epsilon() {
    return this.floatPrecision() === 32 ? oee : lee;
  }
  uploadToGPU(t) {
    let n = this.texData.get(t), { shape: a, dtype: r, values: s, texture: i, usage: o, isPacked: l } = n;
    if (i != null) return;
    let u = this.activeTimers != null, p;
    u && (p = w.now());
    let d = n.texShape;
    if (d == null && (d = Z_(a, l), n.texShape = d), s != null) {
      let c = ic(a), h, m = d[1], f = d[0], g = s instanceof Uint8Array || s instanceof Uint8ClampedArray;
      (l || !g) && ([m, f] = op(d[0], d[1])), l ? h = new X9(c, g) : h = new aS(c, g);
      let b = g ? [f, m] : d, y = this.makeTensorInfo(b, r), x = this.texData.get(y.dataId);
      g ? x.usage = ca.PIXELS : x.usage = ca.UPLOAD, x.texShape = b, this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(y.dataId), m, f, s);
      let v = [[f, m]], I = this.runWebGLProgram(h, [y], r, v, true), N = this.texData.get(I.dataId);
      n.texShape = N.texShape, n.isPacked = N.isPacked, n.usage = N.usage, G().get("ENGINE_COMPILE_ONLY") ? this.disposeData(I.dataId) : (n.texture = N.texture, n.values = null, this.texData.delete(I.dataId)), this.disposeIntermediateTensorInfo(y), u && (this.uploadWaitMs += w.now() - p);
    } else {
      let c = this.acquireTexture(d, o, r, l);
      n.texture = c;
    }
  }
  convertAndCacheOnCPU(t, n) {
    let a = this.texData.get(t), { dtype: r } = a;
    return n != null && (a.values = hee(n, r)), a.values;
  }
  acquireTexture(t, n, a, r) {
    if (this.numBytesInGPU += this.computeBytes(t, a), !this.warnedAboutMemory && this.numBytesInGPU > this.numMBBeforeWarning * 1024 * 1024) {
      let s = (this.numBytesInGPU / 1024 / 1024).toFixed(2);
      this.warnedAboutMemory = true, console.warn(`High memory usage in GPU: ${s} MB, most likely due to a memory leak`);
    }
    return this.textureManager.acquireTexture(t, n, r);
  }
  computeBytes(t, n) {
    return t[0] * t[1] * w.bytesPerElement(n);
  }
  checkCompileCompletion() {
    for (let [, t] of Object.entries(this.binaryCache)) this.checkCompletion_(t);
  }
  async checkCompileCompletionAsync() {
    let t = [];
    if (this.gpgpu.parallelCompilationExtension) {
      for (let [, n] of Object.entries(this.binaryCache)) t.push(this.checkCompletionAsync_(n));
      return Promise.all(t);
    } else {
      for (let [, n] of Object.entries(this.binaryCache)) {
        let a = new Promise((r) => {
          try {
            this.checkCompletion_(n), r(true);
          } catch (s) {
            throw s;
          }
        });
        t.push(a);
      }
      return Promise.all(t);
    }
  }
  async checkCompletionAsync_(t) {
    return this.gpgpu.gl.getProgramParameter(t.webGLProgram, this.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR) ? this.checkCompletion_(t) : (await Zw(), this.checkCompletionAsync_(t));
  }
  checkCompletion_(t) {
    if (this.gpgpu.gl.getProgramParameter(t.webGLProgram, this.gpgpu.gl.LINK_STATUS) === false) throw console.log(this.gpgpu.gl.getProgramInfoLog(t.webGLProgram)), this.gpgpu.gl.getShaderParameter(t.fragmentShader, this.gpgpu.gl.COMPILE_STATUS) === false ? (J1(t.source, this.gpgpu.gl.getShaderInfoLog(t.fragmentShader)), new Error("Failed to compile fragment shader.")) : new Error("Failed to link vertex and fragment shaders.");
    return true;
  }
  getUniformLocations() {
    for (let t of Object.values(this.binaryCache)) {
      this.gpgpu.buildVao(t.webGLProgram);
      let { variablesLocations: n, customUniformLocations: a, infLoc: r, nanLoc: s, outShapeLocation: i, outShapeStridesLocation: o, outTexShapeLocation: l } = lA(this.gpgpu, t.program, t.webGLProgram);
      t.variablesLocations = n, t.customUniformLocations = a, t.infLoc = r, t.nanLoc = s, t.outShapeLocation = i, t.outShapeStridesLocation = o, t.outTexShapeLocation = l;
    }
  }
  createTensorFromGPUData(t, n, a) {
    t.channels = t.channels || "RGBA";
    let { texture: r, height: s, width: i, channels: o } = t, l = Ta().backend;
    if (!l.gpgpu.gl.isTexture(r)) throw new Error("The texture is invalid. Also, please make sure the texture and the TFJS WebGL backend are using the same canvas. If you want to use your own custom canvas, you have to create and use the custom TFJS WebGL backend created from the canvas through 'new tf.MathBackendWebGL(customCanvas)'.");
    let u = l.writeTexture(r, n, a, s, i, o);
    return Ta().makeTensorFromDataId(u, n, a, l);
  }
};
lk.nextDataId = 0;
function hee(e17, t) {
  if (t === "float32" || t === "complex64") return e17;
  if (t === "int32" || t === "bool") {
    let n = t === "int32" ? new Int32Array(e17.length) : new Uint8Array(e17.length);
    for (let a = 0; a < n.length; ++a) n[a] = Math.round(e17[a]);
    return n;
  } else throw new Error(`Unknown dtype ${t}`);
}
var mee = "4.22.0";
function $A() {
  G().set("WEBGL_FORCE_F16_TEXTURES", true);
}
ad.isBrowser() && Om("webgl", () => new lk(), 2);
var fee = { forceHalfFloat: $A };
var uk = `
  if (isnan(a)) return a;
  if (isnan(b)) return b;
`;
var ki = class {
  constructor(e17, t, n) {
    this.variableNames = ["A", "B"], this.outputShape = T.assertAndGetBroadcastShape(t, n), this.enableShapeUniforms = vn(this.outputShape.length), this.userCode = `
      float binaryOperation(float a, float b) {
        ${e17}
      }

      void main() {
        float a = getAAtOutCoords();
        float b = getBAtOutCoords();
        setOutput(binaryOperation(a, b));
      }
    `;
  }
};
var Qo = `
  result.r = isNaN.r ? NAN : result.r;
  result.g = isNaN.g ? NAN : result.g;
  result.b = isNaN.b ? NAN : result.b;
  result.a = isNaN.a ? NAN : result.a;
`;
var hp = class {
  constructor(e17, t, n, a = false) {
    this.variableNames = ["A", "B"], this.supportsBroadcasting = true, this.packedInputs = true, this.packedOutput = true, this.outputShape = T.assertAndGetBroadcastShape(t, n);
    let r = this.outputShape.length;
    this.enableShapeUniforms = vn(r);
    let s = "";
    if (a) if (r === 0 || w.sizeFromShape(this.outputShape) === 1) s = `
          result.y = 0.;
          result.z = 0.;
          result.w = 0.;
        `;
    else if (s = `
          ${ht(r)} coords = getOutputCoords();
        `, r === 1) this.enableShapeUniforms ? s += `
            result.y = (coords + 1) >= outShape ? 0. : result.y;
            result.z = 0.;
            result.w = 0.;
          ` : s += `
            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;
            result.z = 0.;
            result.w = 0.;
          `;
    else {
      let i = In("coords", r);
      this.enableShapeUniforms ? s += `
            bool nextRowOutOfBounds =
              (${i[r - 2]} + 1) >= outShape[${r} - 2];
            bool nextColOutOfBounds =
              (${i[r - 1]} + 1) >= outShape[${r} - 1];
            result.y = nextColOutOfBounds ? 0. : result.y;
            result.z = nextRowOutOfBounds ? 0. : result.z;
            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;
          ` : s += `
            bool nextRowOutOfBounds =
              (${i[r - 2]} + 1) >= ${this.outputShape[r - 2]};
            bool nextColOutOfBounds =
              (${i[r - 1]} + 1) >= ${this.outputShape[r - 1]};
            result.y = nextColOutOfBounds ? 0. : result.y;
            result.z = nextRowOutOfBounds ? 0. : result.z;
            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;
          `;
    }
    this.userCode = `
      vec4 binaryOperation(vec4 a, vec4 b) {
        ${e17}
      }

      void main() {
        vec4 a = getAAtOutCoords();
        vec4 b = getBAtOutCoords();

        vec4 result = binaryOperation(a, b);
        ${s}

        setOutput(result);
      }
    `;
  }
};
function ta(e17) {
  let { inputs: t, backend: n } = e17, { x: a } = t;
  return n.incRef(a.dataId), { dataId: a.dataId, shape: a.shape, dtype: a.dtype };
}
var gee = { kernelName: eo, backendName: "webgl", kernelFunc: ta };
function $s(e17) {
  let { inputs: t, backend: n } = e17, { real: a, imag: r } = t, s = n.makeTensorInfo(a.shape, "complex64"), i = n.texData.get(s.dataId), o = ta({ inputs: { x: a }, backend: n }), l = ta({ inputs: { x: r }, backend: n });
  return i.complexTensorInfos = { real: o, imag: l }, s;
}
var bee = { kernelName: wm, backendName: "webgl", kernelFunc: $s };
var DA = "return (a < 0.) ? b * a : a;";
var RA = `
  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));
  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);
`;
function yee(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r } = t, { alpha: s } = a, i = n.makeTensorInfo([], "float32", w.createScalarValue(s, "float32")), o = G().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new hp(RA, r.shape, i.shape) : new ki(DA, r.shape, i.shape), l = n.runWebGLProgram(o, [r, i], "float32");
  return n.disposeIntermediateTensorInfo(i), l;
}
var xee = { kernelName: ro, backendName: "webgl", kernelFunc: yee };
var MA = "return (a < 0.) ? b * a : a;";
var OA = `
  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));
  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);
`;
function vee(e17) {
  let { inputs: t, backend: n } = e17, { x: a, alpha: r } = t, s = G().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new hp(OA, a.shape, r.shape) : new ki(MA, a.shape, r.shape);
  return n.runWebGLProgram(s, [a, r], "float32");
}
var wee = { kernelName: wo, backendName: "webgl", kernelFunc: vee };
var mp = "if (isnan(x)) return x;";
function Ze({ opSnippet: e17, packedOpSnippet: t, cpuKernelImpl: n, dtype: a }) {
  return ({ inputs: r, backend: s }) => {
    let { x: i } = r, o = s, l = a || i.dtype;
    if (o.shouldExecuteOnCPU([i]) && n != null) {
      let d = o.texData.get(i.dataId), c = n(d.values, l);
      return o.makeTensorInfo(i.shape, l, c);
    }
    let u = G().getBool("WEBGL_PACK_UNARY_OPERATIONS") && t != null, p;
    return u ? p = new ts(i.shape, t) : p = new rr(i.shape, e17), o.runWebGLProgram(p, [i], l);
  };
}
function hn({ opSnippet: e17, packedOpSnippet: t, checkOutOfBounds: n = false, supportsComplex: a = false, cpuKernelImpl: r, dtype: s }) {
  return ({ inputs: i, backend: o }) => {
    let { a: l, b: u } = i, p = o;
    if (a && l.dtype === "complex64") {
      let m = p.texData.get(l.dataId), f = p.texData.get(u.dataId), [g, b] = [[m.complexTensorInfos.real, f.complexTensorInfos.real], [m.complexTensorInfos.imag, f.complexTensorInfos.imag]].map((x) => {
        let [v, I] = x, N = { dataId: v.dataId, dtype: v.dtype, shape: l.shape }, C = { dataId: I.dataId, dtype: I.dtype, shape: u.shape }, _ = new ki(e17, l.shape, u.shape);
        return p.runWebGLProgram(_, [N, C], fa(v.dtype, I.dtype));
      }), y = $s({ inputs: { real: g, imag: b }, backend: p });
      return p.disposeIntermediateTensorInfo(g), p.disposeIntermediateTensorInfo(b), y;
    }
    let d = s || fa(l.dtype, u.dtype);
    if ((l.dtype === "string" || u.dtype === "string" || p.shouldExecuteOnCPU([l, u])) && r != null) {
      let m = p.texData.get(l.dataId).values, f = p.texData.get(u.dataId).values, g = l.dtype === "string" ? T.fromUint8ToStringArray(m) : m, b = l.dtype === "string" ? T.fromUint8ToStringArray(f) : f, [y, x] = r(l.shape, u.shape, g, b, d), v = p.makeTensorInfo(x, d), I = p.texData.get(v.dataId);
      return I.values = y, v;
    }
    let c = G().getBool("WEBGL_PACK_BINARY_OPERATIONS") && t != null, h;
    return c ? h = new hp(t, l.shape, u.shape, n) : h = new ki(e17, l.shape, u.shape), p.runWebGLProgram(h, [l, u], d);
  };
}
function Cc(e17, t = false) {
  if (e17 === "linear") return t ? eee : XQ;
  if (e17 === "relu") return t ? nee : ZQ;
  if (e17 === "elu") return t ? tee : YQ;
  if (e17 === "relu6") return t ? aee : JQ;
  if (e17 === "prelu") return t ? OA : MA;
  if (e17 === "leakyrelu") return t ? RA : DA;
  if (e17 === "sigmoid") return t ? ree : QQ;
  throw new Error(`Activation ${e17} has not been implemented for the WebGL backend.`);
}
var PA = class {
  constructor(e17, t, n, a = false, r = false, s = false, i = null, o = false, l = false) {
    this.variableNames = ["matrixA", "matrixB"], this.packedInputs = true, this.packedOutput = true, this.outputShape = n, this.enableShapeUniforms = vn(this.outputShape.length);
    let u = a ? e17[1] : e17[2], p = Math.ceil(u / 2), d = a ? "i * 2, rc.y" : "rc.y, i * 2", c = r ? "rc.z, i * 2" : "i * 2, rc.z", h = a ? ["a.xxyy", "a.zzww"] : ["a.xxzz", "a.yyww"], m = r ? ["b.xzxz", "b.ywyw"] : ["b.xyxy", "b.zwzw"], f = "", g = "";
    i && (o ? f = `vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${i}
        }` : l ? f = `vec4 activation(vec4 a) {
          vec4 b = getLeakyreluAlphaAtOutCoords();
          ${i}
        }` : f = `vec4 activation(vec4 x) {
          ${i}
        }`, g = "result = activation(result);");
    let b = s ? "result += getBiasAtOutCoords();" : "";
    s && this.variableNames.push("bias"), o && this.variableNames.push("preluActivationWeights"), l && this.variableNames.push("leakyreluAlpha");
    let y = "rc.x", x = "rc.x";
    e17[0] < t[0] ? y = `imod(rc.x, ${e17[0]})` : t[0] < e17[0] && (x = `imod(rc.x, ${t[0]})`), this.userCode = `
      ${f}
      // Don't use uniform for sharedDimensionPacked for performance.
      const float sharedDimension = ${p}.0;

      vec4 dot2x2ARowBCol(ivec3 rc) {
        vec4 result = vec4(0);
        int batchA = ${y};
        int batchB = ${x};
        for (int i = 0; i < ${p}; i++) {
          vec4 a = getMatrixA(batchA, ${d});
          vec4 b = getMatrixB(batchB, ${c});

          // These swizzled products need to be separately added.
          // See: https://github.com/tensorflow/tfjs/issues/1735
          result += (${h[0]} * ${m[0]});
          result += (${h[1]} * ${m[1]});
        }
        return result;
      }

      void main() {
        ivec3 rc = getOutputCoords();
        vec4 result = dot2x2ARowBCol(rc);

        ${b}

        ${g}

        setOutput(result);
      }
    `;
  }
};
var lS = { REAL: "return areal * breal - aimag * bimag;", IMAG: "return areal * bimag + aimag * breal;" };
var uS = class {
  constructor(e17, t, n) {
    this.variableNames = ["AReal", "AImag", "BReal", "BImag"], this.outputShape = T.assertAndGetBroadcastShape(t, n), this.userCode = `
      float binaryOpComplex(
          float areal, float aimag, float breal, float bimag) {
        ${e17}
      }

      void main() {
        float areal = getARealAtOutCoords();
        float aimag = getAImagAtOutCoords();
        float breal = getBRealAtOutCoords();
        float bimag = getBImagAtOutCoords();
        setOutput(binaryOpComplex(areal, aimag, breal, bimag));
      }
    `;
  }
};
var pS = "return a * b;";
function pk(e17) {
  let { inputs: t, backend: n } = e17, { a, b: r } = t, s = T.upcastType(a.dtype, r.dtype);
  if (a.dtype === "complex64") {
    let o = n.texData.get(a.dataId), l = n.texData.get(r.dataId), u = new uS(lS.REAL, a.shape, r.shape), p = new uS(lS.IMAG, a.shape, r.shape), d = [{ dataId: o.complexTensorInfos.real.dataId, dtype: o.complexTensorInfos.real.dtype, shape: a.shape }, { dataId: o.complexTensorInfos.imag.dataId, dtype: o.complexTensorInfos.imag.dtype, shape: a.shape }, { dataId: l.complexTensorInfos.real.dataId, dtype: l.complexTensorInfos.real.dtype, shape: r.shape }, { dataId: l.complexTensorInfos.imag.dataId, dtype: l.complexTensorInfos.imag.dtype, shape: r.shape }], c = n.runWebGLProgram(u, d, "float32"), h = n.runWebGLProgram(p, d, "float32"), m = $s({ inputs: { real: c, imag: h }, backend: n });
    return n.disposeIntermediateTensorInfo(c), n.disposeIntermediateTensorInfo(h), m;
  }
  if (n.shouldExecuteOnCPU([a, r])) {
    let o = n.texData.get(a.dataId), l = n.texData.get(r.dataId), [u, p] = yQ(a.shape, r.shape, o.values, l.values, s), d = n.makeTensorInfo(p, s), c = n.texData.get(d.dataId);
    return c.values = u, d;
  }
  let i;
  return G().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? i = new hp(pS, a.shape, r.shape) : i = new ki(pS, a.shape, r.shape), n.runWebGLProgram(i, [a, r], s);
}
var kee = { kernelName: bo, backendName: "webgl", kernelFunc: pk };
function Iee(e17, t, n) {
  let a = [vi(e17.shape), ...wi(e17.shape)], r = { dtype: e17.dtype, shape: a, dataId: e17.dataId }, s = [vi(t), ...wi(t)], i = new AA(s, a), o = true, l = [a], u = n.runWebGLProgram(i, [r], e17.dtype, l, o);
  return { dataId: u.dataId, shape: t, dtype: u.dtype };
}
function ce(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r } = t, { shape: s } = a, i = n, o = w.sizeFromShape(r.shape), l = w.inferFromImplicitShape(s, o), u = w.sizeFromShape(l);
  w.assert(o === u, () => `The new shape (${l}) has ${u} elements and the old shape (${r.shape}) has ${o} elements. The new shape and old shape must have the same number of elements.`);
  let p = i.texData.get(r.dataId);
  return p.isPacked && !Tc(r.shape, l) && !(p.texture !== null && Tc(p.shape, l)) ? Iee(r, l, i) : (i.incRef(r.dataId), { dataId: r.dataId, shape: l, dtype: r.dtype });
}
var See = { kernelName: Ru, backendName: "webgl", kernelFunc: ce };
var cS = class {
  constructor(e17, t) {
    this.variableNames = ["x"];
    let { windowSize: n, batchSize: a, inSize: r, outSize: s } = e17;
    this.outputShape = [a, s];
    let i = Math.floor(n / 4) * 4, o = n % 4, l = "sumValue += dot(values, ones);";
    if (t != null) {
      let p = 1 / t;
      l = `sumValue += dot(values * ${w.isInt(p) ? p.toPrecision(2) : p}, ones);`;
    }
    let u = "";
    r % n > 0 && (u = `
        if (inIdx < 0 || inIdx >= ${r}) {
          return 0.0;
        }
      `), this.userCode = `
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float getValue(int batch, int inIdx) {
        ${u}
        return getX(batch, inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${n};

        float sumValue = 0.0;

        for (int i = 0; i < ${i}; i += 4) {
          int inIdx = inOffset + i;
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          ${l}
        }

        int inIdx = inOffset + ${i};
        if (${o === 1}) {
          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);

          ${l}
        } else if (${o === 2}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1), 0.0, 0.0);

          ${l}
        } else if (${o === 3}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2), 0.0);

          ${l}
        }
        setOutput(sumValue);
      }
    `;
  }
};
var Nee = class {
  constructor(e17, t) {
    this.variableNames = ["x"];
    let { windowSize: n, batchSize: a, inSize: r, outSize: s } = e17;
    this.outputShape = [a, s];
    let i = "0.0", o = "";
    t === "prod" ? i = "1.0" : t === "min" ? (i = "1.0 / 1e-20", o = "min") : t === "max" && (i = "-1.0 / 1e-20", o = "max");
    let l = `${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;
    t === "sum" ? l = "sumValue" : t === "prod" ? l = "prodValue" : t === "all" ? l = "allValue" : t === "any" && (l = "anyValue");
    let u = Math.floor(n / 4) * 4, p = n % 4, d = `
      if (${t === "sum"}) {
        sumValue += dot(values, ones);
      } else if (${t === "prod"}) {
        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);
        prodValue *= tmp[0] * tmp[1];
      } else {
        minMaxValue = ${o}(values, minMaxValue);
        if (${t === "min"} || ${t === "max"}) {
          minMaxValue = ${o}(values, minMaxValue);
          bvec4 isNaN = isnan(values);
          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {
            minMaxValue = vec4(NAN);
          }
        }
      }
    `, c = "vec4";
    t === "all" ? (i = "1.0", d = `
        bool reducedAllValue = all(values);
        float floatedReducedAllValue = float(reducedAllValue);
        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);
      `, c = "bvec4") : t === "any" && (i = "0.0", d = `
        bool reducedAnyValue = any(values);
        float floatedReducedAnyValue = float(reducedAnyValue);
        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);
      `, c = "bvec4");
    let h = "";
    r % n > 0 && (h = `
        if (inIdx < 0 || inIdx >= ${r}) {
          return initializationValue;
        }
      `), this.userCode = `
      const float initializationValue = ${i};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float getValue(int batch, int inIdx) {
        ${h}
        return getX(batch, inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${n};

        vec4 minMaxValue = vec4(${i});
        float prodValue = 1.0;
        float sumValue = 0.0;
        float allValue = 1.0;
        float anyValue = 0.0;

        for (int i = 0; i < ${u}; i += 4) {
          int inIdx = inOffset + i;
          ${c} values = ${c}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          ${d}
        }

        int inIdx = inOffset + ${u};
        if (${p === 1}) {
          ${c} values = ${c}(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          ${d}
        } else if (${p === 2}) {
          ${c} values = ${c}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          ${d}
        } else if (${p === 3}) {
          ${c} values = ${c}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          ${d}
        }
        setOutput(${l});
      }
    `;
  }
};
function Tee(e17) {
  let t = [];
  for (; t.length === 0 || t[t.length - 1].outSize !== 1; ) {
    let n = t.length ? t[t.length - 1].outSize : e17[1], a = T.computeOptimalWindowSize(n);
    t.push({ inSize: n, windowSize: a, outSize: Math.ceil(n / a) });
  }
  return t;
}
function el(e17, t, n, a) {
  let r = Tee(e17.shape), s = e17;
  for (let i = 0; i < r.length; i++) {
    let { inSize: o, windowSize: l, outSize: u } = r[i], p, d;
    n === "mean" ? p = i === 0 ? new cS({ windowSize: l, inSize: o, batchSize: e17.shape[0], outSize: u }, o) : new cS({ windowSize: l, inSize: o, batchSize: e17.shape[0], outSize: u }) : p = new Nee({ windowSize: l, inSize: o, batchSize: e17.shape[0], outSize: u }, n), d = s, s = a.runWebGLProgram(p, [s], t), d.dataId !== e17.dataId && a.disposeIntermediateTensorInfo(d);
  }
  return s;
}
var Cee = class {
  constructor(e17, t) {
    this.variableNames = ["A"];
    let n = new Array(e17.length);
    for (let s = 0; s < n.length; s++) n[s] = e17[t[s]];
    this.outputShape = n, this.rank = n.length;
    let a = ht(this.rank), r = Eee(t);
    this.userCode = `
    void main() {
      ${a} resRC = getOutputCoords();
      setOutput(getA(${r}));
    }
    `;
  }
};
function Eee(e17) {
  let t = e17.length;
  if (t > 6) throw Error(`Transpose for rank ${t} is not yet supported`);
  let n = ["resRC.x", "resRC.y", "resRC.z", "resRC.w", "resRC.u", "resRC.v"], a = new Array(t);
  for (let r = 0; r < e17.length; r++) a[e17[r]] = n[r];
  return a.join();
}
var _ee = class {
  constructor(e17, t) {
    this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = true;
    let n = new Array(e17.length);
    for (let u = 0; u < n.length; u++) n[u] = e17[t[u]];
    if (this.outputShape = n, this.rank = n.length, this.rank > 6) throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);
    let a = ht(this.rank), r = _A("rc", this.rank), s = new Array(this.rank);
    for (let u = 0; u < t.length; u++) s[t[u]] = r[u];
    let i = `vec2(${s.slice(-2).join()})`, o = `++${r[this.rank - 1]} < ${n[this.rank - 1]}`, l = `getChannel(getA(${s.join()}), ${i})`;
    this.userCode = `
    void main() {
      ${a} rc = getOutputCoords();
      vec4 result = vec4(0.);
      result[0] = ${l};
      if(${o}) {
        result[1] = ${l};
      }
      --${r[this.rank - 1]};
      if(++${r[this.rank - 2]} < ${n[this.rank - 2]}) {
        result[2] = ${l};
        if(${o}) {
          result[3] = ${l};
        }
      }
      setOutput(result);
    }
    `;
  }
};
function Bf(e17, t, n) {
  let a = G().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new _ee(e17.shape, t) : new Cee(e17.shape, t);
  return n.runWebGLProgram(a, [e17], e17.dtype);
}
function Aee(e17, t, n, a) {
  let r = t, s = e17.shape.length, i = w.parseAxisParam(r, e17.shape), o = i, l = T.getAxesPermutation(o, s), u = l != null, p = e17;
  u && (p = Bf(e17, l, a), o = T.getInnerMostAxes(o.length, s)), T.assertAxesAreInnerMostDims("sum", o, s);
  let [d, c] = T.computeOutAndReduceShapes(p.shape, o), h = d;
  n && (h = T.expandShapeToKeepDim(d, i));
  let m = w.sizeFromShape(c), f = w.sizeFromShape(e17.shape) / m, g = ce({ inputs: { x: p }, attrs: { shape: [f, m] }, backend: a }), b = Mm(e17.dtype), y = el(g, b, "sum", a), x = ce({ inputs: { x: y }, attrs: { shape: h }, backend: a });
  return a.disposeIntermediateTensorInfo(g), a.disposeIntermediateTensorInfo(y), u && a.disposeIntermediateTensorInfo(p), x;
}
function Vf(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r } = t, { axis: s, keepDims: i } = a;
  return Aee(r, s, i, n);
}
var Fee = { kernelName: Lo, backendName: "webgl", kernelFunc: Vf };
function Sn(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r } = t, { perm: s } = a, i = n, o = r.shape.length, l = new Array(o);
  for (let p = 0; p < l.length; p++) l[p] = r.shape[s[p]];
  let u;
  if (i.shouldExecuteOnCPU([r])) {
    let p = i.texData.get(r.dataId).values, d = ok(p, r.shape, r.dtype, s, l);
    u = i.makeTensorInfo(l, r.dtype);
    let c = i.texData.get(u.dataId);
    c.values = d;
  } else u = Bf(r, s, i);
  return u;
}
var $ee = { kernelName: Cr, backendName: "webgl", kernelFunc: Sn };
var LA = 1e3;
function hm({ a: e17, b: t, transposeA: n, transposeB: a, backend: r, bias: s = null, preluActivationWeights: i = null, leakyreluAlpha: o = 0, activation: l = null }) {
  let u = e17.shape.length, p = t.shape.length, d = n ? e17.shape[u - 2] : e17.shape[u - 1], c = a ? t.shape[p - 1] : t.shape[p - 2], h = n ? e17.shape[u - 1] : e17.shape[u - 2], m = a ? t.shape[p - 2] : t.shape[p - 1], f = e17.shape.slice(0, -2), g = t.shape.slice(0, -2), b = w.sizeFromShape(f), y = w.sizeFromShape(g), x = Ju.assertAndGetBroadcastShape(e17.shape.slice(0, -2), t.shape.slice(0, -2)).concat([h, m]);
  w.assert(d === c, () => `Error in matMul: inner shapes (${d}) and (${c}) of Tensors with shapes ${e17.shape} and ${t.shape} and transposeA=${n} and transposeB=${a} must match.`);
  let v = n ? [b, d, h] : [b, h, d], I = a ? [y, m, c] : [y, c, m], N = ce({ inputs: { x: e17 }, backend: r, attrs: { shape: v } }), C = ce({ inputs: { x: t }, backend: r, attrs: { shape: I } }), _ = [N, C], F = Math.max(b, y), D = n ? N.shape[1] : N.shape[2], $ = s != null, S = i != null, M = l === "leakyrelu", B = l != null ? Cc(l, true) : null, U = $ || S || M || B != null, H;
  if ((h === 1 || m === 1) && D > LA && U === false) {
    let K = N, Z = C;
    n && (K = Sn({ inputs: { x: N }, backend: r, attrs: { perm: [0, 2, 1] } }), _.push(K)), a && (Z = Sn({ inputs: { x: C }, backend: r, attrs: { perm: [0, 2, 1] } }), _.push(Z));
    let J = m !== 1, ee = m === 1, ae = K;
    J && (ae = ce({ inputs: { x: K }, backend: r, attrs: { shape: [F, D, 1] } }), _.push(ae));
    let te = m === 1 ? 2 : 1, se = Z;
    ee && (se = ce({ inputs: { x: Z }, backend: r, attrs: { shape: [F, 1, D] } }), _.push(se));
    let ie = pk({ inputs: { a: ae, b: se }, backend: r });
    H = Vf({ inputs: { x: ie }, backend: r, attrs: { axis: te, keepDims: true } }), _.push(ie);
  } else {
    let K = fa(e17.dtype, t.dtype), Z = new PA(v, I, [F, h, m], n, a, $, B, S, M), J = [N, C];
    if (s != null && J.push(s), S && J.push(i), M) {
      let ee = r.makeTensorInfo([], "float32", w.createScalarValue(o, "float32"));
      J.push(ee), _.push(ee);
    }
    H = r.runWebGLProgram(Z, J, K);
  }
  let q = ce({ inputs: { x: H }, backend: r, attrs: { shape: x } });
  _.push(H);
  for (let K of _) r.disposeIntermediateTensorInfo(K);
  return q;
}
function Dee(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { a: r, b: s, bias: i, preluActivationWeights: o } = t, { transposeA: l, transposeB: u, activation: p, leakyreluAlpha: d } = a;
  return hm({ a: r, b: s, transposeA: l, transposeB: u, backend: n, bias: i, preluActivationWeights: o, leakyreluAlpha: d, activation: p });
}
var Ree = { kernelName: ii, backendName: "webgl", kernelFunc: Dee };
var dS = "return abs(x);";
function Mee(e17) {
  let { inputs: t, backend: n } = e17, { x: a } = t;
  if (n.shouldExecuteOnCPU([a]) && a.dtype !== "complex64") {
    let s = n.texData.get(a.dataId), i = CA(s.values);
    return n.makeTensorInfo(a.shape, a.dtype, i);
  }
  let r;
  return G().getBool("WEBGL_PACK_UNARY_OPERATIONS") ? r = new ts(a.shape, dS) : r = new rr(a.shape, dS), n.runWebGLProgram(r, [a], a.dtype);
}
var Oee = { kernelName: Yl, backendName: "webgl", kernelFunc: Mee };
var Pee = Da + `
  if (abs(x) > 1.) {
    return NAN;
  }
  return acos(x);
`;
var Lee = Ze({ opSnippet: Pee });
var zee = { kernelName: Ni, backendName: "webgl", kernelFunc: Lee };
var Wee = Da + `
  if (x < 1.0) return NAN;
return log(x + sqrt(x * x - 1.0));`;
var Bee = Ze({ opSnippet: Wee });
var Vee = { kernelName: Ti, backendName: "webgl", kernelFunc: Bee };
var hS = "return a + b;";
var Uee = hn({ opSnippet: hS, packedOpSnippet: hS, supportsComplex: true, cpuKernelImpl: Z9 });
var Gee = { kernelName: vs, backendName: "webgl", kernelFunc: Uee };
var Hee = class {
  constructor(e17, t) {
    this.outputShape = [], this.outputShape = e17, this.variableNames = t.map((r, s) => `T${s}`);
    let n = [];
    this.variableNames.forEach((r) => {
      n.push(`float v${r} = get${r}AtOutCoords();`);
    });
    let a = this.variableNames.map((r) => `v${r}`).join(" + ");
    this.userCode = `
      void main() {
        ${n.join(`
        `)}

        float result = ${a};
        setOutput(result);
      }
    `;
  }
};
var jee = class {
  constructor(e17, t) {
    this.outputShape = [], this.packedInputs = true, this.packedOutput = true, this.outputShape = e17, this.variableNames = t.map((r, s) => `T${s}`);
    let n = [];
    this.variableNames.forEach((r) => {
      n.push(`vec4 v${r} = get${r}AtOutCoords();`);
    });
    let a = this.variableNames.map((r) => `v${r}`).join(" + ");
    this.userCode = `
      void main() {
        ${n.join(`
        `)}

        vec4 result = ${a};
        setOutput(result);
      }
    `;
  }
};
function Bh(e17) {
  let { inputs: t, backend: n } = e17, a = t;
  if (a.length === 1) return ta({ inputs: { x: a[0] }, backend: n });
  if (a.length > G().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")) {
    let o = Math.floor(a.length / 2), l = Bh({ inputs: a.slice(0, o), backend: n }), u = Bh({ inputs: a.slice(o), backend: n });
    return Bh({ inputs: [l, u], backend: n });
  }
  let r = a.map((o) => o.dtype).reduce((o, l) => fa(o, l)), s = a.map((o) => o.shape), i = G().getBool("WEBGL_PACK") ? new jee(a[0].shape, s) : new Hee(a[0].shape, s);
  return n.runWebGLProgram(i, a, r);
}
var qee = { kernelName: Ci, backendName: "webgl", kernelFunc: Bh };
function Kee(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r } = t, { axis: s, keepDims: i } = a, o = r.shape.length, l = w.parseAxisParam(s, r.shape), u = l, p = T.getAxesPermutation(u, o), d = r;
  p != null && (d = Sn({ inputs: { x: r }, backend: n, attrs: { perm: p } }), u = T.getInnerMostAxes(u.length, o)), T.assertAxesAreInnerMostDims("all", u, o);
  let [c, h] = T.computeOutAndReduceShapes(d.shape, u), m = w.sizeFromShape(h), f = ce({ inputs: { x: d }, backend: n, attrs: { shape: [-1, m] } }), g = el(f, f.dtype, "all", n), b;
  if (i) {
    let y = T.expandShapeToKeepDim(c, l);
    b = ce({ inputs: { x: g }, backend: n, attrs: { shape: y } });
  } else b = ce({ inputs: { x: g }, backend: n, attrs: { shape: c } });
  return n.disposeIntermediateTensorInfo(f), n.disposeIntermediateTensorInfo(g), p != null && n.disposeIntermediateTensorInfo(d), b;
}
var Xee = { kernelName: Zl, backendName: "webgl", kernelFunc: Kee };
function Yee(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r } = t, { axis: s, keepDims: i } = a, o = r.shape.length, l = w.parseAxisParam(s, r.shape), u = l, p = T.getAxesPermutation(u, o), d = r;
  p != null && (d = Sn({ inputs: { x: r }, backend: n, attrs: { perm: p } }), u = T.getInnerMostAxes(u.length, o)), T.assertAxesAreInnerMostDims("any", u, o);
  let [c, h] = T.computeOutAndReduceShapes(d.shape, u), m = w.sizeFromShape(h), f = ce({ inputs: { x: d }, backend: n, attrs: { shape: [-1, m] } }), g = el(f, f.dtype, "any", n), b;
  if (i) {
    let y = T.expandShapeToKeepDim(c, l);
    b = ce({ inputs: { x: g }, backend: n, attrs: { shape: y } });
  } else b = ce({ inputs: { x: g }, backend: n, attrs: { shape: c } });
  return n.disposeIntermediateTensorInfo(f), n.disposeIntermediateTensorInfo(g), p != null && n.disposeIntermediateTensorInfo(d), b;
}
var Zee = { kernelName: Jl, backendName: "webgl", kernelFunc: Yee };
var Jee = class {
  constructor(e17, t, n) {
    this.variableNames = ["A"];
    let { windowSize: a, batchSize: r, outSize: s } = e17;
    n || this.variableNames.push("bestIndicesA"), this.outputShape = [r, s];
    let i = t === "max" ? ">" : "<", o = n ? "inOffset + i;" : "round(getBestIndicesA(batch, inOffset + i));";
    this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${a};

        int bestIndex = inOffset;
        float bestValue = getA(batch, bestIndex);

        for (int i = 0; i < ${a}; i++) {
          int inIdx = ${o};
          float candidate = getA(batch, inIdx);
          if (candidate ${i} bestValue) {
            bestValue = candidate;
            bestIndex = inIdx;
          }
        }
        setOutput(float(bestIndex));
      }
    `;
  }
};
var Qee = class {
  constructor(e17, t, n, a) {
    this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = true, w.assert(e17.length > 2, () => `Packed arg${n.charAt(0).toUpperCase() + n.slice(1)} supports only inputs with rank above 2.`);
    let r = e17[e17.length - 1], s = Math.ceil(r / t);
    this.outputShape = e17.slice(0, -1), s > 1 && this.outputShape.push(s), a || this.variableNames.push("bestIndicesA");
    let i = this.outputShape, o = i.length, l = ht(o), u = In("coords", o), p, d;
    if (s === 1) {
      d = o + 1;
      let C = ht(d);
      p = `
        ${C} sourceLocR = ${C}(${u.join()}, 0);
        ++${u[o - 1]};
        ${C} sourceLocG = ${C}(${u.join()}, 0);
        ++${u[o - 2]};
        ${C} sourceLocA = ${C}(${u.join()}, 0);
        --${u[o - 1]};
        ${C} sourceLocB = ${C}(${u.join()}, 0);
        --${u[o - 2]};`;
    } else d = o, p = `
        ${l} sourceLocR = coords;
        ++${u[o - 1]};
        ${l} sourceLocG = coords;
        ++${u[o - 2]};
        ${l} sourceLocA = coords;
        --${u[o - 1]};
        ${l} sourceLocB = coords;
        --${u[o - 2]};`;
    let c = ["x", "y", "z", "w", "u", "v"].slice(0, d), h = "." + c[d - 1], m = c.map((C) => "int " + C), f = In("sourceLocR", d - 1).concat("inIdx.r"), g = In("sourceLocG", d - 1).concat("inIdx.g"), b = In("sourceLocB", d - 1).concat("inIdx.b"), y = In("sourceLocA", d - 1).concat("inIdx.a"), x = n === "max" ? "greaterThan" : "lessThan", v = a ? "" : `
          inIdx = round(vec4(getBestIndicesAChannel(${f.join()}),
                             getBestIndicesAChannel(${g.join()}),
                             getBestIndicesAChannel(${b.join()}),
                             getBestIndicesAChannel(${y.join()})));`, I = `vec4(
            getAChannel(${f.join()}),
            hasNextCol ? getAChannel(${g.join()}) : 0.,
            hasNextRow ? getAChannel(${b.join()}) : 0.,
            hasNextRow && hasNextCol ? getAChannel(${y.join()}) : 0.)`, N = a ? "" : `
      float getBestIndicesAChannel(${m.join()}) {
        return getChannel(getBestIndicesA(${c.join()}),
                                          vec2(${c.slice(-2).join()}));
      }`;
    this.userCode = `
      float getAChannel(${m.join()}) {
        return getChannel(getA(${c.join()}),
                               vec2(${c.slice(-2).join()}));
      }
      ${N}
      void main() {
        ${l} coords = getOutputCoords();
        bool hasNextCol = ${u[o - 1]} < ${i[o - 1] - 1};
        bool hasNextRow = ${u[o - 2]} < ${i[o - 2] - 1};
        ${p}
        ivec4 srcIdx = ivec4(sourceLocR${h}, sourceLocG${h},
          sourceLocB${h}, sourceLocA${h}) * ${t};
        ivec4 inIdx = srcIdx;
        vec4 bestIndex = vec4(inIdx);
        vec4 bestValue = ${I};

        for (int i = 0; i < ${t}; i++) {
          inIdx = srcIdx;
          ${v}
          vec4 candidate = ${I};
          bvec4 nan = isnan(candidate);
          bvec4 replace = bvec4(
            vec4(${x}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));

          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,
                           replace.y  ? candidate.y : bestValue.y,
                           replace.z  ? candidate.z : bestValue.z,
                           replace.w  ? candidate.w : bestValue.w);
          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));
          srcIdx++;
        }
        setOutput(bestIndex);
      }
    `;
  }
};
function zA(e17, t, n, a = null) {
  let r = t.shape[0], s = t.shape[1];
  a != null && (r = a.shape[0], s = a.shape[1]);
  let i = T.computeOptimalWindowSize(s), o = { windowSize: i, inSize: s, batchSize: r, outSize: Math.ceil(s / i) }, l = new Jee(o, n, a == null), u = [t];
  a != null && u.push(a);
  let p = e17.runWebGLProgram(l, u, "int32");
  if (p.shape[1] === 1) return p;
  let d = zA(e17, t, n, p);
  return e17.disposeIntermediateTensorInfo(p), d;
}
function WA(e17, t, n, a = null) {
  let r = a != null ? a.shape : t.shape, s = r[r.length - 1], i = T.computeOptimalWindowSize(s), o = new Qee(r, i, n, a == null), l = a == null ? [t] : [t, a], u = e17.runWebGLProgram(o, l, "int32");
  if (u.shape.length === t.shape.length) {
    let p = WA(e17, t, n, u);
    return e17.disposeIntermediateTensorInfo(u), p;
  }
  return u;
}
function BA(e17, t, n, a) {
  let r = [n];
  if (T.assertAxesAreInnerMostDims("arg" + a.charAt(0).toUpperCase() + a.slice(1), r, t.shape.length), !G().getBool("WEBGL_PACK_REDUCE") || t.shape.length <= 2) {
    let s = [], i = e17.texData.get(t.dataId), o = i !== null && i.isPacked, l = t;
    o && (l = e17.unpackTensor(t), s.push(l));
    let [u, p] = T.computeOutAndReduceShapes(l.shape, r), d = w.sizeFromShape(p), c = ce({ inputs: { x: l }, backend: e17, attrs: { shape: [-1, d] } });
    s.push(c);
    let h = zA(e17, c, a);
    s.push(h);
    let m = ce({ inputs: { x: h }, backend: e17, attrs: { shape: u } });
    return s.forEach((f) => e17.disposeIntermediateTensorInfo(f)), m;
  }
  return WA(e17, t, a);
}
function ete(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r } = t, { axis: s } = a, i = w.parseAxisParam(s, r.shape), o = T.getAxesPermutation(i, r.shape.length), l = r, u = [];
  o != null && (l = Sn({ inputs: { x: r }, backend: n, attrs: { perm: o } }), u.push(l), i = T.getInnerMostAxes(i.length, l.shape.length)), T.assertAxesAreInnerMostDims("argMax", [i[0]], l.shape.length);
  let p = BA(n, l, i[0], "max");
  return u.forEach((d) => n.disposeIntermediateTensorInfo(d)), p;
}
var tte = { kernelName: Ql, backendName: "webgl", kernelFunc: ete };
function nte(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r } = t, { axis: s } = a, i = w.parseAxisParam(s, r.shape), o = T.getAxesPermutation(i, r.shape.length), l = r, u = [];
  o != null && (l = Sn({ inputs: { x: r }, backend: n, attrs: { perm: o } }), u.push(l), i = T.getInnerMostAxes(i.length, l.shape.length)), T.assertAxesAreInnerMostDims("argMin", [i[0]], l.shape.length);
  let p = BA(n, l, i[0], "min");
  return u.forEach((d) => n.disposeIntermediateTensorInfo(d)), p;
}
var ate = { kernelName: eu, backendName: "webgl", kernelFunc: nte };
var rte = Da + `
  if (abs(x) > 1.) {
    return NAN;
  }
  return asin(x);
`;
var ste = Ze({ opSnippet: rte });
var ite = { kernelName: Ei, backendName: "webgl", kernelFunc: ste };
var ote = Da + "return log(x + sqrt(x * x + 1.0));";
var lte = Ze({ opSnippet: ote });
var ute = { kernelName: _i, backendName: "webgl", kernelFunc: lte };
var pte = Da + `
  return atan(x);
`;
var cte = Ze({ opSnippet: pte });
var dte = { kernelName: Ai, backendName: "webgl", kernelFunc: cte };
var hte = uk + `
  return atan(a, b);
`;
var mte = `
  vec4 result = atan(a, b);
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  ` + Qo + `
  return result;
`;
var fte = hn({ opSnippet: hte, packedOpSnippet: mte });
var gte = { kernelName: $i, backendName: "webgl", kernelFunc: fte };
var bte = Da + `
  if ((x < -1.0) || (x > 1.0)) return NAN;
return (log(1.0 + x) - log(1.0 - x)) / 2.0;`;
var yte = Ze({ opSnippet: bte });
var xte = { kernelName: Fi, backendName: "webgl", kernelFunc: yte };
var Ec = class {
  constructor(e17, t, n, a = false, r = false) {
    if (this.variableNames = ["x"], t === "avg" && n) throw new Error("Cannot compute positions for average pool.");
    let s = e17.filterWidth, i = e17.strideHeight, o = e17.strideWidth, l = e17.dilationHeight, u = e17.dilationWidth, p = e17.effectiveFilterHeight, d = e17.effectiveFilterWidth, c = e17.padInfo.top, h = e17.padInfo.left;
    this.outputShape = e17.outShape;
    let m = t === "avg", f = `((batch  * ${e17.inHeight} + xR) * ${e17.inWidth} + xC) * ${e17.inChannels} + d`, g = `(xR * ${e17.inWidth} + xC) * ${e17.inChannels} + d`, b = "0.0";
    if (m || (b = "-1.0 / 1e-20"), n) {
      let C = ">=";
      this.userCode = `
        const ivec2 strides = ivec2(${i}, ${o});
        const ivec2 pads = ivec2(${c}, ${h});

        void main() {
          ivec4 coords = getOutputCoords();
          int batch = coords[0];
          int d = coords[3];

          ivec2 xRCCorner = coords.yz * strides - pads;
          int xRCorner = xRCCorner.x;
          int xCCorner = xRCCorner.y;

          // max/min x(?, ?, d) to get y(yR, yC, d).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;
          float avgValue = 0.0;

          for (int wR = 0; wR < ${p};
              wR += ${l}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${e17.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${d};
                wC += ${u}) {
              int xC = xCCorner + wC;

              if (xC < 0 || xC >= ${e17.inWidth}) {
                continue;
              }

              float value = getX(batch, xR, xC, d);

              // If a min / max value has already been found, use it. If not,
              // use the current value.
              float currMinMaxValue = mix(
                  value, minMaxValue, minMaxValueFound);
              if (value ${C} currMinMaxValue) {
                minMaxValue = value;
                minMaxValueFound = 1.0;
                minMaxPosition = ${a ? r ? f : g : `wR * ${d} + wC`};
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `;
      return;
    }
    let y = "max", x = `${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;
    t === "avg" && (x = "avgValue / max(count, 1.0)");
    let v = Math.floor(s / 4) * 4, I = s % 4, N = `
      if (${m}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = ${y}(values, minMaxValue);
      }
    `;
    this.userCode = `
      const ivec2 strides = ivec2(${i}, ${o});
      const ivec2 pads = ivec2(${c}, ${h});
      const float initializationValue = ${b};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xR, int xC, int d) {
        if (xC < 0 || xC >= ${e17.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xR, xC, d);
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d = coords[3];

        ivec2 xRCCorner = coords.yz * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // max/min x(?, ?, d) to get y(yR, yC, d).
        // ? = to be determined
        vec4 minMaxValue = vec4(${b});
        float avgValue = 0.0;
        count = 0.0;

        for (int wR = 0; wR < ${p};
            wR += ${l}) {
          int xR = xRCorner + wR;

          if (xR < 0 || xR >= ${e17.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${v}; wC += 4) {
            int xC = xCCorner + wC * ${u};

            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${u}, d),
              getValue(batch, xR, xC + 2 * ${u}, d),
              getValue(batch, xR, xC + 3 * ${u}, d)
            );

            ${N}
          }

          int xC = xCCorner + ${v};
          if (${I === 1}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              initializationValue,
              initializationValue,
              initializationValue
            );

            ${N}
          } else if (${I === 2}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${u}, d),
              initializationValue,
              initializationValue
            );

            ${N}
          } else if (${I === 3}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${u}, d),
              getValue(batch, xR, xC + 2 * ${u}, d),
              initializationValue
            );

            ${N}
          }
        }
        setOutput(${x});
      }
    `;
  }
};
var ck = class {
  constructor(e17, t, n, a = false, r = false) {
    if (this.variableNames = ["x"], t === "avg" && n) throw new Error("Cannot compute positions for average pool.");
    let s = e17.filterWidth, i = e17.strideDepth, o = e17.strideHeight, l = e17.strideWidth, u = e17.dilationDepth, p = e17.dilationHeight, d = e17.dilationWidth, c = e17.effectiveFilterDepth, h = e17.effectiveFilterHeight, m = e17.effectiveFilterWidth, f = e17.padInfo.front, g = e17.padInfo.top, b = e17.padInfo.left;
    this.outputShape = e17.outShape;
    let y = t === "avg", x = "0.0";
    if (y || (x = "-1.0 / 1e-20"), n) {
      let F = ">=";
      this.userCode = `
        const ivec3 strides =
            ivec3(${i}, ${o}, ${l});
        const ivec3 pads = ivec3(${f}, ${g}, ${b});

        void main() {
          ivec5 coords = getOutputCoords();
          int batch = coords.x;
          int ch = coords.u;

          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
          int xDCorner = xCorner.x;
          int xRCorner = xCorner.y;
          int xCCorner = xCorner.z;

          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;

          for (int wD = 0; wD < ${c};
              wD += ${u}) {
            int xD = xDCorner + wD;

            if (xD < 0 || xD >= ${e17.inDepth}) {
              continue;
            }

            for (int wR = 0; wR < ${h};
                wR += ${p}) {
              int xR = xRCorner + wR;

              if (xR < 0 || xR >= ${e17.inHeight}) {
                continue;
              }

              for (int wC = 0; wC < ${m};
                  wC += ${d}) {
                int xC = xCCorner + wC;

                if (xC < 0 || xC >= ${e17.inWidth}) {
                  continue;
                }

                float value = getX(batch, xD, xR, xC, ch);

                // If a min / max value has already been found, use it. If not,
                // use the current value.
                float currMinMaxValue = mix(
                    value, minMaxValue, minMaxValueFound);
                if (value ${F} currMinMaxValue) {
                  minMaxValue = value;
                  minMaxValueFound = 1.0;
                  minMaxPosition = ${a ? r ? `(((batch * ${e17.inDepth} + xD) * ${e17.inHeight} + xR) * ${e17.inWidth} + xC) * ${e17.inChannels} + ch` : `((xD * ${e17.inHeight} + xR) * ${e17.inWidth} + xC) * ${e17.inChannels} + ch` : `wD * ${h} * ${m} +
                      wR * ${m} + wC`};
                }
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `;
      return;
    }
    let v = "max", I = `${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;
    t === "avg" && (I = "avgValue / max(count, 1.0)");
    let N = Math.floor(s / 4) * 4, C = s % 4, _ = `
      if (${y}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = ${v}(values, minMaxValue);
      }
    `;
    this.userCode = `
      const ivec3 strides =
        ivec3(${i}, ${o}, ${l});
      const ivec3 pads = ivec3(${f}, ${g}, ${b});
      const float initializationValue = ${x};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xD, int xR, int xC, int ch) {
        if (xC < 0 || xC >= ${e17.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xD, xR, xC, ch);
      }

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xDCorner = xCorner.x;
        int xRCorner = xCorner.y;
        int xCCorner = xCorner.z;

        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).
        // ? = to be determined
        vec4 minMaxValue = vec4(${x});
        float avgValue = 0.0;
        count = 0.0;

        for (int wD = 0; wD < ${c};
            wD += ${u}) {
          int xD = xDCorner + wD;

          if (xD < 0 || xD >= ${e17.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${h};
            wR += ${p}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${e17.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${N}; wC += 4) {
              int xC = xCCorner + wC * ${d};

              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${d}, ch),
                getValue(batch, xD, xR, xC + 2 * ${d}, ch),
                getValue(batch, xD, xR, xC + 3 * ${d}, ch)
              );

              ${_}
            }

            int xC = xCCorner + ${N};
            if (${C === 1}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                initializationValue,
                initializationValue,
                initializationValue
              );

              ${_}
            } else if (${C === 2}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${d}, ch),
                initializationValue,
                initializationValue
              );

              ${_}
            } else if (${C === 3}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${d}, ch),
                getValue(batch, xD, xR, xC + 2 * ${d}, ch),
                initializationValue
              );

              ${_}
            }
          }
        }
        setOutput(${I});
      }
    `;
  }
};
function vte(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r } = t;
  lp(r, "avgPool");
  let { filterSize: s, strides: i, pad: o, dimRoundingMode: l } = a, u = 1;
  w.assert(T.eitherStridesOrDilationsAreOne(i, u), () => `Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${u}'`);
  let p = T.computePool2DInfo(r.shape, s, i, u, o, l);
  if (p.filterWidth === 1 && p.filterHeight === 1 && w.arraysEqual(p.inShape, p.outShape)) return ta({ inputs: { x: r }, backend: n });
  let d = new Ec(p, "avg", false);
  return n.runWebGLProgram(d, [r], "float32");
}
var wte = { kernelName: Di, backendName: "webgl", kernelFunc: vte };
function kte(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r } = t, { filterSize: s, strides: i, pad: o, dimRoundingMode: l, dataFormat: u } = a, p = [1, 1, 1], d = T.computePool3DInfo(r.shape, s, i, p, o, l, u), c = new ck(d, "avg", false);
  return n.runWebGLProgram(c, [r], "float32");
}
var Ite = { kernelName: tu, backendName: "webgl", kernelFunc: kte };
var Ste = class {
  constructor(e17) {
    this.variableNames = ["dy"], this.outputShape = e17.inShape;
    let t = e17.filterHeight, n = e17.filterWidth, a = e17.strideHeight, r = e17.strideWidth, s = e17.dilationHeight, i = e17.dilationWidth, o = e17.effectiveFilterHeight, l = e17.effectiveFilterWidth, u = o - 1 - e17.padInfo.top, p = l - 1 - e17.padInfo.left, d = 1 / (t * n);
    this.userCode = `
      const ivec2 pads = ivec2(${u}, ${p});
      const float avgMultiplier = float(${d});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${o};
            wR += ${s}) {
          float dyR = float(dyRCorner + wR) / ${a}.0;

          if (dyR < 0.0 || dyR >= ${e17.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${l};
            wC+= ${i}) {
            float dyC = float(dyCCorner + wC) / ${r}.0;

            if (dyC < 0.0 || dyC >= ${e17.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);

            dotProd += dyValue * avgMultiplier;
          }
        }
        setOutput(dotProd);
      }
    `;
  }
};
var Nte = class {
  constructor(e17) {
    this.variableNames = ["dy"], this.outputShape = e17.inShape;
    let t = e17.filterDepth, n = e17.filterHeight, a = e17.filterWidth, r = e17.strideDepth, s = e17.strideHeight, i = e17.strideWidth, o = e17.dilationDepth, l = e17.dilationHeight, u = e17.dilationWidth, p = e17.effectiveFilterDepth, d = e17.effectiveFilterHeight, c = e17.effectiveFilterWidth, h = p - 1 - e17.padInfo.front, m = d - 1 - e17.padInfo.top, f = c - 1 - e17.padInfo.left, g = 1 / (t * n * a);
    this.userCode = `
      const ivec3 pads = ivec3(${h}, ${m}, ${f});
      const float avgMultiplier = float(${g});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${p};
            wD += ${o}) {
          float dyD = float(dyDCorner + wD) / ${r}.0;

          if (dyD < 0.0 || dyD >= ${e17.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${d};
              wR += ${l}) {
            float dyR = float(dyRCorner + wR) / ${s}.0;

            if (dyR < 0.0 || dyR >= ${e17.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${c};
                wC += ${u}) {
              float dyC = float(dyCCorner + wC) / ${i}.0;

              if (dyC < 0.0 || dyC >= ${e17.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);

              dotProd += dyValue * avgMultiplier;
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
};
function Tte(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { dy: r, input: s } = t, i = s, { filterSize: o, strides: l, pad: u, dimRoundingMode: p } = a, d = [1, 1, 1], c = T.computePool3DInfo(i.shape, o, l, d, u, p), h = new Nte(c);
  return n.runWebGLProgram(h, [r], i.dtype);
}
var Cte = { kernelName: Rc, backendName: "webgl", kernelFunc: Tte };
function Ete(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { dy: r, input: s } = t, i = s;
  lp([r, s], "avgPoolGrad");
  let { filterSize: o, strides: l, pad: u } = a, p = T.computePool2DInfo(i.shape, o, l, 1, u), d = new Ste(p);
  return n.runWebGLProgram(d, [r], i.dtype);
}
var _te = { kernelName: Dc, backendName: "webgl", kernelFunc: Ete };
function Ate(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { a: r, b: s } = t, { transposeA: i, transposeB: o } = a;
  return hm({ a: r, b: s, transposeA: i, transposeB: o, backend: n });
}
var Fte = { kernelName: Ri, backendName: "webgl", kernelFunc: Ate };
var $te = class {
  constructor(e17, t, n, a, r, s) {
    this.outputShape = [], this.variableNames = ["x", "mean", "variance"], T.assertAndGetBroadcastShape(e17, t), T.assertAndGetBroadcastShape(e17, n);
    let i = "0.0";
    a != null && (T.assertAndGetBroadcastShape(e17, a), this.variableNames.push("offset"), i = "getOffsetAtOutCoords()");
    let o = "1.0";
    r != null && (T.assertAndGetBroadcastShape(e17, r), this.variableNames.push("scale"), o = "getScaleAtOutCoords()"), this.outputShape = e17, this.userCode = `
      void main() {
        float x = getXAtOutCoords();
        float mean = getMeanAtOutCoords();
        float variance = getVarianceAtOutCoords();
        float offset = ${i};
        float scale = ${o};
        float inv = scale * inversesqrt(variance + float(${s}));
        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));
      }
    `;
  }
};
var Dte = class {
  constructor(e17, t, n, a, r, s) {
    this.packedInputs = true, this.packedOutput = true, this.variableNames = ["x", "mean", "variance"], T.assertAndGetBroadcastShape(e17, t), T.assertAndGetBroadcastShape(e17, n);
    let i = "vec4(0.0)";
    a != null && (T.assertAndGetBroadcastShape(e17, a), this.variableNames.push("offset"), i = "getOffsetAtOutCoords()");
    let o = "vec4(1.0)";
    r != null && (T.assertAndGetBroadcastShape(e17, r), this.variableNames.push("scale"), o = "getScaleAtOutCoords()"), this.outputShape = e17, this.userCode = `
      void main() {
        vec4 offset = ${i};
        vec4 scale = ${o};

        vec4 x = getXAtOutCoords();
        vec4 mean = getMeanAtOutCoords();
        vec4 variance = getVarianceAtOutCoords();

        vec4 inv = scale * inversesqrt(variance + vec4(${s}));

        setOutput((x - mean) * inv + offset);
      }
    `;
  }
};
var Rte = ({ inputs: e17, backend: t, attrs: n }) => {
  let { x: a, mean: r, variance: s, offset: i, scale: o } = e17;
  w.assert(r.shape.length === s.shape.length, () => "Batch normalization gradient requires mean and variance to have equal ranks."), w.assert(i == null || r.shape.length === i.shape.length, () => "Batch normalization gradient requires mean and offset to have equal ranks."), w.assert(o == null || r.shape.length === o.shape.length, () => "Batch normalization gradient requires mean and scale to have equal ranks.");
  let { varianceEpsilon: l } = n;
  l == null && (l = 1e-3);
  let u = [a, r, s], p = null;
  i != null && (p = i.shape, u.push(i));
  let d = null;
  o != null && (d = o.shape, u.push(o));
  let c = G().getBool("WEBGL_PACK_NORMALIZATION") ? new Dte(a.shape, r.shape, s.shape, p, d, l) : new $te(a.shape, r.shape, s.shape, p, d, l);
  return t.runWebGLProgram(c, u, u[0].dtype);
};
var Mte = { kernelName: Ji, backendName: "webgl", kernelFunc: Rte };
var Ote = class {
  constructor(e17) {
    this.variableNames = ["source"], this.outputShape = e17, this.rank = e17.length;
    let t = ht(this.rank);
    this.customUniforms = [{ name: "start", arrayIndex: this.rank, type: "int" }];
    let n = Pte(this.rank), a, r = e17.map((s, i) => `sourceLoc.${mv[i]} = start[${i}] + coords.${mv[i]};`);
    a = `
        ${t} sourceLoc;
        ${t} coords = getOutputCoords();
        ${r.join(`
`)}
      `, this.userCode = `
      void main() {
        ${a}
        setOutput(getSource(${n}));
      }
    `;
  }
};
var mv = ["x", "y", "z", "w", "u", "v"];
function Pte(e17) {
  if (e17 === 1) return "sourceLoc";
  if (e17 <= 6) return mv.slice(0, e17).map((t) => "sourceLoc." + t).join(",");
  throw Error(`Slicing for rank ${e17} is not yet supported`);
}
var Lte = class {
  constructor(e17) {
    this.variableNames = ["source"], this.packedInputs = true, this.packedOutput = true, this.outputShape = e17, this.rank = e17.length, this.customUniforms = [{ name: "start", arrayIndex: this.rank, type: "int" }];
    let t = ht(this.rank), n = In("coords", this.rank), a = In("sourceLoc", this.rank), r = this.rank === 1 ? "sourceLoc" : `vec2(${a.slice(-2).join()})`, s = `getChannel(getSource(${a.join()}), ${r})`, i = `
      result.x = ${s};
      if (++${n[this.rank - 1]} < ${e17[this.rank - 1]}) {
        ++${a[this.rank - 1]};
        result.y = ${s};
        --${a[this.rank - 1]};
      }
    `, o = this.rank === 1 ? "" : `
      --${n[this.rank - 1]};
      if (++${n[this.rank - 2]} < ${e17[this.rank - 2]}) {
        ++${a[this.rank - 2]};
        result.z = ${s};
        if (++${n[this.rank - 1]} < ${e17[this.rank - 1]}) {
          ++${a[this.rank - 1]};
          result.w = ${s};
        }
      }
    `, l = this.rank <= 4 ? `sourceLoc = coords +
            ${t}(${e17.map((u, p) => `start[${p}]`).join()});` : e17.map((u, p) => `${a[p]} = ${n[p]} + start[${p}];`).join(`
`);
    this.userCode = `
      void main() {
        ${t} coords = getOutputCoords();
        ${t} sourceLoc;
        ${l}
        vec4 result = vec4(0.);
        ${i}
        ${o}
        setOutput(result);
      }
    `;
  }
};
function zte(e17, t, n, a) {
  let r = a.texData.get(e17.dataId), s = a.makeTensorInfo(n, e17.dtype), i = a.texData.get(s.dataId);
  Object.assign(i, r), i.refCount = 1, i.shape = n, i.dtype = e17.dtype;
  let o = Kt.computeFlatOffset(t, w.computeStrides(e17.shape));
  r.slice && (o += r.slice.flatOffset), i.slice = { flatOffset: o, origDataId: r.slice && r.slice.origDataId || e17.dataId };
  let l = a.dataRefCount.get(i.slice.origDataId) || 1;
  return a.dataRefCount.set(i.slice.origDataId, l + 1), s;
}
function fp(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r } = t, { begin: s, size: i } = a, [o, l] = Kt.parseSliceParams(r, s, i);
  if (Kt.assertParamsValid(r, o, l), w.sizeFromShape(l) === 0) return n.makeTensorInfo(l, r.dtype, []);
  if (n.shouldExecuteOnCPU([r]) || r.dtype === "string") {
    let d = n.texData.get(r.dataId), c = _Q(d.values, o, l, r.shape, r.dtype);
    return n.makeTensorInfo(l, r.dtype, c);
  }
  let { isPacked: u } = n.texData.get(r.dataId), p = Kt.isSliceContinous(r.shape, o, l);
  if (u || !p) {
    let d = G().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new Lte(l) : new Ote(l), c = [o];
    return n.runWebGLProgram(d, [r], r.dtype, c);
  }
  return n.uploadToGPU(r.dataId), zte(r, o, l, n);
}
var Wte = { kernelName: Bu, backendName: "webgl", kernelFunc: fp };
var Bte = (e17) => {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r } = t, { blockShape: s, crops: i } = a;
  w.assert(r.shape.length <= 4, () => "batchToSpaceND for rank > 4 with a WebGL backend not implemented yet");
  let o = s.reduce((y, x) => y * x), l = T.getReshaped(r.shape, s, o), u = T.getPermuted(l.length, s.length), p = T.getReshapedPermuted(r.shape, s, o), d = T.getSliceBeginCoords(i, s.length), c = T.getSliceSize(p, i, s.length), h = [], m = ce({ inputs: { x: r }, backend: n, attrs: { shape: l } }), f = Sn({ inputs: { x: m }, backend: n, attrs: { perm: u } }), g = ce({ inputs: { x: f }, backend: n, attrs: { shape: p } }), b = fp({ inputs: { x: g }, backend: n, attrs: { begin: d, size: c } });
  return h.push(m), h.push(f), h.push(g), h.forEach((y) => n.disposeIntermediateTensorInfo(y)), b;
};
var Vte = { kernelName: nu, backendName: "webgl", kernelFunc: Bte };
function Ute(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r, weights: s } = t, { size: i } = a, o = n.readSync(r.dataId), l = n.readSync(s.dataId), u = TA(o, l, s.dtype, s.shape, i);
  return n.makeTensorInfo([i], s.dtype, u);
}
var Gte = { kernelName: au, backendName: "webgl", kernelFunc: Ute };
var Hte = `
  int r = int(a.r) & int(b.r);
  int g = int(a.g) & int(b.g);
  int rb = int(a.b) & int(b.b);
  int ra = int(a.a) & int(b.a);
  return vec4(r, g, rb, ra);
`;
var jte = `
  return float(int(a.r) & int(b.r));
`;
function qte(e17) {
  let { inputs: t, backend: n } = e17, { a, b: r } = t, s = G().getBool("WEBGL_PACK_BINARY_OPERATIONS"), i = G().getNumber("WEBGL_VERSION");
  if (n.shouldExecuteOnCPU([a, r]) || i === 1) {
    let l = n.texData.get(a.dataId).values, u = n.texData.get(r.dataId).values, [p, d] = Q9(a.shape, r.shape, l, u, a.dtype), c = n.makeTensorInfo(d, a.dtype), h = n.texData.get(c.dataId);
    return h.values = p, c;
  }
  let o;
  return s ? o = new hp(Hte, a.shape, r.shape, false) : o = new ki(jte, a.shape, r.shape), n.runWebGLProgram(o, [a, r], a.dtype);
}
var Kte = { kernelName: ru, backendName: "webgl", kernelFunc: qte };
function Xte(e17) {
  let { inputs: t, backend: n } = e17, { s0: a, s1: r } = t, s = n.readSync(a.dataId), i = n.readSync(r.dataId), o = T.assertAndGetBroadcastShape(Array.from(s), Array.from(i));
  return n.makeTensorInfo([o.length], "int32", Int32Array.from(o));
}
var Yte = { kernelName: Mc, backendName: "webgl", kernelFunc: Xte };
var Zte = "return float(a != b);";
var VA = hn({ opSnippet: Zte, cpuKernelImpl: vQ, dtype: "bool" });
var Jte = { kernelName: Eu, backendName: "webgl", kernelFunc: VA };
function Fd(e17) {
  let { inputs: t, backend: n } = e17, { input: a } = t, r = n.texData.get(a.dataId);
  return ta({ inputs: { x: r.complexTensorInfos.real }, backend: n });
}
var Qte = { kernelName: Dm, backendName: "webgl", kernelFunc: Fd };
var ene = "return float(int(x));";
function tne(e17, t) {
  let n = new rr(e17.shape, ene), a = t.runWebGLProgram(n, [e17], "int32");
  return { dataId: a.dataId, shape: a.shape, dtype: a.dtype };
}
function fv(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r } = t, { dtype: s } = a;
  if (s === "complex64") {
    if (r.dtype === "complex64") return ta({ inputs: { x: r }, backend: n });
    let i = It(r.shape), o = fv({ inputs: { x: r }, backend: n, attrs: { dtype: "float32" } }), l = $s({ inputs: { real: o, imag: i }, backend: n });
    return i.dispose(), n.disposeIntermediateTensorInfo(o), l;
  }
  if (r.dtype === "complex64") {
    let i = Fd({ inputs: { input: r }, backend: n }), o = fv({ inputs: { x: i }, backend: n, attrs: { dtype: s } });
    return n.disposeIntermediateTensorInfo(i), o;
  }
  if (!w.hasEncodingLoss(r.dtype, s)) {
    let i = ta({ inputs: { x: r }, backend: n });
    return { dataId: i.dataId, shape: i.shape, dtype: s };
  }
  if (n.shouldExecuteOnCPU([r])) {
    let i = n.texData.get(r.dataId).values, [o, l, u] = eQ(i, r.shape, r.dtype, s);
    return n.makeTensorInfo(o, l, u);
  }
  if (s === "int32") return tne(r, n);
  if (s === "bool") {
    let i = n.makeTensorInfo([], "bool", w.getTypedArrayFromDType("bool", 1)), o = VA({ inputs: { a: r, b: i }, backend: n });
    return n.disposeIntermediateTensorInfo(i), o;
  }
  throw new Error(`Error in Cast: failed to cast ${r.dtype} to ${s}`);
}
var nne = { kernelName: Mi, backendName: "webgl", kernelFunc: fv };
var mS = "return ceil(x);";
var ane = Ze({ opSnippet: mS, packedOpSnippet: mS, cpuKernelImpl: tQ });
var rne = { kernelName: Oi, backendName: "webgl", kernelFunc: ane };
var sne = class {
  constructor(e17) {
    this.variableNames = ["A"], this.customUniforms = [{ name: "minVal", type: "float" }, { name: "maxVal", type: "float" }], this.outputShape = e17, this.userCode = `

      void main() {
        float value = getAAtOutCoords();
        if (isnan(value)) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, minVal, maxVal));
      }
    `;
  }
};
var ine = class {
  constructor(e17) {
    this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = true, this.customUniforms = [{ name: "minVal", type: "float" }, { name: "maxVal", type: "float" }], this.outputShape = e17, this.userCode = `
      void main() {
        vec4 value = getAAtOutCoords();

        if (any(isnan(value))) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));
      }
    `;
  }
};
function one(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r } = t, { clipValueMin: s, clipValueMax: i } = a, o;
  G().getBool("WEBGL_PACK_CLIP") ? o = new ine(r.shape) : o = new sne(r.shape);
  let l = [[s], [i]];
  return n.runWebGLProgram(o, [r], r.dtype, l);
}
var lne = { kernelName: ws, backendName: "webgl", kernelFunc: one };
var une = class {
  constructor(e17) {
    this.variableNames = ["real", "imag"], this.outputShape = e17, this.userCode = `
      void main() {
        float re = abs(getRealAtOutCoords());
        float im = abs(getImagAtOutCoords());
        float mx = max(re, im);

        // sadly the length function in glsl is not underflow-safe
        // (at least not on Intel GPUs). So the safe solution is
        // to ensure underflow-safety in all cases.
        setOutput(
          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))
        );
      }
    `;
  }
};
function fS(e17, t) {
  return { dataId: t.dataId, dtype: t.dtype, shape: e17.shape };
}
function pne(e17) {
  let { inputs: t, backend: n } = e17, { x: a } = t, r = n.texData.get(a.dataId), s = new une(a.shape), i = [fS(a, r.complexTensorInfos.real), fS(a, r.complexTensorInfos.imag)];
  return n.runWebGLProgram(s, i, i[0].dtype);
}
var cne = { kernelName: Oc, backendName: "webgl", kernelFunc: pne };
var dne = class {
  constructor(e17) {
    this.outputShape = [], this.outputShape = T.computeOutShape(e17, 1), this.variableNames = e17.map((s, i) => `T${i}`);
    let t = new Array(e17.length - 1);
    t[0] = e17[0][1];
    for (let s = 1; s < t.length; s++) t[s] = t[s - 1] + e17[s][1];
    let n = [`if (yC < ${t[0]}) setOutput(getT0(yR, yC));`];
    for (let s = 1; s < t.length; s++) {
      let i = t[s - 1];
      n.push(`else if (yC < ${t[s]}) setOutput(getT${s}(yR, yC-${i}));`);
    }
    let a = t.length, r = t[t.length - 1];
    n.push(`else setOutput(getT${a}(yR, yC-${r}));`), this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int yR = coords.x;
        int yC = coords.y;

        ${n.join(`
        `)}
      }
    `;
  }
};
var hne = class {
  constructor(e17, t) {
    this.packedInputs = true, this.packedOutput = true, this.outputShape = [], this.outputShape = T.computeOutShape(e17, t);
    let n = this.outputShape, a = n.length, r = ht(a), s = In("coords", a), i = ["x", "y", "z", "w", "u", "v"].slice(0, a);
    this.variableNames = e17.map((m, f) => `T${f}`);
    let o = new Array(e17.length - 1);
    o[0] = e17[0][t];
    for (let m = 1; m < o.length; m++) o[m] = o[m - 1] + e17[m][t];
    let l = i[t], u = i.slice(-2), p = i.join(), d = `if (${l} < ${o[0]}) {
        return getChannel(
            getT0(${p}), vec2(${u.join()}));
        }`;
    for (let m = 1; m < o.length; m++) {
      let f = o[m - 1];
      d += `
        if (${l} < ${o[m]}  && ${l} >= ${o[m - 1]}) {
          return getChannel(
            getT${m}(${$h(i, l, f)}),
            vec2(${$h(u, l, f)}));
        }`;
    }
    let c = o.length, h = o[o.length - 1];
    d += `
        return getChannel(
          getT${c}(${$h(i, l, h)}),
          vec2(${$h(u, l, h)}));`, this.userCode = `
      float getValue(${i.map((m) => "int " + m)}) {
        ${d}
      }

      void main() {
        ${r} coords = getOutputCoords();
        vec4 result = vec4(getValue(${s}), 0., 0., 0.);

        ${s[a - 1]} = ${s[a - 1]} + 1;
        if (${s[a - 1]} < ${n[a - 1]}) {
          result.g = getValue(${s});
        }

        ${s[a - 2]} = ${s[a - 2]} + 1;
        if (${s[a - 2]} < ${n[a - 2]}) {
          result.a = getValue(${s});
        }

        ${s[a - 1]} = ${s[a - 1]} - 1;
        if (${s[a - 2]} < ${n[a - 2]} &&
            ${s[a - 1]} < ${n[a - 1]}) {
          result.b = getValue(${s});
        }
        setOutput(result);
      }
    `;
  }
};
function $h(e17, t, n) {
  let a = e17.indexOf(t);
  return e17.map((r, s) => s === a ? `${r} - ${n}` : r).join();
}
function Uf(e17) {
  let { inputs: t, backend: n } = e17, { input: a } = t, r = n.texData.get(a.dataId);
  return ta({ inputs: { x: r.complexTensorInfos.imag }, backend: n });
}
var mne = { kernelName: _m, backendName: "webgl", kernelFunc: Uf };
function oc(e17, t, n) {
  let a = e17[0].dtype;
  if (a === "complex64") {
    let h = e17.map((y) => Fd({ inputs: { input: y }, backend: n })), m = e17.map((y) => Uf({ inputs: { input: y }, backend: n })), f = oc(h, t, n), g = oc(m, t, n), b = $s({ inputs: { real: f, imag: g }, backend: n });
    return h.forEach((y) => n.disposeIntermediateTensorInfo(y)), m.forEach((y) => n.disposeIntermediateTensorInfo(y)), n.disposeIntermediateTensorInfo(f), n.disposeIntermediateTensorInfo(g), b;
  }
  let r = n.shouldExecuteOnCPU(e17);
  if (a === "string" && (r = true), r) {
    let h = e17.map((v) => {
      let I = [-1, w.sizeFromShape(v.shape.slice(t))];
      return ce({ inputs: { x: v }, backend: n, attrs: { shape: I } });
    }), m = h.map((v) => ({ vals: n.readSync(v.dataId), shape: v.shape })), f = T.computeOutShape(h.map((v) => v.shape), 1), g = h[0].shape[0] === 1, b = nQ(m, f, a, g), y = T.computeOutShape(e17.map((v) => v.shape), t), x = n.makeTensorInfo(y, a, b);
    return h.forEach((v) => n.disposeIntermediateTensorInfo(v)), x;
  }
  let s = e17.filter((h) => w.sizeFromShape(h.shape) > 0), i = G().getBool("WEBGL_PACK_ARRAY_OPERATIONS") && s[0].shape.length > 1;
  if (s.length === 1) {
    let h = i ? new rr(e17[0].shape, Yr) : new ts(e17[0].shape, Yr);
    return n.runWebGLProgram(h, e17, a);
  }
  let o = G().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER");
  if (s.length > o) {
    let h = [];
    for (let f = 0; f < s.length; f += o) {
      let g = s.slice(f, f + o);
      h.push(oc(g, t, n));
    }
    let m = oc(h, t, n);
    for (let f of h) n.disposeIntermediateTensorInfo(f);
    return m;
  }
  if (i) {
    let h = new hne(s.map((m) => m.shape), t);
    return n.runWebGLProgram(h, s, a);
  }
  let { tensors2D: l, outShape: u } = fne(s, t, n), p = new dne(l.map((h) => h.shape)), d = n.runWebGLProgram(p, l, a);
  l.forEach((h) => n.disposeIntermediateTensorInfo(h));
  let c = ce({ inputs: { x: d }, attrs: { shape: u }, backend: n });
  return n.disposeIntermediateTensorInfo(d), c;
}
function fne(e17, t, n) {
  let a = T.computeOutShape(e17.map((r) => r.shape), t);
  return { tensors2D: e17.map((r) => ce({ inputs: { x: r }, attrs: { shape: [-1, w.sizeFromShape(r.shape.slice(t))] }, backend: n })), outShape: a };
}
function UA(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { axis: r } = a, s = w.parseAxisParam(r, t[0].shape)[0], i = t.map((u) => u.shape);
  T.assertParamsConsistent(i, s);
  let o = T.computeOutShape(t.map((u) => u.shape), s);
  if (w.sizeFromShape(o) === 0) return n.makeTensorInfo(o, t[0].dtype, []);
  let l = t.filter((u) => w.sizeFromShape(u.shape) > 0);
  return l.length === 1 ? ta({ inputs: { x: l[0] }, backend: n }) : oc(l, s, n);
}
var gne = { kernelName: su, backendName: "webgl", kernelFunc: UA };
var GA = class {
  constructor(e17, t = false, n = null, a = false, r = false) {
    this.variableNames = ["x", "W"], this.outputShape = e17.outShape;
    let s = e17.padInfo.top, i = e17.padInfo.left, o = e17.strideHeight, l = e17.strideWidth, u = e17.dilationHeight, p = e17.dilationWidth, d = e17.filterHeight, c = e17.filterWidth, h = Math.floor(e17.inChannels / 4) * 4, m = e17.inChannels % 4, f = e17.dataFormat === "channelsLast", g = f ? 1 : 2, b = f ? 2 : 3, y = f ? 3 : 1, x = "", v = "";
    n && (a ? x = `float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${n}
        }` : r ? x = `float activation(float a) {
          float b = getLeakyreluAlphaAtOutCoords();
          ${n}
        }` : x = `
          float activation(float x) {
            ${n}
          }
        `, v = "result = activation(result);");
    let I = t ? "result += getBiasAtOutCoords();" : "";
    t && this.variableNames.push("bias"), a && this.variableNames.push("preluActivationWeights"), r && this.variableNames.push("leakyreluAlpha"), this.userCode = `
      ${x}

      const ivec2 strides = ivec2(${o}, ${l});
      const ivec2 pads = ivec2(${s}, ${i});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d2 = coords[${y}];

        ivec2 xRCCorner =
            ivec2(coords[${g}], coords[${b}]) * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${d}; wR++) {
          int xR = xRCorner + wR * ${u};

          if (xR < 0 || xR >= ${e17.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${c}; wC++) {
            int xC = xCCorner + wC * ${p};

            if (xC < 0 || xC >= ${e17.inWidth}) {
              continue;
            }

            for (int d1 = 0; d1 < ${h}; d1 += 4) {
              vec4 wValues = vec4(
                getW(wR, wC, d1, d2),
                getW(wR, wC, d1 + 1, d2),
                getW(wR, wC, d1 + 2, d2),
                getW(wR, wC, d1 + 3, d2)
              );

              if (${f}) {
                vec4 xValues = vec4(
                  getX(batch, xR, xC, d1),
                  getX(batch, xR, xC, d1 + 1),
                  getX(batch, xR, xC, d1 + 2),
                  getX(batch, xR, xC, d1 + 3)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec4 xValues = vec4(
                  getX(batch, d1, xR, xC),
                  getX(batch, d1 + 1, xR, xC),
                  getX(batch, d1 + 2, xR, xC),
                  getX(batch, d1 + 3, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }
            }

            if (${m === 1}) {

              if (${f}) {
                dotProd +=
                    getX(batch, xR, xC, ${h}) *
                    getW(wR, wC, ${h}, d2);
              } else {
                dotProd +=
                    getX(batch, ${h}, xR, xC) *
                    getW(wR, wC, ${h}, d2);
              }

            } else if (${m === 2}) {
              vec2 wValues = vec2(
                getW(wR, wC, ${h}, d2),
                getW(wR, wC, ${h} + 1, d2)
              );

              if (${f}) {
                vec2 xValues = vec2(
                  getX(batch, xR, xC, ${h}),
                  getX(batch, xR, xC, ${h} + 1)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec2 xValues = vec2(
                  getX(batch, ${h}, xR, xC),
                  getX(batch, ${h} + 1, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            } else if (${m === 3}) {
              vec3 wValues = vec3(
                getW(wR, wC, ${h}, d2),
                getW(wR, wC, ${h} + 1, d2),
                getW(wR, wC, ${h} + 2, d2)
              );

              if (${f}) {
                vec3 xValues = vec3(
                  getX(batch, xR, xC, ${h}),
                  getX(batch, xR, xC, ${h} + 1),
                  getX(batch, xR, xC, ${h} + 2)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec3 xValues = vec3(
                  getX(batch, ${h}, xR, xC),
                  getX(batch, ${h} + 1, xR, xC),
                  getX(batch, ${h} + 2, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            }
          }
        }

        float result = dotProd;
        ${I}
        ${v}
        setOutput(result);
      }
    `;
  }
};
var bne = class {
  constructor(e17) {
    this.variableNames = ["x", "W"], this.outputShape = e17.outShape;
    let t = e17.padInfo.front, n = e17.padInfo.top, a = e17.padInfo.left, r = e17.strideDepth, s = e17.strideHeight, i = e17.strideWidth, o = e17.dilationDepth, l = e17.dilationHeight, u = e17.dilationWidth, p = e17.filterDepth, d = e17.filterHeight, c = e17.filterWidth, h = Math.floor(e17.inChannels / 4) * 4, m = e17.inChannels % 4;
    this.userCode = `
      const ivec3 strides = ivec3(${r}, ${s}, ${i});
      const ivec3 pads = ivec3(${t}, ${n}, ${a});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d2 = coords.u;

        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xFCorner = xFRCCorner.x;
        int xRCorner = xFRCCorner.y;
        int xCCorner = xFRCCorner.z;

        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get
        // y(yF, yR, yC, d2). ? = to be determined. : = across all
        // values in that axis.
        float dotProd = 0.0;
        for (int wF = 0; wF < ${p}; wF++) {
          int xF = xFCorner + wF * ${o};

          if (xF < 0 || xF >= ${e17.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${d}; wR++) {
            int xR = xRCorner + wR * ${l};

            if (xR < 0 || xR >= ${e17.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${c}; wC++) {
              int xC = xCCorner + wC * ${u};

              if (xC < 0 || xC >= ${e17.inWidth}) {
                continue;
              }

              for (int d1 = 0; d1 < ${h}; d1 += 4) {
                vec4 xValues = vec4(
                  getX(batch, xF, xR, xC, d1),
                  getX(batch, xF, xR, xC, d1 + 1),
                  getX(batch, xF, xR, xC, d1 + 2),
                  getX(batch, xF, xR, xC, d1 + 3)
                );
                vec4 wValues = vec4(
                  getW(wF, wR, wC, d1, d2),
                  getW(wF, wR, wC, d1 + 1, d2),
                  getW(wF, wR, wC, d1 + 2, d2),
                  getW(wF, wR, wC, d1 + 3, d2)
                );

                dotProd += dot(xValues, wValues);
              }

              if (${m === 1}) {
                dotProd +=
                  getX(batch, xF, xR, xC, ${h}) *
                  getW(wF, wR, wC, ${h}, d2);
              } else if (${m === 2}) {
                vec2 xValues = vec2(
                  getX(batch, xF, xR, xC, ${h}),
                  getX(batch, xF, xR, xC, ${h} + 1)
                );
                vec2 wValues = vec2(
                  getW(wF, wR, wC, ${h}, d2),
                  getW(wF, wR, wC, ${h} + 1, d2)
                );
                dotProd += dot(xValues, wValues);
              } else if (${m === 3}) {
                vec3 xValues = vec3(
                  getX(batch, xF, xR, xC, ${h}),
                  getX(batch, xF, xR, xC, ${h} + 1),
                  getX(batch, xF, xR, xC, ${h} + 2)
                );
                vec3 wValues = vec3(
                  getW(wF, wR, wC, ${h}, d2),
                  getW(wF, wR, wC, ${h} + 1, d2),
                  getW(wF, wR, wC, ${h} + 2, d2)
                );
                dotProd += dot(xValues, wValues);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
};
var HA = class {
  constructor(e17, t = false, n = null, a = false, r = false) {
    this.variableNames = ["x", "W"], this.packedInputs = true, this.packedOutput = true, this.customUniforms = [{ name: "pads", type: "ivec2" }, { name: "strides", type: "ivec2" }, { name: "dilations", type: "ivec2" }, { name: "inDims", type: "ivec2" }], this.outputShape = e17.outShape, this.enableShapeUniforms = vn(this.outputShape.length);
    let s = e17.padInfo.left, i = e17.strideWidth, o = e17.dilationWidth, l = e17.filterHeight, u = e17.filterWidth, p = u, d = `
       int xR; int xC; int xCOffset;
       vec4 wTexel; vec4 previous; vec4 final;`;
    for (let f = 0; f < u; f++) d += `
           vec4 xTexelC${f * 2};
           int xTexelC${f * 2}Ready;
           vec4 xTexelC${f * 2 + 1};
           int xTexelC${f * 2 + 1}Ready;
           vec4 xC${f};`;
    d += `
     for (int r = 0; r < ${l}; r++) {
      for (int d1 = 0; d1 < ${e17.inChannels}; d1 += 2) {
       `;
    for (let f = 0; f < u; f++) d += `
           xTexelC${f * 2} = vec4(0.0);
           xTexelC${f * 2}Ready = 0;
           xTexelC${f * 2 + 1} = vec4(0.0);
           xTexelC${f * 2 + 1}Ready = 0;
           xC${f} = vec4(0.0);`;
    d += `
         xR = xRCorner + r * dilations[0];
         if (xR >=0 && xR < inDims[0]) {
       `;
    for (let f = 0; f < (p + 1) / 2; f++) {
      let g = f * 2;
      if (d += `
           xC = xCCorner + ${g * o};
           `, i === 1) {
        if (g < u && (s % 2 === 1 ? (d += `
                 xCOffset = xC + 1;
                 if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${g}Ready == 0) {
                   xTexelC${g} = getX(batch, xR, xCOffset, d1);

                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${g}.zw = vec2(0.0);
                   }
                   xTexelC${g}Ready = 1;
                 }
               `, o === 1 && g > 0 ? d += `
                 xC${g} = vec4(xTexelC${g - 2}.zw, xTexelC${g}.xy);
                 ` : d += `
                   xCOffset = xC + 1 - 2;

                   if (xCOffset >= 0 && xCOffset < inDims[1]) {
                     previous = getX(batch, xR, xCOffset, d1);

                     // Need to manually clear unused channels in case
                     // we're reading from recycled texture.
                     if (xCOffset + 1 >= inDims[1]) {
                       previous.zw = vec2(0.0);
                     }

                     xC${g} = vec4(previous.zw, xTexelC${g}.xy);
                   } else {
                     xC${g} = vec4(0.0, 0.0, xTexelC${g}.xy);
                   }
                   `) : d += `
                 if (xC >= 0 && xC < inDims[1] && xTexelC${g}Ready == 0) {
                   xTexelC${g} = getX(batch, xR, xC, d1);
                   if (xC + 1 >= inDims[1]) {
                     xTexelC${g}.zw = vec2(0.0);
                   }
                   xTexelC${g}Ready = 1;
                 }

                 xC${g} = xTexelC${g};
                 `, g + 1 < u)) {
          let b = s % 2 === 0 ? w.nearestLargerEven(o) : o;
          o % 2 === 0 && s % 2 === 1 || o % 2 !== 0 && s % 2 !== 1 ? (d += `
                   xCOffset = xC + imod(pads[1], 2) + ${b};

                   if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${g + 1}Ready == 0) {
                     xTexelC${g + 1} = getX(batch, xR, xCOffset, d1);

                     // Need to manually clear unused channels in case
                     // we're reading from recycled texture.
                     if (xCOffset + 1 >= inDims[1]) {
                       xTexelC${g + 1}.zw = vec2(0.0);
                     }
                     xTexelC${g + 1}Ready = 1;
                   }
                   `, o > 1 ? d += `
                     xCOffset -= 2;
                     if (xCOffset >= 0 && xCOffset < inDims[1]) {
                      previous = getX(batch, xR, xCOffset, d1);
                      xC${g + 1} = vec4(previous.zw, xTexelC${g + 1}.xy);
                     } else {
                      xC${g + 1} = vec4(0.0, 0.0, xTexelC${g + 1}.xy);
                     }
                     ` : d += `
                     xC${g + 1} = vec4(xTexelC${g}.zw, xTexelC${g + 1}.xy);
                     `) : b === 1 ? d += `
                     xC${g + 1} = xTexelC${g};
                     ` : d += `
                     xCOffset = xC + ${b};

                     if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${g + 1}Ready == 0) {
                       xTexelC${g + 1} = getX(batch, xR, xCOffset, d1);
                       if (xCOffset + 1 >= inDims[1]) {
                         xTexelC${g + 1}.zw = vec2(0.0);
                       }
                       xTexelC${g + 1}Ready = 1;
                     }

                     xC${g + 1} = xTexelC${g + 1};
                     `;
        }
      } else g < u && (s % 2 === 1 ? (d += `
                 xCOffset = xC + 1 - strides[1];
                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${g}Ready == 0) {
                   xTexelC${g} = getX(batch, xR, xCOffset, d1);
                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${g}.zw = vec2(0.0);
                   }
                   xTexelC${g}Ready = 1;
                 }

                 if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${g + 1}Ready == 0) {
                   xTexelC${g + 1} = getX(batch, xR, xC + 1, d1);
                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xC + 2 >= inDims[1]) {
                     xTexelC${g + 1}.zw = vec2(0.0);
                   }
                   xTexelC${g + 1}Ready = 1;
                 }

                 xC${g} = vec4(xTexelC${g}.zw, xTexelC${g + 1}.zw);
               `, g + 1 < u && (d += `
                   final = vec4(0.0);
                   xCOffset = xC + 1 + strides[1];
                   if(xCOffset >= 0 && xCOffset < inDims[1]) {
                     final = getX(batch, xR, xCOffset, d1);
                   }
                   xC${g + 1} = vec4(xTexelC${g + 1}.xy, final.xy);
                 `)) : (d += `
                 if(xC >= 0 && xC < inDims[1] && xTexelC${g}Ready == 0) {
                   xTexelC${g} = getX(batch, xR, xC, d1);
                   if (xC + 1 >= inDims[1]) {
                     xTexelC${g}.zw = vec2(0.0);
                   }
                   xTexelC${g}Ready = 1;
                 }

                 xCOffset = xC + strides[1];
                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${g + 1}Ready == 0) {
                   xTexelC${g + 1} = getX(batch, xR, xCOffset, d1);
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${g + 1}.zw = vec2(0.);
                   }
                   xTexelC${g + 1}Ready = 1;
                 }

                 xC${g} = vec4(
                   xTexelC${g}.xy, xTexelC${g + 1}.xy);
               `, g + 1 < u && (d += `
                   xC${g + 1} = vec4(xTexelC${g}.zw, xTexelC${g + 1}.zw);
                 `)));
      g < u && (d += `
             wTexel = getW(r, ${g}, d1, d2);
             dotProd += xC${g}.xxzz * vec4(wTexel.xy, wTexel.xy);
             if(d1 + 1 < ${e17.inChannels}) {
               dotProd += xC${g}.yyww * vec4(wTexel.zw, wTexel.zw);
             }
           `, g + 1 < u && (d += `
               wTexel = getW(r, ${g + 1}, d1, d2);
               dotProd += xC${g + 1}.xxzz * vec4(wTexel.xy, wTexel.xy);
               if(d1 + 1 < ${e17.inChannels}) {
                 dotProd += xC${g + 1}.yyww * vec4(wTexel.zw, wTexel.zw);
               }
             `));
    }
    d += `
     }
   `, d += `
     }
   `, d += `
     }
   `;
    let c = "", h = "";
    n && (a ? c = `vec4 activation(vec4 a) {
           vec4 b = getPreluActivationWeightsAtOutCoords();
           ${n}
         }` : r ? c = `vec4 activation(vec4 a) {
           vec4 b = getLeakyreluAlphaAtOutCoords();
           ${n}
         }` : c = `vec4 activation(vec4 x) {
           ${n}
         }`, h = "result = activation(result);");
    let m = t ? "result += getBiasAtOutCoords();" : "";
    t && this.variableNames.push("bias"), a && this.variableNames.push("preluActivationWeights"), r && this.variableNames.push("leakyreluAlpha"), this.userCode = `
       ${c}

       void main() {
         ivec4 coords = getOutputCoords();
         int batch = coords.x;
         ivec2 xRCCorner = coords.yz * strides - pads;
         int d2 = coords.w;
         int xRCorner = xRCCorner.x;
         int xCCorner = xRCCorner.y;

         //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.
         vec4 dotProd = vec4(0.000000000000001);

         ${d}

         vec4 result = dotProd - vec4(0.000000000000001);
         ${m}
         ${h}
         setOutput(result);
       }
     `;
  }
};
var yne = class {
  constructor(e17, t) {
    this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = true, this.customUniforms = [{ name: "inputShape", type: "ivec4" }, { name: "pad", type: "ivec2" }, { name: "stride", type: "ivec2" }, { name: "dilation", type: "ivec2" }, { name: "inChannels", type: "int" }, { name: "itemsPerBlockRow", type: "int" }, { name: "outWidth", type: "int" }], this.outputShape = e17, this.enableShapeUniforms = vn(this.outputShape.length);
    let { dataFormat: n } = t, a = En(), r = n === "channelsLast", s = r ? 1 : 2, i = r ? 2 : 3, o = this.enableShapeUniforms ? "if(blockIndex < outShape[2] && pos < outShape[1]) {" : `if(blockIndex < ${e17[2]} && pos < ${e17[1]}) {`, l = "";
    for (let u = 0; u <= 1; u++) for (let p = 0; p <= 1; p++) l += `
          blockIndex = rc.z + ${p};
          pos = rc.y + ${u};

          ${o}
            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];
            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);

            if(d0 < inputShape[${s}] && d0 >= 0) {
              // Use custom imod instead mod. On Intel GPU, mod may generate
              // unexpected value.
              // https://github.com/tensorflow/tfjs/issues/5447
              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];
              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /
                  inChannels);

              if(d1 < inputShape[${i}] && d1 >= 0) {

                ch = imod(pos, inChannels);

                if (${r}) {
                  innerDims = vec2(d1, ch);
                  result[${u * 2 + p}] = getChannel(
                    getA(rc.x, d0, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                } else {
                  innerDims = vec2(d0, d1);
                  result[${u * 2 + p}] = getChannel(
                    getA(rc.x, ch, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                }
              }
            }
          }
        `;
    this.userCode = `
      void main() {
        ivec3 rc = getOutputCoords();

        vec4 result = vec4(0);

        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;
        vec2 innerDims;

        ${l}

        ${a.output} = result;
      }
    `;
  }
};
function mm(e17, t) {
  let n = e17.length;
  return n >= 3 ? t ? [...e17.slice(0, -3), e17[n - 3] * e17[n - 2], e17[n - 1]] : [...e17.slice(0, -3), e17[n - 3], e17[n - 2] * e17[n - 1]] : !t && n === 1 && e17[0] > 1 ? [e17[0], 1] : null;
}
function jA({ x: e17, filter: t, convInfo: n, backend: a, bias: r = null, preluActivationWeights: s = null, leakyreluAlpha: i = 0, activation: o = null }) {
  let l = e17.shape, u = a.texData.get(e17.dataId), p = n.inChannels, d = l[0] * l[1] * l[2], c = n.outChannels, h = n.dataFormat === "channelsLast", m = false, f = false, g, b = [];
  if (s != null) {
    let y = mm(s.shape, h);
    y != null && (s = ce({ inputs: { x: s }, backend: a, attrs: { shape: y } }), b.push(s));
  }
  if (r != null) {
    let y = mm(r.shape, h);
    y != null && (r = ce({ inputs: { x: r }, backend: a, attrs: { shape: y } }), b.push(r));
  }
  if (!((d === 1 || c === 1) && p > LA) && u.isPacked && h && u.texture != null && l[2] % 2 !== 0 && w.arraysEqual(u.shape.slice(-3), l.slice(-3))) {
    let y = l[0] * l[1] * (l[2] + 1), x = { dataId: e17.dataId, shape: [1, y, n.inChannels], dtype: e17.dtype }, v = u.shape;
    u.shape = u.shape.slice(), u.shape[u.shape.length - 2]++, w.assert(Tc(u.shape, x.shape), () => `packed reshape ${u.shape} to ${x.shape} isn't free`);
    let I = ce({ inputs: { x: t }, backend: a, attrs: { shape: [1, n.inChannels, n.outChannels] } });
    b.push(I);
    let N = hm({ a: x, b: I, backend: a, transposeA: m, transposeB: f, bias: r, activation: o, preluActivationWeights: s, leakyreluAlpha: i }), C = a.texData.get(N.dataId);
    w.assert(C.isPacked, () => "batchMatMul result is expected to be packed"), u.shape = v, C.shape = n.outShape, g = ta({ inputs: { x: N }, backend: a }), g.shape = n.outShape, b.push(N);
  } else {
    let y = n.outHeight * n.outWidth, x = ce({ inputs: { x: e17 }, backend: a, attrs: { shape: h ? [n.batchSize, y, n.inChannels] : [n.batchSize, n.inChannels, y] } }), v = ce({ inputs: { x: t }, backend: a, attrs: { shape: [1, n.inChannels, n.outChannels] } }), I = hm({ a: h ? x : v, b: h ? v : x, transposeA: !h, transposeB: f, backend: a, bias: r, activation: o, preluActivationWeights: s, leakyreluAlpha: i });
    g = ce({ inputs: { x: I }, backend: a, attrs: { shape: n.outShape } }), b.push(x), b.push(v), b.push(I);
  }
  for (let y of b) a.disposeIntermediateTensorInfo(y);
  return g;
}
function qA({ x: e17, filter: t, convInfo: n, backend: a, bias: r = null, preluActivationWeights: s = null, leakyreluAlpha: i = 0, activation: o = null }) {
  let { filterWidth: l, filterHeight: u, inChannels: p, outWidth: d, outHeight: c, dataFormat: h } = n, m = h === "channelsLast", f = l * u * p, g = c * d, b = [n.batchSize, f, g], y = true, x = false, v = [];
  if (s != null) {
    let K = mm(s.shape, m);
    K != null && (s = ce({ inputs: { x: s }, backend: a, attrs: { shape: K } }), v.push(s));
  }
  if (r != null) {
    let K = mm(r.shape, m);
    K != null && (r = ce({ inputs: { x: r }, backend: a, attrs: { shape: K } }), v.push(r));
  }
  let I = ce({ inputs: { x: t }, backend: a, attrs: { shape: [1, f, w.sizeFromShape(t.shape) / f] } });
  v.push(I);
  let N = new yne(b, n), C = [e17.shape, [n.padInfo.top, n.padInfo.left], [n.strideHeight, n.strideWidth], [n.dilationHeight, n.dilationWidth], [n.inChannels], [n.filterWidth * n.inChannels], [n.outWidth]], _ = a.runWebGLProgram(N, [e17], "float32", C), F = ce({ inputs: { x: _ }, backend: a, attrs: { shape: b } });
  v.push(_), v.push(F);
  let D = r != null, $ = s != null, S = o === "leakyrelu", M = o ? Cc(o, true) : null, B = new PA(m ? F.shape : I.shape, m ? I.shape : F.shape, m ? [n.batchSize, g, n.outChannels] : [n.batchSize, n.outChannels, g], y, x, D, M, $, S), U = m ? [F, I] : [I, F];
  if (r && U.push(r), $ && U.push(s), S) {
    let K = a.makeTensorInfo([], "float32", w.createScalarValue(i, "float32"));
    U.push(K), v.push(K);
  }
  let H = a.runWebGLProgram(B, U, "float32"), q = ce({ inputs: { x: H }, backend: a, attrs: { shape: n.outShape } });
  v.push(H);
  for (let K of v) a.disposeIntermediateTensorInfo(K);
  return q;
}
function xne(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r, filter: s } = t, { strides: i, pad: o, dataFormat: l, dilations: u, dimRoundingMode: p } = a, d = T.convertConv2DDataFormat(l), c = T.computeConv2DInfo(r.shape, s.shape, i, u, o, p, false, d), h;
  if (c.filterHeight === 1 && c.filterWidth === 1 && c.dilationHeight === 1 && c.dilationWidth === 1 && c.strideHeight === 1 && c.strideWidth === 1 && (c.padInfo.type === "SAME" || c.padInfo.type === "VALID")) h = jA({ x: r, filter: s, convInfo: c, backend: n });
  else if (c.strideWidth <= 2 && d === "channelsLast" && G().getBool("WEBGL_EXP_CONV")) {
    let f = new HA(c), g = [[c.padInfo.top, c.padInfo.left], [c.strideHeight, c.strideWidth], [c.dilationHeight, c.dilationWidth], [c.inHeight, c.inWidth]];
    h = n.runWebGLProgram(f, [r, s], "float32", g);
  } else if (G().getBool("WEBGL_CONV_IM2COL")) h = qA({ x: r, filter: s, convInfo: c, backend: n });
  else {
    let f = new GA(c);
    h = n.runWebGLProgram(f, [r, s], "float32");
  }
  let m = ce({ inputs: { x: h }, backend: n, attrs: { shape: c.outShape } });
  return n.disposeIntermediateTensorInfo(h), m;
}
var vne = { kernelName: Pi, backendName: "webgl", kernelFunc: xne };
var wne = class {
  constructor(e17) {
    this.variableNames = ["x", "dy"], this.outputShape = e17.filterShape;
    let t = e17.strideHeight, n = e17.strideWidth, a = e17.padInfo.top, r = e17.padInfo.left, s = e17.dataFormat === "channelsLast";
    this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int d2 = coords.w;

        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int b = 0; b < ${e17.batchSize}; b++) {
          for (int yR = 0; yR < ${e17.outHeight}; yR++) {
            int xR = wR + yR * ${t} - ${a};

            if (xR < 0 || xR >= ${e17.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${e17.outWidth}; yC++) {
              int xC = wC + yC * ${n} - ${r};

              if (xC < 0 || xC >= ${e17.inWidth}) {
                continue;
              }

              ${s ? `float dyValue = getDy(b, yR, yC, d2);
              float xValue = getX(b, xR, xC, d1);
              dotProd += (xValue * dyValue);` : `float dyValue = getDy(b, d2, yR, yC);
              float xValue = getX(b, d1, xR, xC);
              dotProd += (xValue * dyValue);`}
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
};
var kne = class {
  constructor(e17) {
    this.variableNames = ["dy", "W"], this.outputShape = e17.inShape;
    let t = e17.filterHeight, n = e17.filterWidth, a = e17.strideHeight, r = e17.strideWidth, s = e17.dataFormat === "channelsLast", i = t - 1 - e17.padInfo.top, o = n - 1 - e17.padInfo.left, l = s ? 1 : 2, u = s ? 2 : 3, p = s ? 3 : 1;
    this.userCode = `
      const ivec2 pads = ivec2(${i}, ${o});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[${p}];

        ivec2 dyCorner = ivec2(coords[${l}], coords[${u}]) - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${t}; wR++) {
          float dyR = float(dyRCorner + wR) / ${a}.0;

          if (dyR < 0.0 || dyR >= ${e17.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${t} - 1 - wR;

          for (int wC = 0; wC < ${n}; wC++) {
            float dyC = float(dyCCorner + wC) / ${r}.0;

            if (dyC < 0.0 || dyC >= ${e17.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${n} - 1 - wC;

            for (int d2 = 0; d2 < ${e17.outChannels}; d2++) {

              if (${s}) {
                float xValue = getDy(batch, idyR, idyC, d2);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              } else {
                float xValue = getDy(batch, d2, idyR, idyC);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }

            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
};
var Ine = class {
  constructor(e17) {
    this.variableNames = ["x", "dy"], this.outputShape = e17.filterShape;
    let t = e17.strideDepth, n = e17.strideHeight, a = e17.strideWidth, r = e17.padInfo.front, s = e17.padInfo.top, i = e17.padInfo.left;
    this.userCode = `
      void main() {
        ivec5 coords = getOutputCoords();
        int wF = coords.x;
        int wR = coords.y;
        int wC = coords.z;
        int d1 = coords.w;
        int d2 = coords.u;

        float dotProd = 0.0;

        for (int b = 0; b < ${e17.batchSize}; b++) {
          for (int yF = 0; yF < ${e17.outDepth}; yF++) {
            int xF = wF + yF * ${t} - ${r};

            if (xF < 0 || xF >= ${e17.inDepth}) {
              continue;
            }

            for (int yR = 0; yR < ${e17.outHeight}; yR++) {
              int xR = wR + yR * ${n} - ${s};

              if (xR < 0 || xR >= ${e17.inHeight}) {
                continue;
              }

              for (int yC = 0; yC < ${e17.outWidth}; yC++) {
                int xC = wC + yC * ${a} - ${i};

                if (xC < 0 || xC >= ${e17.inWidth}) {
                  continue;
                }

                float dyValue = getDy(b, yF, yR, yC, d2);
                float xValue = getX(b, xF, xR, xC, d1);
                dotProd += (xValue * dyValue);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
};
var Sne = class {
  constructor(e17) {
    this.variableNames = ["dy", "W"], this.outputShape = e17.inShape;
    let t = e17.filterDepth, n = e17.filterHeight, a = e17.filterWidth, r = e17.strideDepth, s = e17.strideHeight, i = e17.strideWidth, o = t - 1 - e17.padInfo.front, l = n - 1 - e17.padInfo.top, u = a - 1 - e17.padInfo.left;
    this.userCode = `
      const ivec3 pads = ivec3(${o}, ${l}, ${u});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d1 = coords.u;


        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyFCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        float dotProd = 0.0;
        for (int wF = 0; wF < ${t}; wF++) {
          float dyF = float(dyFCorner + wF) / ${r}.0;

          if (dyF < 0.0 || dyF >= ${e17.outDepth}.0 || fract(dyF) > 0.0) {
            continue;
          }
          int idyF = int(dyF);

          int wFPerm = ${t} - 1 - wF;

          for (int wR = 0; wR < ${n}; wR++) {
            float dyR = float(dyRCorner + wR) / ${s}.0;

            if (dyR < 0.0 || dyR >= ${e17.outHeight}.0 ||
              fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            int wRPerm = ${n} - 1 - wR;

            for (int wC = 0; wC < ${a}; wC++) {
              float dyC = float(dyCCorner + wC) / ${i}.0;

              if (dyC < 0.0 || dyC >= ${e17.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              int wCPerm = ${a} - 1 - wC;

              for (int d2 = 0; d2 < ${e17.outChannels}; d2++) {
                float xValue = getDy(batch, idyF, idyR, idyC, d2);
                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
};
function Nne(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r, dy: s } = t, { strides: i, pad: o, dataFormat: l, dimRoundingMode: u, filterShape: p } = a, d = T.convertConv2DDataFormat(l), c = T.computeConv2DInfo(r.shape, p, i, 1, o, u, false, d), h = new wne(c);
  return n.runWebGLProgram(h, [r, s], "float32");
}
var Tne = { kernelName: km, backendName: "webgl", kernelFunc: Nne };
var Cne = class {
  constructor(e17) {
    this.variableNames = ["dy", "W"], this.packedInputs = true, this.packedOutput = true, this.customUniforms = [{ name: "strides", type: "vec2" }], this.outputShape = e17.inShape, this.enableShapeUniforms = vn(this.outputShape.length);
    let t = e17.filterHeight, n = e17.filterWidth, a = t - 1 - e17.padInfo.top, r = n - 1 - e17.padInfo.left;
    this.userCode = `
      const ivec2 pads = ivec2(${a}, ${r});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[3];

        ivec2 dyCorner = ivec2(coords[1], coords[2]) - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        vec4 result = vec4(0.);
        for (int wR = 0; wR < ${t}; wR++) {
          float dyR = float(dyRCorner + wR) / strides[0];
          if (dyR < 0.0 || dyR >= ${e17.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);
          int wRPerm = ${t} - 1 - wR;

          for (int wC = 0; wC < ${n}; wC++) {
            int wCPerm = ${n} - 1 - wC;

            float dyC = float(dyCCorner + wC) / strides[1];
            bool idyCVal = (dyC >= 0.0) && (dyC < ${e17.outWidth}.0)
              && (fract(dyC) == 0.0);
            int idyC = int(dyC);

            float dyC2 = float(dyCCorner + wC + 1) / strides[1];
            bool idyCVal2 = (dyC2 >= 0.0) && (dyC2 < ${e17.outWidth}.0)
              && (fract(dyC2) == 0.0);
            int idyC2 = int(dyC2);

            if (idyCVal && idyCVal2) {
              for (int d2 = 0; d2 < ${e17.outChannels}; d2 += 2) {
                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);
                vec4 dySample = getDy(batch, idyR, idyC, d2);
                vec4 dySample2 = (idyC / 2 == idyC2 / 2) ?
                  dySample : getDy(batch, idyR, idyC2, d2);

                vec2 dyValue = mod(float(idyC), 2.) == 0. ?
                  dySample.xy : dySample.zw;
                result.xy += vec2(dot(dyValue, wValue.xy),
                  dot(dyValue, wValue.zw));

                dyValue = mod(float(idyC2), 2.) == 0. ?
                  dySample2.xy : dySample2.zw;
                result.zw += vec2(dot(dyValue, wValue.xy),
                  dot(dyValue, wValue.zw));
              }
            } else if (idyCVal) {
              for (int d2 = 0; d2 < ${e17.outChannels}; d2 += 2) {
                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);
                vec4 dySample = getDy(batch, idyR, idyC, d2);
                vec2 dyValue = mod(float(idyC), 2.) == 0. ?
                  dySample.xy : dySample.zw;
                result.xy += vec2(dot(dyValue, wValue.xy),
                  dot(dyValue, wValue.zw));
              }
            } else if (idyCVal2) {
              for (int d2 = 0; d2 < ${e17.outChannels}; d2 += 2) {
                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);
                vec4 dySample = getDy(batch, idyR, idyC2, d2);
                vec2 dyValue = mod(float(idyC2), 2.) == 0. ?
                  dySample.xy : dySample.zw;
                result.zw += vec2(dot(dyValue, wValue.xy),
                  dot(dyValue, wValue.zw));
              }
            }
          }
        }
        setOutput(result);
      }
    `;
  }
};
function Ene(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { dy: r, filter: s } = t, { inputShape: i, strides: o, pad: l, dataFormat: u, dimRoundingMode: p } = a, d = T.convertConv2DDataFormat(u), c = T.computeConv2DInfo(i, s.shape, o, 1, l, p, false, d);
  if (G().getBool("WEBGL_PACK_CONV2DTRANSPOSE") && d === "channelsLast") {
    let h = [[c.strideHeight, c.strideWidth]], m = new Cne(c);
    return n.runWebGLProgram(m, [r, s], "float32", h);
  } else {
    let h = new kne(c);
    return n.runWebGLProgram(h, [r, s], "float32");
  }
}
var _ne = { kernelName: Li, backendName: "webgl", kernelFunc: Ene };
function Ane(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r, filter: s } = t, { strides: i, pad: o, dilations: l } = a, u = T.computeConv3DInfo(r.shape, s.shape, i, l, o), p = new bne(u);
  return n.runWebGLProgram(p, [r, s], "float32");
}
var Fne = { kernelName: zi, backendName: "webgl", kernelFunc: Ane };
function $ne(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r, dy: s } = t, { strides: i, pad: o, filterShape: l } = a, u = T.computeConv3DInfo(r.shape, l, i, 1, o), p = new Ine(u);
  return n.runWebGLProgram(p, [r, s], "float32");
}
var Dne = { kernelName: iu, backendName: "webgl", kernelFunc: $ne };
function Rne(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { dy: r, filter: s } = t, { pad: i, strides: o, inputShape: l } = a, u = T.computeConv3DInfo(l, s.shape, o, 1, i), p = new Sne(u);
  return n.runWebGLProgram(p, [r, s], "float32");
}
var Mne = { kernelName: ou, backendName: "webgl", kernelFunc: Rne };
var One = mp + `
  return cos(x);
`;
var Pne = `
  vec4 result = cos(x);
  bvec4 isNaN = isnan(x);
  ${Qo}
  return result;
`;
var Lne = Ze({ opSnippet: One, packedOpSnippet: Pne });
var zne = { kernelName: Wi, backendName: "webgl", kernelFunc: Lne };
var Wne = `
  float e2x = exp(-x);
  return (e2x + 1.0 / e2x) / 2.0;
`;
var Bne = Ze({ opSnippet: Wne });
var Vne = { kernelName: Bi, backendName: "webgl", kernelFunc: Bne };
var Une = class {
  constructor(e17, t, n, a, r) {
    this.variableNames = ["Image", "Boxes", "BoxInd"], this.outputShape = [];
    let [s, i, o, l] = e17, [u] = t, [p, d] = n;
    this.outputShape = [u, p, d, l];
    let c = a === "bilinear" ? 1 : 0, [h, m] = [`${i - 1}.0`, `${o - 1}.0`], [f, g, b] = p > 1 ? [`${(i - 1) / (p - 1)}`, "(y2-y1) * height_ratio", `y1*${h} + float(y)*(height_scale)`] : ["0.0", "0.0", `0.5 * (y1+y2) * ${h}`], [y, x, v] = d > 1 ? [`${(o - 1) / (d - 1)}`, "(x2-x1) * width_ratio", `x1*${m} + float(x)*(width_scale)`] : ["0.0", "0.0", `0.5 * (x1+x2) * ${m}`];
    this.userCode = `
      const float height_ratio = float(${f});
      const float width_ratio = float(${y});
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int y = coords[1];
        int x = coords[2];
        int d = coords[3];

        // get box vals
        float y1 = getBoxes(b,0);
        float x1 = getBoxes(b,1);
        float y2 = getBoxes(b,2);
        float x2 = getBoxes(b,3);

        // get image in batch index
        int bInd = round(getBoxInd(b));
        if(bInd < 0 || bInd >= ${s}) {
          return;
        }

        float height_scale = ${g};
        float width_scale = ${x};

        float in_y = ${b};
        if( in_y < 0.0 || in_y > ${h} ) {
          setOutput(float(${r}));
          return;
        }
        float in_x = ${v};
        if( in_x < 0.0 || in_x > ${m} ) {
          setOutput(float(${r}));
          return;
        }

        vec2 sourceFracIndexCR = vec2(in_x,in_y);
        if(${c} == 1) {
          // Compute the four integer indices.
          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);
          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));

          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);
          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);
          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);
          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);

          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);

          float top = topLeft + (topRight - topLeft) * fracCR.x;
          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;
          float newValue = top + (bottom - top) * fracCR.y;
          setOutput(newValue);
        } else {
          // Compute the coordinators of nearest neighbor point.
          ivec2 sourceNearestCR = ivec2(floor(
            sourceFracIndexCR + vec2(0.5,0.5)));
          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);
          setOutput(newValue);
        }
      }
    `;
  }
};
var Gne = (e17) => {
  let { inputs: t, backend: n, attrs: a } = e17, { image: r, boxes: s, boxInd: i } = t, { cropSize: o, method: l, extrapolationValue: u } = a, p = new Une(r.shape, s.shape, o, l, u);
  return n.runWebGLProgram(p, [r, s, i], "float32");
};
var Hne = { kernelName: uu, backendName: "webgl", kernelFunc: Gne };
var _c;
(function(e17) {
  e17.Prod = "*", e17.Sum = "+";
})(_c || (_c = {}));
var gS = class {
  constructor(e17, t, n, a) {
    this.op = e17, this.outputShape = t, this.variableNames = ["x"], this.customUniforms = [{ name: "index", type: "float" }];
    let r = this.outputShape.length, s = this.op === _c.Prod ? "1.0" : "0.0", i = n ? s : `getX(${bS(r, "coords", this.op)})`, o = this.outputShape[this.outputShape.length - 1], l = "", u = "";
    n ? (l = a ? `end != ${o - 1}` : "end != 0", u = a ? "end + 1" : "end - 1") : (l = a ? `end + pow2 < ${o}` : "end >= pow2", u = a ? "end + pow2" : "end - pow2"), this.userCode = `
      void main() {
        ${ht(r)} coords = getOutputCoords();
        int end = ${yS(r, "coords", this.op)};
        float val = ${i};
        int pow2 = int(pow(2.0, index));
        if (${l}) {
          int idx = ${u};
          ${yS(r, "coords", this.op)} = idx;
          val ${this.op}= getX(${bS(r, "coords", this.op)});
        }
        setOutput(val);
      }
    `;
  }
};
function bS(e17, t, n) {
  if (e17 === 1) return `${t}`;
  if (e17 === 2) return `${t}.x, ${t}.y`;
  if (e17 === 3) return `${t}.x, ${t}.y, ${t}.z`;
  if (e17 === 4) return `${t}.x, ${t}.y, ${t}.z, ${t}.w`;
  throw new Error(`Cumulative ${n} for rank ${e17} is not yet supported`);
}
function yS(e17, t, n) {
  if (e17 === 1) return `${t}`;
  if (e17 === 2) return `${t}.y`;
  if (e17 === 3) return `${t}.z`;
  if (e17 === 4) return `${t}.w`;
  throw new Error(`Cumulative ${n} for rank ${e17} is not yet supported`);
}
function KA(e17, t, n, a, r, s) {
  let i = t.shape.length, o = T.getAxesPermutation([a], i), l = t;
  o != null && (l = Sn({ inputs: { x: t }, backend: n, attrs: { perm: o } }));
  let u = T.getInnerMostAxes(1, i)[0];
  if (u !== i - 1) throw new Error(`WebGL cumprod shader expects an inner-most axis=${t.shape.length - 1} but got axis=${a}`);
  let p = l.shape[u], d = ta({ inputs: { x: l }, backend: n });
  for (let c = 0; c <= Math.ceil(Math.log2(p)) - 1; c++) {
    let h = new gS(e17, l.shape, false, s), m = [[c]], f = d;
    d = n.runWebGLProgram(h, [d], d.dtype, m), n.disposeIntermediateTensorInfo(f);
  }
  if (r) {
    let c = new gS(e17, l.shape, r, s), h = d;
    d = n.runWebGLProgram(c, [d], d.dtype), n.disposeIntermediateTensorInfo(h);
  }
  if (o != null) {
    let c = T.getUndoAxesPermutation(o), h = Sn({ inputs: { x: d }, backend: n, attrs: { perm: c } });
    return n.disposeIntermediateTensorInfo(d), n.disposeIntermediateTensorInfo(l), h;
  }
  return d;
}
function jne(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r } = t, { axis: s, exclusive: i, reverse: o } = a;
  return KA(_c.Prod, r, n, s, i, o);
}
var qne = { kernelName: lu, backendName: "webgl", kernelFunc: jne };
function Kne(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r } = t, { axis: s, exclusive: i, reverse: o } = a;
  return KA(_c.Sum, r, n, s, i, o);
}
var Xne = { kernelName: Vi, backendName: "webgl", kernelFunc: Kne };
function Yne(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r, weights: s } = t, { size: i, binaryOutput: o } = a;
  if (r.shape.length === 1) {
    let l = n.readSync(r.dataId), u = n.readSync(s.dataId), p = TA(l, u, s.dtype, s.shape, i);
    return n.makeTensorInfo([i], s.dtype, p);
  } else if (r.shape.length === 2) {
    let l = n.bufferSync(r), u = n.bufferSync(s), p = J9(l, u, i, o);
    return n.makeTensorInfo(p.shape, s.dtype, p.values);
  }
  throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`);
}
var Zne = { kernelName: Pc, backendName: "webgl", kernelFunc: Yne };
var Jne = class {
  constructor(e17, t, n) {
    this.variableNames = ["x"], this.outputShape = [], this.outputShape = e17, this.blockSize = t, this.dataFormat = n, this.userCode = `
    void main() {
      ivec4 coords = getOutputCoords();
      int b = coords[0];
      int h = ${this.getHeightCoordString()};
      int w = ${this.getWidthCoordString()};
      int d = ${this.getDepthCoordString()};

      int in_h = h / ${t};
      int offset_h = imod(h, ${t});
      int in_w = w / ${t};
      int offset_w = imod(w, ${t});
      int offset_d = (offset_h * ${t} + offset_w) *
        ${this.getOutputDepthSize()};
      int in_d = d + offset_d;

      float result = ${this.getInputSamplingString()};
      setOutput(result);
    }
  `;
  }
  getHeightCoordString() {
    return this.dataFormat === "NHWC" ? "coords[1]" : "coords[2]";
  }
  getWidthCoordString() {
    return this.dataFormat === "NHWC" ? "coords[2]" : "coords[3]";
  }
  getDepthCoordString() {
    return this.dataFormat === "NHWC" ? "coords[3]" : "coords[1]";
  }
  getOutputDepthSize() {
    return this.dataFormat === "NHWC" ? this.outputShape[3] : this.outputShape[1];
  }
  getInputSamplingString() {
    return this.dataFormat === "NHWC" ? "getX(b, in_h, in_w, in_d)" : "getX(b, in_d, in_h, in_w)";
  }
};
function Qne(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r } = t, { blockSize: s, dataFormat: i } = a, o = r.shape[0], l = i === "NHWC" ? r.shape[1] : r.shape[2], u = i === "NHWC" ? r.shape[2] : r.shape[3], p = i === "NHWC" ? r.shape[3] : r.shape[1], d = l * s, c = u * s, h = p / (s * s), m = i === "NHWC" ? [o, d, c, h] : [o, h, d, c], f = new Jne(m, s, i);
  return n.runWebGLProgram(f, [r], r.dtype);
}
var eae = { kernelName: pu, backendName: "webgl", kernelFunc: Qne };
var XA = class {
  constructor(e17, t = false, n = null, a = false, r = false) {
    this.variableNames = ["x", "W"], this.customUniforms = [{ name: "pads", type: "ivec2" }, { name: "strides", type: "ivec2" }, { name: "dilations", type: "ivec2" }, { name: "inDims", type: "ivec2" }], this.outputShape = e17.outShape, this.enableShapeUniforms = vn(this.outputShape.length);
    let s = e17.filterHeight, i = e17.filterWidth, o = e17.outChannels / e17.inChannels, l = "", u = "";
    n && (a ? l = `float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${n}
        }` : r ? l = `float activation(float a) {
          float b = getLeakyreluAlphaAtOutCoords();
          ${n}
        }` : l = `
          float activation(float x) {
            ${n}
          }
        `, u = "result = activation(result);");
    let p = t ? "result += getBiasAtOutCoords();" : "";
    t && this.variableNames.push("bias"), a && this.variableNames.push("preluActivationWeights"), r && this.variableNames.push("leakyreluAlpha"), this.userCode = `
      ${l}

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2 / ${o};
        int q = d2 - d1 * ${o};

        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.
        for (int wR = 0; wR < ${s}; wR++) {
          int xR = xRCorner + wR * dilations[0];

          if (xR < 0 || xR >= inDims[0]) {
            continue;
          }

          for (int wC = 0; wC < ${i}; wC++) {
            int xC = xCCorner + wC * dilations[1];

            if (xC < 0 || xC >= inDims[1]) {
              continue;
            }

            float xVal = getX(batch, xR, xC, d1);
            float wVal = getW(wR, wC, d1, q);
            dotProd += xVal * wVal;
          }
        }

        float result = dotProd;
        ${p}
        ${u}
        setOutput(result);
      }
    `;
  }
};
var YA = class {
  constructor(e17, t = false, n = null, a = false, r = false) {
    this.variableNames = ["x", "W"], this.packedInputs = true, this.packedOutput = true, this.customUniforms = [{ name: "pads", type: "ivec2" }, { name: "strides", type: "ivec2" }, { name: "dilations", type: "ivec2" }, { name: "inDims", type: "ivec2" }], this.outputShape = e17.outShape, this.enableShapeUniforms = vn(this.outputShape.length);
    let s = e17.outChannels / e17.inChannels, i = e17.padInfo.left, o = e17.strideWidth, l = e17.dilationWidth, u = e17.filterHeight, p = e17.filterWidth, d = p, c = `
      int xR; int xC; int xCOffset;
      vec4 wTexel; vec4 previous; vec4 final;`;
    for (let g = 0; g < p; g++) c += `
          vec4 xTexelC${g * 2};
          int xTexelC${g * 2}Ready;
          vec4 xTexelC${g * 2 + 1};
          int xTexelC${g * 2 + 1}Ready;
          vec4 xC${g};`;
    c += `
    for (int r = 0; r < ${u}; r++) {
      `;
    for (let g = 0; g < p; g++) c += `
          xTexelC${g * 2} = vec4(0.0);
          xTexelC${g * 2}Ready = 0;
          xTexelC${g * 2 + 1} = vec4(0.0);
          xTexelC${g * 2 + 1}Ready = 0;
          xC${g} = vec4(0.0);`;
    c += `
        xR = xRCorner + r * dilations[0];
        if (xR >=0 && xR < inDims[0]) {
      `;
    for (let g = 0; g < (d + 1) / 2; g++) {
      let b = g * 2;
      if (c += `
          xC = xCCorner + ${b * l};
          `, o === 1) {
        if (b < p && (i % 2 === 1 ? (c += `
                xCOffset = xC + 1;
                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xCOffset, d1);

                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }
              `, l === 1 && b > 0 ? c += `
                xC${b} = vec4(xTexelC${b - 2}.zw, xTexelC${b}.xy);
                ` : c += `
                  xCOffset = xC + 1 - 2;

                  if (xCOffset >= 0 && xCOffset < inDims[1]) {
                    previous = getX(batch, xR, xCOffset, d1);

                    // Need to manually clear unused channels in case
                    // we're reading from recycled texture.
                    if (xCOffset + 1 >= inDims[1]) {
                      previous.zw = vec2(0.0);
                    }

                    xC${b} = vec4(previous.zw, xTexelC${b}.xy);
                  } else {
                    xC${b} = vec4(0.0, 0.0, xTexelC${b}.xy);
                  }
                  `) : c += `
                if (xC >= 0 && xC < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xC, d1);
                  if (xC + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }

                xC${b} = xTexelC${b};
                `, b + 1 < p)) {
          let y = i % 2 === 0 ? w.nearestLargerEven(l) : l;
          l % 2 === 0 && i % 2 === 1 || l % 2 !== 0 && i % 2 !== 1 ? (c += `
                  xCOffset = xC + imod(pads[1], 2) + ${y};

                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b + 1}Ready == 0) {
                    xTexelC${b + 1} = getX(batch, xR, xCOffset, d1);

                    // Need to manually clear unused channels in case
                    // we're reading from recycled texture.
                    if (xCOffset + 1 >= inDims[1]) {
                      xTexelC${b + 1}.zw = vec2(0.0);
                    }
                    xTexelC${b + 1}Ready = 1;
                  }
                  `, l > 1 ? c += `
                    xCOffset -= 2;
                    if (xCOffset >= 0 && xCOffset < inDims[1]) {
                     previous = getX(batch, xR, xCOffset, d1);
                     xC${b + 1} = vec4(previous.zw, xTexelC${b + 1}.xy);
                    } else {
                     xC${b + 1} = vec4(0.0, 0.0, xTexelC${b + 1}.xy);
                    }
                    ` : c += `
                    xC${b + 1} = vec4(xTexelC${b}.zw, xTexelC${b + 1}.xy);
                    `) : y === 1 ? c += `
                    xC${b + 1} = xTexelC${b};
                    ` : c += `
                    xCOffset = xC + ${y};

                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b + 1}Ready == 0) {
                      xTexelC${b + 1} = getX(batch, xR, xCOffset, d1);
                      if (xCOffset + 1 >= inDims[1]) {
                        xTexelC${b + 1}.zw = vec2(0.0);
                      }
                      xTexelC${b + 1}Ready = 1;
                    }

                    xC${b + 1} = xTexelC${b + 1};
                    `;
        }
      } else b < p && (i % 2 === 1 ? (c += `
                xCOffset = xC + 1 - strides[1];
                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xCOffset, d1);
                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }

                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${b + 1}Ready == 0) {
                  xTexelC${b + 1} = getX(batch, xR, xC + 1, d1);
                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xC + 2 >= inDims[1]) {
                    xTexelC${b + 1}.zw = vec2(0.0);
                  }
                  xTexelC${b + 1}Ready = 1;
                }

                xC${b} = vec4(xTexelC${b}.zw, xTexelC${b + 1}.zw);
              `, b + 1 < p && (c += `
                  final = vec4(0.0);
                  xCOffset = xC + 1 + strides[1];
                  if(xCOffset >= 0 && xCOffset < inDims[1]) {
                    final = getX(batch, xR, xCOffset, d1);
                  }
                  xC${b + 1} = vec4(xTexelC${b + 1}.xy, final.xy);
                `)) : (c += `
                if(xC >= 0 && xC < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xC, d1);
                  if (xC + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }

                xCOffset = xC + strides[1];
                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b + 1}Ready == 0) {
                  xTexelC${b + 1} = getX(batch, xR, xCOffset, d1);
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${b + 1}.zw = vec2(0.);
                  }
                  xTexelC${b + 1}Ready = 1;
                }

                xC${b} = vec4(
                  xTexelC${b}.xy, xTexelC${b + 1}.xy);
              `, b + 1 < p && (c += `
                  xC${b + 1} = vec4(xTexelC${b}.zw, xTexelC${b + 1}.zw);
                `)));
      b < p && (c += `
            wTexel = getW(r, ${b}, d1, q);
            dotProd += xC${b} * vec4(wTexel.xz, wTexel.xz);
          `, b + 1 < p && (c += `
              wTexel = getW(r, ${b + 1}, d1, q);
              dotProd += xC${b + 1} * vec4(wTexel.xz, wTexel.xz);
            `));
    }
    c += `
    }
  `, c += `
      }
    `;
    let h = "", m = "";
    n && (a ? h = `vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${n}
        }` : r ? h = `vec4 activation(vec4 a) {
          vec4 b = getLeakyreluAlphaAtOutCoords();
          ${n}
        }` : h = `vec4 activation(vec4 x) {
          ${n}
        }`, m = "result = activation(result);");
    let f = t ? "result += getBiasAtOutCoords();" : "";
    t && this.variableNames.push("bias"), a && this.variableNames.push("preluActivationWeights"), r && this.variableNames.push("leakyreluAlpha"), this.userCode = `
      ${h}

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2 / ${s};
        int q = d2 - d1 * ${s};
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.
        vec4 dotProd = vec4(0.000000000000001);

        ${c}

        vec4 result = dotProd - vec4(0.000000000000001);
        ${f}
        ${m}
        setOutput(result);
      }
    `;
  }
};
function tae(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r, filter: s } = t, { strides: i, pad: o, dilations: l, dimRoundingMode: u } = a, p = l;
  p == null && (p = [1, 1]), w.assert(T.eitherStridesOrDilationsAreOne(i, p), () => `Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${p}'`);
  let d = T.computeConv2DInfo(r.shape, s.shape, i, p, o, u, true), c;
  G().getBool("WEBGL_PACK_DEPTHWISECONV") && d.strideWidth <= 2 && d.outChannels / d.inChannels === 1 ? c = new YA(d) : c = new XA(d);
  let h = [[d.padInfo.top, d.padInfo.left], [d.strideHeight, d.strideWidth], [d.dilationHeight, d.dilationWidth], [d.inHeight, d.inWidth]];
  return n.runWebGLProgram(c, [r, s], "float32", h);
}
var nae = { kernelName: Ui, backendName: "webgl", kernelFunc: tae };
var aae = class {
  constructor(e17) {
    this.variableNames = ["x", "dy"], this.outputShape = e17.filterShape;
    let t = e17.strideHeight, n = e17.strideWidth, a = e17.padInfo.top, r = e17.padInfo.left, s = e17.outChannels / e17.inChannels;
    this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int dm = coords.w;
        int d2 = d1 * ${s} + dm;

        float dotProd = 0.0;

        // TO DO: Vec4 over the batch size
        for (int b = 0; b < ${e17.batchSize}; b++) {
          for (int yR = 0; yR < ${e17.outHeight}; yR++) {
            int xR = wR + yR * ${t} - ${a};

            if (xR < 0 || xR >= ${e17.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${e17.outWidth}; yC++) {
              int xC = wC + yC * ${n} - ${r};

              if (xC < 0 || xC >= ${e17.inWidth}) {
                continue;
              }

              float dyValue = getDy(b, yR, yC, d2);
              float xValue = getX(b, xR, xC, d1);
              dotProd += (xValue * dyValue);
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
};
var rae = class {
  constructor(e17) {
    this.variableNames = ["dy", "W"], this.outputShape = e17.inShape;
    let t = e17.filterHeight, n = e17.filterWidth, a = e17.strideHeight, r = e17.strideWidth, s = t - 1 - e17.padInfo.top, i = n - 1 - e17.padInfo.left, o = e17.outChannels / e17.inChannels;
    this.userCode = `
      const ivec2 pads = ivec2(${s}, ${i});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[3];
        ivec2 dyCorner = coords.yz - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        float dotProd = 0.0;

        for (int wR = 0; wR < ${t}; wR++) {
          float dyR = float(dyRCorner + wR) / ${a}.0;

          if (dyR < 0.0 || dyR >= ${e17.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${t} - 1 - wR;

          for (int wC = 0; wC < ${n}; wC++) {
            float dyC = float(dyCCorner + wC) / ${r}.0;

            if (dyC < 0.0 || dyC >= ${e17.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${n} - 1 - wC;

            // TO DO: Vec4 over the channelMul
            for (int dm = 0; dm < ${o}; dm++) {
              int d2 = d1 * ${o} + dm;
              float xValue = getDy(batch, idyR, idyC, d2);
              float wValue = getW(wRPerm, wCPerm, d1, dm);
              dotProd += xValue * wValue;
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
};
function sae(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r, dy: s } = t, { strides: i, dilations: o, pad: l, dimRoundingMode: u, filterShape: p } = a, d = T.computeConv2DInfo(r.shape, p, i, o, l, u, true), c = new aae(d);
  return n.runWebGLProgram(c, [r, s], "float32");
}
var iae = { kernelName: Im, backendName: "webgl", kernelFunc: sae };
function oae(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { dy: r, filter: s } = t, { strides: i, dilations: o, pad: l, dimRoundingMode: u, inputShape: p } = a, d = T.computeConv2DInfo(p, s.shape, i, o, l, u, true), c = new rae(d);
  return n.runWebGLProgram(c, [r, s], "float32");
}
var lae = { kernelName: Sm, backendName: "webgl", kernelFunc: oae };
var uae = class {
  constructor(e17) {
    this.variableNames = ["X"], this.outputShape = [e17, e17], this.userCode = `
      void main() {
          ivec2 coords = getOutputCoords();
          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;
          setOutput(val);
      }
    `;
  }
};
function pae(e17) {
  let { inputs: t, backend: n } = e17, { x: a } = t, r = [...a.shape, ...a.shape], s = w.sizeFromShape(a.shape), i = ce({ inputs: { x: a }, backend: n, attrs: { shape: [s] } }), o = new uae(s), l = n.runWebGLProgram(o, [i], i.dtype), u = ce({ inputs: { x: l }, backend: n, attrs: { shape: r } });
  return n.disposeIntermediateTensorInfo(i), n.disposeIntermediateTensorInfo(l), u;
}
var cae = { kernelName: Lc, backendName: "webgl", kernelFunc: pae };
var dae = class {
  constructor(e17) {
    this.variableNames = ["x", "W"], this.outputShape = e17.outShape;
    let { inHeight: t, inWidth: n, padInfo: a, strideHeight: r, strideWidth: s, filterHeight: i, filterWidth: o, dilationHeight: l, dilationWidth: u } = e17, { top: p, left: d } = a;
    this.userCode = `
      const ivec2 strides = ivec2(${r}, ${s});
      const ivec2 pads = ivec2(${p}, ${d});
      const float neg_infinity = -3.4e38;

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        int d1 = coords.w;
        ivec2 outTopLeftCorner =
            coords.yz * strides - pads;
        int hBeg = outTopLeftCorner.x;
        int wBeg = outTopLeftCorner.y;

        float curVal = neg_infinity;
        for (int h = 0; h < ${i}; h++) {
          int hIn = hBeg + h * ${l};

          if (hIn >= 0 && hIn < ${t}) {
            for (int w = 0; w < ${o}; w++) {
              int wIn = wBeg + w * ${u};

              if (wIn >= 0 && wIn < ${n}) {
                float xVal = getX(batch, hIn, wIn, d1);
                float wVal = getW(h, w, d1);

                float val = xVal + wVal;
                if (val > curVal) {
                  curVal = val;
                }
              }
            }
          }
        }

        float result = curVal;
        setOutput(result);
      }
    `;
  }
};
function hae(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r, filter: s } = t, { strides: i, pad: o, dilations: l } = a, u = T.computeDilation2DInfo(r.shape, s.shape, i, o, "NHWC", l), p, d = new dae(u);
  p = n.runWebGLProgram(d, [r, s], "float32");
  let c = ce({ inputs: { x: p }, backend: n, attrs: { shape: u.outShape } });
  return n.disposeIntermediateTensorInfo(p), c;
}
var mae = { kernelName: Gi, backendName: "webgl", kernelFunc: hae };
function fae(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { equation: r } = a, s = t, { allDims: i, summedDims: o, idDims: l } = T.decodeEinsumEquation(r, s.length);
  T.checkEinsumDimSizes(i.length, l, s);
  let { path: u, steps: p } = T.getEinsumComputePath(o, l), d = p.length, c = null, h = i.length, m = [];
  for (let f = 0; f < d; ++f) {
    for (let g of p[f]) {
      let { permutationIndices: b, expandDims: y } = T.getEinsumPermutation(h, l[g]), x;
      T.isIdentityPermutation(b) ? x = s[g] : (x = Sn({ inputs: { x: s[g] }, backend: n, attrs: { perm: b } }), m.push(x));
      let v = x.shape.slice();
      for (let I = 0; I < y.length; ++I) v.splice(y[I], 0, 1);
      w.arraysEqual(x.shape, v) || (x = ce({ inputs: { x }, backend: n, attrs: { shape: v } }), m.push(x)), c === null ? c = x : (c = pk({ inputs: { a: x, b: c }, backend: n }), m.push(c));
    }
    f < d - 1 && (u[f] >= 0 && (c = Vf({ inputs: { x: c }, backend: n, attrs: { axis: u[f] - (i.length - h), keepDims: false } }), m.push(c)), h--);
  }
  for (let f of m) f !== c && n.disposeIntermediateTensorInfo(f);
  return c;
}
var gae = { kernelName: Tm, backendName: "webgl", kernelFunc: fae };
var bae = "return (x >= 0.0) ? x : (exp(x) - 1.0);";
var yae = `
  vec4 result;

  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);
  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);
  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);
  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);

  return result;
`;
var xae = Ze({ opSnippet: bae, packedOpSnippet: yae });
var vae = { kernelName: ji, backendName: "webgl", kernelFunc: xae };
var wae = "return (b >= 0.0) ? a : a * (b + 1.0);";
var kae = `
  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));
  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));
`;
var Iae = (e17) => {
  let { inputs: t, backend: n } = e17, { dy: a, y: r } = t, s = G().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new hp(kae, a.shape, r.shape) : new ki(wae, a.shape, r.shape);
  return n.runWebGLProgram(s, [a, r], a.dtype);
};
var Sae = { kernelName: cu, backendName: "webgl", kernelFunc: Iae };
var Nae = `
  return vec4(equal(a, b));
`;
var Tae = "return float(a == b);";
var Cae = hn({ opSnippet: Tae, packedOpSnippet: Nae, dtype: "bool", cpuKernelImpl: aQ });
var Eae = { kernelName: du, backendName: "webgl", kernelFunc: Cae };
var _ae = `
  // Error function is calculated approximately with elementary function.
  // See "Handbook of Mathematical Functions with Formulas,
  // Graphs, and Mathematical Tables", Abramowitz and Stegun.
  float p = ${T.ERF_P};
  float a1 = ${T.ERF_A1};
  float a2 = ${T.ERF_A2};
  float a3 = ${T.ERF_A3};
  float a4 = ${T.ERF_A4};
  float a5 = ${T.ERF_A5};

  float sign = sign(x);
  x = abs(x);
  float t = 1.0 / (1.0 + p * x);
  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));
`;
var Aae = Ze({ opSnippet: _ae });
var Fae = { kernelName: qi, backendName: "webgl", kernelFunc: Aae };
var $ae = mp + `
  return exp(x);
`;
var Dae = `
  vec4 result = exp(x);
  bvec4 isNaN = isnan(x);
  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;
var ZA = Ze({ opSnippet: $ae, packedOpSnippet: Dae, cpuKernelImpl: rQ, dtype: "float32" });
var Rae = { kernelName: Ki, backendName: "webgl", kernelFunc: ZA };
function gv(e17) {
  let { inputs: t, attrs: n, backend: a } = e17, { dim: r } = n, { input: s } = t, i = s.shape.length, o = s.shape.slice(), l = r;
  return r < 0 && (w.assert(-(i + 1) <= r, () => `Axis must be in the interval [${-(i + 1)}, ${i}]`), l = i + r + 1), o.splice(l, 0, 1), ce({ inputs: { x: s }, backend: a, attrs: { shape: o } });
}
var Mae = { kernelName: hu, backendName: "webgl", kernelFunc: gv };
var xS = "return exp(x) - 1.0;";
var Oae = Ze({ opSnippet: xS, packedOpSnippet: xS, cpuKernelImpl: sQ });
var Pae = { kernelName: Xi, backendName: "webgl", kernelFunc: Oae };
var vS = class {
  constructor(e17, t, n) {
    this.variableNames = ["real", "imag"];
    let a = t[1];
    this.outputShape = t;
    let r = n ? `2.0 * ${Math.PI}` : `-2.0 * ${Math.PI}`, s = n ? `${a}.0` : "1.0", i;
    if (e17 === "real") i = "return real * expR - imag * expI;";
    else if (e17 === "imag") i = "return real * expI + imag * expR;";
    else throw new Error(`FFT component must be either "real" or "imag", got ${e17}.`);
    this.userCode = `
      const float exponentMultiplier = ${r};

      float unaryOpComplex(float real, float expR, float imag, float expI) {
        ${i}
      }

      float mulMatDFT(int batch, int index) {
        float indexRatio = float(index) / float(${a});
        float exponentMultiplierTimesIndexRatio =
            exponentMultiplier * indexRatio;

        float result = 0.0;

        for (int i = 0; i < ${a}; i++) {
          // x = (-2|2 * PI / N) * index * i;
          float x = exponentMultiplierTimesIndexRatio * float(i);
          float expR = cos(x);
          float expI = sin(x);
          float real = getReal(batch, i);
          float imag = getImag(batch, i);

          result +=
              unaryOpComplex(real, expR, imag, expI) / ${s};
        }

        return result;
      }

      void main() {
        ivec2 coords = getOutputCoords();
        setOutput(mulMatDFT(coords[0], coords[1]));
      }
    `;
  }
};
function JA(e17, t, n) {
  let a = n.texData.get(e17.dataId), r = w.sizeFromShape(e17.shape), s = e17.shape[e17.shape.length - 1], i = r / s, o = ce({ inputs: { x: e17 }, backend: n, attrs: { shape: [i, s] } }), l = o.shape, u = new vS("real", l, t), p = new vS("imag", l, t), d = [{ dataId: a.complexTensorInfos.real.dataId, dtype: a.complexTensorInfos.real.dtype, shape: l }, { dataId: a.complexTensorInfos.imag.dataId, dtype: a.complexTensorInfos.imag.dtype, shape: l }], c = n.runWebGLProgram(u, d, "float32"), h = n.runWebGLProgram(p, d, "float32"), m = $s({ inputs: { real: c, imag: h }, backend: n });
  n.disposeIntermediateTensorInfo(c), n.disposeIntermediateTensorInfo(h);
  let f = ce({ inputs: { x: m }, backend: n, attrs: { shape: e17.shape } });
  return n.disposeIntermediateTensorInfo(o), n.disposeIntermediateTensorInfo(m), f;
}
function Lae(e17) {
  let { inputs: t, backend: n } = e17, { input: a } = t;
  return JA(a, false, n);
}
var zae = { kernelName: Cm, backendName: "webgl", kernelFunc: Lae };
var Wae = class {
  constructor(e17, t) {
    this.outputShape = [], this.customUniforms = [{ name: "value", type: "float" }], this.variableNames = ["x"], this.outputShape = e17, this.userCode = `
      void main() {
        // Input can be obtained from uniform value.
        setOutput(value);
      }
    `;
  }
};
function $d(e17) {
  let { backend: t, attrs: n } = e17, { shape: a, value: r } = n, { dtype: s } = n;
  if (s = s || w.inferDtype(r), s === "string") {
    let i = w.getArrayFromDType(s, w.sizeFromShape(a));
    return i.fill(r), t.makeTensorInfo(a, s, i);
  } else {
    let i = new Wae(a, r), o = [[r]];
    return t.runWebGLProgram(i, [], s, o);
  }
}
var Bae = { kernelName: zc, backendName: "webgl", kernelFunc: $d };
var Vae = class {
  constructor(e17) {
    this.variableNames = ["Image"], this.outputShape = [];
    let t = e17[2];
    this.outputShape = e17, this.userCode = `
        void main() {
          ivec4 coords = getOutputCoords();
          int x = coords[2];

          int coordX = ${t} - x - 1;
          float outputValue;
          if(coordX >= 0 && coordX < ${t}) {
            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);
          } else {
            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);
          }
          setOutput(outputValue);
        }
    `;
  }
};
var Uae = { kernelName: mu, backendName: "webgl", kernelFunc: ({ inputs: e17, backend: t }) => {
  let { image: n } = e17, a = t, r = new Vae(n.shape);
  return a.runWebGLProgram(r, [n], n.dtype);
} };
var wS = "return floor(x);";
var Gae = Ze({ opSnippet: wS, packedOpSnippet: wS, cpuKernelImpl: iQ });
var Hae = { kernelName: Yi, backendName: "webgl", kernelFunc: Gae };
var jae = `
  float s = sign(a) * sign(b);
  int ia = round(a);
  int ib = round(b);
  if (ib != 0) {
    // Windows (D3D) wants guaranteed non-zero int division at compile-time.
    return float(idiv(ia, ib, s));
  } else {
    return NAN;
  }
`;
var qae = `
  ivec4 ia = round(a);
  ivec4 ib = round(b);
  bvec4 cond = notEqual(ib, ivec4(0));
  ivec4 result = ivec4(0);
  vec4 s = sign(a) * sign(b);

  // Windows (D3D) wants guaranteed non-zero int division at compile-time.
  if (cond[0]) {
    result[0] = idiv(ia[0], ib[0], s[0]);
  }
  if (cond[1]) {
    result[1] = idiv(ia[1], ib[1], s[1]);
  }
  if (cond[2]) {
    result[2] = idiv(ia[2], ib[2], s[2]);
  }
  if (cond[3]) {
    result[3] = idiv(ia[3], ib[3], s[3]);
  }
  return vec4(result);
`;
var Kae = hn({ opSnippet: jae, packedOpSnippet: qae, dtype: "int32" });
var Xae = { kernelName: Zi, backendName: "webgl", kernelFunc: Kae };
var Yae = class {
  constructor(e17) {
    this.variableNames = ["A"];
    let t = En(), [n, a] = e17;
    this.outputShape = e17, this.userCode = `
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];
        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${a}.0, ${n}.0);

        vec4 values = ${t.texture2D}(A, uv);
        float value;
        if (depth == 0) {
          value = values.r;
        } else if (depth == 1) {
          value = values.g;
        } else if (depth == 2) {
          value = values.b;
        } else if (depth == 3) {
          value = values.a;
        }

        setOutput(floor(value * 255.0 + 0.5));
      }
    `;
  }
};
var Zae = class {
  constructor(e17) {
    this.variableNames = ["A"], this.packedInputs = false, this.packedOutput = true;
    let t = En(), [n, a] = e17;
    this.outputShape = e17, this.userCode = `
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];

        vec4 result = vec4(0.);

        for(int row=0; row<=1; row++) {
          for(int col=0; col<=1; col++) {
            texC = coords[1] + row;
            depth = coords[2] + col;

            vec2 uv = (vec2(texC, texR) + halfCR) /
                       vec2(${a}.0, ${n}.0);
            vec4 values = ${t.texture2D}(A, uv);
            float value;
            if (depth == 0) {
              value = values.r;
            } else if (depth == 1) {
              value = values.g;
            } else if (depth == 2) {
              value = values.b;
            } else if (depth == 3) {
              value = values.a;
            }

            result[row * 2 + col] = floor(value * 255.0 + 0.5);
          }
        }

        ${t.output} = result;
      }
    `;
  }
};
var Jae = { kernelName: Hh, backendName: "webgl", kernelFunc: Qae };
var Il;
var xx = G().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");
function Qae(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { pixels: r } = t, { numChannels: s } = a, i = typeof HTMLVideoElement != "undefined" && r instanceof HTMLVideoElement, o = typeof HTMLImageElement != "undefined" && r instanceof HTMLImageElement, [l, u] = i ? [r.videoWidth, r.videoHeight] : [r.width, r.height], p = [u, l], d = [u, l, s];
  if (o || i) {
    let f = G().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");
    (Il == null || f !== xx) && (xx = f, Il = document.createElement("canvas").getContext("2d", { willReadFrequently: xx })), Il.canvas.width = l, Il.canvas.height = u, Il.drawImage(r, 0, 0, l, u), r = Il.canvas;
  }
  let c = n.makeTensorInfo(p, "int32");
  n.texData.get(c.dataId).usage = ca.PIXELS, n.gpgpu.uploadPixelDataToTexture(n.getTexture(c.dataId), r);
  let h = G().getBool("WEBGL_PACK") ? new Zae(d) : new Yae(d), m = n.runWebGLProgram(h, [c], "int32");
  return n.disposeData(c.dataId), m;
}
function ere(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r, filter: s, bias: i, preluActivationWeights: o } = t, { strides: l, pad: u, dataFormat: p, dilations: d, dimRoundingMode: c, activation: h, leakyreluAlpha: m } = a, f = T.convertConv2DDataFormat(p), g = T.computeConv2DInfo(r.shape, s.shape, l, d, u, c, false, f), b, y = [], x = i != null, v = o != null, I = h === "leakyrelu", N = () => {
    let _ = [r, s], F = (D, $) => {
      if ($ === "NCHW" && D.shape.length === 1 && D.shape[0] !== 1) {
        let S = ce({ inputs: { x: D }, backend: n, attrs: { shape: [D.shape[0], 1, 1] } });
        return y.push(S), S;
      }
      return D;
    };
    if (x && _.push(F(i, p)), v && _.push(F(o, p)), I) {
      let D = n.makeTensorInfo([], "float32", w.createScalarValue(m, "float32"));
      _.push(D), y.push(D);
    }
    return _;
  };
  if (g.filterHeight === 1 && g.filterWidth === 1 && g.dilationHeight === 1 && g.dilationWidth === 1 && g.strideHeight === 1 && g.strideWidth === 1 && (g.padInfo.type === "SAME" || g.padInfo.type === "VALID")) b = jA({ x: r, filter: s, convInfo: g, backend: n, bias: i, activation: h, preluActivationWeights: o, leakyreluAlpha: m });
  else if (g.strideWidth <= 2 && f === "channelsLast" && G().getBool("WEBGL_EXP_CONV")) {
    let _ = h ? Cc(h, true) : null, F = new HA(g, x, _, v, I), D = [[g.padInfo.top, g.padInfo.left], [g.strideHeight, g.strideWidth], [g.dilationHeight, g.dilationWidth], [g.inHeight, g.inWidth]], $ = N();
    b = n.runWebGLProgram(F, $, "float32", D);
  } else if (G().getBool("WEBGL_CONV_IM2COL")) b = qA({ x: r, filter: s, convInfo: g, backend: n, bias: i, activation: h, preluActivationWeights: o, leakyreluAlpha: m });
  else {
    let _ = h ? Cc(h, false) : null, F = new GA(g, x, _, v, I), D = N();
    b = n.runWebGLProgram(F, D, "float32");
  }
  let C = ce({ inputs: { x: b }, backend: n, attrs: { shape: g.outShape } });
  return y.push(b), y.forEach((_) => n.disposeIntermediateTensorInfo(_)), C;
}
var tre = { kernelName: oi, backendName: "webgl", kernelFunc: ere };
function nre(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r, filter: s, bias: i, preluActivationWeights: o } = t, { strides: l, pad: u, dilations: p, dimRoundingMode: d, activation: c, leakyreluAlpha: h } = a, m = [], f = p;
  f == null && (f = [1, 1]), w.assert(T.eitherStridesOrDilationsAreOne(l, f), () => `Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${l} and dilations '${f}'`);
  let g = T.computeConv2DInfo(r.shape, s.shape, l, f, u, d, true), b = G().getBool("WEBGL_PACK_DEPTHWISECONV") && g.strideWidth <= 2 && g.outChannels / g.inChannels === 1, y = c ? Cc(c, b) : null, x = [r, s], v = i != null, I = o != null, N = c === "leakyrelu";
  if (v && x.push(i), I && x.push(o), N) {
    let D = n.makeTensorInfo([], "float32", w.createScalarValue(h, "float32"));
    x.push(D), m.push(D);
  }
  let C;
  b ? C = new YA(g, v, y, I, N) : C = new XA(g, v, y, I, N);
  let _ = [[g.padInfo.top, g.padInfo.left], [g.strideHeight, g.strideWidth], [g.dilationHeight, g.dilationWidth], [g.inHeight, g.inWidth]], F = n.runWebGLProgram(C, x, "float32", _);
  return m.forEach((D) => n.disposeIntermediateTensorInfo(D)), F;
}
var are = { kernelName: li, backendName: "webgl", kernelFunc: nre };
var rre = class {
  constructor(e17, t, n, a) {
    this.sliceDim = e17, this.strides = t, this.paramsShape = a, this.variableNames = ["x", "indices"], this.outputShape = n;
    let r = ht(n.length), s = `
    int index;`;
    for (let i = 0; i < this.sliceDim; i++) s += `
          index = round(getIndices(coords[0], ${i}));
          out_of_bounds = out_of_bounds || index < 0;
          out_of_bounds = out_of_bounds || index >= ${this.paramsShape[i]};
          flattenIndex += index * ${this.strides[i]};`;
    this.userCode = `
         void main() {
          ${r} coords = getOutputCoords();
          int flattenIndex = 0;
          bool out_of_bounds = false;

          ${s}

          setOutput(out_of_bounds ? 0.0 : getX(flattenIndex, coords[1]));
        }
      `;
  }
};
function sre(e17) {
  let { inputs: t, backend: n } = e17, { params: a, indices: r } = t, s = r.shape, i = s[s.length - 1], o = w.sizeFromShape(a.shape), [l, u, p, d] = T.prepareAndValidate(a, r), c = ce({ inputs: { x: r }, backend: n, attrs: { shape: [u, i] } }), h = ce({ inputs: { x: a }, backend: n, attrs: { shape: [w.sizeFromShape(a.shape) / p, p] } });
  if (n.shouldExecuteOnCPU([a, r]) || a.dtype === "string") {
    let b = n.readSync(r.dataId), y = n.bufferSync(a), x = oQ(b, y, a.dtype, u, i, p, d, a.shape, o);
    return n.makeTensorInfo(l, a.dtype, x.values);
  }
  let m = new rre(i, d, [u, p], a.shape), f = n.runWebGLProgram(m, [h, c], h.dtype), g = ce({ inputs: { x: f }, backend: n, attrs: { shape: l } });
  return n.disposeIntermediateTensorInfo(c), n.disposeIntermediateTensorInfo(h), n.disposeIntermediateTensorInfo(f), g;
}
var ire = { kernelName: gu, backendName: "webgl", kernelFunc: sre };
var ore = class {
  constructor(e17, t) {
    this.variableNames = ["A", "indices"], this.outputShape = t, this.rank = t.length;
    let n = ht(this.rank), a = lre(e17, 2);
    this.userCode = `
      void main() {
        ${n} resRC = getOutputCoords();
        int index = int(getIndices(resRC.x, resRC.z));
        float inBounds = (index >= 0) && (index < ${e17[2]}) ? 1.0 : 0.0;
        setOutput(inBounds * getA(${a}));
      }
    `;
  }
};
function lre(e17, t) {
  let n = ["resRC.x", "resRC.y", "resRC.z", "resRC.w"], a = [];
  for (let r = 0; r < e17.length; r++) r === 2 ? a.push("index") : a.push(`${n[r]}`);
  return a.join();
}
function QA(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r, indices: s } = t, { axis: i, batchDims: o } = a, l = w.parseAxisParam(i, r.shape)[0];
  if (G().get("DEBUG")) {
    let y = n.readSync(s.dataId), x = r.shape[l];
    for (let v = 0; v < y.length; ++v) {
      let I = y[v];
      w.assert(I <= x - 1 && I >= 0, () => `GatherV2: the index value ${I} is not in [0, ${x - 1}]`);
    }
  }
  let u = T.segment_util.collectGatherOpShapeInfo(r, s, l, o), p = w.sizeFromShape(s.shape), d = [], c = ce({ inputs: { x: r }, backend: n, attrs: { shape: [u.batchSize, u.outerSize, u.dimSize, u.sliceSize] } }), h = ce({ inputs: { x: s }, backend: n, attrs: { shape: [u.batchSize, p / u.batchSize] } });
  d.push(c), d.push(h);
  let m = [u.batchSize, u.outerSize, p / u.batchSize, u.sliceSize];
  if (n.shouldExecuteOnCPU([r, s]) || r.dtype === "string") {
    let y = n.bufferSync(h), x = n.bufferSync(c), v = lQ(x, y, m);
    return d.forEach((I) => n.disposeIntermediateTensorInfo(I)), n.makeTensorInfo(u.outputShape, v.dtype, v.values);
  }
  let f = new ore(c.shape, m), g = n.runWebGLProgram(f, [c, h], c.dtype);
  d.push(g);
  let b = ce({ inputs: { x: g }, backend: n, attrs: { shape: u.outputShape } });
  return d.forEach((y) => n.disposeIntermediateTensorInfo(y)), b;
}
var ure = { kernelName: fu, backendName: "webgl", kernelFunc: QA };
var pre = "return float(a > b);";
var cre = `
  return vec4(greaterThan(a, b));
`;
var dre = hn({ opSnippet: pre, packedOpSnippet: cre, cpuKernelImpl: uQ, dtype: "bool" });
var hre = { kernelName: bu, backendName: "webgl", kernelFunc: dre };
var mre = "return float(a >= b);";
var fre = `
  return vec4(greaterThanEqual(a, b));
`;
var gre = hn({ opSnippet: mre, packedOpSnippet: fre, dtype: "bool", cpuKernelImpl: pQ });
var bre = { kernelName: Qi, backendName: "webgl", kernelFunc: gre };
function yre(e17) {
  let { inputs: t, backend: n } = e17, { input: a } = t;
  return JA(a, true, n);
}
var xre = { kernelName: Em, backendName: "webgl", kernelFunc: yre };
var vre = "return float(!isnan(x) && !isinf(x));";
var wre = Ze({ opSnippet: vre, dtype: "bool" });
var kre = { kernelName: to, backendName: "webgl", kernelFunc: wre };
var Ire = "return float(isinf(x));";
var Sre = Ze({ opSnippet: Ire, dtype: "bool" });
var Nre = { kernelName: no, backendName: "webgl", kernelFunc: Sre };
var Tre = "return float(isnan(x));";
var Cre = Ze({ opSnippet: Tre, dtype: "bool" });
var Ere = { kernelName: ao, backendName: "webgl", kernelFunc: Cre };
var _re = "return float(a < b);";
var Are = `
  return vec4(lessThan(a, b));
`;
var Fre = hn({ opSnippet: _re, packedOpSnippet: Are, cpuKernelImpl: cQ, dtype: "bool" });
var $re = { kernelName: yu, backendName: "webgl", kernelFunc: Fre };
var Dre = "return float(a <= b);";
var Rre = `
  return vec4(lessThanEqual(a, b));
`;
var Mre = hn({ opSnippet: Dre, packedOpSnippet: Rre, cpuKernelImpl: dQ, dtype: "bool" });
var Ore = { kernelName: xu, backendName: "webgl", kernelFunc: Mre };
function Pre(e17) {
  let { backend: t, attrs: n } = e17, { start: a, stop: r, num: s } = n, i = hQ(a, r, s);
  return t.makeTensorInfo([i.length], "float32", i);
}
var Lre = { kernelName: vu, backendName: "webgl", kernelFunc: Pre };
var zre = mp + `
  return x < 0.0 ? 0./0. : log(x);
`;
var Wre = `
  vec4 result = log(x);
  bvec4 isNaN = isnan(x);
  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);
  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);
  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);
  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);
  return result;
`;
var Bre = Ze({ opSnippet: zre, packedOpSnippet: Wre, cpuKernelImpl: mQ });
var Vre = { kernelName: so, backendName: "webgl", kernelFunc: Bre };
var Ure = mp + `
  return log(1.0 + x);
`;
var Gre = Ze({ opSnippet: Ure });
var Hre = { kernelName: io, backendName: "webgl", kernelFunc: Gre };
var jre = "return float(a >= 1.0 && b >= 1.0);";
var qre = `
  return vec4(
    vec4(greaterThanEqual(a, vec4(1.0))) *
    vec4(greaterThanEqual(b, vec4(1.0))));
`;
var Kre = hn({ opSnippet: jre, packedOpSnippet: qre, dtype: "bool" });
var Xre = { kernelName: wu, backendName: "webgl", kernelFunc: Kre };
var Yre = "return float(!(x >= 1.0));";
var Zre = Ze({ opSnippet: Yre });
var Jre = { kernelName: ku, backendName: "webgl", kernelFunc: Zre };
var Qre = "return float(a >= 1.0 || b >= 1.0);";
var ese = `
  return min(
    vec4(greaterThanEqual(a, vec4(1.0))) +
    vec4(greaterThanEqual(b, vec4(1.0))),
    vec4(1.0));
`;
var tse = hn({ opSnippet: Qre, packedOpSnippet: ese, dtype: "bool" });
var nse = { kernelName: Iu, backendName: "webgl", kernelFunc: tse };
var ase = class {
  constructor(e17, t, n, a, r) {
    this.variableNames = ["x"], this.outputShape = [];
    let s = t, i = e17[3] - 1;
    this.outputShape = e17;
    let o, l = `float(${n}) + float(${a}) * sum`;
    r === 0.5 ? o = `inversesqrt(${l})` : r === 1 ? o = `1.0/(${l})` : o = `exp(log(${l}) * float(-${r}));`, this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];
        int d = coords[3];
        float x = getX(b, r, c, d);
        float sum = 0.0;
        for (int j = -${s}; j <= ${s}; j++) {
          int idx = d + j;
          if (idx >= 0 && idx <=  ${i}) {
            float z = getX(b, r, c, idx);
            sum += z * z;
          }
        }
        float val = x * ${o};
        setOutput(val);
      }
    `;
  }
};
var rse = class {
  constructor(e17, t, n, a, r) {
    this.variableNames = ["x"], this.outputShape = [], this.packedInputs = true, this.packedOutput = true;
    let s = t, i = e17[3] - 1;
    this.outputShape = e17;
    let o, l = `float(${n}) + float(${a}) * sum`;
    r === 0.5 ? o = `inversesqrt(${l})` : r === 1 ? o = `1.0/(${l})` : o = `exp(log(${l}) * float(-${r}));`, this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords.x;
        int r = coords.y;
        int c = coords.z;
        int d = coords.w;

        bool hasNextCol = d < ${this.outputShape[3]};
        bool hasNextRow = c < ${this.outputShape[2]};

        vec4 sum = vec4(0.);
        vec4 xFragAtOutputCoords = getX(b, r, c, d);

        vec4 xAtOutputCoords = vec4(
          getChannel(xFragAtOutputCoords, vec2(c, d)),
          hasNextCol ?
            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,
          hasNextRow ?
            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,
          (hasNextRow && hasNextCol) ?
            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0
        );

        int firstChannel = d - ${s};
        vec2 cache = vec2(0.);
        if(firstChannel >= 0){
          vec4 firstChannelFrag = getX(b, r, c, firstChannel);
          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));
            if(hasNextRow){
              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));
            }
        }

        ivec2 depth = ivec2(d, d + 1);
        for (int j = - ${s}; j <= ${s}; j++) {
          ivec2 idx = depth + j;
          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));
          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${i}));

          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;
          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;

          if(depthInRange || depthPlusOneInRange){
            vec4 z = vec4(0.);
            vec4 xFragAtCurrentDepth;
            z.xz = cache.xy;
            if(depthPlusOneInRange && hasNextCol){
              xFragAtCurrentDepth = idx.y != d ?
                getX(b, r, c, idx.y) : xFragAtOutputCoords;
              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));
              if(hasNextRow){
                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));
              }
            }
            cache.xy = z.yw;
            sum += z * z;
          }
        }
        vec4 result = xAtOutputCoords * ${o};
        setOutput(result);
      }
    `;
  }
};
var sse = (e17) => {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r } = t, { depthRadius: s, bias: i, alpha: o, beta: l } = a, u = G().getBool("WEBGL_PACK_NORMALIZATION") ? new rse(r.shape, s, i, o, l) : new ase(r.shape, s, i, o, l);
  return n.runWebGLProgram(u, [r], r.dtype);
};
var ise = { kernelName: oo, backendName: "webgl", kernelFunc: sse };
var ose = class {
  constructor(e17, t, n, a, r) {
    this.variableNames = ["inputImage", "outputImage", "dy"], this.outputShape = [], this.outputShape = e17, this.depth = e17[3], this.depthRadius = t, this.bias = n, this.alpha = a, this.beta = r, this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];

        float result = 0.0;
        for (int d = 0; d < ${this.depth}; ++d) {
          int depthBegin = int(max(0.0, float(d - ${t})));
          int depthEnd = int(min(float(${this.depth}),
              float(d + ${t} + 1)));

          const int MIN_DEPTH_BEGIN = 0;
          const int MAX_DEPTH_END = ${this.depth};

          float norm = 0.0;
          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd) {
              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);
            }
            else {
              break;
            }
          }

          norm = float(${a}) * norm + float(${n});

          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd){
              float dyi = -2.0 * float(${a})
                * float(${r})
                * getInputImage(b, r, c, k) * getOutputImage(b, r, c, d)
                / norm;
              if (k == d) {
                dyi += pow(norm, -1.0 * ${r});
              }
              if (k == coords[3]) {
                dyi *= getDy(b, r, c, d);
                result += dyi;
              }
            }
            else {
              break;
            }
          }
      }
      setOutput(result);
      }
    `;
  }
};
var lse = (e17) => {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r, y: s, dy: i } = t, { depthRadius: o, bias: l, alpha: u, beta: p } = a, d = new ose(r.shape, o, l, u, p);
  return n.runWebGLProgram(d, [r, s, i], r.dtype);
};
var use = { kernelName: Su, backendName: "webgl", kernelFunc: lse };
function pse(e17, t, n, a) {
  let r = w.sizeFromShape(t), s = w.sizeFromShape(e17.shape) / r, i = ce({ inputs: { x: e17 }, attrs: { shape: [s, r] }, backend: a }), o = el(i, e17.dtype, "max", a), l = ce({ inputs: { x: o }, attrs: { shape: n }, backend: a });
  return a.disposeIntermediateTensorInfo(i), a.disposeIntermediateTensorInfo(o), l;
}
function eF(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r } = t, { reductionIndices: s, keepDims: i } = a, o = r.shape.length, l = w.parseAxisParam(s, r.shape), u = l, p = T.getAxesPermutation(u, o), d = p != null, c = n.shouldExecuteOnCPU([r]), h = r;
  if (d) {
    if (c) {
      let y = n.texData.get(h.dataId).values, x = new Array(o);
      for (let N = 0; N < x.length; N++) x[N] = r.shape[p[N]];
      let v = ok(y, r.shape, r.dtype, p, x);
      h = n.makeTensorInfo(x, r.dtype);
      let I = n.texData.get(h.dataId);
      I.values = v;
    } else h = Bf(r, p, n);
    u = T.getInnerMostAxes(u.length, o);
  }
  T.assertAxesAreInnerMostDims("max", u, o);
  let [m, f] = T.computeOutAndReduceShapes(h.shape, u), g = m;
  i && (g = T.expandShapeToKeepDim(m, l));
  let b;
  if (c) {
    let y = n.texData.get(h.dataId).values, x = fQ(y, w.sizeFromShape(f), g, r.dtype);
    b = n.makeTensorInfo(g, r.dtype);
    let v = n.texData.get(b.dataId);
    v.values = x;
  } else b = pse(h, f, g, n);
  return d && n.disposeIntermediateTensorInfo(h), b;
}
var cse = { kernelName: lo, backendName: "webgl", kernelFunc: eF };
var dse = uk + `
  return max(a, b);
`;
var hse = `
  vec4 result = vec4(max(a, b));
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  ` + Qo + `
  return result;
`;
var mse = hn({ opSnippet: dse, packedOpSnippet: hse, cpuKernelImpl: gQ });
var fse = { kernelName: uo, backendName: "webgl", kernelFunc: mse };
function gse(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r } = t;
  lp(r, "maxPool");
  let { filterSize: s, strides: i, pad: o, dimRoundingMode: l } = a, u = 1;
  w.assert(T.eitherStridesOrDilationsAreOne(i, u), () => `Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${u}'`);
  let p = T.computePool2DInfo(r.shape, s, i, u, o, l);
  if (p.filterWidth === 1 && p.filterHeight === 1 && w.arraysEqual(p.inShape, p.outShape)) return ta({ inputs: { x: r }, backend: n });
  let d = new Ec(p, "max", false);
  return n.runWebGLProgram(d, [r], r.dtype);
}
var bse = { kernelName: po, backendName: "webgl", kernelFunc: gse };
function yse(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r } = t, { filterSize: s, strides: i, pad: o, dataFormat: l, dimRoundingMode: u } = a, p = [1, 1, 1], d = T.computePool3DInfo(r.shape, s, i, p, o, u, l), c = new ck(d, "max", false);
  return n.runWebGLProgram(c, [r], r.dtype);
}
var xse = { kernelName: Nu, backendName: "webgl", kernelFunc: yse };
var vse = class {
  constructor(e17) {
    this.variableNames = ["dy", "maxPos"], this.outputShape = e17.inShape;
    let t = e17.strideHeight, n = e17.strideWidth, a = e17.dilationHeight, r = e17.effectiveFilterHeight, s = e17.effectiveFilterWidth, i = r - 1 - e17.padInfo.top, o = s - 1 - e17.padInfo.left, l = r * s - 1;
    this.userCode = `
      const ivec2 pads = ivec2(${i}, ${o});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${r};
          wR += ${a}) {
          float dyR = float(dyRCorner + wR) / ${t}.0;

          if (dyR < 0.0 || dyR >= ${e17.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${s}; wC++) {
            float dyC = float(dyCCorner + wC) / ${n}.0;

            if (dyC < 0.0 || dyC >= ${e17.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);
            int maxPosValue = ${l} - int(getMaxPos(b, idyR, idyC, d));

            // Get the current value, check it against the value from the
            // position matrix.
            int curPosValue = wR * ${s} + wC;
            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

            dotProd += dyValue * mask;
          }
        }
        setOutput(dotProd);
      }
    `;
  }
};
var wse = class {
  constructor(e17) {
    this.variableNames = ["dy", "maxPos"], this.outputShape = e17.inShape;
    let t = e17.strideDepth, n = e17.strideHeight, a = e17.strideWidth, r = e17.dilationDepth, s = e17.dilationHeight, i = e17.dilationWidth, o = e17.effectiveFilterDepth, l = e17.effectiveFilterHeight, u = e17.effectiveFilterWidth, p = o - 1 - e17.padInfo.front, d = l - 1 - e17.padInfo.top, c = u - 1 - e17.padInfo.left, h = o * l * u - 1;
    this.userCode = `
      const ivec3 pads = ivec3(${p}, ${d}, ${c});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${o};
           wD += ${r}) {
          float dyD = float(dyDCorner + wD) / ${t}.0;

          if (dyD < 0.0 || dyD >= ${e17.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${l};
              wR += ${s}) {
            float dyR = float(dyRCorner + wR) / ${n}.0;

            if (dyR < 0.0 || dyR >= ${e17.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${u};
                wC += ${i}) {
              float dyC = float(dyCCorner + wC) / ${a}.0;

              if (dyC < 0.0 || dyC >= ${e17.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);
              int maxPosValue = ${h} -
                  int(getMaxPos(batch, idyD, idyR, idyC, ch));

              // Get the current value, check it against the value from the
              // position matrix.
              int curPosValue =
                  wD * ${l} * ${u} +
                  wR * ${u} + wC;
              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

              dotProd += dyValue * mask;
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
};
function kse(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { dy: r, input: s } = t, i = s, { filterSize: o, strides: l, pad: u, dimRoundingMode: p } = a, d = [1, 1, 1], c = T.computePool3DInfo(i.shape, o, l, d, u, p), h = new ck(c, "max", true), m = n.runWebGLProgram(h, [i], i.dtype), f = new wse(c), g = n.runWebGLProgram(f, [r, m], i.dtype);
  return n.disposeIntermediateTensorInfo(m), g;
}
var Ise = { kernelName: Bc, backendName: "webgl", kernelFunc: kse };
function Sse(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { dy: r, input: s, output: i } = t, o = s;
  lp([s, i], "maxPoolGrad");
  let { filterSize: l, strides: u, pad: p, dimRoundingMode: d } = a, c = T.computePool2DInfo(o.shape, l, u, 1, p, d), h = true, m = new Ec(c, "max", h), f = n.runWebGLProgram(m, [o], o.dtype), g = new vse(c), b = n.runWebGLProgram(g, [r, f], o.dtype);
  return n.disposeIntermediateTensorInfo(f), b;
}
var Nse = { kernelName: Wc, backendName: "webgl", kernelFunc: Sse };
function Tse(e17, t, n, a) {
  let r = new Ec(n, "max", false), s = a.runWebGLProgram(r, [e17], "float32");
  r = new Ec(n, "max", true, true, t);
  let i = a.runWebGLProgram(r, [e17], "float32");
  return [s, i];
}
var Cse = { kernelName: Vc, backendName: "webgl", kernelFunc: ({ inputs: e17, attrs: t, backend: n }) => {
  let { x: a } = e17, { filterSize: r, strides: s, pad: i, includeBatchInIndex: o } = t, l = n;
  w.assert(a.shape.length === 4, () => `Error in maxPool: input must be rank 4 but got rank ${a.shape.length}.`);
  let u = [1, 1];
  w.assert(T.eitherStridesOrDilationsAreOne(s, u), () => `Error in maxPool: Either strides or dilations must be 1. Got strides ${s} and dilations '${u}'`);
  let p = T.computePool2DInfo(a.shape, r, s, u, i), [d, c] = Tse(a, o, p, l);
  return [d, c];
} };
function Ese(e17, t, n, a) {
  let r = w.sizeFromShape(t), s = w.sizeFromShape(e17.shape) / r, i = ce({ inputs: { x: e17 }, attrs: { shape: [s, r] }, backend: a }), o = el(i, "float32", "mean", a), l = ce({ inputs: { x: o }, attrs: { shape: n }, backend: a });
  return a.disposeIntermediateTensorInfo(i), a.disposeIntermediateTensorInfo(o), l;
}
var _se = { kernelName: co, backendName: "webgl", kernelFunc: ({ inputs: e17, attrs: t, backend: n }) => {
  let { x: a } = e17, { keepDims: r, axis: s } = t, i = n, o = a.shape.length, l = w.parseAxisParam(s, a.shape), u = l, p = T.getAxesPermutation(u, o), d = p != null, c = i.shouldExecuteOnCPU([a]), h = [], m = a;
  if (d) {
    if (c) {
      let x = i.texData.get(m.dataId).values, v = new Array(o);
      for (let C = 0; C < v.length; C++) v[C] = a.shape[p[C]];
      let I = ok(x, a.shape, a.dtype, p, v);
      m = i.makeTensorInfo(v, a.dtype);
      let N = i.texData.get(m.dataId);
      N.values = I;
    } else m = Bf(a, p, i);
    h.push(m), u = T.getInnerMostAxes(u.length, o);
  }
  T.assertAxesAreInnerMostDims("sum", u, o);
  let [f, g] = T.computeOutAndReduceShapes(m.shape, u), b = f;
  r && (b = T.expandShapeToKeepDim(f, l));
  let y = Ese(m, g, b, i);
  for (let x of h) i.disposeIntermediateTensorInfo(x);
  return y;
} };
function Ase(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r } = t, { axis: s, keepDims: i } = a, o = r.shape.length, l = w.parseAxisParam(s, r.shape), u = l, p = T.getAxesPermutation(u, o), d = r;
  p != null && (d = Sn({ inputs: { x: r }, backend: n, attrs: { perm: p } }), u = T.getInnerMostAxes(u.length, r.shape.length)), T.assertAxesAreInnerMostDims("min", u, o);
  let [c, h] = T.computeOutAndReduceShapes(d.shape, u), m = w.sizeFromShape(h), f = ce({ inputs: { x: d }, backend: n, attrs: { shape: [-1, m] } }), g = el(f, f.dtype, "min", n), b;
  if (i) {
    let y = T.expandShapeToKeepDim(c, l);
    b = ce({ inputs: { x: g }, backend: n, attrs: { shape: y } });
  } else b = ce({ inputs: { x: g }, backend: n, attrs: { shape: c } });
  return n.disposeIntermediateTensorInfo(f), n.disposeIntermediateTensorInfo(g), p != null && n.disposeIntermediateTensorInfo(d), b;
}
var Fse = { kernelName: ho, backendName: "webgl", kernelFunc: Ase };
var $se = uk + `
  return min(a, b);
`;
var Dse = `
  vec4 result = vec4(min(a, b));
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  ` + Qo + `
  return result;
`;
var Rse = hn({ opSnippet: $se, packedOpSnippet: Dse, cpuKernelImpl: bQ });
var Mse = { kernelName: mo, backendName: "webgl", kernelFunc: Rse };
var Ose = class {
  constructor(e17, t, n) {
    this.variableNames = ["x"], this.outputShape = t.map((u, p) => u[0] + e17[p] + u[1]);
    let a = e17.length, r = ht(a), s = t.map((u) => u[0]).join(","), i = t.map((u, p) => u[0] + e17[p]).join(","), o = ["coords[0]", "coords[1]", "coords[2]", "coords[3]"].slice(0, a), l = n === "reflect" ? 0 : 1;
    if (a === 1) {
      this.userCode = `
        int start = ${s};
        int end = ${i};

        void main() {
          int outC = getOutputCoords();
          if (outC < start) {
            outC = start * 2 - outC - ${l};
          } else if(outC >= end) {
            outC = (end - 1) * 2 - outC + ${l};
          }
          setOutput(getX(outC - start));
        }
      `;
      return;
    }
    this.userCode = `
      ${r} start = ${r}(${s});
      ${r} end = ${r}(${i});

      void main() {
        ${r} outC = getOutputCoords();
        for (int i = 0; i < ${a}; i++) {
          if (outC[i] < start[i]) {
            outC[i] = start[i] * 2 - outC[i] - ${l};
          } else if(outC[i] >= end[i]) {
            outC[i] = (end[i] - 1) * 2 - outC[i] + ${l};
          }
        }
        ${r} coords = outC - start;
        setOutput(getX(${o}));
      }
    `;
  }
};
var Pse = class {
  constructor(e17, t, n) {
    this.variableNames = ["x"], this.packedInputs = true, this.packedOutput = true, this.outputShape = t.map((h, m) => h[0] + e17[m] + h[1]);
    let a = e17.length, r = ht(a), s = t.map((h) => h[0]).join(","), i = t.map((h, m) => h[0] + e17[m]).join(","), o = In("rc", a), l = In("source", a), u = `${o[a - 1]} < ${this.outputShape[a - 1]}`, p = a === 1 ? "source" : `vec2(${l.slice(-2).join()})`, d = n === "reflect" ? 0 : 1, c = "";
    if (a === 1) {
      let h = `
        ${r} source = rc;
        if (source < start) {
          source = start * 2 - source - ${d};
        } else if (source >= end) {
          source = (end - 1) * 2 - source + ${d};
        }
        source -= start;
      `;
      c = `
        ${r} rc = outputLoc;
        ${h}
        result[0] = getChannel(getX(${l.join()}), ${p});
        ${o[a - 1]} += 1;
        if(${u}) {
          ${h}
          result[1] = getChannel(getX(${l.join()}), ${p});
        }
      `;
    } else {
      let h = `
        ${r} source = rc;
        ${r} lt = ${r}(lessThan(source, start));
        ${r} gte = ${r}(greaterThanEqual(source, end));
        ${r} orig = 1 - (lt + gte);
        source = orig * source +
                lt * (start * 2 - source - ${d}) +
                gte * ((end - 1) * 2 - source + ${d});
        source -= start;
      `;
      c = `
        ${r} rc = outputLoc;
        ${h}
        result[0] = getChannel(getX(${l.join()}), ${p});
        ${o[a - 1]} += 1;
        if(${u}) {
          ${h}
          result[1] = getChannel(getX(${l.join()}), ${p});
        }
        rc = outputLoc;
        ${o[a - 2]} += 1;
        if(${o[a - 2]} < ${this.outputShape[a - 2]}) {
          ${h}
          result[2] = getChannel(getX(${l.join()}), ${p});
          ${o[a - 1]} += 1;
          if(${u}) {
            ${h}
            result[3] = getChannel(getX(${l.join()}), ${p});
          }
        }
      `;
    }
    this.userCode = `
      const ${r} start = ${r}(${s});
      const ${r} end = ${r}(${i});

      void main() {
        ${r} outputLoc = getOutputCoords();
        vec4 result = vec4(0.);
        ${c}
        setOutput(result);
      }
    `;
  }
};
var Lse = ({ inputs: e17, backend: t, attrs: n }) => {
  let { x: a } = e17, { paddings: r, mode: s } = n, i = G().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new Pse(a.shape, r, s) : new Ose(a.shape, r, s);
  return t.runWebGLProgram(i, [a], a.dtype);
};
var zse = { kernelName: fo, backendName: "webgl", kernelFunc: Lse };
var Wse = `if (b == 0.0) return NAN;
  return mod(a, b);`;
var Bse = `
  vec4 result = mod(a, b);
  bvec4 isNaN = equal(b, vec4(0.0));
  ` + Qo + `
  return result;
`;
var Vse = hn({ opSnippet: Wse, packedOpSnippet: Bse });
var Use = { kernelName: go, backendName: "webgl", kernelFunc: Vse };
var Gse = class {
  constructor(e17, t, n) {
    this.variableNames = ["probs"], this.customUniforms = [{ name: "seed", type: "float" }], this.outputShape = [e17, n], this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];

        float r = random(seed);
        float cdf = 0.0;

        for (int i = 0; i < ${t - 1}; i++) {
          cdf += getProbs(batch, i);

          if (r < cdf) {
            setOutput(float(i));
            return;
          }
        }

        // If no other event happened, last event happened.
        setOutput(float(${t - 1}));
      }
    `;
  }
};
var Hse = `
if (a == b) {
  return 1.0;
};
return a / b;`;
var jse = `
  // vec4 one = vec4(equal(a, b));
  // return one + (vec4(1.0) - one) * a / b;
  vec4 result = a / b;
  if(a.x == b.x) {
    result.x = 1.;
  }
  if(a.y == b.y) {
    result.y = 1.;
  }
  if(a.z == b.z) {
    result.z = 1.;
  }
  if(a.w == b.w) {
    result.w = 1.;
  }

  return result;
`;
var tF = hn({ opSnippet: Hse, packedOpSnippet: jse, checkOutOfBounds: true });
var qse = { kernelName: Hi, backendName: "webgl", kernelFunc: tF };
var kS = "return a - b;";
var nF = hn({ opSnippet: kS, packedOpSnippet: kS, supportsComplex: true, cpuKernelImpl: LQ });
var Kse = { kernelName: Bo, backendName: "webgl", kernelFunc: nF };
function aF(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { logits: r } = t, { dim: s } = a, i = w.parseAxisParam([s], r.shape), o = eF({ inputs: { x: r }, backend: n, attrs: { reductionIndices: i, keepDims: false } }), l = T.expandShapeToKeepDim(o.shape, i), u = ce({ inputs: { x: o }, backend: n, attrs: { shape: l } }), p = nF({ inputs: { a: r, b: u }, backend: n }), d = ZA({ inputs: { x: p }, backend: n }), c = Vf({ inputs: { x: d }, backend: n, attrs: { axis: i, keepDims: false } }), h = ce({ inputs: { x: c }, backend: n, attrs: { shape: l } }), m = tF({ inputs: { a: d, b: h }, backend: n });
  return n.disposeIntermediateTensorInfo(o), n.disposeIntermediateTensorInfo(u), n.disposeIntermediateTensorInfo(p), n.disposeIntermediateTensorInfo(d), n.disposeIntermediateTensorInfo(c), n.disposeIntermediateTensorInfo(h), m;
}
var Xse = { kernelName: zo, backendName: "webgl", kernelFunc: aF };
function Yse(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { logits: r } = t, { numSamples: s, seed: i, normalized: o } = a, l = o ? r : aF({ inputs: { logits: r }, backend: n, attrs: { dim: r.shape.length - 1 } }), u = l.shape[0], p = l.shape[1], d = new Gse(u, p, s), c = [[i]], h = n.runWebGLProgram(d, [l], "int32", c);
  return o || n.disposeIntermediateTensorInfo(l), h;
}
var Zse = { kernelName: Tu, backendName: "webgl", kernelFunc: Yse };
var Jse = Da + `
  return -x;
`;
var Qse = `
  vec4 result = -x;
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;
function eie(e17) {
  let { inputs: t, backend: n } = e17, { x: a } = t;
  if (n.shouldExecuteOnCPU([a])) {
    let s = n.texData.get(a.dataId), [i, o] = xQ(s.values, a.shape, a.dtype);
    return n.makeTensorInfo(o, a.dtype, i);
  }
  let r;
  return G().getBool("WEBGL_PACK_UNARY_OPERATIONS") ? r = new ts(a.shape, Qse) : r = new rr(a.shape, Jse), n.runWebGLProgram(r, [a], a.dtype);
}
var tie = { kernelName: Cu, backendName: "webgl", kernelFunc: eie };
var nie = mr.nonMaxSuppressionV3Impl;
function aie(e17) {
  T.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");
  let { inputs: t, backend: n, attrs: a } = e17, { boxes: r, scores: s } = t, { maxOutputSize: i, iouThreshold: o, scoreThreshold: l } = a, u = n.readSync(r.dataId), p = n.readSync(s.dataId), { selectedIndices: d } = nie(u, p, i, o, l);
  return n.makeTensorInfo([d.length], "int32", new Int32Array(d));
}
var rie = { kernelName: _u, backendName: "webgl", kernelFunc: aie };
var sie = mr.nonMaxSuppressionV4Impl;
function iie(e17) {
  T.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");
  let { inputs: t, backend: n, attrs: a } = e17, { boxes: r, scores: s } = t, { maxOutputSize: i, iouThreshold: o, scoreThreshold: l, padToMaxOutputSize: u } = a, p = n.readSync(r.dataId), d = n.readSync(s.dataId), { selectedIndices: c, validOutputs: h } = sie(p, d, i, o, l, u);
  return [n.makeTensorInfo([c.length], "int32", new Int32Array(c)), n.makeTensorInfo([], "int32", new Int32Array([h]))];
}
var oie = { kernelName: Au, backendName: "webgl", kernelFunc: iie };
var lie = mr.nonMaxSuppressionV5Impl;
function uie(e17) {
  T.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");
  let { inputs: t, backend: n, attrs: a } = e17, { boxes: r, scores: s } = t, { maxOutputSize: i, iouThreshold: o, scoreThreshold: l, softNmsSigma: u } = a, p = n.readSync(r.dataId), d = n.readSync(s.dataId), c = i, h = o, m = l, f = u, { selectedIndices: g, selectedScores: b } = lie(p, d, c, h, m, f);
  return [n.makeTensorInfo([g.length], "int32", new Int32Array(g)), n.makeTensorInfo([b.length], "float32", new Float32Array(b))];
}
var pie = { kernelName: Fu, backendName: "webgl", kernelFunc: uie };
var cie = class {
  constructor(e17, t, n, a) {
    this.variableNames = ["indices"], this.outputShape = [e17, t], this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int index = round(getIndices(coords.x));
        setOutput(mix(float(${a}), float(${n}),
                      float(index == coords.y)));
      }
    `;
  }
};
var die = (e17) => {
  let { inputs: t, backend: n, attrs: a } = e17, { indices: r } = t, { dtype: s, depth: i, onValue: o, offValue: l } = a, u = w.sizeFromShape(r.shape), p = new cie(u, i, o, l), d = ce({ inputs: { x: r }, backend: n, attrs: { shape: [u] } }), c = n.runWebGLProgram(p, [d], s);
  n.disposeIntermediateTensorInfo(d);
  let h = [...r.shape, i], m = ce({ inputs: { x: c }, backend: n, attrs: { shape: h } });
  return n.disposeIntermediateTensorInfo(c), m;
};
var hie = { kernelName: yo, backendName: "webgl", kernelFunc: die };
function fm(e17) {
  let { inputs: t, backend: n } = e17, { x: a } = t;
  if (a.dtype === "complex64") {
    let r = Fd({ inputs: { input: a }, backend: n }), s = fm({ inputs: { x: r }, backend: n }), i = Uf({ inputs: { input: a }, backend: n }), o = fm({ inputs: { x: i }, backend: n }), l = $s({ inputs: { real: s, imag: o }, backend: n });
    return n.disposeIntermediateTensorInfo(r), n.disposeIntermediateTensorInfo(s), n.disposeIntermediateTensorInfo(i), n.disposeIntermediateTensorInfo(o), l;
  } else return $d({ attrs: { shape: a.shape, dtype: a.dtype, value: a.dtype === "string" ? "" : 0 }, backend: n });
}
var mie = { kernelName: Yu, backendName: "webgl", kernelFunc: fm };
function rF(e17) {
  let { inputs: t, backend: n } = e17, { x: a } = t;
  if (a.dtype === "string") throw new Error("onesLike is not supported under string dtype");
  if (a.dtype === "complex64") {
    let r = Fd({ inputs: { input: a }, backend: n }), s = rF({ inputs: { x: r }, backend: n }), i = Uf({ inputs: { input: a }, backend: n }), o = fm({ inputs: { x: i }, backend: n }), l = $s({ inputs: { real: s, imag: o }, backend: n });
    return n.disposeIntermediateTensorInfo(r), n.disposeIntermediateTensorInfo(s), n.disposeIntermediateTensorInfo(i), n.disposeIntermediateTensorInfo(o), l;
  } else return $d({ attrs: { shape: a.shape, dtype: a.dtype, value: 1 }, backend: n });
}
var fie = { kernelName: $u, backendName: "webgl", kernelFunc: rF };
function gie(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { axis: r } = a;
  if (t.length === 1) return gv({ inputs: { input: t[0] }, backend: n, attrs: { dim: r } });
  let s = t[0].shape, i = t[0].dtype;
  t.forEach((p) => {
    w.assertShapesMatch(s, p.shape, "All tensors passed to stack must have matching shapes"), w.assert(i === p.dtype, () => "All tensors passed to stack must have matching dtypes");
  });
  let o = [], l = t.map((p) => {
    let d = gv({ inputs: { input: p }, backend: n, attrs: { dim: r } });
    return o.push(d), d;
  }), u = UA({ inputs: l, backend: n, attrs: { axis: r } });
  return o.forEach((p) => n.disposeIntermediateTensorInfo(p)), u;
}
var bie = { kernelName: Du, backendName: "webgl", kernelFunc: gie };
var yie = class {
  constructor(e17, t, n) {
    this.variableNames = ["x"], this.customUniforms = [{ name: "value", type: "float" }], this.outputShape = t.map((l, u) => l[0] + e17[u] + l[1]);
    let a = e17.length, r = ht(a), s = t.map((l) => l[0]).join(","), i = t.map((l, u) => l[0] + e17[u]).join(","), o = ["coords[0]", "coords[1]", "coords[2]", "coords[3]"].slice(0, a);
    if (a === 1) {
      this.userCode = `
        int start = ${s};
        int end = ${i};

        void main() {
          int outC = getOutputCoords();
          if (outC < start || outC >= end) {
            setOutput(value);
          } else {
            setOutput(getX(outC - start));
          }
        }
      `;
      return;
    }
    this.userCode = `
      ${r} start = ${r}(${s});
      ${r} end = ${r}(${i});

      void main() {
        ${r} outC = getOutputCoords();
        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {
          setOutput(value);
        } else {
          ${r} coords = outC - start;
          setOutput(getX(${o}));
        }
      }
    `;
  }
};
var xie = class {
  constructor(e17, t, n) {
    this.variableNames = ["x"], this.packedInputs = true, this.packedOutput = true, this.customUniforms = [{ name: "value", type: "float" }], this.outputShape = t.map((m, f) => m[0] + e17[f] + m[1]);
    let a = e17.length, r = ht(a), s = t.map((m) => m[0]).join(","), i = t.map((m, f) => m[0] + e17[f]).join(","), o = In("rc", a), l = In("source", a), u = `${o[a - 1]} < ${this.outputShape[a - 1]}`, p = a === 1 ? "source" : `vec2(${l.slice(-2).join()})`, d = [`${r} rc = outputLoc;`, `${o[a - 1]} += 1;
       if(${u}) {
      `, a === 1 ? "" : `}
       rc = outputLoc;
       ${o[a - 2]} += 1;
       if(${o[a - 2]} < ${this.outputShape[a - 2]}) {`, a === 1 ? "" : `  ${o[a - 1]} += 1;
         if(${u}) {`], c = a === 1 ? "rc < start || rc >= end" : "any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))", h = "";
    for (let m = 0, f = a === 1 ? 2 : 4; m < f; m++) h += `
        ${d[m]}
        if (${c}) {
          result[${m}] = float(value);
        } else {
          ${r} source = rc - start;
          result[${m}] = getChannel(getX(${l.join()}), ${p});
        }
      `;
    h += a === 1 ? "} " : "}}", this.userCode = `
      const ${r} start = ${r}(${s});
      const ${r} end = ${r}(${i});

      void main() {
        ${r} outputLoc = getOutputCoords();
        vec4 result = vec4(0.);
        ${h}
        setOutput(result);
      }
    `;
  }
};
var sF = (e17) => {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r } = t, { paddings: s, constantValue: i } = a;
  if (w.sizeFromShape(r.shape) === 0) {
    let u = s.map((p, d) => p[0] + r.shape[d] + p[1]);
    return $d({ backend: n, attrs: { shape: u, value: i, dtype: r.dtype } });
  }
  let o = G().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new xie(r.shape, s, i) : new yie(r.shape, s, i), l = [[i]];
  return n.runWebGLProgram(o, [r], r.dtype, l);
};
var vie = { kernelName: xo, backendName: "webgl", kernelFunc: sF };
var wie = `
  if(a < 0.0 && floor(b) < b){
    return NAN;
  }
  if (b == 0.0) {
    return 1.0;
  }
  return (round(mod(b, 2.0)) != 1) ?
      pow(abs(a), b) : sign(a) * pow(abs(a), b);
`;
var kie = `
  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.
  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));
  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);
  vec4 result = multiplier * pow(abs(a), b);

  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS
  bvec4 isExpZero = equal(b, vec4(0.0));
  result.r = isExpZero.r ? 1.0 : result.r;
  result.g = isExpZero.g ? 1.0 : result.g;
  result.b = isExpZero.b ? 1.0 : result.b;
  result.a = isExpZero.a ? 1.0 : result.a;

  bvec4 isNaN1 = lessThan(a, vec4(0.0));
  bvec4 isNaN2 = lessThan(floor(b), b);
  bvec4 isNaN = bvec4(isNaN1.x && isNaN2.x, isNaN1.y && isNaN2.y, isNaN1.z && isNaN2.z, isNaN1.w && isNaN2.w);
  ` + Qo + `
  return result;
`;
var Iie = hn({ opSnippet: wie, packedOpSnippet: kie });
var Sie = { kernelName: vo, backendName: "webgl", kernelFunc: Iie };
function Nie(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r } = t, { axis: s, keepDims: i } = a, o = r.shape.length, l = [], u = w.parseAxisParam(s, r.shape), p = u, d = T.getAxesPermutation(p, o), c = r;
  d != null && (c = Sn({ inputs: { x: r }, backend: n, attrs: { perm: d } }), p = T.getInnerMostAxes(p.length, o), l.push(c)), T.assertAxesAreInnerMostDims("prod", p, o);
  let h;
  if (n.shouldExecuteOnCPU([c])) {
    let m = n.texData.get(c.dataId).values, { outVals: f, outShape: g, outDtype: b } = wQ(c.shape, c.dtype, m, p);
    h = n.makeTensorInfo(g, b, f);
  } else {
    let [m, f] = T.computeOutAndReduceShapes(c.shape, p), g = w.sizeFromShape(f), b = ce({ inputs: { x: c }, backend: n, attrs: { shape: [-1, g] } }), y = Mm(r.dtype), x = el(b, y, "prod", n);
    h = ce({ inputs: { x }, backend: n, attrs: { shape: m } }), l.push(b), l.push(x);
  }
  if (i) {
    l.push(h);
    let m = T.expandShapeToKeepDim(h.shape, u);
    h = ce({ inputs: { x: h }, backend: n, attrs: { shape: m } });
  }
  return l.forEach((m) => n.disposeIntermediateTensorInfo(m)), h;
}
var Tie = { kernelName: ko, backendName: "webgl", kernelFunc: Nie };
function Cie(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { paramsNestedSplits: r, paramsDenseValues: s, indices: i } = t, { outputRaggedRank: o } = a, l = r.map((b) => n.readSync(b.dataId)), u = r.map((b) => b.shape), p = n.readSync(s.dataId), d = n.readSync(i.dataId), [c, h, m] = kQ(l, u, p, s.shape, s.dtype, d, i.shape, o), f = c.map((b) => n.makeTensorInfo([b.length], "int32", b)), g = n.makeTensorInfo(m, s.dtype, h);
  return f.concat([g]);
}
var Eie = { kernelName: Am, backendName: "webgl", kernelFunc: Cie };
function _ie(e17) {
  let { inputs: t, backend: n } = e17, { starts: a, limits: r, deltas: s } = t, i = n.readSync(a.dataId), o = n.readSync(r.dataId), l = n.readSync(s.dataId), [u, p] = IQ(i, a.shape, a.dtype, o, r.shape, l, s.shape), d = n.makeTensorInfo([u.length], "int32", u), c = n.makeTensorInfo([p.length], a.dtype, p);
  return [d, c];
}
var Aie = { kernelName: Fm, backendName: "webgl", kernelFunc: _ie };
function Fie(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { shape: r, values: s, defaultValue: i, rowPartitionTensors: o } = t, { rowPartitionTypes: l } = a, u = n.readSync(r.dataId), p = n.readSync(s.dataId), d = n.readSync(i.dataId), c = o.map((g) => n.readSync(g.dataId)), h = o.map((g) => g.shape), [m, f] = SQ(u, r.shape, p, s.shape, s.dtype, d, i.shape, c, h, l);
  return n.makeTensorInfo(m, s.dtype, f);
}
var $ie = { kernelName: $m, backendName: "webgl", kernelFunc: Fie };
var iF = (e17) => {
  let { backend: t, attrs: n } = e17, { start: a, stop: r, step: s, dtype: i } = n, o = NQ(a, r, s, i);
  return t.makeTensorInfo([o.length], i, o);
};
var Die = { kernelName: Uc, backendName: "webgl", kernelFunc: iF };
var Rie = "return 1.0 / x;";
var Mie = Ze({ opSnippet: Rie });
var Oie = { kernelName: Io, backendName: "webgl", kernelFunc: Mie };
var Pie = Da + `
  return (x < 0.0) ? 0.0 : x;
`;
var Lie = `
  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;
var zie = Ze({ opSnippet: Pie, packedOpSnippet: Lie });
var Wie = { kernelName: So, backendName: "webgl", kernelFunc: zie };
var Bie = Da + `
  return (x < 0.0) ? 0.0 : min(6.0, x);
`;
var Vie = `
  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;
var Uie = Ze({ opSnippet: Bie, packedOpSnippet: Vie });
var Gie = { kernelName: Co, backendName: "webgl", kernelFunc: Uie };
var Hie = class {
  constructor(e17, t, n, a, r) {
    this.variableNames = ["A"], this.outputShape = [];
    let [s, i, o, l] = e17;
    this.outputShape = [s, t, n, l];
    let u = [a && t > 1 ? i - 1 : i, a && n > 1 ? o - 1 : o], p = [a && t > 1 ? t - 1 : t, a && n > 1 ? n - 1 : n], d;
    r ? d = "(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)" : d = "vec2(yRC) * effectiveInputOverOutputRatioRC", this.userCode = `
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${u[0] / p[0]},
          ${u[1] / p[1]});
      const vec2 inputShapeRC = vec2(${i}.0, ${o}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = ${d};

        // Compute the four integer indices.
        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));
        ivec2 sourceCeilRC = ivec2(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);
        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);
        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);
        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);

        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);

        float top = topLeft + (topRight - topLeft) * fracRC.y;
        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;
        float newValue = top + (bottom - top) * fracRC.x;

        setOutput(newValue);
      }
    `;
  }
};
var jie = class {
  constructor(e17, t, n, a, r) {
    this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = true, this.outputShape = [];
    let [s, i, o, l] = e17;
    this.outputShape = [s, t, n, l];
    let u = [a && t > 1 ? i - 1 : i, a && n > 1 ? o - 1 : o], p = [a && t > 1 ? t - 1 : t, a && n > 1 ? n - 1 : n], d;
    r ? d = "(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)" : d = "vec3(yRC) * effectiveInputOverOutputRatioRC", this.userCode = `
      const vec3 effectiveInputOverOutputRatioRC = vec3(
          ${u[0] / p[0]},
          ${u[1] / p[1]},
          ${u[1] / p[1]});
      const vec3 inputShapeRC = vec3(${i}.0, ${o}.0,
                                     ${o}.0);

      float getAValue(int b, int r, int c, int d) {
        return getChannel(getA(b, r, c, d), vec2(c, d));
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        // Calculate values for next column in yRC.z.
        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);

        // Fractional source index.
        vec3 sourceFracIndexRC = ${d};

        // Compute the four integer indices.
        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));
        ivec3 sourceCeilRC = ivec3(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        // Should we calculate next column and row elements in 2x2 packed cell.
        bool hasNextCol = d < ${l - 1};
        bool hasNextRow = coords.z < ${n - 1};

        // In parallel, construct four corners for all four components in
        // packed 2x2 cell.
        vec4 topLeft = vec4(
          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 bottomLeft = vec4(
          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 topRight = vec4(
          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec4 bottomRight = vec4(
          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);

        vec4 top = mix(topLeft, topRight, fracRC.yyzz);
        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);
        vec4 newValue = mix(top, bottom, fracRC.x);

        setOutput(newValue);
      }
    `;
  }
};
function qie(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { images: r } = t, { alignCorners: s, halfPixelCenters: i, size: o } = a, [l, u] = o, p = G().getBool("WEBGL_PACK_IMAGE_OPERATIONS") ? new jie(r.shape, l, u, s, i) : new Hie(r.shape, l, u, s, i);
  return n.runWebGLProgram(p, [r], "float32");
}
var Kie = { kernelName: To, backendName: "webgl", kernelFunc: qie };
var Xie = class {
  constructor(e17, t, n) {
    this.variableNames = ["dy"], this.outputShape = [], this.outputShape = t;
    let [, a, r] = t, [, s, i] = e17, o = [n && s > 1 ? a - 1 : a, n && i > 1 ? r - 1 : r], l = [n && s > 1 ? s - 1 : s, n && i > 1 ? i - 1 : i], u = o[0] / l[0], p = o[1] / l[1], d = 1 / u, c = 1 / p, h = Math.ceil(d) * 2 + 2, m = Math.ceil(c) * 2 + 2;
    this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${u});
        const float widthScale = float(${p});

        const float invHeightScale = float(${d});
        const float invWidthScale = float(${c});

        const int winHeight = int(${h});
        const int winWidth = int(${m});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(startRLerp - float(winHeight / 2));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(startCLerp - float(winWidth / 2));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${s}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${i}) {
              continue;
            }

            float dxR = float(dyR) * heightScale;
            int topDxRIndex = int(floor(dxR));
            int bottomDxRIndex = int(min(ceil(dxR), ${a - 1}.0));
            float dxRLerp = dxR - float(topDxRIndex);
            float inverseDxRLerp = 1.0 - dxRLerp;

            float dxC = float(dyC) * widthScale;
            int leftDxCIndex = int(floor(dxC));
            int rightDxCIndex = int(min(ceil(dxC), ${r - 1}.0));
            float dxCLerp = dxC - float(leftDxCIndex);
            float inverseDxCLerp = 1.0 - dxCLerp;

            if (r == topDxRIndex && c == leftDxCIndex) {
              // topLeft
              accumulator +=
                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;
            }

            if (r == topDxRIndex && c == rightDxCIndex) {
              // topRight
              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;
            }

            if (r == bottomDxRIndex && c == leftDxCIndex) {
              // bottomLeft
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;
            }

            if (r == bottomDxRIndex && c == rightDxCIndex) {
              // bottomRight
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `;
  }
};
function Yie(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { images: r, dy: s } = t, { alignCorners: i } = a, o = new Xie(s.shape, r.shape, i);
  return n.runWebGLProgram(o, [s], s.dtype);
}
var Zie = { kernelName: Ou, backendName: "webgl", kernelFunc: Yie };
var Jie = class {
  constructor(e17, t, n, a, r) {
    this.variableNames = ["A"], this.outputShape = [];
    let [s, i, o, l] = e17;
    this.outputShape = [s, t, n, l];
    let u = [a && t > 1 ? i - 1 : i, a && n > 1 ? o - 1 : o], p = [a && t > 1 ? t - 1 : t, a && n > 1 ? n - 1 : n], d = a ? "0.5" : "0.0", c;
    r ? c = "max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))" : c = "vec2(yRC) * effectiveInputOverOutputRatioRC", this.userCode = `
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${u[0] / p[0]},
          ${u[1] / p[1]});
      const vec2 inputShapeRC = vec2(${i}.0, ${o}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = ${c};

        // Compute the coordinators of nearest neighbor point.
        ivec2 sourceNearestRC = ivec2(
          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${d})));
        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);

        setOutput(newValue);
      }
    `;
  }
};
var Qie = class {
  constructor(e17, t, n, a, r) {
    this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = true, this.outputShape = [];
    let [s, i, o, l] = e17;
    this.outputShape = [s, t, n, l];
    let u = [a && t > 1 ? i - 1 : i, a && n > 1 ? o - 1 : o], p = [a && t > 1 ? t - 1 : t, a && n > 1 ? n - 1 : n], d = a ? "0.5" : "0.0", c;
    r ? c = "max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))" : c = "vec3(yRC) * effectiveInputOverOutputRatioRC", this.userCode = `
      const vec3 effectiveInputOverOutputRatioRC = vec3(
          ${u[0] / p[0]},
          ${u[1] / p[1]},
          ${u[1] / p[1]});
      const vec3 inputShapeRC = vec3(${i}.0, ${o}.0,
                                     ${o}.0);

      float getAValue(int b, int r, int c, int d) {
        return getChannel(getA(b, r, c, d), vec2(c, d));
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        // Calculate values for next column in yRC.z.
        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);

        // Fractional source index.
        vec3 sourceFracIndexRC = ${c};

        // Compute the coordinators of nearest neighbor point.
        ivec3 sourceNearestRC = ivec3(
          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${d})));

        // Should we calculate next column and row elements in 2x2 packed cell.
        bool hasNextCol = d < ${l - 1};
        bool hasNextRow = coords.z < ${n - 1};

        vec4 newValue = vec4(
          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),
          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);

        setOutput(newValue);
      }
    `;
  }
};
function eoe(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { images: r } = t, { alignCorners: s, halfPixelCenters: i, size: o } = a, [l, u] = o, p = G().getBool("WEBGL_PACK_IMAGE_OPERATIONS") ? new Qie(r.shape, l, u, s, i) : new Jie(r.shape, l, u, s, i);
  return n.runWebGLProgram(p, [r], r.dtype);
}
var toe = { kernelName: No, backendName: "webgl", kernelFunc: eoe };
var noe = class {
  constructor(e17, t, n) {
    this.variableNames = ["dy"], this.outputShape = [], this.outputShape = t;
    let [, a, r] = t, [, s, i] = e17, o = [n && s > 1 ? a - 1 : a, n && i > 1 ? r - 1 : r], l = [n && s > 1 ? s - 1 : s, n && i > 1 ? i - 1 : i], u = o[0] / l[0], p = o[1] / l[1], d = 1 / u, c = 1 / p, h = Math.ceil(d) * 2 + 2, m = Math.ceil(c) * 2 + 2;
    this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${u});
        const float widthScale = float(${p});

        const float invHeightScale = float(${d});
        const float invWidthScale = float(${c});

        const int winHeight = int(${h});
        const int winWidth = int(${m});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(floor(startRLerp - float(winHeight / 2)));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(floor(startCLerp - float(winWidth / 2)));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${s}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${i}) {
              continue;
            }

            float sourceFracRow =
              float(${o[0]}) *
                (float(dyR) / float(${l[0]}));

            float sourceFracCol =
                float(${o[1]}) *
                  (float(dyC) / float(${l[1]}));

            int sourceNearestRow = int(min(
                float(int(${a}) - 1),
                ${n} ? float(round(sourceFracRow)) :
                                  float(floor(sourceFracRow))));

            int sourceNearestCol = int(min(
                float(int(${r}) - 1),
                ${n} ? float(round(sourceFracCol)) :
                                  float(floor(sourceFracCol))));

            if (r == sourceNearestRow && c == sourceNearestCol) {
              accumulator += getDy(b, dyR, dyC, d);
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `;
  }
};
function aoe(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { images: r, dy: s } = t, { alignCorners: i } = a, o = new noe(s.shape, r.shape, i);
  return n.runWebGLProgram(o, [s], s.dtype);
}
var roe = { kernelName: Mu, backendName: "webgl", kernelFunc: aoe };
var soe = class {
  constructor(e17, t) {
    this.variableNames = ["x"];
    let n = e17.length;
    if (n > 4) throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);
    if (this.outputShape = e17, n === 1) {
      this.userCode = `
        void main() {
          int coord = getOutputCoords();
          setOutput(getX(${e17[0]} - coord - 1));
        }
      `;
      return;
    }
    let a = (i) => t.indexOf(i) !== -1 && e17[i] !== 1 ? `${e17[i]} - coords[${i}] - 1` : `coords[${i}]`, r = e17.map((i, o) => a(o)).join(","), s = ht(n);
    this.userCode = `
      void main() {
        ${s} coords = getOutputCoords();
        setOutput(getX(${r}));
      }
    `;
  }
};
var ioe = class {
  constructor(e17, t) {
    this.variableNames = ["x"], this.packedInputs = true, this.packedOutput = true;
    let n = e17.length;
    if (n > 4) throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);
    this.outputShape = e17;
    let a = In("rc", n), r = `${a[n - 1]} + 1 < ${this.outputShape[n - 1]}`, s = `${a[n - 2]} + 1 < ${this.outputShape[n - 2]}`, i = ht(n);
    n === 1 ? this.userCode = `
        void main(){
          int rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = getChannel(getX(${e17[0]} - rc - 1),
            ${e17[0]} - rc - 1);
          if(${r}){
              result.g = getChannel(getX(${e17[0]} - (rc  + 1) - 1),
                ${e17[0]} - (rc  + 1) - 1);
          }
          setOutput(result);
        }
      ` : this.userCode = `
        void main() {
          ${i} rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = ${o(a.slice())};
          if(${r}){
            result.g = ${l(a.slice())};
          }
          if(${s}) {
            result.b = ${u(a.slice())};
            if(${r}) {
              result.a = ${p(a.slice())};
            }
          }
          setOutput(result);
        }
    `;
    function o(h) {
      return d(h);
    }
    function l(h) {
      return h[n - 1] = "(" + h[n - 1] + " + 1)", d(h);
    }
    function u(h) {
      return h[n - 2] = "(" + h[n - 2] + " + 1)", d(h);
    }
    function p(h) {
      return h[n - 1] = "(" + h[n - 1] + " + 1)", h[n - 2] = "(" + h[n - 2] + " + 1)", d(h);
    }
    function d(h) {
      let m = e17.map((b, y) => c(y, h)), f = m.join(","), g = m.slice(-2).join(",");
      return `getChannel(getX(${f}), vec2(${g}))`;
    }
    function c(h, m) {
      return t.indexOf(h) !== -1 && e17[h] !== 1 ? `${e17[h]} - ${m[h]} - 1` : `${m[h]}`;
    }
  }
};
function ooe(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r } = t, { dims: s } = a, i = r.shape.length, o = w.parseAxisParam(s, r.shape);
  if (i === 0) return ta({ inputs: { x: r }, backend: n });
  let l = G().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new ioe(r.shape, o) : new soe(r.shape, o);
  return n.runWebGLProgram(l, [r], r.dtype);
}
var loe = { kernelName: Eo, backendName: "webgl", kernelFunc: ooe };
var uoe = class {
  constructor(e17, t) {
    this.variableNames = ["Image"], this.outputShape = [], this.customUniforms = [{ name: "params", type: "vec4" }];
    let n = e17[1], a = e17[2];
    this.outputShape = e17;
    let r = "";
    typeof t == "number" ? r = `float outputValue = ${t.toFixed(2)};` : r = `
        vec3 fill = vec3(${t.join(",")});
        float outputValue = fill[coords[3]];`, this.userCode = `
        void main() {
          ivec4 coords = getOutputCoords();
          int x = coords[2];
          int y = coords[1];
          float coordXFloat = (float(x) - params[0]) * params[3] -
            (float(y) - params[1]) * params[2];
          float coordYFloat = (float(x) - params[0]) * params[2] +
            (float(y) - params[1]) * params[3];
          int coordX = int(round(coordXFloat + params[0]));
          int coordY = int(round(coordYFloat + params[1]));
          ${r}
          if(coordX >= 0 && coordX < ${a} && coordY >= 0 && coordY < ${n}) {
            outputValue = getImage(coords[0], coordY, coordX, coords[3]);
          }
          setOutput(outputValue);
        }
    `;
  }
};
var poe = { kernelName: Zu, backendName: "webgl", kernelFunc: ({ inputs: e17, attrs: t, backend: n }) => {
  let { image: a } = e17, { radians: r, fillValue: s, center: i } = t, o = n, l = new uoe(a.shape, s), [u, p] = T.getImageCenter(i, a.shape[1], a.shape[2]), d = [[u, p, Math.sin(r), Math.cos(r)]];
  return o.runWebGLProgram(l, [a], a.dtype, d);
} };
var coe = `
  // OpenGL ES does not support round function.
  // The algorithm is based on banker's rounding.
  float base = floor(x);
  if ((x - base) < 0.5) {
    return floor(x);
  } else if ((x - base) > 0.5) {
    return ceil(x);
  } else {
    if (mod(base, 2.0) == 0.0) {
      return base;
    } else {
      return base + 1.0;
    }
  }
`;
var doe = Ze({ opSnippet: coe });
var hoe = { kernelName: _o, backendName: "webgl", kernelFunc: doe };
var moe = "return inversesqrt(x);";
var foe = Ze({ opSnippet: moe, cpuKernelImpl: TQ });
var goe = { kernelName: Ao, backendName: "webgl", kernelFunc: foe };
var dk = class {
  constructor(e17, t, n, a, r, s, i = true, o = false) {
    this.variableNames = ["updates", "indices", "defaultValue"], this.outputShape = s;
    let l = ht(r.length), u = ht(s.length), p = "";
    n === 1 ? p = "i" : n === 2 && (p = "i, j");
    let d = `getIndices(${p})`, c = "";
    a === 1 ? c = "i" : a === 2 && (c = "i, coords[1]");
    let h = `getUpdates(${c})`, m = "";
    o && (m = "coords[0], coords[1]");
    let f = `getDefaultValue(${m})`, g = t > 1 ? "strides[j]" : "strides";
    this.userCode = `
        ${l} strides = ${l}(${r});

        void main() {
          ${u} coords = getOutputCoords();
          float sum = 0.0;
          bool found = false;
          for (int i = 0; i < ${e17}; i++) {
            int flattenedIndex = 0;
            for (int j = 0; j < ${t}; j++) {
              int index = round(${d});
              flattenedIndex += index * ${g};
            }
            if (flattenedIndex == coords[0]) {
              sum += ${h};
              found = true;
            }
          }
          setOutput(mix(${f}, sum, float(found)));
        }
      `;
  }
};
var boe = class {
  constructor(e17, t, n, a, r, s, i = true, o = false) {
    this.variableNames = ["updates", "indices", "defaultValue"], this.packedInputs = true, this.packedOutput = true, this.outputShape = s;
    let l = ht(r.length), u = ht(s.length), p = "";
    n === 1 ? p = "i" : n === 2 && (p = "i, j");
    let d = `getIndices(${p})`, c = "";
    a === 1 ? c = "i" : a === 2 && (c = "i, coords[1]");
    let h = `getUpdates(${c})`, m = "";
    o && (m = "coords[0], coords[1]");
    let f = `getDefaultValue(${m})`, g = t > 1 ? "strides[j]" : "strides", b = t > 1 ? "strides[j + 1]" : "strides";
    this.userCode = `
        ${l} strides = ${l}(${r});

        void main() {
          ${u} coords = getOutputCoords();
          vec4 sum = vec4(0.);
          vec4 found = vec4(0.);
          for (int i = 0; i < ${e17}; i+=2) {
            ivec2 flattenedIndex = ivec2(0);
            for (int j = 0; j < ${t}; j+=2) {
              ivec4 index = round(${d});
              flattenedIndex += index.xz * ${g};
              if (j + 1 < ${t}) {
                flattenedIndex += index.yw * ${b};
              }
            }
            if (flattenedIndex[0] == coords[0] || flattenedIndex[1] == coords[0] ||
                flattenedIndex[0] == coords[0] + 1 || flattenedIndex[1] == coords[0] + 1) {
              vec4 updVals = ${h};
              if (flattenedIndex[0] == coords[0]) {
                sum.xy += updVals.xy;
                found.xy = vec2(1.);
              } else if (flattenedIndex[0] == coords[0] + 1) {
                sum.zw += updVals.xy;
                found.zw = vec2(1.);
              }
              if (flattenedIndex[1] == coords[0]) {
                sum.xy += updVals.zw;
                found.xy = vec2(1.);
              } else if (flattenedIndex[1] == coords[0] + 1) {
                sum.zw += updVals.zw;
                found.zw = vec2(1.);
              }
            }
          }
          setOutput(mix(${f}, sum, found));
        }
      `;
  }
};
function yoe(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { indices: r, updates: s } = t, { shape: i } = a, { sliceRank: o, numUpdates: l, sliceSize: u, strides: p, outputSize: d } = T.calculateShapes(s, r, i), c = [d / u, u];
  if (d === 0) return n.makeTensorInfo(i, r.dtype);
  let h = ce({ inputs: { x: r }, backend: n, attrs: { shape: [l, o] } }), m = ce({ inputs: { x: s }, backend: n, attrs: { shape: [l, u] } }), f = n.makeTensorInfo([], "float32", new Float32Array([0])), g;
  G().getBool("WEBGL_PACK") ? g = new boe(l, o, h.shape.length, m.shape.length, p, c) : g = new dk(l, o, h.shape.length, m.shape.length, p, c);
  let b = n.runWebGLProgram(g, [m, h, f], m.dtype), y = ce({ inputs: { x: b }, backend: n, attrs: { shape: i } });
  return n.disposeIntermediateTensorInfo(h), n.disposeIntermediateTensorInfo(m), n.disposeIntermediateTensorInfo(b), n.disposeIntermediateTensorInfo(f), y;
}
var xoe = { kernelName: Pu, backendName: "webgl", kernelFunc: yoe };
var voe = class {
  constructor(e17, t, n, a) {
    this.variableNames = ["sortedSequence", "values"], this.customUniforms = [{ name: "numInputs", type: "int" }], this.outputShape = [e17, n];
    let r = "while (left < right) {", s = `for (int i = 0; i < ${Math.ceil(Math.log2(t + 1))}; ++i) { if (left >= right) break;`, i = G().getNumber("WEBGL_VERSION") === 2 ? r : s, o = a === "left" ? "<" : "<=";
    this.userCode = `
       int findBound(int batch, float value) {
         int left = 0;
         int right = numInputs;
         int mid;
         ${i}
           mid = (left + right) / 2;
           if (getSortedSequence(batch, mid) ${o} value) {
             left = mid + 1;
           } else {
             right = mid;
           }
         }
         return right;
       }

       void main() {
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int valueIndex = coords[1];

         float value = getValues(batch, valueIndex);

         setOutput(float(findBound(batch, value)));
       }
     `;
  }
};
function woe(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { sortedSequence: r, values: s } = t, { side: i } = a, o = new voe(r.shape[0], r.shape[1], s.shape[1], i), l = [[r.shape[1]]];
  return n.runWebGLProgram(o, [r, s], "int32", l);
}
var koe = { kernelName: zu, backendName: "webgl", kernelFunc: woe };
var Ioe = class {
  constructor(e17, t, n) {
    this.variableNames = ["c", "a", "b"], this.outputShape = t;
    let a, r;
    if (n > 4) throw Error(`Where for rank ${n} is not yet supported`);
    if (n === 1) r = "resRC", a = "resRC";
    else {
      let i = ["resRC.x", "resRC.y", "resRC.z", "resRC.w"], o = [], l = [];
      for (let u = 0; u < t.length; u++) l.push(`${i[u]}`), u < e17 && o.push(`${i[u]}`);
      a = o.join(), r = l.join();
    }
    let s = ht(n);
    this.userCode = `
      void main() {
        ${s} resRC = getOutputCoords();
        float cVal = getC(${a});
        if (cVal >= 1.0) {
          setOutput(getA(${r}));
        } else {
          setOutput(getB(${r}));
        }
      }
    `;
  }
};
function Soe(e17) {
  let { inputs: t, backend: n } = e17, { condition: a, t: r, e: s } = t, i = new Ioe(a.shape.length, r.shape, r.shape.length);
  return n.runWebGLProgram(i, [a, r, s], fa(r.dtype, s.dtype));
}
var Noe = { kernelName: Wu, backendName: "webgl", kernelFunc: Soe };
var Toe = `
  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.
  // see: https://arxiv.org/abs/1706.02515
  float scaleAlpha = ${T.SELU_SCALEALPHA};
  float scale = ${T.SELU_SCALE};
  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);
`;
var Coe = Ze({ opSnippet: Toe });
var Eoe = { kernelName: Fo, backendName: "webgl", kernelFunc: Coe };
var _oe = mp + `
  return 1.0 / (1.0 + exp(-1.0 * x));
`;
var Aoe = `
  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;
var Foe = Ze({ opSnippet: _oe, packedOpSnippet: Aoe, cpuKernelImpl: EQ });
var $oe = { kernelName: Mo, backendName: "webgl", kernelFunc: Foe };
var Doe = `
  if (isnan(x)) { return 0.0; }
  return sign(x);
`;
var Roe = Ze({ opSnippet: Doe });
var Moe = { kernelName: Ro, backendName: "webgl", kernelFunc: Roe };
var Ooe = mp + `
  return sin(x);
`;
var Poe = `
  vec4 result = sin(x);
  bvec4 isNaN = isnan(x);
  ${Qo}
  return result;
`;
var Loe = Ze({ opSnippet: Ooe, packedOpSnippet: Poe });
var zoe = { kernelName: $o, backendName: "webgl", kernelFunc: Loe };
var Woe = `
  float e2x = exp(x);
  return (e2x - 1.0 / e2x) / 2.0;
`;
var Boe = Ze({ opSnippet: Woe });
var Voe = { kernelName: Do, backendName: "webgl", kernelFunc: Boe };
var Uoe = `
  float epsilon = 1.1920928955078125e-7;
  float threshold = log(epsilon) + 2.0;

  bool too_large = x > -threshold;
  bool too_small = x < threshold;

  float result;
  float exp_x = exp(x);

  if (too_large){
    result = x;
  }
  else if (too_small){
    result = exp_x;
  }
  else{
    result = log(exp_x + 1.0);
  }
  return result;
`;
var Goe = Ze({ opSnippet: Uoe });
var Hoe = { kernelName: Oo, backendName: "webgl", kernelFunc: Goe };
var joe = (e17) => {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r } = t, { blockShape: s, paddings: i } = a;
  w.assert(r.shape.length <= 4, () => "spaceToBatchND for rank > 4 with a WebGL backend not implemented yet");
  let o = s.reduce((b, y) => b * y), l = [[0, 0]];
  l.push(...i);
  for (let b = 1 + s.length; b < r.shape.length; ++b) l.push([0, 0]);
  let u = [], p = sF({ inputs: { x: r }, backend: n, attrs: { paddings: l, constantValue: 0 } }), d = T.getReshaped(p.shape, s, o, false), c = T.getPermuted(d.length, s.length, false), h = T.getReshapedPermuted(p.shape, s, o, false), m = ce({ inputs: { x: p }, backend: n, attrs: { shape: d } }), f = Sn({ inputs: { x: m }, backend: n, attrs: { perm: c } }), g = ce({ inputs: { x: f }, backend: n, attrs: { shape: h } });
  return u.push(p), u.push(m), u.push(f), u.forEach((b) => n.disposeIntermediateTensorInfo(b)), g;
};
var qoe = { kernelName: Vu, backendName: "webgl", kernelFunc: joe };
function Koe(e17) {
  let { inputs: t, backend: n } = e17, { indices: a, values: r, denseShape: s, defaultValue: i } = t;
  if (s.shape.length !== 1) throw new Error(`Dense shape must be a vector, saw:
         ${s.shape}`);
  if (a.shape.length !== 2) throw new Error(`Indices must be a matrix, saw:
         ${a.shape}`);
  if (r.shape.length !== 1) throw new Error(`Values must be a vector, saw:
         ${r.shape}`);
  if (i.shape.length !== 0) throw new Error(`Default value must be a scalar, saw:
        ${i.shape}`);
  let o = n.readSync(a.dataId), l = n.readSync(r.dataId), u = n.readSync(s.dataId), p = n.readSync(i.dataId)[0], [d, c, h, m, f] = AQ(o, a.shape, a.dtype, l, r.dtype, u, p);
  return [n.makeTensorInfo(c, a.dtype, d), n.makeTensorInfo([c[0]], r.dtype, h), n.makeTensorInfo([m.length], "bool", new Uint8Array(m.map((g) => Number(g)))), n.makeTensorInfo([f.length], a.dtype, new Int32Array(f))];
}
var Xoe = { kernelName: Gc, backendName: "webgl", kernelFunc: Koe };
function Yoe(e17) {
  let { inputs: t, backend: n } = e17, { inputIndices: a, inputShape: r, newShape: s } = t;
  if (a.shape.length !== 2) throw new Error(`Input indices should be a matrix but received shape ${a.shape}`);
  if (r.shape.length !== 1) throw new Error(`Input shape should be a vector but received shape ${r.shape}`);
  if (s.shape.length !== 1) throw new Error(`Target shape should be a vector but received shape ${s.shape}`);
  let i = Array.from(n.readSync(r.dataId)), o = n.readSync(a.dataId), l = Array.from(n.readSync(s.dataId)), [u, p, d] = FQ(o, a.shape, a.dtype, i, l);
  return [n.makeTensorInfo(p, a.dtype, u), n.makeTensorInfo([d.length], s.dtype, new Int32Array(d))];
}
var Zoe = { kernelName: Gu, backendName: "webgl", kernelFunc: Yoe };
function Joe(e17) {
  let { inputs: t, backend: n } = e17, { data: a, indices: r, segmentIds: s } = t;
  if (a.shape.length < 1) throw new Error("Data should be at least 1 dimensional but received scalar");
  if (r.shape.length !== 1) throw new Error(`Indices should be a vector but received shape
              ${r.shape}`);
  if (s.shape.length !== 1) throw new Error(`Segment ids should be a vector but received shape
              ${s.shape}`);
  let i = n.readSync(a.dataId), o = n.readSync(r.dataId), l = n.readSync(s.dataId), [u, p] = EA(i, a.shape, a.dtype, o, l, true);
  return n.makeTensorInfo(p, a.dtype, u);
}
var Qoe = { kernelName: Hc, backendName: "webgl", kernelFunc: Joe };
function ele(e17) {
  let { inputs: t, backend: n } = e17, { data: a, indices: r, segmentIds: s } = t;
  if (a.shape.length < 1) throw new Error("Data should be at least 1 dimensional but received scalar");
  if (r.shape.length !== 1) throw new Error(`Indices should be a vector but received shape
             ${r.shape}`);
  if (s.shape.length !== 1) throw new Error(`Segment ids should be a vector but received shape
             ${s.shape}`);
  let i = n.readSync(a.dataId), o = n.readSync(r.dataId), l = n.readSync(s.dataId), [u, p] = EA(i, a.shape, a.dtype, o, l);
  return n.makeTensorInfo(p, a.dtype, u);
}
var tle = { kernelName: jc, backendName: "webgl", kernelFunc: ele };
function nle(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { sparseIndices: r, sparseValues: s, defaultValue: i } = t, { outputShape: o } = a, { sliceRank: l, numUpdates: u, sliceSize: p, strides: d, outputSize: c } = T.calculateShapes(s, r, o), h = false;
  if (s.dtype === "string") {
    let b = n.bufferSync(r), y = n.bufferSync(s), x = w.decodeString(n.readSync(i.dataId)[0]), v = CQ(b, y, o, c, p, u, l, d, x, h);
    return n.makeTensorInfo(o, v.dtype, v.values);
  }
  let m = new dk(u, l, r.shape.length, s.shape.length, d, [c, 1], h), f = n.runWebGLProgram(m, [s, r, i], s.dtype), g = ce({ inputs: { x: f }, backend: n, attrs: { shape: o } });
  return n.disposeIntermediateTensorInfo(f), g;
}
var ale = { kernelName: Hu, backendName: "webgl", kernelFunc: nle };
function rle(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r } = t, { numOrSizeSplits: s, axis: i } = a, o = w.parseAxisParam(i, r.shape)[0], l = T.prepareSplitSize(r, s, o), u = r.shape.length, p = new Array(u).fill(0), d = r.shape.slice();
  return l.map((c) => {
    let h = [...d];
    h[o] = c;
    let m = fp({ inputs: { x: r }, backend: n, attrs: { begin: p, size: h } });
    return p[o] += c, m;
  });
}
var sle = { kernelName: Uu, backendName: "webgl", kernelFunc: rle };
var IS = "return sqrt(x);";
var ile = Ze({ opSnippet: IS, packedOpSnippet: IS, cpuKernelImpl: $Q });
var ole = { kernelName: Po, backendName: "webgl", kernelFunc: ile };
var lle = "return x * x;";
var ule = Ze({ opSnippet: lle });
var ple = { kernelName: qc, backendName: "webgl", kernelFunc: ule };
var SS = "return (a - b) * (a - b);";
var cle = hn({ opSnippet: SS, packedOpSnippet: SS });
var dle = { kernelName: Wo, backendName: "webgl", kernelFunc: cle };
function hle(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r } = t;
  if (r.dtype !== "string") throw new Error("Input must be of datatype string");
  let s = n.readSync(r.dataId), i = T.fromUint8ToStringArray(s), o = DQ(i, "string", a);
  return n.makeTensorInfo(r.shape, "string", o);
}
var mle = { kernelName: Kc, backendName: "webgl", kernelFunc: hle };
function fle({ inputs: e17, attrs: t, backend: n }) {
  let { x: a } = e17, r = Da + `
    return x > 0.0 ? 1.0 : float(${t.alpha});
  `, s = new rr(a.shape, r);
  return n.runWebGLProgram(s, [a], a.dtype);
}
var gle = { kernelName: Is, backendName: "webgl", kernelFunc: fle };
var ble = class {
  constructor(e17, t, n) {
    this.variableNames = ["x"], this.outputShape = n;
    let a = n.length, r = ht(n.length), s = ht(n.length), i = "";
    if (a === 1) i = "coords * strides + begin";
    else {
      let o = 0;
      i = n.map((l, u) => (o++, n.length === 1 ? `coords * strides[${u}] + begin[${u}]` : `coords[${o - 1}] * strides[${u}] + begin[${u}]`)).join(",");
    }
    this.userCode = `
      ${r} begin = ${r}(${e17});
      ${r} strides = ${r}(${t});

      void main() {
        ${s} coords = getOutputCoords();
        setOutput(getX(${i}));
      }
    `;
  }
};
function yle(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r } = t, { begin: s, end: i, strides: o, beginMask: l, endMask: u, ellipsisMask: p, newAxisMask: d, shrinkAxisMask: c } = a, { finalShapeSparse: h, finalShape: m, isIdentity: f, sliceDim0: g, isSimpleSlice: b, begin: y, end: x, strides: v } = Kt.sliceInfo(r.shape, s, i, o, l, u, p, d, c), I;
  if (f) I = ce({ inputs: { x: r }, backend: n, attrs: { shape: m } });
  else if (g || b) {
    w.assert(r.shape.length >= 1, () => `Input must have rank at least 1, got: ${r.shape.length}`);
    let C = Kt.computeOutShape(y, x, v), _ = fp({ inputs: { x: r }, backend: n, attrs: { begin: y, size: C } });
    I = ce({ inputs: { x: _ }, backend: n, attrs: { shape: m } }), n.disposeIntermediateTensorInfo(_);
  } else if (n.shouldExecuteOnCPU([r])) {
    let C = n.readSync(r.dataId), _ = Oe(r.shape, r.dtype, C), F = RQ(h, _, v, y);
    I = n.makeTensorInfo(m, r.dtype, F.values);
  } else {
    let C = new ble(y, v, h);
    I = n.runWebGLProgram(C, [r], r.dtype);
  }
  let N = ce({ inputs: { x: I }, backend: n, attrs: { shape: m } });
  return n.disposeIntermediateTensorInfo(I), N;
}
var xle = { kernelName: ju, backendName: "webgl", kernelFunc: yle };
function vle(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { separator: r, nGramWidths: s, leftPad: i, rightPad: o, padWidth: l, preserveShortSequences: u } = a, { data: p, dataSplits: d } = t, c = n.readSync(p.dataId), h = n.readSync(d.dataId), [m, f] = MQ(c, h, r, s, i, o, l, u);
  return [n.makeTensorInfo([m.length], "string", m), n.makeTensorInfo(d.shape, "int32", f)];
}
var wle = { kernelName: Xc, backendName: "webgl", kernelFunc: vle };
function kle(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { skipEmpty: r } = a, { input: s, delimiter: i } = t;
  if (s.dtype !== "string") throw new Error("Input must be of datatype string");
  if (s.shape.length !== 1) throw new Error(`Input must be a vector, got shape: ${s.shape}`);
  if (i.shape.length !== 0) throw new Error(`Delimiter must be a scalar, got shape: ${i.shape}`);
  let o = n.readSync(s.dataId), l = n.readSync(i.dataId)[0], [u, p, d] = OQ(o, l, r), c = p.length;
  return [n.makeTensorInfo([c, 2], "int32", u), n.makeTensorInfo([c], "string", p), n.makeTensorInfo([2], "int32", new Int32Array(d))];
}
var Ile = { kernelName: Yc, backendName: "webgl", kernelFunc: kle };
function Sle(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { numBuckets: r } = a, { input: s } = t;
  if (s.dtype !== "string") throw new Error("Input must be of datatype string");
  if (r <= 0) throw new Error("Number of buckets must be at least 1");
  let i = n.readSync(s.dataId), o = PQ(i, r);
  return n.makeTensorInfo(s.shape, "int32", o);
}
var Nle = { kernelName: Zc, backendName: "webgl", kernelFunc: Sle };
var Tle = "return tan(x);";
var Cle = Ze({ opSnippet: Tle });
var Ele = { kernelName: Vo, backendName: "webgl", kernelFunc: Cle };
var _le = `
  float e2x = exp(-2.0 * abs(x));
  return sign(x) * (1.0 - e2x) / (1.0 + e2x);
`;
var Ale = Ze({ opSnippet: _le });
var Fle = { kernelName: Uo, backendName: "webgl", kernelFunc: Ale };
function $le(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { tensor: r, indices: s, updates: i } = t, {} = a, { sliceRank: o, numUpdates: l, sliceSize: u, strides: p, outputSize: d } = T.calculateShapes(i, s, r.shape), c = [d / u, u];
  if (d === 0) return n.makeTensorInfo(r.shape, s.dtype);
  let h = ce({ inputs: { x: s }, backend: n, attrs: { shape: [l, o] } }), m = ce({ inputs: { x: i }, backend: n, attrs: { shape: [l, u] } }), f = ce({ inputs: { x: r }, backend: n, attrs: { shape: c } }), g = new dk(l, o, h.shape.length, m.shape.length, p, c, false, true), b = n.runWebGLProgram(g, [m, h, f], f.dtype), y = ce({ inputs: { x: b }, backend: n, attrs: { shape: r.shape } });
  return n.disposeIntermediateTensorInfo(h), n.disposeIntermediateTensorInfo(m), n.disposeIntermediateTensorInfo(f), n.disposeIntermediateTensorInfo(b), y;
}
var Dle = { kernelName: Lu, backendName: "webgl", kernelFunc: $le };
var Rle = class {
  constructor(e17, t) {
    this.variableNames = ["A"];
    let n = new Array(e17.length);
    for (let s = 0; s < n.length; s++) n[s] = e17[s] * t[s];
    this.outputShape = n, this.rank = n.length;
    let a = ht(this.rank), r = Mle(e17);
    this.userCode = `
      void main() {
        ${a} resRC = getOutputCoords();
        setOutput(getA(${r}));
      }
    `;
  }
};
function Mle(e17) {
  let t = e17.length;
  if (t > 5) throw Error(`Tile for rank ${t} is not yet supported`);
  if (t === 1) return `imod(resRC, ${e17[0]})`;
  let n = ["resRC.x", "resRC.y", "resRC.z", "resRC.w", "resRC.u"], a = [];
  for (let r = 0; r < e17.length; r++) a.push(`imod(${n[r]}, ${e17[r]})`);
  return a.join();
}
function oF(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r } = t, { reps: s } = a;
  if (r.dtype === "string" || r.shape.length > 5) {
    let o = n.readSync(r.dataId), l = r.dtype === "string" ? o.map((d) => w.decodeString(d)) : o, u = Oe(r.shape, r.dtype, l), p = zQ(u, s);
    return n.makeTensorInfo(p.shape, p.dtype, p.values);
  }
  let i = new Rle(r.shape, s);
  return n.runWebGLProgram(i, [r], r.dtype);
}
var Ole = { kernelName: ks, backendName: "webgl", kernelFunc: oF };
var Ple = class {
  constructor(e17) {
    this.variableNames = ["x", "indices"], this.customUniforms = [{ name: "n", type: "int" }, { name: "firstPass", type: "int" }, { name: "negativeInf", type: "float" }, { name: "dir", type: "int" }, { name: "inc", type: "int" }], this.outputShape = e17, this.userCode = `
       void main() {
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int elemIdx = coords[1];

         // We compare elements pair-wise within a group of size 2 * inc.
         // The comparing rule for each group alternates between ascending
         // and descending. Within each group, we compare each pair at
         // positions i and i+inc. To decide whether an element at position i
         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than
         // inc, it is in the first half of the group, we denote it as x0,
         // otherwise we denote it as x1.
         // For example, as shown in the Bitonic top K paper referenced above,
         // Figure5(a) shows that element[1] is in the
         // second half of the group when group size is 2, but it is in the
         // first half of the group when group size is 4.

         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;
         int i = isFirstInPair ? elemIdx : elemIdx - inc;

         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));
         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));
         float x0 = i0 < n ? getX(batch, i0) : negativeInf;
         float x1 = i1 < n ? getX(batch, i1) : negativeInf;

         // Denotes which direction indices are in (ascending or descending).
         bool reverse = imod(elemIdx, 2 * dir) >= dir;
         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);
         if (reverse == isGreater) { // Elements in opposite order of direction
           int iTemp = i0;
           i0 = i1;
           i1 = iTemp;
         }
         if (isFirstInPair) {
            setOutput(float(i0));
         } else {
            setOutput(float(i1));
         }
       }
     `;
  }
};
var Lle = class {
  constructor(e17) {
    this.variableNames = ["x", "indices"], this.customUniforms = [{ name: "n", type: "int" }, { name: "firstPass", type: "int" }, { name: "k", type: "int" }], this.outputShape = e17, this.userCode = `
    void main() {
         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int elemIdx = coords[1];

         // The output size is half of the previous size.
         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),
         // we only need to output the indices at positions |, the indices at
         // positions _ can be thrown away, see Figure5(b) After Phase 2
         // (Merge phase) in the Bitonic Top K paper referenced above.
         // For example, the paper shows we only need to output the orange bars.
         // The output sequence should look like this | | | | | | | |.
         // Because the sequence is halved, to map the output index back
         // to the previous sequence to find the corresponding value,
         // we need to double the index. When we double the index,
         // we basically interpolate a position, so 2i looks like
         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position
         // of each 2k positions by - elemIdx % k. E.g. for output at
         // index 4,5,6,7, we want to get the corresponding element at
         // original index 8,9,10,11, for output at index 8,9,10,11,
         // we want to get the corresponding element at original index
         // 16,17,18,19, so on and so forth.

         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));
         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));
         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));

         float x0 = getX(batch, i0);
         float x1 = i1 < n ? getX(batch, i1) : x0;

         setOutput(x0 >= x1 ? float(i0) : float(i1));
       }
     `;
  }
};
function qs(e17, t) {
  t !== null && e17.disposeIntermediateTensorInfo(t);
}
function NS(e17) {
  let t = 1;
  for (; t < e17; ) t *= 2;
  return t;
}
function zle(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r } = t, { k: s, sorted: i } = a, o = G().getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"), l = G().getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"), u = r.shape, p = u[u.length - 1];
  if (n.shouldExecuteOnCPU([r]) || p < o || s > l) {
    let F = n.readSync(r.dataId), [D, $] = WQ(F, u, r.dtype, s, i);
    return [n.makeTensorInfo(D.shape, D.dtype, D.values), n.makeTensorInfo($.shape, $.dtype, $.values)];
  }
  if (s === 0) return u[u.length - 1] = 0, [n.makeTensorInfo(u, r.dtype, []), n.makeTensorInfo(u, "int32", [])];
  if (p === 1) return [r, $d({ attrs: { shape: u, dtype: "int32", value: 0 }, backend: n })];
  let d = n.texData.get(r.dataId), c = d !== null && d.isPacked, h = c ? n.unpackTensor(r) : r, m = w.sizeFromShape(u) / p, f = ce({ inputs: { x: h }, attrs: { shape: [m, p] }, backend: n });
  c && qs(n, h);
  let g = NS(s), b = NS(p), y = null, x = () => y === null ? [f, f] : [f, y], v = (F, D, $) => {
    let S = x(), M = new Ple($), B = [[p], [y === null ? 1 : 0], [Number.NEGATIVE_INFINITY], [F], [D]], U = y;
    y = n.runWebGLProgram(M, S, "int32", B), qs(n, U);
  };
  for (let F = 1; F < g; F *= 2) {
    let D = F * 2;
    for (let $ = F; $ >= 1; $ /= 2) v(D, $, [m, b]);
  }
  for (let F = b; F > g; F /= 2) {
    let D = x(), $ = new Lle([m, F / 2]), S = [[p], [y === null ? 1 : 0], [g]], M = y;
    y = n.runWebGLProgram($, D, "int32", S), qs(n, M);
    let B = g / 2, U = B * 2;
    for (let H = B; H >= 1; H /= 2) v(U, H, y.shape);
  }
  let I = y;
  y = fp({ inputs: { x: y }, backend: n, attrs: { begin: 0, size: [m, s] } }), qs(n, I);
  let N = QA({ inputs: { x: f, indices: y }, backend: n, attrs: { axis: 1, batchDims: 1 } });
  qs(n, f);
  let C = u.slice(0, -1);
  C.push(s), I = y, y = ce({ inputs: { x: y }, attrs: { shape: C }, backend: n }), qs(n, I);
  let _ = N;
  return N = ce({ inputs: { x: N }, attrs: { shape: C }, backend: n }), qs(n, _), [N, y];
}
var Wle = { kernelName: qu, backendName: "webgl", kernelFunc: zle };
var Ble = class {
  constructor(e17, t, n, a, r, s) {
    this.variableNames = ["Image", "Transforms"], this.outputShape = s;
    let i = n === "nearest" ? 1 : 2, o;
    switch (a) {
      case "constant":
        o = 1;
        break;
      case "reflect":
        o = 2;
        break;
      case "wrap":
        o = 3;
        break;
      case "nearest":
        o = 4;
        break;
      default:
        o = 1;
        break;
    }
    this.userCode = `
            float mapCoord(float outCoord, float len) {
              float inCoord = outCoord;
              if(${o} == 2) {
                if (inCoord < 0.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz2 = 2.0 * len;
                    if (inCoord < sz2) {
                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +
                      inCoord;
                    }
                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;
                  }
                } else if (inCoord > len - 1.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz2 = 2.0 * len;
                    inCoord -= sz2 * float(int(float(inCoord / sz2)));
                    if (inCoord >= len) {
                      inCoord = sz2 - inCoord - 1.0;
                    }
                  }
                }
                return clamp(inCoord, 0.0, len - 1.0);
              } else if (${o} == 3) {
                if (inCoord < 0.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz = len - 1.0;
                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);
                  }
                } else if (inCoord > len - 1.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz = len - 1.0;
                    inCoord -= len * float(int(float(inCoord / sz)));
                  }
                }
                return clamp(inCoord, 0.0, len - 1.0);
              } else if (${o} == 4) {
                return clamp(outCoord, 0.0, len - 1.0);
              } else {
                return outCoord;
              }
            }

            float readWithFillValue(int batch, int coordY, int coordX,
              int channel) {
              float outputValue;
              if (0 <= coordY && coordY < ${e17} && 0 <= coordX && coordX < ${t}) {
                  outputValue = getImage(batch, coordY, coordX, channel);
              } else {
                outputValue = float(${r});
              }
              return outputValue;
            }

            void main() {
              ivec4 coords = getOutputCoords();
              float outputValue;
              int batch = coords[0];
              int x = coords[2];
              int y = coords[1];
              int channel = coords[3];
              float xf = float(x);
              float yf = float(y);
              float a1 = getTransforms(batch, 0);
              float a2 = getTransforms(batch, 1);
              float a3 = getTransforms(batch, 2);
              float b1 = getTransforms(batch, 3);
              float b2 = getTransforms(batch, 4);
              float b3 = getTransforms(batch, 5);
              float c1 = getTransforms(batch, 6);
              float c2 = getTransforms(batch, 7);
              float projection = c1 * xf + c2 * yf + 1.0;
              if (projection == 0.0) {
                outputValue = float(${r});
              } else {
                float inX = (a1 * xf + a2 * yf + a3) / projection;
                float inY = (b1 * xf + b2 * yf + b3) / projection;
                float mapX = mapCoord(inX, float(${t}));
                float mapY = mapCoord(inY, float(${e17}));

                if (${i} == 1) {
                  int coordY = int(round(mapY));
                  int coordX = int(round(mapX));
                  outputValue = readWithFillValue(batch, coordY, coordX,
                    channel);
                } else {
                  float yFloor = floor(mapY);
                  float xFloor = floor(mapX);
                  float yCeil = yFloor + 1.0;
                  float xCeil = xFloor + 1.0;
                  float valueYFloor = (xCeil - mapX) *
                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);
                  float valueYCeil = (xCeil - mapX) *
                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);
                  outputValue = (yCeil - mapY) * valueYFloor +
                  (mapY - yFloor) * valueYCeil;
                }
              }
              setOutput(outputValue);
            }
        `;
  }
};
function Vle(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { image: r, transforms: s } = t, { interpolation: i, fillMode: o, fillValue: l, outputShape: u } = a, [p, d, c, h] = r.shape, [m, f] = u != null ? u : [d, c], g = [p, m, f, h], b = new Ble(d, c, i, o, l, g);
  return n.runWebGLProgram(b, [r, s], "float32");
}
var Ule = { kernelName: Ku, backendName: "webgl", kernelFunc: Vle };
function Gle(e17) {
  let { inputs: t, attrs: n, backend: a } = e17, { axis: r } = n, { x: s } = t;
  lp(s, "unique"), console.warn("WARNING: ", "UI might be locked temporarily as data is being downloaded");
  let i = a.readSync(s.dataId), { outputValues: o, outputShape: l, indices: u } = BQ(i, r, s.shape, s.dtype);
  return [a.makeTensorInfo(l, s.dtype, o), a.makeTensorInfo([u.length], "int32", u)];
}
var Hle = { kernelName: Jc, backendName: "webgl", kernelFunc: Gle };
function jle(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { value: r } = t, { axis: s } = a;
  s < 0 && (s += r.shape.length);
  let i = r, o = i.shape.length, l = r.shape[s], u = new Array(o - 1), p = 0;
  for (let f = 0; f < o; f++) f !== s && (u[p++] = i.shape[f]);
  let d = [], c = new Array(o).fill(0), h = i.shape.slice();
  h[s] = 1;
  let m = new Array(l);
  for (let f = 0; f < m.length; f++) {
    c[s] = f;
    let g = fp({ inputs: { x: i }, backend: n, attrs: { begin: c, size: h } }), b = ce({ inputs: { x: g }, backend: n, attrs: { shape: u } });
    m[f] = b, d.push(g);
  }
  return d.forEach((f) => n.disposeIntermediateTensorInfo(f)), m;
}
var qle = { kernelName: Xu, backendName: "webgl", kernelFunc: jle };
var Kle = class {
  constructor(e17, t) {
    this.variableNames = ["x", "segmentIds"];
    let n = e17.windowSize, a = e17.batchSize, r = e17.inSize, s = e17.numSegments, i = s * Math.ceil(r / n);
    this.outputShape = [a, i];
    let o = "0.0", l = "sumValue", u = Math.floor(n / 4) * 4, p = n % 4, d = `
        sumValue += dot(values, segFilter);
    `, c = "";
    r % n > 0 && (c = `
        if (inIdx < 0 || inIdx >= ${r}) {
          return initializationValue;
        }
      `);
    let h = "";
    r % n > 0 && (h = `
        if (inIdx < 0 || inIdx >= ${r}) {
          return -1.0;
        }
      `), this.userCode = `
      const float initializationValue = ${o};

      float getValue(int batch, int inIdx) {
        ${c}
        return getX(batch, inIdx);
      }

      float getSegmentIdAtIndex(int inIdx) {
        ${h}
        return getSegmentIds(inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = int(floor(float(outIdx) / float(
          ${s})) * float(${n}));
        int currentSeg = int(mod(float(outIdx), float(${s})));

        float sumValue = 0.0;

        for (int i = 0; i < ${u}; i += 4) {
          int inIdx = inOffset + i;
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0
          );

          ${d}
        }

        int inIdx = inOffset + ${u};
        if (${p === 1}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            0,
            0,
            0
          );

          ${d}
        } else if (${p === 2}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
              0,
              0
          );

          ${d}
        } else if (${p === 3}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            0
          );

          ${d}
        }
        setOutput(${l});
      }
    `;
  }
};
function Xle(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r, segmentIds: s } = t, { numSegments: i } = a, o = r.shape.length, l = [], u = 0, p = T.getAxesPermutation([u], o), d = r;
  p != null && (d = Sn({ inputs: { x: r }, backend: n, attrs: { perm: p } }), l.push(d), u = T.getInnerMostAxes(1, o)[0]);
  let c = T.segment_util.computeOutShape(d.shape, u, i), h = w.sizeFromShape([d.shape[u]]), m = ce({ inputs: { x: d }, backend: n, attrs: { shape: [-1, h] } });
  l.push(m);
  let f = Mm(r.dtype), g = (v, I, N, C, _) => {
    let F = v.shape[0], D = v.shape[1], $ = T.segment_util.segOpComputeOptimalWindowSize(D, _), S = { windowSize: $, inSize: D, batchSize: F, numSegments: _ }, M = new Kle(S, I), B = n.compileAndRun(M, [v, N], C);
    if (l.push(B), B.shape[1] === _) return B;
    let U = iF({ backend: n, attrs: { start: 0, stop: _, step: 1, dtype: "float32" } }), H = oF({ inputs: { x: U }, backend: n, attrs: { reps: [D / $] } });
    return l.push(U), l.push(H), g(B, I, H, C, _);
  }, b = g(m, "unsortedSegmentSum", s, f, i), y = ce({ inputs: { x: b }, backend: n, attrs: { shape: c } }), x = y;
  if (p != null) {
    l.push(y);
    let v = T.getUndoAxesPermutation(p);
    x = Sn({ inputs: { x }, backend: n, attrs: { perm: v } });
  }
  return l.forEach((v) => n.disposeIntermediateTensorInfo(v)), x;
}
var Yle = { kernelName: Qc, backendName: "webgl", kernelFunc: Xle };
var Zle = [Ree, Oee, zee, Vee, Gee, qee, Xee, Zee, tte, ate, ite, ute, dte, gte, xte, wte, Ite, Cte, _te, Fte, Mte, Vte, Gte, Kte, Yte, nne, rne, lne, bee, cne, gne, vne, Tne, _ne, Fne, Dne, Mne, zne, Vne, Hne, qne, Xne, Zne, eae, nae, iae, lae, cae, mae, gae, vae, Sae, Eae, Fae, Rae, Mae, Pae, zae, Bae, Uae, Hae, Xae, Jae, tre, are, ire, ure, hre, bre, gee, xre, mne, kre, Nre, Ere, xee, $re, Ore, Lre, Vre, Hre, Xre, Jre, nse, ise, use, cse, fse, bse, xse, Ise, Nse, Cse, _se, Fse, Mse, zse, Use, Zse, kee, tie, rie, oie, pie, Jte, hie, fie, bie, vie, Sie, wee, Tie, Eie, Aie, $ie, Die, Qte, qse, Oie, Wie, Gie, See, Kie, Zie, toe, roe, loe, poe, hoe, goe, xoe, koe, Noe, Eoe, $oe, Moe, zoe, Voe, Wte, Xse, Hoe, qoe, Xoe, Zoe, Qoe, tle, ale, sle, ole, ple, dle, mle, gle, xle, wle, Ile, Nle, Kse, Fee, Ele, Fle, Dle, Ole, Wle, Ule, $ee, Hle, qle, Yle, mie];
for (let e17 of Zle) ed(e17);
var Qe;
(function(e17) {
  e17[e17.float32 = 0] = "float32", e17[e17.int32 = 1] = "int32", e17[e17.bool = 2] = "bool", e17[e17.string = 3] = "string", e17[e17.complex64 = 4] = "complex64";
})(Qe || (Qe = {}));
var Ac;
(function(e17) {
  e17[e17.linear = 0] = "linear", e17[e17.relu = 1] = "relu", e17[e17.relu6 = 2] = "relu6", e17[e17.prelu = 3] = "prelu", e17[e17.leakyrelu = 4] = "leakyrelu", e17[e17.sigmoid = 5] = "sigmoid", e17[e17.elu = 6] = "elu";
})(Ac || (Ac = {}));
var lF;
function Jle(e17) {
  lF = e17.wasm.cwrap(ii, null, ["number", "array", "number", "number", "array", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function Qle(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { a: r, b: s, bias: i, preluActivationWeights: o } = t;
  if (r.dtype !== "float32" || s.dtype !== "float32") throw new Error("_FusedMatMul for non non-float32 tensors not yet supported.");
  let { transposeA: l, transposeB: u, activation: p, leakyreluAlpha: d } = a, c = n.dataIdMap.get(r.dataId).id, h = n.dataIdMap.get(s.dataId).id, m = 0;
  if (i != null) {
    let _ = n.dataIdMap.get(i.dataId);
    if (_.shape.length !== 1) throw new Error(`_FusedMatMul only supports rank-1 bias but got rank ${_.shape.length}.`);
    m = _.id;
  }
  let f = o == null ? 0 : n.dataIdMap.get(o.dataId).id, g = Ac[p];
  if (g == null) throw new Error(`${p} activation not yet supported for FusedConv2D in the wasm backend.`);
  let b = l ? r.shape[2] : r.shape[1], y = u ? s.shape[1] : s.shape[2], x = Ju.assertAndGetBroadcastShape(r.shape.slice(0, -2), s.shape.slice(0, -2)), v = n.makeOutput([...x, b, y], r.dtype), I = n.dataIdMap.get(v.dataId).id, N = new Uint8Array(new Int32Array(r.shape).buffer), C = new Uint8Array(new Int32Array(s.shape).buffer);
  return lF(c, N, r.shape.length, h, C, s.shape.length, l, u, g, m, f, d || 0, I), v;
}
var eue = { kernelName: ii, backendName: "wasm", setupFunc: Jle, kernelFunc: Qle };
function Xe(e17, t) {
  let n;
  function a(s) {
    n = s.wasm.cwrap(e17, null, ["number", "number", "number"]);
  }
  function r(s) {
    let { backend: i, inputs: { x: o } } = s, l = i.dataIdMap.get(o.dataId).id, u = i.makeOutput(o.shape, t || o.dtype), p = i.dataIdMap.get(u.dataId).id;
    return w.sizeFromShape(u.shape) === 0 || n(l, Qe[o.dtype], p), u;
  }
  return { kernelName: e17, backendName: "wasm", setupFunc: a, kernelFunc: r };
}
var tue = Xe(Yl);
var nue = Xe(Ni);
var aue = Xe(Ti);
function Ut(e17, t, n) {
  let a;
  function r(i) {
    a = i.wasm.cwrap(e17, null, ["number", "array", "number", "number", "array", "number", "number", "number"]);
  }
  function s(i) {
    let { backend: o, inputs: l } = i, { a: u, b: p } = l, d = o.dataIdMap.get(u.dataId).id, c = o.dataIdMap.get(p.dataId).id, h = n != null ? n : u.dtype, m = T.assertAndGetBroadcastShape(u.shape, p.shape), f = o.makeOutput(m, h);
    if (w.sizeFromShape(m) === 0) return f;
    let g = new Uint8Array(new Int32Array(u.shape).buffer), b = new Uint8Array(new Int32Array(p.shape).buffer), y = o.dataIdMap.get(f.dataId).id;
    return a(d, g, u.shape.length, c, b, p.shape.length, Qe[u.dtype], y), f;
  }
  return { kernelName: e17, backendName: "wasm", setupFunc: r, kernelFunc: s };
}
var rue = true;
var sue = Ut(vs, rue);
var uF;
function iue(e17) {
  uF = e17.wasm.cwrap(Ci, null, ["array", "number", "number", "number"]);
}
function oue(e17) {
  let { inputs: t, backend: n } = e17, a = n.makeOutput(t[0].shape, t[0].dtype);
  if (w.sizeFromShape(a.shape) === 0) return a;
  let r = t.map((o) => n.dataIdMap.get(o.dataId).id), s = new Uint8Array(new Int32Array(r).buffer), i = n.dataIdMap.get(a.dataId).id;
  return uF(s, r.length, Qe[a.dtype], i), a;
}
var lue = { kernelName: Ci, backendName: "wasm", setupFunc: iue, kernelFunc: oue };
function Gf(e17) {
  let { inputs: { x: t }, backend: n } = e17;
  if (t.dtype === "string") return bn(n.readSync(t.dataId), t.shape, t.dtype);
  let a = n.makeOutput(t.shape, t.dtype), r = n.typedArrayFromHeap(t);
  return n.typedArrayFromHeap(a).set(r), a;
}
var uue = { kernelName: eo, backendName: "wasm", kernelFunc: Gf };
var pF;
function pue(e17) {
  pF = e17.wasm.cwrap(Cr, null, ["number", "array", "number", "number", "number", "array", "number"]);
}
function ys(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, [r, s] = due(t.x.shape, a.perm), i = true;
  for (let m = 0; m < s.length; m++) s[m] !== m && (i = false);
  let o = cue(t.x.shape, a.perm), l = { dataId: t.x.dataId, shape: r, dtype: t.x.dtype };
  if (i) {
    let m = Gf({ inputs: t, backend: n });
    return m.shape = o, m;
  }
  let u = n.makeOutput(o, l.dtype), p = n.dataIdMap.get(l.dataId).id, d = n.dataIdMap.get(u.dataId).id, c = new Uint8Array(new Int32Array(s).buffer), h = new Uint8Array(new Int32Array(l.shape).buffer);
  return pF(p, h, l.shape.length, Qe[l.dtype], d, c, s.length), u;
}
function cue(e17, t) {
  let n = new Array(e17.length);
  for (let a = 0; a < n.length; a++) n[a] = e17[t[a]];
  return n;
}
function due(e17, t) {
  let n = [], a = [];
  for (let r = 0; r < e17.length; ++r) e17[r] !== 1 && n.push(e17[r]), e17[t[r]] !== 1 && a.push(t[r]);
  for (let r = 0; r < a.length; ++r) {
    let s = -1;
    for (let i = 0; i < a.length; ++i) a[i] >= r && (s === -1 || a[s] > a[i]) && (s = i);
    a[s] = r;
  }
  return [n, a];
}
var hue = { kernelName: Cr, backendName: "wasm", kernelFunc: ys, setupFunc: pue };
function Ds(e17, t, n) {
  let a = e17.shape, r = e17.shape.length, s = w.parseAxisParam(t, a), i = s, o = T.getAxesPermutation(i, r), l = null, u = false;
  if (o != null) {
    let p = new Array(r);
    for (let c = 0; c < p.length; c++) p[c] = a[o[c]];
    i = T.getInnerMostAxes(i.length, r), l = ys({ inputs: { x: e17 }, attrs: { perm: o }, backend: n });
    let d = n.dataIdMap.get(e17.dataId).id;
    n.dataIdMap.get(l.dataId).id !== d && (u = true);
  }
  return { transposed: l, originalAxes: s, axes: i, inputWasTransposed: u };
}
var cF;
function mue(e17) {
  cF = e17.wasm.cwrap(Zl, null, ["number, number, number"]);
}
function fue(e17) {
  let { backend: t, inputs: n, attrs: a } = e17, { axis: r, keepDims: s } = a, { x: i } = n, o = t.dataIdMap.get(i.dataId).id, l = i, { transposed: u, axes: p, originalAxes: d, inputWasTransposed: c } = Ds(i, r, t);
  if (c) {
    let y = t.dataIdMap.get(u.dataId).id;
    l = u, o = y;
  }
  let h = l.shape.length;
  T.assertAxesAreInnerMostDims("all", p, h);
  let [m, f] = T.computeOutAndReduceShapes(l.shape, p), g = w.sizeFromShape(f), b = t.makeOutput(m, i.dtype);
  if (w.sizeFromShape(l.shape) !== 0) {
    let y = t.dataIdMap.get(b.dataId).id;
    cF(o, g, y);
  }
  if (c && t.disposeData(u.dataId), s) {
    let y = T.expandShapeToKeepDim(b.shape, d);
    b.shape = y;
  }
  return b;
}
var gue = { kernelName: Zl, backendName: "wasm", setupFunc: mue, kernelFunc: fue };
var dF;
function bue(e17) {
  dF = e17.wasm.cwrap(Jl, null, ["number, number, number"]);
}
function yue(e17) {
  let { backend: t, inputs: n, attrs: a } = e17, { axis: r, keepDims: s } = a, { x: i } = n, o = t.dataIdMap.get(i.dataId).id, l = i, { transposed: u, axes: p, originalAxes: d, inputWasTransposed: c } = Ds(i, r, t);
  if (c) {
    let y = t.dataIdMap.get(u.dataId).id;
    l = u, o = y;
  }
  let h = l.shape.length;
  T.assertAxesAreInnerMostDims("any", p, h);
  let [m, f] = T.computeOutAndReduceShapes(l.shape, p), g = w.sizeFromShape(f), b = t.makeOutput(m, i.dtype);
  if (w.sizeFromShape(l.shape) !== 0) {
    let y = t.dataIdMap.get(b.dataId).id;
    dF(o, g, y);
  }
  if (c && t.disposeData(u.dataId), s) {
    let y = T.expandShapeToKeepDim(b.shape, d);
    b.shape = y;
  }
  return b;
}
var xue = { kernelName: Jl, backendName: "wasm", setupFunc: bue, kernelFunc: yue };
function hF(e17) {
  let t;
  function n(r) {
    t = r.wasm.cwrap(e17, null, ["number", "number", "number", "number", "number"]);
  }
  function a(r) {
    let { backend: s, inputs: i, attrs: o } = r, { axis: l } = o, { x: u } = i, p = s.dataIdMap.get(u.dataId).id, d = p, c = u, { transposed: h, axes: m, inputWasTransposed: f } = Ds(u, l, s);
    if (f) {
      let I = s.dataIdMap.get(h.dataId).id;
      I !== p && (c = h, d = I);
    }
    let g = c.shape.slice(0, -1), b = s.makeOutput(g, "int32"), y = s.dataIdMap.get(b.dataId).id, x = w.sizeFromShape(b.shape), v = c.shape[m[0]];
    return t(d, Qe[c.dtype], x, v, y), f && s.disposeData(h.dataId), b;
  }
  return { kernelName: e17, backendName: "wasm", setupFunc: n, kernelFunc: a };
}
var vue = hF(Ql);
var wue = hF(eu);
var kue = Xe(Ei);
var Iue = Xe(_i);
var Sue = Xe(Ai);
var Nue = Ut($i, false);
var Tue = Xe(Fi);
var mF;
function Cue(e17) {
  mF = e17.wasm.cwrap(Di, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function Eue(e17) {
  let { inputs: t, attrs: n, backend: a } = e17, r = t.x, s = a.dataIdMap.get(r.dataId).id, { filterSize: i, strides: o, pad: l, dimRoundingMode: u } = n, p = T.computePool2DInfo(r.shape, i, o, 1, l, u), d = p.filterHeight, c = p.filterWidth, h = p.padInfo.top, m = p.padInfo.right, f = p.padInfo.bottom, g = p.padInfo.left, b = p.strideHeight, y = p.strideWidth, x = p.inChannels;
  if (p.dataFormat !== "channelsLast") throw new Error(`wasm backend does not support dataFormat:'${p.dataFormat}'. Please use 'channelsLast'.`);
  if (p.dilationWidth !== 1 || p.dilationHeight !== 1) throw new Error(`was backend only supports average pooling with dilation = [1, 1], got [${p.dilationHeight}, ${p.dilationWidth}].`);
  let v = a.makeOutput(p.outShape, "float32"), I = a.dataIdMap.get(v.dataId).id;
  return mF(s, r.shape[0], r.shape[1], r.shape[2], d, c, h, m, f, g, b, y, x, I), v;
}
var _ue = { kernelName: Di, backendName: "wasm", setupFunc: Cue, kernelFunc: Eue };
var fF;
function Aue(e17) {
  fF = e17.wasm.cwrap("AvgPool3D", null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function Fue(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r } = t, { filterSize: s, strides: i, pad: o, dimRoundingMode: l, dataFormat: u } = a, p = T.computePool3DInfo(r.shape, s, i, 1, o, l, u), d = n.makeOutput(p.outShape, r.dtype);
  return fF(n.dataIdMap.get(r.dataId).id, n.dataIdMap.get(d.dataId).id, p.batchSize, p.inChannels, p.inDepth, p.inHeight, p.inWidth, p.outDepth, p.outHeight, p.outWidth, p.strideDepth, p.strideHeight, p.strideWidth, p.dilationDepth, p.dilationHeight, p.dilationWidth, p.effectiveFilterDepth, p.effectiveFilterHeight, p.effectiveFilterWidth, p.padInfo.front, p.padInfo.top, p.padInfo.left), d;
}
var $ue = { kernelName: tu, backendName: "wasm", setupFunc: Aue, kernelFunc: Fue };
var gF;
function Due(e17) {
  gF = e17.wasm.cwrap("AvgPool3DGrad", null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function Rue(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { dy: r, input: s } = t, { filterSize: i, strides: o, pad: l, dimRoundingMode: u } = a, p = T.computePool3DInfo(s.shape, i, o, 1, l, u), d = n.makeOutput(s.shape, s.dtype);
  return gF(n.dataIdMap.get(r.dataId).id, n.dataIdMap.get(d.dataId).id, p.batchSize, p.inChannels, p.inDepth, p.inHeight, p.inWidth, p.outDepth, p.outHeight, p.outWidth, p.strideDepth, p.strideHeight, p.strideWidth, p.dilationDepth, p.dilationHeight, p.dilationWidth, p.effectiveFilterDepth, p.effectiveFilterHeight, p.effectiveFilterWidth, p.padInfo.front, p.padInfo.top, p.padInfo.left, p.filterDepth, p.filterHeight, p.filterWidth), d;
}
var Mue = { kernelName: Rc, backendName: "wasm", setupFunc: Due, kernelFunc: Rue };
var bF;
function Oue(e17) {
  bF = e17.wasm.cwrap("AvgPoolGrad", null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function Pue(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { dy: r, input: s } = t, { filterSize: i, strides: o, pad: l } = a, u = T.computePool2DInfo(s.shape, i, o, 1, l), p = n.makeOutput(s.shape, s.dtype);
  return bF(n.dataIdMap.get(r.dataId).id, n.dataIdMap.get(p.dataId).id, u.batchSize, u.inChannels, u.inHeight, u.inWidth, u.outHeight, u.outWidth, u.strideHeight, u.strideWidth, u.dilationHeight, u.dilationWidth, u.effectiveFilterHeight, u.effectiveFilterWidth, u.padInfo.top, u.padInfo.left, u.filterHeight, u.filterWidth), p;
}
var Lue = { kernelName: Dc, backendName: "wasm", setupFunc: Oue, kernelFunc: Pue };
function zn(e17) {
  let { inputs: t, attrs: n } = e17, { x: a } = t, { shape: r } = n, s = w.sizeFromShape(a.shape), i = w.inferFromImplicitShape(r, s);
  return w.assert(s === w.sizeFromShape(i), () => `new shape: ${i}, old shape: ${a.shape}. New shape and old shape must have the same number of elements.`), e17.backend.incRef(a.dataId), { dataId: a.dataId, shape: i, dtype: a.dtype };
}
var zue = { kernelName: Ru, backendName: "wasm", kernelFunc: zn };
var yF;
function Wue(e17) {
  yF = e17.wasm.cwrap(Ri, null, ["number", "array", "number", "number", "array", "number", "number", "number", "number"]);
}
function Bue(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { a: r, b: s } = t, { transposeA: i, transposeB: o } = a;
  if (r.dtype !== "float32" || s.dtype !== "float32") throw new Error("BatchMatMul for non non-float32 tensors not yet supported.");
  let l = r.shape.length, u = s.shape.length, p = i ? r.shape[l - 2] : r.shape[l - 1], d = o ? s.shape[u - 1] : s.shape[u - 2], c = i ? r.shape[l - 1] : r.shape[l - 2], h = o ? s.shape[u - 2] : s.shape[u - 1], m = r.shape.slice(0, -2), f = s.shape.slice(0, -2), g = w.sizeFromShape(m), b = w.sizeFromShape(f), y = Ju.assertAndGetBroadcastShape(r.shape.slice(0, -2), s.shape.slice(0, -2)).concat([c, h]);
  w.assert(p === d, () => `Error in matMul: inner shapes (${p}) and (${d}) of Tensors with shapes ${r.shape} and ${s.shape} and transposeA=${i} and transposeB=${o} must match.`);
  let x = i ? [g, p, c] : [g, c, p], v = o ? [b, h, d] : [b, d, h], I = zn({ inputs: { x: r }, backend: n, attrs: { shape: x } }), N = zn({ inputs: { x: s }, backend: n, attrs: { shape: v } }), C = n.dataIdMap.get(I.dataId).id, _ = n.dataIdMap.get(N.dataId).id, F = i ? I.shape[2] : I.shape[1], D = o ? N.shape[1] : N.shape[2], $ = Math.max(g, b), S = n.makeOutput([$, F, D], I.dtype), M = n.dataIdMap.get(S.dataId).id, B = new Uint8Array(new Int32Array(I.shape).buffer), U = new Uint8Array(new Int32Array(N.shape).buffer);
  return yF(C, B, I.shape.length, _, U, N.shape.length, i, o, M), n.disposeData(I.dataId), n.disposeData(N.dataId), S.shape = y, S;
}
var Vue = { kernelName: Ri, backendName: "wasm", setupFunc: Wue, kernelFunc: Bue };
function Ii(e17) {
  let { inputs: { x: t }, attrs: { begin: n, size: a }, backend: r } = e17, [s, i] = Kt.parseSliceParams(t, n, a), o = Kt.isSliceContinous(t.shape, s, i), l = r.readSync(t.dataId), u = r.makeOutput(i, t.dtype), p = w.computeStrides(t.shape), d = r.dataIdMap.get(u.dataId);
  if (o) {
    let m = Kt.computeFlatOffset(s, p);
    return t.dtype === "string" ? d.stringBytes = l.slice(m, m + w.sizeFromShape(i)) : r.typedArrayFromHeap(u).set(l.subarray(m, m + w.sizeFromShape(i))), u;
  }
  if (t.dtype === "string") {
    let m = um(l, s, i, t.shape, t.dtype);
    return d.stringBytes = m, u;
  }
  let c = r.typedArrayFromHeap(u), h = t.shape.length;
  if (h === 2) Uue(l, p[0], c, s, i);
  else if (h === 3) Gue(l, p[0], p[1], c, s, i);
  else if (h === 4) Hue(l, p[0], p[1], p[2], c, s, i);
  else {
    let m = um(l, s, i, t.shape, t.dtype);
    c.set(m);
  }
  return u;
}
function Uue(e17, t, n, a, r) {
  let s = 0, i = a[0], o = a[1], l = i + r[0];
  for (let u = i; u < l; u++) {
    let p = u * t + o;
    n.set(e17.subarray(p, p + r[1]), s), s += r[1];
  }
}
function Gue(e17, t, n, a, r, s) {
  let i = 0, o = r[0], l = r[1], u = r[2], p = o + s[0], d = l + s[1];
  for (let c = o; c < p; c++) for (let h = l; h < d; h++) {
    let m = c * t + h * n + u;
    a.set(e17.subarray(m, m + s[2]), i), i += s[2];
  }
}
function Hue(e17, t, n, a, r, s, i) {
  let o = 0, l = s[0], u = s[1], p = s[2], d = l + i[0], c = u + i[1], h = p + i[2], m = s[3];
  for (let f = l; f < d; f++) for (let g = u; g < c; g++) for (let b = p; b < h; b++) {
    let y = f * t + g * n + b * a + m;
    r.set(e17.subarray(y, y + i[3]), o), o += i[3];
  }
}
var jue = { kernelName: Bu, backendName: "wasm", kernelFunc: Ii };
function que(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r } = t, { blockShape: s, crops: i } = a, o = s.reduce((b, y) => b * y), l = T.getReshaped(r.shape, s, o), u = T.getPermuted(l.length, s.length), p = T.getReshapedPermuted(r.shape, s, o), d = T.getSliceBeginCoords(i, s.length), c = T.getSliceSize(p, i, s.length), h = zn({ inputs: { x: r }, backend: n, attrs: { shape: l } }), m = ys({ inputs: { x: h }, backend: n, attrs: { perm: u } }), f = zn({ inputs: { x: m }, backend: n, attrs: { shape: p } }), g = Ii({ inputs: { x: f }, backend: n, attrs: { begin: d, size: c } });
  return n.disposeData(h.dataId), n.disposeData(m.dataId), n.disposeData(f.dataId), g;
}
var Kue = { kernelName: nu, backendName: "wasm", kernelFunc: que };
var xF;
function Xue(e17) {
  xF = e17.wasm.cwrap(au, null, ["number", "number", "boolean", "number", "number", "number"]);
}
function Yue(e17) {
  let { backend: t, inputs: n, attrs: a } = e17, { x: r, weights: s } = n, { size: i } = a, o = s.shape.reduce((d, c) => d * c, 1) !== 0, l = r.shape.length === 1 ? [i] : [r.shape[0], i], u = t.makeOutput(l, s.dtype);
  function p(d) {
    return t.dataIdMap.get(d.dataId).id;
  }
  return xF(p(r), i, o, p(s), Qe[s.dtype], p(u)), u;
}
var Zue = { kernelName: au, backendName: "wasm", setupFunc: Xue, kernelFunc: Yue };
var Jue = true;
var Que = Ut(ru, Jue);
function epe(e17) {
  let { inputs: t, backend: n } = e17, { s0: a, s1: r } = t, s = n.typedArrayFromHeap(a), i = n.typedArrayFromHeap(r), o = T.assertAndGetBroadcastShape(Array.from(s), Array.from(i));
  return n.makeOutput([o.length], "int32", void 0, new Int32Array(o));
}
var tpe = { kernelName: Mc, backendName: "wasm", kernelFunc: epe };
function Rs(e17) {
  let { inputs: { x: t }, attrs: { dtype: n }, backend: a } = e17, r = a.makeOutput(t.shape, n), s = a.typedArrayFromHeap(t);
  return a.typedArrayFromHeap(r).set(s), r;
}
var npe = { kernelName: Mi, backendName: "wasm", kernelFunc: Rs };
var ape = Xe(Oi);
var vF;
function rpe(e17) {
  vF = e17.wasm.cwrap(ws, null, ["number", "number", "number", "number"]);
}
function spe(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r } = t, { clipValueMin: s, clipValueMax: i } = a, o = n.dataIdMap.get(r.dataId).id, l = n.makeOutput(r.shape, r.dtype), u = n.dataIdMap.get(l.dataId).id;
  return vF(o, s, i, u), l;
}
var ipe = { kernelName: ws, backendName: "wasm", setupFunc: rpe, kernelFunc: spe };
function wF(e17) {
  let { inputs: t, backend: n } = e17, a = w.parseAxisParam(e17.attrs.axis, t[0].shape)[0], r = t.map((h) => h.shape);
  T.assertParamsConsistent(r, a);
  let s = T.computeOutShape(t.map((h) => h.shape), a), i = t.filter((h) => w.sizeFromShape(h.shape) > 0);
  if (i.length === 1) return Gf({ inputs: { x: i[0] }, backend: n });
  let o = n.makeOutput(s, t[0].dtype);
  if (w.sizeFromShape(s) === 0) return o;
  if (i[0].dtype === "string") {
    let h = i.map((x) => {
      let v = [-1, w.sizeFromShape(x.shape.slice(a))];
      return zn({ inputs: { x }, backend: n, attrs: { shape: v } });
    }), m = h.map((x) => ({ vals: n.readSync(x.dataId), shape: x.shape }));
    s = T.computeOutShape(h.map((x) => x.shape), 1);
    let f = h[0].shape[0] === 1, g = L1(m, s, t[0].dtype, f), b = T.computeOutShape(i.map((x) => x.shape), a);
    o.shape = b;
    let y = n.dataIdMap.get(o.dataId);
    return y.stringBytes = T.fromStringArrayToUint8(g), h.forEach((x) => n.disposeData(x.dataId)), o;
  }
  let l = w.sizeFromShape(i[0].shape.slice(0, a)), u = 0, p = i.map((h) => {
    let m = w.sizeFromShape(h.shape.slice(a));
    return u += m, m;
  }), d = i.map((h) => n.typedArrayFromHeap(h)), c = n.typedArrayFromHeap(o);
  for (let h = 0; h < l; h++) {
    let m = h * u;
    for (let f = 0; f < d.length; f++) {
      let g = p[f], b = h * g, y = d[f].subarray(b, b + g);
      c.set(y, m), m += g;
    }
  }
  return o;
}
var ope = { kernelName: su, backendName: "wasm", kernelFunc: wF };
var kF;
function lpe(e17) {
  kF = e17.wasm.cwrap(Pi, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function upe(e17) {
  let { inputs: t, attrs: n, backend: a } = e17, { x: r, filter: s } = t, i = a.dataIdMap.get(r.dataId).id, o = a.dataIdMap.get(s.dataId).id, { strides: l, dilations: u, pad: p, dimRoundingMode: d, dataFormat: c } = n, h = T.convertConv2DDataFormat(c), m = T.computeConv2DInfo(r.shape, s.shape, l, u, p, d, false, h), f = m.filterHeight, g = m.filterWidth, b = m.padInfo.top, y = m.padInfo.right, x = m.padInfo.bottom, v = m.padInfo.left, I = m.dilationHeight, N = m.dilationWidth, C = m.strideHeight, _ = m.strideWidth, F = m.inChannels, D = m.outChannels, $ = m.padInfo.type === "SAME" ? 1 : 0;
  if (m.dataFormat !== "channelsLast") throw new Error(`wasm backend Conv2D does not support dataFormat:'${m.dataFormat}'. Please use 'channelsLast'.`);
  let S = a.makeOutput(m.outShape, "float32"), M = a.dataIdMap.get(S.dataId).id;
  return kF(i, r.shape[0], r.shape[1], r.shape[2], o, f, g, b, y, x, v, $, I, N, C, _, F, D, M), S;
}
var ppe = { kernelName: Pi, backendName: "wasm", setupFunc: lpe, kernelFunc: upe };
var IF;
function cpe(e17) {
  IF = e17.wasm.cwrap(Li, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function dpe(e17) {
  let { backend: t, inputs: n, attrs: a } = e17, { dy: r, filter: s } = n, { strides: i, pad: o, dataFormat: l, dimRoundingMode: u, inputShape: p } = a, d = 1, c = T.convertConv2DDataFormat(l), h = T.computeConv2DInfo(p, s.shape, i, d, o, u, false, c), { batchSize: m, filterHeight: f, filterWidth: g, inChannels: b, inHeight: y, inWidth: x, outChannels: v, outHeight: I, outWidth: N, strideHeight: C, strideWidth: _ } = h, F = f - 1 - h.padInfo.top, D = g - 1 - h.padInfo.left, $ = h.dataFormat === "channelsLast", S = w.computeStrides(h.inShape), M = w.computeStrides(r.shape), [B, U, H] = w.computeStrides(s.shape), q = S[0], K = $ ? S[1] : S[2], Z = $ ? S[2] : 1, J = $ ? 1 : S[1], ee = M[0], ae = $ ? M[1] : M[2], te = $ ? M[2] : 1, se = $ ? 1 : M[1], ie = t.makeOutput(h.inShape, "float32"), ve = t.dataIdMap.get(ie.dataId).id, ue = t.dataIdMap.get(r.dataId).id, ye = t.dataIdMap.get(s.dataId).id;
  return IF(ue, ye, m, f, g, y, x, b, I, N, v, C, _, F, D, B, U, H, q, K, Z, J, ee, ae, te, se, ve), ie;
}
var hpe = { kernelName: Li, backendName: "wasm", setupFunc: cpe, kernelFunc: dpe };
var SF;
function mpe(e17) {
  SF = e17.wasm.cwrap(zi, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function fpe(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r, filter: s } = t, { strides: i, pad: o, dilations: l } = a;
  if (r.dtype !== "float32") throw new Error(`Tensor x must have dtype float32, got ${r.dtype}`);
  if (s.dtype !== "float32") throw new Error(`Tensor filter must have dtype float32, got ${s.dtype}`);
  let u = T.computeConv3DInfo(r.shape, s.shape, i, l, o), p = n.makeOutput(u.outShape, r.dtype);
  return SF(n.dataIdMap.get(r.dataId).id, n.dataIdMap.get(s.dataId).id, n.dataIdMap.get(p.dataId).id, u.batchSize, u.inDepth, u.inHeight, u.inWidth, u.inChannels, u.outDepth, u.outHeight, u.outWidth, u.outChannels, u.strideDepth, u.strideHeight, u.strideWidth, u.dilationDepth, u.dilationHeight, u.dilationWidth, u.filterDepth, u.filterHeight, u.filterWidth, u.padInfo.front, u.padInfo.top, u.padInfo.left), p;
}
var gpe = { kernelName: zi, backendName: "wasm", setupFunc: mpe, kernelFunc: fpe };
var NF;
function bpe(e17) {
  NF = e17.wasm.cwrap(iu, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function ype(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r, dy: s } = t, { strides: i, pad: o, filterShape: l } = a;
  if (r.dtype !== "float32") throw new Error(`Tensor dy must have dtype float32, got ${r.dtype}`);
  if (s.dtype !== "float32") throw new Error(`Tensor filter must have dtype float32, got ${s.dtype}`);
  let u = T.computeConv3DInfo(r.shape, l, i, 1, o), p = n.makeOutput(u.filterShape, s.dtype);
  return NF(n.dataIdMap.get(r.dataId).id, n.dataIdMap.get(s.dataId).id, n.dataIdMap.get(p.dataId).id, u.batchSize, u.inDepth, u.inHeight, u.inWidth, u.inChannels, u.outDepth, u.outHeight, u.outWidth, u.outChannels, u.strideDepth, u.strideHeight, u.strideWidth, u.dilationDepth, u.dilationHeight, u.dilationWidth, u.filterDepth, u.filterHeight, u.filterWidth, u.padInfo.front, u.padInfo.top, u.padInfo.left), p;
}
var xpe = { kernelName: iu, backendName: "wasm", setupFunc: bpe, kernelFunc: ype };
var TF;
function vpe(e17) {
  TF = e17.wasm.cwrap(ou, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function wpe(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { dy: r, filter: s } = t, { pad: i, strides: o, inputShape: l } = a;
  if (r.dtype !== "float32") throw new Error(`Tensor dy must have dtype float32, got ${r.dtype}`);
  if (s.dtype !== "float32") throw new Error(`Tensor filter must have dtype float32, got ${s.dtype}`);
  let u = T.computeConv3DInfo(l, s.shape, o, 1, i), p = n.makeOutput(u.inShape, r.dtype);
  return TF(n.dataIdMap.get(s.dataId).id, n.dataIdMap.get(r.dataId).id, n.dataIdMap.get(p.dataId).id, u.batchSize, u.inDepth, u.inHeight, u.inWidth, u.inChannels, u.outDepth, u.outHeight, u.outWidth, u.outChannels, u.strideDepth, u.strideHeight, u.strideWidth, u.dilationDepth, u.dilationHeight, u.dilationWidth, u.filterDepth, u.filterHeight, u.filterWidth, u.padInfo.front, u.padInfo.top, u.padInfo.left), p;
}
var kpe = { kernelName: ou, backendName: "wasm", setupFunc: vpe, kernelFunc: wpe };
var Ipe = Xe(Wi);
var Spe = Xe(Bi);
var bv;
(function(e17) {
  e17[e17.bilinear = 0] = "bilinear", e17[e17.nearest = 1] = "nearest";
})(bv || (bv = {}));
var CF;
function Npe(e17) {
  CF = e17.wasm.cwrap(uu, null, ["number", "number", "number", "number", "array", "number", "number", "number", "number", "number"]);
}
function Tpe(e17) {
  let { backend: t, inputs: n, attrs: a } = e17, { method: r, extrapolationValue: s, cropSize: i } = a, { image: o, boxes: l, boxInd: u } = n, p = l.shape[0], [d, c] = i, h = [p, d, c, o.shape[3]], m = t.dataIdMap.get(o.dataId), f;
  o.dtype !== "float32" && (f = Rs({ backend: t, inputs: { x: o }, attrs: { dtype: "float32" } }), m = t.dataIdMap.get(f.dataId));
  let g = m.id, b = t.dataIdMap.get(l.dataId).id, y = t.dataIdMap.get(u.dataId).id, x = t.makeOutput(h, "float32"), v = t.dataIdMap.get(x.dataId).id, I = new Uint8Array(new Int32Array(o.shape).buffer);
  return CF(g, b, y, p, I, d, c, bv[r], s, v), f != null && t.disposeData(f.dataId), x;
}
var Cpe = { kernelName: uu, backendName: "wasm", setupFunc: Npe, kernelFunc: Tpe };
var EF;
function Epe(e17) {
  EF = e17.wasm.cwrap(lu, null, ["number", "number", "number", "number", "number", "number"]);
}
function _pe(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r } = t, { axis: s, exclusive: i, reverse: o } = a, l = r.shape.length;
  w.assert(r.dtype === "float32" || r.dtype === "int32", () => `cumprod does not support ${r.dtype} tensors in the WASM backend`);
  let u = T.getAxesPermutation([s], l), p = r;
  u !== null && (p = ys({ inputs: { x: r }, attrs: { perm: u }, backend: n }));
  let d = T.getInnerMostAxes(1, l)[0];
  T.assertAxesAreInnerMostDims("cumprod", [d], l);
  let c = n.makeOutput(p.shape, p.dtype), h = p.shape[d], m = n.dataIdMap.get(p.dataId).id, f = n.dataIdMap.get(c.dataId).id;
  EF(m, i ? 1 : 0, o ? 1 : 0, h, f, Qe[r.dtype]);
  let g = c;
  if (u !== null) {
    let b = T.getUndoAxesPermutation(u);
    g = ys({ inputs: { x: c }, attrs: { perm: b }, backend: n }), n.disposeData(p.dataId), n.disposeData(c.dataId);
  }
  return g;
}
var Ape = { kernelName: lu, backendName: "wasm", setupFunc: Epe, kernelFunc: _pe };
var _F;
function Fpe(e17) {
  _F = e17.wasm.cwrap(Vi, null, ["number", "number", "number", "number", "number", "number"]);
}
function $pe(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r } = t, { axis: s, exclusive: i, reverse: o } = a, l = r.shape.length;
  w.assert(r.dtype === "float32" || r.dtype === "int32", () => `cumsum does not support ${r.dtype} tensors in the WASM backend`);
  let u = T.getAxesPermutation([s], l), p = r;
  u !== null && (p = ys({ inputs: { x: r }, attrs: { perm: u }, backend: n }));
  let d = T.getInnerMostAxes(1, l)[0];
  T.assertAxesAreInnerMostDims("cumsum", [d], l);
  let c = n.makeOutput(p.shape, p.dtype), h = p.shape[d], m = n.dataIdMap.get(p.dataId).id, f = n.dataIdMap.get(c.dataId).id;
  _F(m, i ? 1 : 0, o ? 1 : 0, h, f, Qe[r.dtype]);
  let g = c;
  if (u !== null) {
    let b = T.getUndoAxesPermutation(u);
    g = ys({ inputs: { x: c }, attrs: { perm: b }, backend: n }), n.disposeData(p.dataId), n.disposeData(c.dataId);
  }
  return g;
}
var Dpe = { kernelName: Vi, backendName: "wasm", setupFunc: Fpe, kernelFunc: $pe };
var AF;
function Rpe(e17) {
  AF = e17.wasm.cwrap("DenseBincount", null, ["number", "array", "number", "number", "boolean", "number", "number", "boolean", "number"]);
}
function Mpe(e17) {
  let { backend: t, inputs: n, attrs: a } = e17, { x: r, weights: s } = n, { size: i, binaryOutput: o } = a, l = s.shape.reduce((c, h) => c * h, 1) !== 0, u = r.shape.length === 1 ? [i] : [r.shape[0], i], p = t.makeOutput(u, s.dtype);
  function d(c) {
    return t.dataIdMap.get(c.dataId).id;
  }
  return AF(d(r), new Uint8Array(new Int32Array(r.shape).buffer), r.shape.length, i, l, d(s), Qe[s.dtype], o, d(p)), p;
}
var Ope = { kernelName: Pc, backendName: "wasm", setupFunc: Rpe, kernelFunc: Mpe };
var FF;
function Ppe(e17) {
  FF = e17.wasm.cwrap(pu, null, ["number", "number", "number", "array", "number", "array", "array", "number", "number"]);
}
function Lpe(e17) {
  let { backend: t, inputs: n, attrs: a } = e17, { x: r } = n, { blockSize: s, dataFormat: i } = a, o = r.shape[0], l = i === "NHWC" ? r.shape[1] : r.shape[2], u = i === "NHWC" ? r.shape[2] : r.shape[3], p = i === "NHWC" ? r.shape[3] : r.shape[1], d = l * s, c = u * s, h = p / (s * s), m = i === "NHWC" ? [o, d, c, h] : [o, h, d, c], f = t.makeOutput(m, "float32"), g = t.dataIdMap.get(r.dataId).id, b = new Uint8Array(new Int32Array(w.computeStrides(r.shape)).buffer), y = new Uint8Array(new Int32Array(m).buffer), x = new Uint8Array(new Int32Array(w.computeStrides(m)).buffer), v = t.dataIdMap.get(f.dataId).id;
  return FF(g, s, i === "NHWC" ? 1 : 0, b, r.shape.length - 1, y, x, m.length, v), f;
}
var zpe = { kernelName: pu, backendName: "wasm", setupFunc: Ppe, kernelFunc: Lpe };
var $F;
function Wpe(e17) {
  $F = e17.wasm.cwrap(Ui, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function Bpe(e17) {
  let { inputs: t, attrs: n, backend: a } = e17, { x: r, filter: s } = t, i = a.dataIdMap.get(r.dataId).id, o = a.dataIdMap.get(s.dataId).id, { strides: l, dilations: u, pad: p, dimRoundingMode: d } = n, c = u == null ? [1, 1] : u, h = T.computeConv2DInfo(r.shape, s.shape, l, c, p, d, true), m = h.filterHeight, f = h.filterWidth, g = h.padInfo.top, b = h.padInfo.right, y = h.padInfo.bottom, x = h.padInfo.left, v = h.dilationHeight, I = h.dilationWidth, N = h.strideHeight, C = h.strideWidth, _ = h.inChannels, F = h.outChannels, D = h.padInfo.type === "SAME" ? 1 : 0;
  if (h.dataFormat !== "channelsLast") throw new Error(`wasm backend DepthwiseConv2dNative does not support dataFormat:'${h.dataFormat}'. Please use 'channelsLast'.`);
  let $ = a.makeOutput(h.outShape, "float32"), S = a.dataIdMap.get($.dataId).id;
  return $F(i, r.shape[0], r.shape[1], r.shape[2], o, m, f, g, b, y, x, D, v, I, N, C, _, F, S), $;
}
var Vpe = { kernelName: Ui, backendName: "wasm", setupFunc: Wpe, kernelFunc: Bpe };
var DF;
function Upe(e17) {
  DF = e17.wasm.cwrap("Diag", null, ["number", "number", "number", "number"]);
}
function Gpe(e17) {
  let { inputs: t, backend: n } = e17, { x: a } = t, r = w.sizeFromShape(a.shape), s = n.makeOutput([...a.shape, ...a.shape], a.dtype);
  return DF(n.dataIdMap.get(a.dataId).id, Qe[a.dtype], r, n.dataIdMap.get(s.dataId).id), s;
}
var Hpe = { kernelName: Lc, backendName: "wasm", setupFunc: Upe, kernelFunc: Gpe };
var RF;
function jpe(e17) {
  RF = e17.wasm.cwrap(Gi, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function qpe(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r, filter: s } = t, { strides: i, pad: o, dilations: l } = a;
  if (r.dtype !== s.dtype) throw new Error(`Dilation2D error: x must have the same dtype as filter. Got ${r.dtype} and ${s.dtype}`);
  let u = T.computeDilation2DInfo(r.shape, s.shape, i, o, "NHWC", l), p = n.makeOutput(u.outShape, r.dtype);
  return RF(n.dataIdMap.get(r.dataId).id, n.dataIdMap.get(s.dataId).id, n.dataIdMap.get(p.dataId).id, Qe[r.dtype], u.batchSize, u.inChannels, u.inHeight, u.inWidth, u.outHeight, u.outWidth, u.strideHeight, u.strideWidth, u.dilationHeight, u.dilationWidth, u.filterHeight, u.filterWidth, u.padInfo.top, u.padInfo.left), p;
}
var Kpe = { kernelName: Gi, backendName: "wasm", setupFunc: jpe, kernelFunc: qpe };
var MF;
function Xpe(e17) {
  MF = e17.wasm.cwrap(Rl, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function Ype(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r, filter: s, dy: i } = t, { strides: o, pad: l, dilations: u } = a;
  if (r.dtype !== s.dtype || r.dtype !== i.dtype) throw new Error(`Dilation2DBackpropFilter error: x must have the same dtype as filter and dy. Got ${r.dtype}, ${s.dtype}, and ${i.dtype}`);
  let p = T.computeDilation2DInfo(r.shape, s.shape, o, l, "NHWC", u), d = n.makeOutput(s.shape, s.dtype);
  return MF(n.dataIdMap.get(r.dataId).id, n.dataIdMap.get(s.dataId).id, n.dataIdMap.get(i.dataId).id, n.dataIdMap.get(d.dataId).id, Qe[r.dtype], p.batchSize, p.inChannels, p.inHeight, p.inWidth, p.outHeight, p.outWidth, p.strideHeight, p.strideWidth, p.dilationHeight, p.dilationWidth, p.filterHeight, p.filterWidth, p.padInfo.top, p.padInfo.left), d;
}
var Zpe = { kernelName: Rl, backendName: "wasm", setupFunc: Xpe, kernelFunc: Ype };
var OF;
function Jpe(e17) {
  OF = e17.wasm.cwrap(Dl, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function Qpe(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r, filter: s, dy: i } = t, { strides: o, pad: l, dilations: u } = a;
  if (r.dtype !== s.dtype || r.dtype !== i.dtype) throw new Error(`Dilation2DBackpropInput error: x must have the same dtype as filter and dy. Got ${r.dtype}, ${s.dtype}, and ${i.dtype}`);
  let p = T.computeDilation2DInfo(r.shape, s.shape, o, l, "NHWC", u), d = n.makeOutput(r.shape, r.dtype);
  return OF(n.dataIdMap.get(r.dataId).id, n.dataIdMap.get(s.dataId).id, n.dataIdMap.get(i.dataId).id, n.dataIdMap.get(d.dataId).id, Qe[r.dtype], p.batchSize, p.inChannels, p.inHeight, p.inWidth, p.outHeight, p.outWidth, p.strideHeight, p.strideWidth, p.dilationHeight, p.dilationWidth, p.filterHeight, p.filterWidth, p.padInfo.top, p.padInfo.left), d;
}
var ece = { kernelName: Dl, backendName: "wasm", setupFunc: Jpe, kernelFunc: Qpe };
var tce = Xe(ji);
var PF;
function nce(e17) {
  PF = e17.wasm.cwrap(cu, null, ["number", "number", "number"]);
}
function ace(e17) {
  let { inputs: t, backend: n } = e17, { dy: a, y: r } = t, s = n.makeOutput(r.shape, "float32"), i = (o) => n.dataIdMap.get(o.dataId).id;
  return PF(i(r), i(a), i(s)), s;
}
var rce = { kernelName: cu, backendName: "wasm", setupFunc: nce, kernelFunc: ace };
var sce = false;
var ice = Ut(du, sce, "bool");
var oce = Xe(qi);
var lce = Xe(Ki, "float32");
function yv(e17) {
  let { inputs: t, attrs: n, backend: a } = e17, { input: r } = t, { dim: s } = n, i = r.shape.length, o = r.shape.slice(), l = s;
  return s < 0 && (w.assert(-(i + 1) <= s, () => `Axis must be in the interval [${-(i + 1)}, ${i}]`), l = i + s + 1), o.splice(l, 0, 1), zn({ inputs: { x: r }, backend: a, attrs: { shape: o } });
}
var uce = { kernelName: hu, backendName: "wasm", kernelFunc: yv };
var pce = Xe(Xi, "float32");
function LF(e17) {
  let { attrs: { shape: t, value: n }, backend: a } = e17, { attrs: { dtype: r } } = e17;
  r = r || w.inferDtype(n);
  let s = a.makeOutput(t, r);
  return a.typedArrayFromHeap(s).fill(n), s;
}
var cce = { kernelName: zc, backendName: "wasm", kernelFunc: LF };
var zF;
function dce(e17) {
  zF = e17.wasm.cwrap(mu, null, ["number", "number", "number", "number", "number", "number"]);
}
function hce(e17) {
  let { inputs: t, backend: n } = e17, { image: a } = t, r = n.makeOutput(a.shape, a.dtype), s = n.dataIdMap.get(a.dataId).id, i = n.dataIdMap.get(r.dataId).id, [o, l, u, p] = a.shape;
  return zF(s, o, l, u, p, i), r;
}
var mce = { kernelName: mu, backendName: "wasm", kernelFunc: hce, setupFunc: dce };
var fce = Xe(Yi);
var gce = false;
var bce = Ut(Zi, gce);
var WF;
function yce(e17) {
  WF = e17.wasm.cwrap(Ji, null, ["number", "number", "number", "number", "number", "number", "number"]);
}
function xce(e17) {
  let { backend: t, inputs: n, attrs: a } = e17, { varianceEpsilon: r } = a, { x: s, mean: i, variance: o, offset: l, scale: u } = n, p = t.dataIdMap.get(s.dataId).id, d = t.dataIdMap.get(i.dataId).id, c = t.dataIdMap.get(o.dataId).id, h = l != null ? t.dataIdMap.get(l.dataId).id : 0, m = u != null ? t.dataIdMap.get(u.dataId).id : 0, f = t.makeOutput(s.shape, s.dtype);
  if (w.sizeFromShape(s.shape) === 0) return f;
  let g = t.dataIdMap.get(f.dataId).id;
  return WF(p, d, c, h, m, r, g), f;
}
var vce = { kernelName: Ji, backendName: "wasm", setupFunc: yce, kernelFunc: xce };
var BF;
function wce(e17) {
  BF = e17.wasm.cwrap(oi, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function kce(e17) {
  let { inputs: t, attrs: n, backend: a } = e17, { x: r, filter: s, bias: i, preluActivationWeights: o } = t, { strides: l, pad: u, dilations: p, dataFormat: d, dimRoundingMode: c, activation: h, leakyreluAlpha: m } = n, f = T.computeConv2DInfo(r.shape, s.shape, l, p, u, c), g = Ac[h];
  if (g == null) throw new Error(`${h} activation not yet supported for FusedConv2D in the wasm backend.`);
  let b = a.dataIdMap.get(r.dataId).id, y = a.dataIdMap.get(s.dataId).id, x = f.outChannels, v = 0;
  if (i != null) {
    let te = a.dataIdMap.get(i.dataId);
    if (te.shape.length !== 1) throw new Error(`FusedConv2D only supports rank-1 bias but got rank ${te.shape.length}.`);
    if (te.shape[0] !== x) throw new Error(`FusedConv2D bias shape (${te.shape}) does not match the number of output channels (${x})`);
    v = te.id;
  }
  let I = f.filterHeight, N = f.filterWidth, C = f.padInfo.top, _ = f.padInfo.right, F = f.padInfo.bottom, D = f.padInfo.left, $ = f.dilationHeight, S = f.dilationWidth, M = f.strideHeight, B = f.strideWidth, U = f.inChannels, H = f.padInfo.type === "SAME" ? 1 : 0, q = f.batchSize, K = f.inHeight, Z = f.inWidth;
  if (d !== "NHWC") throw new Error(`wasm backend FusedConv2D does not support dataFormat:'${d}'. Please use 'NHWC'.`);
  let J = a.makeOutput(f.outShape, "float32"), ee = a.dataIdMap.get(J.dataId).id, ae = o == null ? 0 : a.dataIdMap.get(o.dataId).id;
  return BF(b, q, K, Z, y, I, N, v, C, _, F, D, H, $, S, M, B, U, x, g, ae, m || 0, ee), J;
}
var Ice = { kernelName: oi, backendName: "wasm", setupFunc: wce, kernelFunc: kce };
var VF;
function Sce(e17) {
  VF = e17.wasm.cwrap(li, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function Nce(e17) {
  let { inputs: t, attrs: n, backend: a } = e17, { x: r, filter: s, bias: i, preluActivationWeights: o } = t, { strides: l, pad: u, dilations: p, dataFormat: d, dimRoundingMode: c, activation: h, leakyreluAlpha: m } = n, f = T.computeConv2DInfo(r.shape, s.shape, l, p, u, c, true), g = Ac[h];
  if (g == null) throw new Error(`${h} activation not yet supported for FusedDepthwiseConv2D in the wasm backend.`);
  let b = a.dataIdMap.get(r.dataId).id, y = a.dataIdMap.get(s.dataId).id, x = f.outChannels, v = 0;
  if (i != null) {
    let te = a.dataIdMap.get(i.dataId);
    if (te.shape.length !== 1) throw new Error(`FusedDepthwiseConv2D only supports rank-1 bias but got rank ${te.shape.length}.`);
    if (te.shape[0] !== x) throw new Error(`FusedDepthwiseConv2D bias shape (${te.shape}) does not match the number of output channels (${x})`);
    v = te.id;
  }
  let I = f.filterHeight, N = f.filterWidth, C = f.padInfo.top, _ = f.padInfo.right, F = f.padInfo.bottom, D = f.padInfo.left, $ = f.dilationHeight, S = f.dilationWidth, M = f.strideHeight, B = f.strideWidth, U = f.inChannels, H = f.padInfo.type === "SAME" ? 1 : 0, q = f.batchSize, K = f.inHeight, Z = f.inWidth;
  if (d !== "NHWC") throw new Error(`wasm backend FusedDepthwiseConv2D does not support dataFormat:'${d}'. Please use 'NHWC'.`);
  let J = a.makeOutput(f.outShape, "float32"), ee = a.dataIdMap.get(J.dataId).id, ae = o == null ? 0 : a.dataIdMap.get(o.dataId).id;
  return VF(b, q, K, Z, y, I, N, v, C, _, F, D, H, $, S, M, B, U, x, g, ae, m || 0, ee), J;
}
var Tce = { kernelName: li, backendName: "wasm", setupFunc: Sce, kernelFunc: Nce };
var UF;
function Cce(e17) {
  UF = e17.wasm.cwrap(gu, null, ["number", "number", "number", "number", "number", "number", "array", "number"]);
}
function Ece(e17) {
  let { backend: t, inputs: n } = e17, { params: a, indices: r } = n, [s, i, o, l] = Yw.prepareAndValidate(a, r), u = t.makeOutput(s, a.dtype);
  if (i === 0) return u;
  let p = r.shape, d = p[p.length - 1], c = t.dataIdMap.get(a.dataId).id, h = t.dataIdMap.get(r.dataId).id, m = new Uint8Array(new Int32Array(l).buffer), f = t.dataIdMap.get(u.dataId).id;
  return UF(c, Qe[a.dtype], h, i, d, o, m, f), u;
}
var _ce = { kernelName: gu, backendName: "wasm", setupFunc: Cce, kernelFunc: Ece };
var GF;
function Ace(e17) {
  GF = e17.wasm.cwrap("Gather", null, ["number", "number", "array", "number", "number", "number", "array", "number"]);
}
function Fce(e17) {
  let { backend: t, inputs: n, attrs: a } = e17, { x: r, indices: s } = n, { axis: i, batchDims: o } = a, l = w.parseAxisParam(i, r.shape)[0], u = t.readSync(s.dataId), p = r.shape[l];
  for (let C = 0; C < u.length; ++C) {
    let _ = u[C];
    w.assert(_ <= p - 1 && _ >= 0, () => `GatherV2: the index value ${_} is not in [0, ${p - 1}]`);
  }
  let d = T.segment_util.collectGatherOpShapeInfo(r, s, l, o), c = zn({ inputs: { x: r }, attrs: { shape: [d.batchSize, d.outerSize, d.dimSize, d.sliceSize] }, backend: t }), h = w.sizeFromShape(s.shape), m = zn({ inputs: { x: s }, attrs: { shape: [d.batchSize, h / d.batchSize] }, backend: t }), f = [d.batchSize, d.outerSize, h / d.batchSize, d.sliceSize], g = t.makeOutput(f, r.dtype);
  if (w.sizeFromShape(r.shape) === 0) return g;
  let b = c.shape.length - 1, y = t.dataIdMap.get(c.dataId).id, x = t.dataIdMap.get(m.dataId).id, v = t.dataIdMap.get(g.dataId).id, I = new Uint8Array(new Int32Array(w.computeStrides(c.shape)).buffer), N = new Uint8Array(new Int32Array(w.computeStrides(f)).buffer);
  return GF(y, Qe[r.dtype], I, b, x, d.batchSize, N, v), t.disposeData(c.dataId), t.disposeData(m.dataId), g.shape = d.outputShape, g;
}
var $ce = { kernelName: fu, backendName: "wasm", setupFunc: Ace, kernelFunc: Fce };
var Dce = false;
var Rce = Ut(bu, Dce, "bool");
var Mce = false;
var Oce = Ut(Qi, Mce, "bool");
var Pce = Xe(to, "bool");
var Lce = Xe(no, "bool");
var zce = Xe(ao, "bool");
var HF;
function Wce(e17) {
  HF = e17.wasm.cwrap(ro, null, ["number", "number", "number", "number"]);
}
function Bce(e17) {
  let { inputs: { x: t }, attrs: { alpha: n }, backend: a } = e17, r = a.dataIdMap.get(t.dataId).id, s = a.makeOutput(t.shape, "float32");
  if (w.sizeFromShape(t.shape) !== 0) {
    let i = a.dataIdMap.get(s.dataId).id;
    HF(r, Qe[t.dtype], n, i);
  }
  return s;
}
var Vce = { kernelName: ro, backendName: "wasm", setupFunc: Wce, kernelFunc: Bce };
var Uce = false;
var Gce = Ut(yu, Uce, "bool");
var Hce = false;
var jce = Ut(xu, Hce, "bool");
var jF;
function qce(e17) {
  jF = e17.wasm.cwrap(vu, null, ["number", "number", "number", "number"]);
}
function Kce(e17) {
  let { attrs: t, backend: n } = e17, { start: a, stop: r, num: s } = t, i = Math.floor(s), o = n.makeOutput([i], "float32");
  return jF(n.dataIdMap.get(o.dataId).id, a, r, i), o;
}
var Xce = { kernelName: vu, backendName: "wasm", setupFunc: qce, kernelFunc: Kce };
var Yce = Xe(so);
var Zce = Xe(io);
var Jce = false;
var Qce = Ut(wu, Jce, "bool");
var ede = Xe(ku);
var tde = false;
var nde = Ut(Iu, tde, "bool");
var ade = false;
var rde = Ut(jS, ade, "bool");
var qF;
function sde(e17) {
  qF = e17.wasm.cwrap(oo, null, ["number", "number", "number", "number", "number", "number", "number"]);
}
function ide(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r } = t, { depthRadius: s, bias: i, alpha: o, beta: l } = a;
  if (r.dtype !== "float32") throw new Error("LRN error: x must have dtype float32");
  let u = n.makeOutput(r.shape, r.dtype);
  return qF(n.dataIdMap.get(r.dataId).id, n.dataIdMap.get(u.dataId).id, r.shape[3], s, i, o, l), u;
}
var ode = { kernelName: oo, backendName: "wasm", setupFunc: sde, kernelFunc: ide };
var KF;
function lde(e17) {
  KF = e17.wasm.cwrap(Su, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function ude(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r, y: s, dy: i } = t, { depthRadius: o, bias: l, alpha: u, beta: p } = a;
  if (r.dtype !== "float32" || s.dtype !== "float32" || i.dtype !== "float32") throw new Error("LRNGrad error: x, y, and dy must have dtype float32");
  let d = n.makeOutput(r.shape, r.dtype);
  return KF(n.dataIdMap.get(r.dataId).id, n.dataIdMap.get(s.dataId).id, n.dataIdMap.get(i.dataId).id, n.dataIdMap.get(d.dataId).id, i.shape[3], o, l, u, p), d;
}
var pde = { kernelName: Su, backendName: "wasm", setupFunc: lde, kernelFunc: ude };
var XF;
function cde(e17) {
  XF = e17.wasm.cwrap(lo, null, ["number", "number", "number", "number"]);
}
function dde(e17) {
  let { backend: t, inputs: n, attrs: a } = e17, { reductionIndices: r, keepDims: s } = a, { x: i } = n, o = t.dataIdMap.get(i.dataId).id, l = i, { transposed: u, axes: p, originalAxes: d, inputWasTransposed: c } = Ds(i, r, t);
  if (c) {
    let y = t.dataIdMap.get(u.dataId).id;
    l = u, o = y;
  }
  let h = l.shape.length;
  T.assertAxesAreInnerMostDims("max", p, h);
  let [m, f] = T.computeOutAndReduceShapes(l.shape, p), g = w.sizeFromShape(f), b = t.makeOutput(m, i.dtype);
  if (w.sizeFromShape(l.shape) !== 0) {
    let y = t.dataIdMap.get(b.dataId).id;
    XF(o, Qe[i.dtype], g, y);
  }
  if (c && t.disposeData(u.dataId), s) {
    let y = T.expandShapeToKeepDim(b.shape, d);
    b.shape = y;
  }
  return b;
}
var hde = { kernelName: lo, backendName: "wasm", setupFunc: cde, kernelFunc: dde };
var mde = false;
var fde = Ut(uo, mde);
var YF;
function gde(e17) {
  YF = e17.wasm.cwrap(po, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function bde(e17) {
  let { inputs: t, attrs: n, backend: a } = e17, r = t.x, s = a.dataIdMap.get(r.dataId).id;
  w.assert(r.dtype === "float32", () => `Error in MaxPool: only float32 input is supported. Got ${r.dtype}.`);
  let { filterSize: i, strides: o, pad: l, dimRoundingMode: u } = n, p = T.computePool2DInfo(r.shape, i, o, 1, l, u), d = p.filterHeight, c = p.filterWidth, h = p.padInfo.top, m = p.padInfo.right, f = p.padInfo.bottom, g = p.padInfo.left, b = p.dilationHeight, y = p.dilationWidth, x = p.strideHeight, v = p.strideWidth, I = p.inChannels, N = p.outChannels;
  if (p.dataFormat !== "channelsLast") throw new Error(`wasm backend does not support dataFormat:'${p.dataFormat}'. Please use 'channelsLast'.`);
  let C = a.makeOutput(p.outShape, "float32"), _ = a.dataIdMap.get(C.dataId).id;
  return YF(s, r.shape[0], r.shape[1], r.shape[2], d, c, h, m, f, g, b, y, x, v, I, N, _), C;
}
var yde = { kernelName: po, backendName: "wasm", setupFunc: gde, kernelFunc: bde };
var ZF;
function xde(e17) {
  ZF = e17.wasm.cwrap("MaxPool3D", null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function vde(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r } = t, { filterSize: s, strides: i, pad: o, dimRoundingMode: l, dataFormat: u } = a, p = T.computePool3DInfo(r.shape, s, i, 1, o, l, u), d = n.makeOutput(p.outShape, r.dtype);
  return ZF(n.dataIdMap.get(r.dataId).id, n.dataIdMap.get(d.dataId).id, p.batchSize, p.inChannels, p.inDepth, p.inHeight, p.inWidth, p.outDepth, p.outHeight, p.outWidth, p.strideDepth, p.strideHeight, p.strideWidth, p.dilationDepth, p.dilationHeight, p.dilationWidth, p.effectiveFilterDepth, p.effectiveFilterHeight, p.effectiveFilterWidth, p.padInfo.front, p.padInfo.top, p.padInfo.left), d;
}
var wde = { kernelName: Nu, backendName: "wasm", setupFunc: xde, kernelFunc: vde };
var JF;
function kde(e17) {
  JF = e17.wasm.cwrap("MaxPool3DGrad", null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function Ide(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { dy: r, input: s } = t, { filterSize: i, strides: o, pad: l, dimRoundingMode: u } = a, p = T.computePool3DInfo(s.shape, i, o, 1, l, u), d = n.makeOutput(s.shape, s.dtype);
  return JF(n.dataIdMap.get(s.dataId).id, n.dataIdMap.get(r.dataId).id, n.dataIdMap.get(d.dataId).id, p.batchSize, p.inChannels, p.inDepth, p.inHeight, p.inWidth, p.outDepth, p.outHeight, p.outWidth, p.strideDepth, p.strideHeight, p.strideWidth, p.dilationDepth, p.dilationHeight, p.dilationWidth, p.effectiveFilterDepth, p.effectiveFilterHeight, p.effectiveFilterWidth, p.padInfo.front, p.padInfo.top, p.padInfo.left), d;
}
var Sde = { kernelName: Bc, backendName: "wasm", setupFunc: kde, kernelFunc: Ide };
var QF;
function Nde(e17) {
  QF = e17.wasm.cwrap("MaxPoolGrad", null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function Tde(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { dy: r, input: s } = t, { filterSize: i, strides: o, pad: l, dimRoundingMode: u } = a, p = T.computePool2DInfo(s.shape, i, o, 1, l, u), d = n.makeOutput(s.shape, s.dtype);
  return QF(n.dataIdMap.get(s.dataId).id, n.dataIdMap.get(r.dataId).id, n.dataIdMap.get(d.dataId).id, p.batchSize, p.inChannels, p.inHeight, p.inWidth, p.outHeight, p.outWidth, p.strideHeight, p.strideWidth, p.dilationHeight, p.dilationWidth, p.effectiveFilterHeight, p.effectiveFilterWidth, p.padInfo.top, p.padInfo.left), d;
}
var Cde = { kernelName: Wc, backendName: "wasm", setupFunc: Nde, kernelFunc: Tde };
var e$;
function Ede(e17) {
  e$ = e17.wasm.cwrap("MaxPoolWithArgmax", null, ["number", "number", "number", "number", "boolean", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function _de(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r } = t, { filterSize: s, strides: i, pad: o, includeBatchInIndex: l } = a;
  w.assert(r.shape.length === 4, () => `Error in maxPool: input must be rank 4 but got rank ${r.shape.length}.`);
  let u = [1, 1];
  w.assert(T.eitherStridesOrDilationsAreOne(i, u), () => `Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${u}'`);
  let p = T.computePool2DInfo(r.shape, s, i, [1, 1], o), d = n.makeOutput(p.outShape, r.dtype), c = n.makeOutput(p.outShape, "int32");
  return e$(n.dataIdMap.get(r.dataId).id, n.dataIdMap.get(d.dataId).id, n.dataIdMap.get(c.dataId).id, Qe[r.dtype], l, p.batchSize, p.inChannels, p.inHeight, p.inWidth, p.outHeight, p.outWidth, p.strideHeight, p.strideWidth, p.dilationHeight, p.dilationWidth, p.effectiveFilterHeight, p.effectiveFilterWidth, p.padInfo.top, p.padInfo.left), [d, c];
}
var Ade = { kernelName: Vc, backendName: "wasm", setupFunc: Ede, kernelFunc: _de };
var t$;
function Fde(e17) {
  t$ = e17.wasm.cwrap(co, null, ["number, number, number"]);
}
function $de(e17) {
  let { backend: t, inputs: n, attrs: a } = e17, { axis: r, keepDims: s } = a, { x: i } = n, o = t.dataIdMap.get(i.dataId).id, l = o, u = i, { transposed: p, axes: d, originalAxes: c, inputWasTransposed: h } = Ds(i, r, t), m = d;
  if (h) {
    let v = t.dataIdMap.get(p.dataId).id;
    v !== o && (u = p, l = v, m = T.getInnerMostAxes(m.length, u.shape.length));
  }
  T.assertAxesAreInnerMostDims("mean", m, u.shape.length);
  let [f, g] = T.computeOutAndReduceShapes(u.shape, m), b = w.sizeFromShape(g), y = u;
  u.dtype !== "float32" && (y = Rs({ backend: t, inputs: { x: u }, attrs: { dtype: "float32" } }), l = t.dataIdMap.get(y.dataId).id);
  let x = t.makeOutput(f, "float32");
  if (w.sizeFromShape(u.shape) !== 0) {
    let v = t.dataIdMap.get(x.dataId).id;
    t$(l, b, v);
  }
  if (h && t.disposeData(p.dataId), s) {
    let v = T.expandShapeToKeepDim(x.shape, c);
    x.shape = v;
  }
  return u.dtype !== "float32" && t.disposeData(y.dataId), x;
}
var Dde = { kernelName: co, backendName: "wasm", setupFunc: Fde, kernelFunc: $de };
var n$;
function Rde(e17) {
  n$ = e17.wasm.cwrap(ho, null, ["number", "number", "number", "number"]);
}
function Mde(e17) {
  let { backend: t, inputs: n, attrs: a } = e17, { axis: r, keepDims: s } = a, { x: i } = n, o = t.dataIdMap.get(i.dataId).id, l = o, u = i, { transposed: p, axes: d, originalAxes: c, inputWasTransposed: h } = Ds(i, r, t);
  if (h) {
    let x = t.dataIdMap.get(p.dataId).id;
    x !== o && (u = p, l = x);
  }
  let m = u.shape.length;
  T.assertAxesAreInnerMostDims("min", d, m);
  let [f, g] = T.computeOutAndReduceShapes(u.shape, d), b = w.sizeFromShape(g), y = t.makeOutput(f, u.dtype);
  if (w.sizeFromShape(u.shape) !== 0) {
    let x = t.dataIdMap.get(y.dataId).id;
    n$(l, Qe[i.dtype], b, x);
  }
  if (h && t.disposeData(p.dataId), s) {
    let x = T.expandShapeToKeepDim(y.shape, c);
    y.shape = x;
  }
  return y;
}
var Ode = { kernelName: ho, backendName: "wasm", setupFunc: Rde, kernelFunc: Mde };
var Pde = false;
var Lde = Ut(mo, Pde);
var xv;
(function(e17) {
  e17[e17.reflect = 0] = "reflect", e17[e17.symmetric = 1] = "symmetric";
})(xv || (xv = {}));
var a$;
function zde(e17) {
  a$ = e17.wasm.cwrap(fo, null, ["number", "array", "number", "number", "array", "array", "number", "number"]);
}
function Wde(e17) {
  let { inputs: { x: t }, backend: n, attrs: { paddings: a, mode: r } } = e17, s = a.map((m, f) => m[0] + t.shape[f] + m[1]), i = n.dataIdMap.get(t.dataId).id, o = n.makeOutput(s, t.dtype), l = n.dataIdMap.get(o.dataId).id, u = new Uint8Array(new Int32Array(t.shape).buffer), p = a.map((m) => m[0]), d = a.map((m) => m[1]), c = new Uint8Array(new Int32Array(p).buffer), h = new Uint8Array(new Int32Array(d).buffer);
  return a$(i, u, t.shape.length, Qe[t.dtype], c, h, xv[r], l), o;
}
var Bde = { kernelName: fo, backendName: "wasm", kernelFunc: Wde, setupFunc: zde };
var r$;
function Vde(e17) {
  r$ = e17.wasm.cwrap(zo, null, ["number", "number", "number", "number"]);
}
function s$(e17) {
  let { backend: t, inputs: { logits: n }, attrs: { dim: a } } = e17, r = t.dataIdMap.get(n.dataId).id, s = t.makeOutput(n.shape, n.dtype), i = t.dataIdMap.get(s.dataId).id, o = n.shape[a], l = w.sizeFromShape(n.shape) / o;
  return w.sizeFromShape(s.shape) === 0 || r$(r, i, o, l), s;
}
var Ude = { kernelName: zo, backendName: "wasm", setupFunc: Vde, kernelFunc: s$ };
var i$;
function Gde(e17) {
  i$ = e17.wasm.cwrap(Tu, null, ["number", "number", "number", "number", "number", "number"]);
}
function Hde(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { logits: r } = t, { numSamples: s, seed: i, normalized: o } = a;
  if (r.dtype !== "float32") throw new Error(`Tensor logits must have dtype float32, got ${r.dtype}`);
  let l = o ? r : s$({ inputs: { logits: r }, backend: n, attrs: { dim: r.shape.length - 1 } }), [u, p] = l.shape, d = n.makeOutput([u, s], "int32");
  return i$(n.dataIdMap.get(l.dataId).id, u, p, s, i, n.dataIdMap.get(d.dataId).id), o || n.disposeData(l.dataId), d;
}
var jde = { kernelName: Tu, backendName: "wasm", setupFunc: Gde, kernelFunc: Hde };
var qde = Ut(go, true);
var Kde = true;
var Xde = Ut(bo, Kde);
var Yde = Xe(Cu);
function hk(e17, t) {
  let n = new Int32Array(e17.wasm.HEAPU8.buffer, t, 4), a = n[0], r = n[1], s = n[2], i = n[3];
  return e17.wasm._free(t), { pSelectedIndices: a, selectedSize: r, pSelectedScores: s, pValidOutputs: i };
}
var o$;
function Zde(e17) {
  o$ = e17.wasm.cwrap(_u, "number", ["number", "number", "number", "number", "number"]);
}
function Jde(e17) {
  let { backend: t, inputs: n, attrs: a } = e17, { iouThreshold: r, maxOutputSize: s, scoreThreshold: i } = a, { boxes: o, scores: l } = n, u = t.dataIdMap.get(o.dataId).id, p = t.dataIdMap.get(l.dataId).id, d = o$(u, p, s, r, i), { pSelectedIndices: c, selectedSize: h, pSelectedScores: m, pValidOutputs: f } = hk(t, d);
  return t.wasm._free(m), t.wasm._free(f), t.makeOutput([h], "int32", c);
}
var Qde = { kernelName: _u, backendName: "wasm", setupFunc: Zde, kernelFunc: Jde };
var l$;
function ehe(e17) {
  l$ = e17.wasm.cwrap(Au, "number", ["number", "number", "number", "number", "number", "bool"]);
}
function the(e17) {
  let { backend: t, inputs: n, attrs: a } = e17, { iouThreshold: r, maxOutputSize: s, scoreThreshold: i, padToMaxOutputSize: o } = a, { boxes: l, scores: u } = n, p = t.dataIdMap.get(l.dataId).id, d = t.dataIdMap.get(u.dataId).id, c = l$(p, d, s, r, i, o), { pSelectedIndices: h, selectedSize: m, pSelectedScores: f, pValidOutputs: g } = hk(t, c);
  t.wasm._free(f);
  let b = t.makeOutput([m], "int32", h), y = t.makeOutput([], "int32", g);
  return [b, y];
}
var nhe = { kernelName: Au, backendName: "wasm", setupFunc: ehe, kernelFunc: the };
var u$;
function ahe(e17) {
  u$ = e17.wasm.cwrap(Fu, "number", ["number", "number", "number", "number", "number", "number"]);
}
function rhe(e17) {
  let { backend: t, inputs: n, attrs: a } = e17, { iouThreshold: r, maxOutputSize: s, scoreThreshold: i, softNmsSigma: o } = a, { boxes: l, scores: u } = n, p = t.dataIdMap.get(l.dataId).id, d = t.dataIdMap.get(u.dataId).id, c = u$(p, d, s, r, i, o), { pSelectedIndices: h, selectedSize: m, pSelectedScores: f, pValidOutputs: g } = hk(t, c);
  t.wasm._free(g);
  let b = t.makeOutput([m], "int32", h), y = t.makeOutput([m], "float32", f);
  return [b, y];
}
var she = { kernelName: Fu, backendName: "wasm", setupFunc: ahe, kernelFunc: rhe };
var ihe = false;
var ohe = Ut(Eu, ihe, "bool");
var p$;
function lhe(e17) {
  p$ = e17.wasm.cwrap(yo, null, ["number", "number", "number", "number", "number"]);
}
function uhe(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { indices: r } = t, { dtype: s, depth: i, onValue: o, offValue: l } = a, u = n.makeOutput([...r.shape, i], s), p = n.dataIdMap.get(u.dataId).id, d = n.dataIdMap.get(r.dataId).id;
  return p$(d, i, o, l, p), u;
}
var phe = { kernelName: yo, backendName: "wasm", setupFunc: lhe, kernelFunc: uhe };
function che(e17) {
  let { inputs: { x: t }, backend: n } = e17, a = n.makeOutput(t.shape, t.dtype);
  return n.typedArrayFromHeap(a).fill(1), a;
}
var dhe = { kernelName: $u, backendName: "wasm", kernelFunc: che };
function hhe(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { axis: r } = a;
  if (t.length === 1) return yv({ inputs: { input: t[0] }, backend: n, attrs: { dim: r } });
  let s = t[0].shape, i = t[0].dtype;
  t.forEach((p) => {
    w.assertShapesMatch(s, p.shape, "All tensors passed to stack must have matching shapes"), w.assert(i === p.dtype, () => "All tensors passed to stack must have matching dtypes");
  });
  let o = [], l = t.map((p) => {
    let d = yv({ inputs: { input: p }, backend: n, attrs: { dim: r } });
    return o.push(d), d;
  }), u = wF({ inputs: l, backend: n, attrs: { axis: r } });
  return o.forEach((p) => n.disposeData(p.dataId)), u;
}
var mhe = { kernelName: Du, backendName: "wasm", kernelFunc: hhe };
var c$;
function fhe(e17) {
  c$ = e17.wasm.cwrap(xo, null, ["number", "array", "number", "number", "array", "array", "number", "number"]);
}
function ghe(e17) {
  let { inputs: { x: t }, backend: n, attrs: { paddings: a, constantValue: r } } = e17, s = a.map((m, f) => m[0] + t.shape[f] + m[1]);
  if (w.sizeFromShape(t.shape) === 0) return LF({ backend: n, attrs: { shape: s, value: r, dtype: t.dtype } });
  let i = n.dataIdMap.get(t.dataId).id, o = n.makeOutput(s, t.dtype), l = n.dataIdMap.get(o.dataId).id, u = new Uint8Array(new Int32Array(t.shape).buffer), p = a.map((m) => m[0]), d = a.map((m) => m[1]), c = new Uint8Array(new Int32Array(p).buffer), h = new Uint8Array(new Int32Array(d).buffer);
  return c$(i, u, t.shape.length, Qe[t.dtype], c, h, r, l), o;
}
var d$ = { kernelName: xo, backendName: "wasm", kernelFunc: ghe, setupFunc: fhe };
var bhe = false;
var yhe = Ut(vo, bhe);
var h$;
function xhe(e17) {
  h$ = e17.wasm.cwrap(wo, null, ["number", "number", "number"]);
}
function vhe(e17) {
  let { inputs: t, backend: n } = e17, { x: a, alpha: r } = t, s = n.dataIdMap.get(a.dataId).id, i = n.dataIdMap.get(r.dataId).id, o = s, l = a, u = l;
  l.dtype !== "float32" && (u = Rs({ backend: n, inputs: { x: a }, attrs: { dtype: "float32" } }), o = n.dataIdMap.get(u.dataId).id);
  let p = n.makeOutput(a.shape, "float32"), d = n.dataIdMap.get(p.dataId).id;
  return h$(o, i, d), l.dtype !== "float32" && n.disposeData(u.dataId), p;
}
var whe = { kernelName: wo, backendName: "wasm", setupFunc: xhe, kernelFunc: vhe };
var m$;
function khe(e17) {
  m$ = e17.wasm.cwrap(ko, null, ["number", "number", "number", "number"]);
}
function Ihe(e17) {
  let { backend: t, inputs: n, attrs: a } = e17, { axis: r, keepDims: s } = a, { x: i } = n, o = t.dataIdMap.get(i.dataId).id, l = o, u = i, { transposed: p, axes: d, originalAxes: c, inputWasTransposed: h } = Ds(i, r, t), m = d;
  if (h) {
    let x = t.dataIdMap.get(p.dataId).id;
    x !== o && (u = p, l = x, m = T.getInnerMostAxes(m.length, u.shape.length));
  }
  T.assertAxesAreInnerMostDims("prod", m, u.shape.length);
  let [f, g] = T.computeOutAndReduceShapes(u.shape, m), b = w.sizeFromShape(g), y = t.makeOutput(f, u.dtype);
  if (w.sizeFromShape(u.shape) !== 0) {
    let x = t.dataIdMap.get(y.dataId).id;
    m$(l, b, Qe[y.dtype], x);
  }
  if (h && t.disposeData(p.dataId), s) {
    let x = T.expandShapeToKeepDim(y.shape, c);
    y.shape = x;
  }
  return y;
}
var She = { kernelName: ko, backendName: "wasm", setupFunc: khe, kernelFunc: Ihe };
var Nhe = (e17) => {
  let { backend: t, attrs: n } = e17, { start: a, stop: r, step: s, dtype: i } = n, o = B1(a, r, s, i), l = t.makeOutput([o.length], i);
  return t.typedArrayFromHeap(l).set(o), l;
};
var The = { kernelName: Uc, backendName: "wasm", kernelFunc: Nhe };
var Che = true;
var Ehe = Ut(Hi, Che);
var _he = Xe(Io);
var Ahe = Xe(So);
var Fhe = Xe(Co);
var f$;
function $he(e17) {
  f$ = e17.wasm.cwrap(To, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function Dhe(e17) {
  let { backend: t, inputs: n, attrs: a } = e17, { images: r } = n, { alignCorners: s, halfPixelCenters: i, size: o } = a, [l, u] = o, [p, d, c, h] = r.shape, m = [p, l, u, h], f = t.dataIdMap.get(r.dataId), g;
  f.dtype !== "float32" && (g = Rs({ backend: t, inputs: { x: r }, attrs: { dtype: "float32" } }), f = t.dataIdMap.get(g.dataId));
  let b = f.id, y = t.makeOutput(m, "float32");
  if (w.sizeFromShape(r.shape) === 0) return y;
  let x = t.dataIdMap.get(y.dataId).id;
  return f$(b, p, d, c, h, l, u, s ? 1 : 0, i ? 1 : 0, x), g != null && t.disposeData(g.dataId), y;
}
var Rhe = { kernelName: To, backendName: "wasm", setupFunc: $he, kernelFunc: Dhe };
var g$;
function Mhe(e17) {
  g$ = e17.wasm.cwrap(Ou, null, ["number", "number", "number", "array", "array", "boolean"]);
}
function Ohe(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { images: r, dy: s } = t, { alignCorners: i } = a, o = n.makeOutput(r.shape, "float32"), l = n.dataIdMap.get(r.dataId), u;
  return l.dtype !== "float32" && (u = Rs({ backend: n, inputs: { x: r }, attrs: { dtype: "float32" } }), l = n.dataIdMap.get(u.dataId)), g$(n.dataIdMap.get(r.dataId).id, n.dataIdMap.get(s.dataId).id, n.dataIdMap.get(o.dataId).id, new Uint8Array(new Int32Array(r.shape).buffer), new Uint8Array(new Int32Array(s.shape).buffer), i), u != null && n.disposeData(u.dataId), o;
}
var Phe = { kernelName: Ou, backendName: "wasm", setupFunc: Mhe, kernelFunc: Ohe };
var b$;
function Lhe(e17) {
  b$ = e17.wasm.cwrap(No, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function zhe(e17) {
  let { backend: t, inputs: n, attrs: a } = e17, { images: r } = n, { alignCorners: s, halfPixelCenters: i, size: o } = a, [l, u] = o, [p, d, c, h] = r.shape, m = [p, l, u, h], f = t.makeOutput(m, "float32");
  if (w.sizeFromShape(r.shape) === 0) return f;
  let g = t.dataIdMap.get(r.dataId), b;
  g.dtype !== "float32" && (b = Rs({ backend: t, inputs: { x: r }, attrs: { dtype: "float32" } }), g = t.dataIdMap.get(b.dataId));
  let y = g.id, x = t.dataIdMap.get(f.dataId).id;
  return b$(y, p, d, c, h, l, u, s ? 1 : 0, i ? 1 : 0, x), b != null && t.disposeData(b.dataId), f;
}
var Whe = { kernelName: No, backendName: "wasm", setupFunc: Lhe, kernelFunc: zhe };
var y$;
function Bhe(e17) {
  y$ = e17.wasm.cwrap(Mu, null, ["number", "number", "number", "array", "array", "boolean"]);
}
function Vhe(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { images: r, dy: s } = t, { alignCorners: i } = a, o = n.makeOutput(r.shape, "float32"), l = n.dataIdMap.get(r.dataId), u;
  return l.dtype !== "float32" && (u = Rs({ backend: n, inputs: { x: r }, attrs: { dtype: "float32" } }), l = n.dataIdMap.get(u.dataId)), y$(n.dataIdMap.get(r.dataId).id, n.dataIdMap.get(s.dataId).id, n.dataIdMap.get(o.dataId).id, new Uint8Array(new Int32Array(r.shape).buffer), new Uint8Array(new Int32Array(s.shape).buffer), i), u != null && n.disposeData(u.dataId), o;
}
var Uhe = { kernelName: Mu, backendName: "wasm", setupFunc: Bhe, kernelFunc: Vhe };
var x$;
function Ghe(e17) {
  x$ = e17.wasm.cwrap(Eo, null, ["number", "array", "number", "array", "number", "number"]);
}
function Hhe(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r } = t, { dims: s } = a, i = w.parseAxisParam(s, r.shape);
  if (r.shape.length === 0) return Gf({ inputs: { x: r }, backend: n });
  let o = n.makeOutput(r.shape, r.dtype), l = n.dataIdMap.get(r.dataId).id, u = n.dataIdMap.get(o.dataId).id, p = new Uint8Array(new Int32Array(i).buffer), d = new Uint8Array(new Int32Array(r.shape).buffer);
  x$(l, p, i.length, d, r.shape.length, u);
  let c = zn({ inputs: { x: o }, attrs: { shape: r.shape }, backend: n });
  return n.disposeData(o.dataId), c;
}
var jhe = { kernelName: Eo, backendName: "wasm", kernelFunc: Hhe, setupFunc: Ghe };
var v$;
function qhe(e17) {
  v$ = e17.wasm.cwrap(Zu, null, ["number", "number", "number", "number", "number", "number", "number", "number", "array", "number", "number"]);
}
function Khe(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { image: r } = t, { radians: s, fillValue: i, center: o } = a, l = n.makeOutput(r.shape, r.dtype), u = n.dataIdMap.get(r.dataId).id, p = n.dataIdMap.get(l.dataId).id, [d, c, h, m] = r.shape, [f, g] = T.getImageCenter(o, c, h), b = i === 0, y = 255, x = typeof i == "number" ? [i, i, i, b ? 0 : y] : [...i, y], v = new Uint8Array(new Int32Array(x).buffer);
  return v$(u, d, c, h, m, s, f, g, v, x.length, p), l;
}
var Xhe = { kernelName: Zu, backendName: "wasm", kernelFunc: Khe, setupFunc: qhe };
var Yhe = Xe(_o);
var Zhe = Xe(Ao);
var w$;
function Jhe(e17) {
  w$ = e17.wasm.cwrap(Pu, null, ["number", "number", "number", "number", "number", "number", "array", "number", "number"]);
}
function Qhe(e17) {
  let { backend: t, inputs: n, attrs: a } = e17, { indices: r, updates: s } = n, { shape: i } = a, o = t.makeOutput(i, s.dtype);
  if (w.sizeFromShape(i) === 0) return o;
  let { sliceRank: l, numUpdates: u, sliceSize: p, strides: d, outputSize: c } = sf.calculateShapes(s, r, i), h = t.dataIdMap.get(r.dataId).id, m = t.dataIdMap.get(s.dataId).id, f = new Uint8Array(new Int32Array(d).buffer), g = t.dataIdMap.get(o.dataId).id;
  return w$(h, m, Qe[s.dtype], l, u, p, f, c, g), o;
}
var eme = { kernelName: Pu, backendName: "wasm", setupFunc: Jhe, kernelFunc: Qhe };
var k$;
function tme(e17) {
  k$ = e17.wasm.cwrap(zu, null, ["number", "number", "number", "number", "number", "number", "bool", "number"]);
}
function nme(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { sortedSequence: r, values: s } = t, { side: i } = a;
  if (r.dtype !== s.dtype) throw new Error(`SearchSorted error: sorted_sequence must have the same dtype as values. Got ${r.dtype} and ${s.dtype}`);
  let o = n.makeOutput(s.shape, "int32");
  function l(u) {
    return n.dataIdMap.get(u.dataId).id;
  }
  return k$(l(r), l(s), r.shape[0], r.shape[1], s.shape[1], Qe[r.dtype], i === "left", l(o)), o;
}
var ame = { kernelName: zu, backendName: "wasm", setupFunc: tme, kernelFunc: nme };
var I$;
function rme(e17) {
  I$ = e17.wasm.cwrap("SelectV2", null, ["number", "number", "number", "number", "number"]);
}
function sme(e17) {
  let { inputs: t, backend: n } = e17, { condition: a, t: r, e: s } = t, i = n.dataIdMap.get(a.dataId).id, o = n.dataIdMap.get(r.dataId).id, l = n.dataIdMap.get(s.dataId).id, u = n.makeOutput(r.shape, r.dtype), p = n.dataIdMap.get(u.dataId).id, d = a.shape.length, c = r.shape.length, h = d === 0 || d > 1 || c === 1 ? 1 : w.sizeFromShape(r.shape.slice(1));
  return I$(i, o, l, h, p), u;
}
var ime = { kernelName: Wu, backendName: "wasm", kernelFunc: sme, setupFunc: rme };
var ome = Xe(Fo);
var S$;
function lme(e17) {
  S$ = e17.wasm.cwrap(Mo, null, ["number", "number"]);
}
function ume(e17) {
  let { backend: t, inputs: { x: n } } = e17, a = t.dataIdMap.get(n.dataId).id, r = t.makeOutput(n.shape, n.dtype), s = t.dataIdMap.get(r.dataId).id;
  return w.sizeFromShape(r.shape) === 0 || S$(a, s), r;
}
var pme = { kernelName: "Sigmoid", backendName: "wasm", setupFunc: lme, kernelFunc: ume };
var cme = Xe(Ro);
var dme = Xe($o);
var hme = Xe(Do);
var mme = Xe(Oo);
function fme(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r } = t, { blockShape: s, paddings: i } = a, o = w.sizeFromShape(s), l = [[0, 0]];
  l.push(...i);
  for (let g = 1 + s.length; g < r.shape.length; ++g) l.push([0, 0]);
  let u = d$.kernelFunc({ inputs: { x: r }, backend: n, attrs: { paddings: l, constantValue: 0 } }), p = T.getReshaped(u.shape, s, o, false), d = T.getPermuted(p.length, s.length, false), c = T.getReshapedPermuted(u.shape, s, o, false), h = zn({ inputs: { x: u }, backend: n, attrs: { shape: p } }), m = ys({ inputs: { x: h }, backend: n, attrs: { perm: d } }), f = zn({ inputs: { x: m }, backend: n, attrs: { shape: c } });
  return n.disposeData(u.dataId), n.disposeData(h.dataId), n.disposeData(m.dataId), f;
}
var gme = { kernelName: Vu, backendName: "wasm", kernelFunc: fme };
var N$;
function bme(e17) {
  N$ = e17.wasm.cwrap("SparseFillEmptyRows", "number", ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function yme(e17) {
  let { backend: t, inputs: n } = e17, { indices: a, values: r, denseShape: s, defaultValue: i } = n, o = a.shape[0], l = a.shape[1], u = t.readSync(s.dataId)[0], p = [o + u, l], d = t.dataIdMap.get(a.dataId).id, c = t.dataIdMap.get(r.dataId).id, h = t.dataIdMap.get(i.dataId).id, m = t.makeOutput(p, a.dtype), f = t.dataIdMap.get(m.dataId).id, g = t.makeOutput(p.slice(0, 1), r.dtype), b = t.dataIdMap.get(g.dataId).id, y = t.makeOutput([u], "bool"), x = t.dataIdMap.get(y.dataId).id, v = t.makeOutput([o], a.dtype), I = t.dataIdMap.get(v.dataId).id, N = t.makeOutput([4], "int32"), C = t.dataIdMap.get(N.dataId).id, _ = N$(d, c, Qe[r.dtype], o, u, l, h, f, b, x, I, C), F = t.readSync(N.dataId), D;
  switch (F[0]) {
    case 1: {
      D = T.getSparseFillEmptyRowsIndicesDenseShapeMismatch(F[1]);
      break;
    }
    case 2: {
      D = T.getSparseFillEmptyRowsNegativeIndexErrorMessage(F[1], F[2]);
      break;
    }
    case 3:
      D = T.getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(F[1], F[2], F[3]);
      break;
    default:
      D = "";
  }
  if (t.disposeData(N.dataId), D) throw t.disposeData(m.dataId), t.disposeData(g.dataId), t.disposeData(y.dataId), t.disposeData(v.dataId), new Error(D);
  let $ = m, S = g;
  return _ !== p[0] && ($ = Ii({ inputs: { x: m }, attrs: { begin: 0, size: [_, l] }, backend: t }), S = Ii({ inputs: { x: g }, attrs: { begin: 0, size: _ }, backend: t }), t.disposeData(m.dataId), t.disposeData(g.dataId)), [$, S, y, v];
}
var xme = { kernelName: Gc, backendName: "wasm", setupFunc: bme, kernelFunc: yme };
var T$;
function vme(e17) {
  T$ = e17.wasm.cwrap(Gu, null, ["number", "number", "number", "number", "number", "number", "number"]);
}
function wme(e17) {
  let { backend: t, inputs: n } = e17, { inputIndices: a, inputShape: r, newShape: s } = n;
  if (a.shape.length !== 2) throw new Error(`Input indices should be a matrix but received shape
        ${a.shape}`);
  if (r.shape.length !== 1) throw new Error(`Input shape should be a vector but received shape
        ${r.shape}`);
  if (s.shape.length !== 1) throw new Error(`Target shape should be a vector but received shape ${s.shape}`);
  let i = t.dataIdMap.get(a.dataId).id, o = t.dataIdMap.get(r.dataId).id, l = t.dataIdMap.get(s.dataId).id, u = a.shape[0], p = w.sizeFromShape(s.shape), d = t.makeOutput([u, p], a.dtype), c = t.dataIdMap.get(d.dataId).id, h = t.makeOutput([p], s.dtype), m = t.dataIdMap.get(h.dataId).id, f = t.makeOutput([3], "int32"), g = t.dataIdMap.get(f.dataId).id;
  T$(i, o, l, u, c, m, g);
  let b = t.readSync(f.dataId), y;
  switch (b[0]) {
    case 0: {
      y = T.getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(b[1], b[2]);
      break;
    }
    case 1: {
      y = T.getSparseReshapeNegativeOutputDimErrorMessage(b[1], b[2]);
      break;
    }
    case 2:
      y = T.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage();
      break;
    case 3: {
      let x = Array.from(t.readSync(r.dataId)), v = Array.from(t.readSync(h.dataId));
      y = T.getSparseReshapeInputOutputMultipleErrorMessage(x, v);
      break;
    }
    case 4: {
      let x = Array.from(t.readSync(r.dataId)), v = Array.from(t.readSync(h.dataId));
      y = T.getSparseReshapeInputOutputMismatchErrorMessage(x, v);
      break;
    }
    default:
      y = "";
  }
  if (t.disposeData(f.dataId), y) throw t.disposeData(d.dataId), t.disposeData(h.dataId), new Error(y);
  return [d, h];
}
var kme = { kernelName: Gu, backendName: "wasm", setupFunc: vme, kernelFunc: wme };
var C$;
function E$(e17) {
  C$ = e17.wasm.cwrap("SparseSegmentReduction", null, ["number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function _$(e17, t) {
  let { backend: n, inputs: a } = e17, { data: r, indices: s, segmentIds: i } = a, o = s.shape[0], l = n.readSync(i.dataId, o - 1, o)[0], u = o > 0 ? l + 1 : 0;
  if (u < 0) throw new Error(T.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());
  let p = r.shape.slice();
  p[0] = u;
  let d = n.dataIdMap.get(r.dataId).id, c = n.dataIdMap.get(s.dataId).id, h = n.dataIdMap.get(i.dataId).id, m = n.makeOutput(p, r.dtype), f = n.dataIdMap.get(m.dataId).id, g = n.makeOutput([4], "int32"), b = n.dataIdMap.get(g.dataId).id;
  C$(d, Qe[r.dtype], r.shape[0], c, h, f, b, t, 0);
  let y = n.readSync(g.dataId), x;
  switch (y[0]) {
    case 0: {
      x = T.getSparseSegmentReductionNegativeSegmentIdsErrorMessage();
      break;
    }
    case 1: {
      x = T.getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage();
      break;
    }
    case 2:
      x = T.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(y[1], y[2]);
      break;
    case 3:
      x = T.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(y[1], y[2], y[3]);
      break;
    default:
      x = "";
  }
  if (n.disposeData(g.dataId), x) throw n.disposeData(m.dataId), new Error(x);
  return m;
}
function Ime(e17) {
  return _$(e17, true);
}
var Sme = { kernelName: Hc, backendName: "wasm", setupFunc: E$, kernelFunc: Ime };
function Nme(e17) {
  return _$(e17, false);
}
var Tme = { kernelName: jc, backendName: "wasm", setupFunc: E$, kernelFunc: Nme };
var A$;
function Cme(e17) {
  A$ = e17.wasm.cwrap(Hu, null, ["number", "number", "number", "number", "number", "number", "number", "number", "array", "number", "number"]);
}
function Eme(e17) {
  let { backend: t, inputs: n, attrs: a } = e17, { sparseIndices: r, sparseValues: s, defaultValue: i } = n, { outputShape: o } = a, l = t.makeOutput(o, i.dtype);
  if (w.sizeFromShape(o) === 0) return l;
  let { sliceRank: u, numUpdates: p, sliceSize: d, strides: c, outputSize: h } = T.calculateShapes(s, r, o), m = t.dataIdMap.get(r.dataId).id, f = t.dataIdMap.get(s.dataId).id, g = t.dataIdMap.get(i.dataId).id, b = new Uint8Array(new Int32Array(c).buffer), y = t.dataIdMap.get(l.dataId).id;
  return A$(m, f, s.shape.length, g, Qe[i.dtype], u, p, d, b, h, y), l;
}
var _me = { kernelName: Hu, backendName: "wasm", setupFunc: Cme, kernelFunc: Eme };
function Ame(e17) {
  let { inputs: t, attrs: n, backend: a } = e17, { x: r } = t, { numOrSizeSplits: s, axis: i } = n, o = w.parseAxisParam(i, r.shape)[0], l = T.prepareSplitSize(r, s, o), u = new Array(r.shape.length).fill(0), p = r.shape.slice();
  return l.map((d) => {
    let c = [...p];
    c[o] = d;
    let h = Ii({ inputs: { x: r }, attrs: { begin: u, size: c }, backend: a });
    return u[o] += d, h;
  });
}
var Fme = { kernelName: Uu, backendName: "wasm", kernelFunc: Ame };
var $me = Xe(Po);
var Dme = Xe(qc);
var Rme = true;
var Mme = Ut(Wo, Rme);
var F$;
function Ome(e17) {
  F$ = e17.wasm.cwrap(Is, null, ["number", "number", "number", "number"]);
}
function Pme(e17) {
  let { backend: t, inputs: n, attrs: a } = e17, { alpha: r } = a, { x: s } = n, i = t.dataIdMap.get(s.dataId).id, o = t.makeOutput(s.shape, s.dtype), l = t.dataIdMap.get(o.dataId).id;
  return F$(i, r, Qe[s.dtype], l), o;
}
var Lme = { kernelName: Is, backendName: "wasm", setupFunc: Ome, kernelFunc: Pme };
var $$;
function zme(e17) {
  $$ = e17.wasm.cwrap(ju, null, ["number", "array", "number", "array", "array", "array", "array", "array", "number", "number"]);
}
function Wme(e17) {
  let { backend: t, inputs: n, attrs: a } = e17, { x: r } = n, { begin: s, end: i, strides: o, beginMask: l, endMask: u, ellipsisMask: p, newAxisMask: d, shrinkAxisMask: c } = a, { finalShapeSparse: h, finalShape: m, isIdentity: f, sliceDim0: g, isSimpleSlice: b, begin: y, end: x, strides: v } = Kt.sliceInfo(r.shape, s, i, o, l, u, p, d, c), I;
  if (f) I = zn({ inputs: { x: r }, backend: t, attrs: { shape: m } });
  else if (g || b) {
    w.assert(r.shape.length >= 1, () => `Input must have rank at least 1, got: ${r.shape.length}`);
    let N = Kt.computeOutShape(y, x, v), C = Ii({ inputs: { x: r }, backend: t, attrs: { begin: y, size: N } });
    I = zn({ inputs: { x: C }, backend: t, attrs: { shape: m } }), t.disposeData(C.dataId);
  } else {
    let N = t.makeOutput(h, "float32"), C = t.dataIdMap.get(r.dataId).id, _ = new Uint8Array(new Int32Array(w.computeStrides(r.shape)).buffer), F = new Uint8Array(new Int32Array(y).buffer), D = new Uint8Array(new Int32Array(x).buffer), $ = new Uint8Array(new Int32Array(v).buffer), S = new Uint8Array(new Int32Array(h).buffer), M = new Uint8Array(new Int32Array(w.computeStrides(h)).buffer), B = t.dataIdMap.get(N.dataId).id;
    $$(C, _, r.shape.length, F, D, $, S, M, h.length, B), I = zn({ inputs: { x: N }, backend: t, attrs: { shape: m } }), t.disposeData(N.dataId);
  }
  return I;
}
var Bme = { kernelName: ju, backendName: "wasm", setupFunc: zme, kernelFunc: Wme };
function Vme(e17) {
  let { backend: t, inputs: n, attrs: a } = e17, { data: r, dataSplits: s } = n, { separator: i, nGramWidths: o, leftPad: l, rightPad: u, padWidth: p, preserveShortSequences: d } = a, c = t.readSync(r.dataId), h = t.readSync(s.dataId), [m, f] = U1(c, h, i, o, l, u, p, d), g = t.makeOutput([m.length], "string"), b = t.dataIdMap.get(g.dataId);
  b.stringBytes = m;
  let y = t.makeOutput(s.shape, "int32");
  return t.typedArrayFromHeap(y).set(f), [g, y];
}
var Ume = { kernelName: Xc, backendName: "wasm", kernelFunc: Vme };
function Gme(e17) {
  let { backend: t, inputs: n, attrs: a } = e17, { input: r, delimiter: s } = n, { skipEmpty: i } = a, o = t.readSync(r.dataId), l = t.readSync(s.dataId), [u, p, d] = G1(o, l[0], i), c = p.length, h = t.makeOutput([c, 2], "int32");
  t.typedArrayFromHeap(h).set(u);
  let m = t.makeOutput([c], "string"), f = t.dataIdMap.get(m.dataId);
  f.stringBytes = p;
  let g = t.makeOutput([2], "int32");
  return t.typedArrayFromHeap(g).set(d), [h, m, g];
}
var Hme = { kernelName: Yc, backendName: "wasm", kernelFunc: Gme };
function jme(e17) {
  let { backend: t, inputs: n, attrs: a } = e17, { input: r } = n, { numBuckets: s } = a, i = t.readSync(r.dataId), o = H1(i, s), l = t.makeOutput(r.shape, "int32");
  return t.typedArrayFromHeap(l).set(o), l;
}
var qme = { kernelName: Zc, backendName: "wasm", kernelFunc: jme };
var Kme = true;
var Xme = Ut(Bo, Kme);
var D$;
function Yme(e17) {
  D$ = e17.wasm.cwrap(Lo, null, ["number", "number", "number", "number"]);
}
function Zme(e17) {
  let { backend: t, inputs: n, attrs: a } = e17, { axis: r, keepDims: s } = a, { x: i } = n, o = t.dataIdMap.get(i.dataId).id, l = o, u = i, { transposed: p, axes: d, originalAxes: c, inputWasTransposed: h } = Ds(i, r, t), m = d;
  if (h) {
    let x = t.dataIdMap.get(p.dataId).id;
    x !== o && (u = p, l = x, m = T.getInnerMostAxes(m.length, u.shape.length));
  }
  T.assertAxesAreInnerMostDims("sum", m, u.shape.length);
  let [f, g] = T.computeOutAndReduceShapes(u.shape, m), b = w.sizeFromShape(g), y = t.makeOutput(f, u.dtype);
  if (w.sizeFromShape(u.shape) !== 0) {
    let x = t.dataIdMap.get(y.dataId).id;
    D$(l, b, Qe[y.dtype], x);
  }
  if (h && t.disposeData(p.dataId), s) {
    let x = T.expandShapeToKeepDim(y.shape, c);
    y.shape = x;
  }
  return y;
}
var Jme = { kernelName: Lo, backendName: "wasm", setupFunc: Yme, kernelFunc: Zme };
var Qme = Xe(Vo);
var efe = Xe(Uo);
var R$;
function tfe(e17) {
  R$ = e17.wasm.cwrap(Lu, null, ["number", "number", "number", "number", "number", "number", "array", "number", "number", "number"]);
}
function nfe(e17) {
  let { backend: t, inputs: n, attrs: a } = e17, { tensor: r, indices: s, updates: i } = n, {} = a, o = t.makeOutput(r.shape, r.dtype);
  if (w.sizeFromShape(r.shape) === 0) return o;
  let { sliceRank: l, numUpdates: u, sliceSize: p, strides: d, outputSize: c } = sf.calculateShapes(i, s, r.shape), h = t.dataIdMap.get(s.dataId).id, m = t.dataIdMap.get(i.dataId).id, f = t.dataIdMap.get(r.dataId).id, g = new Uint8Array(new Int32Array(d).buffer), b = t.dataIdMap.get(o.dataId).id;
  return R$(h, m, Qe[i.dtype], l, u, p, g, c, b, f), o;
}
var afe = { kernelName: Lu, backendName: "wasm", setupFunc: tfe, kernelFunc: nfe };
var M$;
function rfe(e17) {
  M$ = e17.wasm.cwrap(ks, null, ["number", "array", "number", "array", "number", "number"]);
}
function sfe(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { x: r } = t, s = n.dataIdMap.get(r.dataId).id, { reps: i } = a, o = new Array(r.shape.length);
  for (let c = 0; c < o.length; c++) o[c] = r.shape[c] * i[c];
  let l = new Uint8Array(new Int32Array(r.shape).buffer), u = new Uint8Array(new Int32Array(o).buffer), p = n.makeOutput(o, r.dtype), d = n.dataIdMap.get(p.dataId).id;
  return M$(s, l, r.shape.length, u, o.length, Qe[p.dtype], d), p;
}
var ife = { kernelName: ks, backendName: "wasm", setupFunc: rfe, kernelFunc: sfe };
var O$;
function ofe(e17) {
  O$ = e17.wasm.cwrap(qu, null, ["number", "array", "number", "number", "number", "bool", "number", "number"]);
}
var lfe = ({ inputs: e17, backend: t, attrs: n }) => {
  let { x: a } = e17, { k: r, sorted: s } = n, i = t.dataIdMap.get(a.dataId).id, o = new Uint8Array(new Int32Array(a.shape).buffer), l = a.shape.slice();
  l[l.length - 1] = r;
  let u = t.makeOutput(l, a.dtype), p = t.dataIdMap.get(u.dataId).id, d = t.makeOutput(l, "int32"), c = t.dataIdMap.get(d.dataId).id;
  return O$(i, o, a.shape.length, Qe[a.dtype], r, s, p, c), [u, d];
};
var ufe = { kernelName: qu, backendName: "wasm", setupFunc: ofe, kernelFunc: lfe };
var P$;
function pfe(e17) {
  P$ = e17.wasm.cwrap(Ku, null, ["number", "number", "bool", "number", "number", "number", "number", "number", "number", "array", "number", "array", "number", "number", "number", "number", "number"]);
}
function cfe(e17) {
  let { backend: t, inputs: n, attrs: a } = e17, { image: r, transforms: s } = n, { interpolation: i, fillMode: o, fillValue: l, outputShape: u } = a, [p, d, c, h] = r.shape, [m, f] = u != null ? u : [d, c], g = [p, m, f, h], b = new Uint8Array(new Int32Array(w.computeStrides(r.shape)).buffer), y = new Uint8Array(new Int32Array(w.computeStrides(g)).buffer), x = t.makeOutput(g, r.dtype), v = t.dataIdMap.get(x.dataId).id, I = t.dataIdMap.get(r.dataId).id, N = t.dataIdMap.get(s.dataId).id, C = i === "nearest" ? 1 : 2, _;
  switch (o) {
    case "constant":
      _ = 1;
      break;
    case "reflect":
      _ = 2;
      break;
    case "wrap":
      _ = 3;
      break;
    case "nearest":
      _ = 4;
      break;
    default:
      _ = 1;
      break;
  }
  return P$(I, N, s.shape[0] > 1, p, m, f, h, c, d, b, r.shape.length - 1, y, g.length - 1, C, _, l, v), x;
}
var dfe = { kernelName: Ku, backendName: "wasm", setupFunc: pfe, kernelFunc: cfe };
function hfe(e17) {
  let { inputs: t, attrs: n, backend: a } = e17, { axis: r } = n, { x: s } = t, { outputValues: i, outputShape: o, indices: l } = q1(a.readSync(s.dataId), r, s.shape, s.dtype);
  return [a.makeOutput(o, s.dtype, void 0, i), a.makeOutput([l.length], "int32", void 0, l)];
}
var mfe = { kernelName: Jc, backendName: "wasm", kernelFunc: hfe };
function ffe(e17) {
  let { inputs: t, backend: n, attrs: a } = e17, { value: r } = t, { axis: s } = a;
  s < 0 && (s += r.shape.length);
  let i = r.shape[s], o = r.shape.length, l = new Array(o - 1), u = 0;
  for (let h = 0; h < o; h++) h !== s && (l[u++] = r.shape[h]);
  let p = new Array(i), d = new Array(o).fill(0), c = r.shape.slice();
  c[s] = 1;
  for (let h = 0; h < p.length; h++) d[s] = h, p[h] = Ii({ inputs: { x: r }, attrs: { begin: d, size: c }, backend: n });
  return p.map(({ dataId: h, dtype: m }) => ({ dataId: h, dtype: m, shape: l }));
}
var gfe = { kernelName: Xu, backendName: "wasm", kernelFunc: ffe };
function bfe(e17) {
  let { inputs: { x: t }, backend: n } = e17, a = n.makeOutput(t.shape, t.dtype);
  return n.typedArrayFromHeap(a).fill(0), a;
}
var yfe = { kernelName: Yu, backendName: "wasm", kernelFunc: bfe };
var xfe = [eue, tue, nue, aue, sue, lue, gue, xue, vue, wue, kue, Iue, Sue, Nue, Tue, _ue, Lue, $ue, Mue, Vue, Kue, Zue, Que, tpe, npe, ape, ipe, ope, ppe, hpe, gpe, xpe, kpe, Ipe, Spe, Cpe, Ape, Dpe, Ope, zpe, Vpe, Hpe, Kpe, Zpe, ece, tce, rce, ice, oce, lce, uce, pce, cce, mce, fce, bce, vce, Ice, Tce, _ce, $ce, Rce, Oce, uue, Pce, Lce, zce, Vce, Gce, jce, Xce, Zce, Yce, Qce, ede, nde, rde, ode, pde, hde, fde, yde, wde, Sde, Cde, Ade, Dde, Ode, Lde, Bde, jde, qde, Xde, Yde, Qde, nhe, she, ohe, phe, dhe, mhe, d$, yhe, whe, She, The, Ehe, _he, Ahe, Fhe, zue, Rhe, Phe, Whe, Uhe, jhe, Xhe, Yhe, Zhe, eme, ame, ime, ome, pme, cme, dme, hme, jue, Ude, mme, gme, xme, kme, Sme, Tme, _me, Fme, $me, Dme, Mme, Lme, Bme, Ume, Hme, qme, Xme, Jme, Qme, efe, afe, ife, ufe, dfe, hue, mfe, gfe, yfe];
for (let e17 of xfe) ed(e17);
var vv = G();
vv.registerFlag("WASM_HAS_SIMD_SUPPORT", async () => {
  try {
    return WebAssembly.validate(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 9, 1, 7, 0, 65, 0, 253, 15, 26, 11]));
  } catch (e17) {
    return false;
  }
});
vv.registerFlag("WASM_HAS_MULTITHREAD_SUPPORT", async () => {
  if (vv.get("IS_NODE")) return false;
  try {
    return new MessageChannel().port1.postMessage(new SharedArrayBuffer(1)), WebAssembly.validate(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 5, 4, 1, 3, 1, 1, 10, 11, 1, 9, 0, 65, 0, 254, 16, 2, 0, 26, 11]));
  } catch (e17) {
    return false;
  }
});
var TS = xs(VR());
var vfe = xs(UR());
var CS = xs(GR());
var ES = TS.default || TS;
var wfe = CS.default || CS;
var L$ = class extends Fc {
  constructor(e17) {
    super(), this.wasm = e17, this.dataIdNextNumber = 1, this.wasm.tfjs.initWithThreadsCount(z$), wv = this.wasm.tfjs.getThreadsCount(), this.dataIdMap = new ym(this, Ta());
  }
  write(e17, t, n) {
    let a = { id: this.dataIdNextNumber++ };
    return this.move(a, e17, t, n, 1), a;
  }
  numDataIds() {
    return this.dataIdMap.numDataIds();
  }
  async time(e17) {
    let t = w.now();
    return e17(), { kernelMs: w.now() - t };
  }
  move(e17, t, n, a, r) {
    let s = this.dataIdNextNumber++;
    if (a === "string") {
      let u = t;
      this.dataIdMap.set(e17, { id: s, stringBytes: u, shape: n, dtype: a, memoryOffset: null, refCount: r });
      return;
    }
    let i = w.sizeFromShape(n), o = i * w.bytesPerElement(a), l = this.wasm._malloc(o) >>> 0;
    this.dataIdMap.set(e17, { id: s, memoryOffset: l, shape: n, dtype: a, refCount: r }), this.wasm.tfjs.registerTensor(s, i, l), t != null && this.wasm.HEAPU8.set(new Uint8Array(t.buffer, t.byteOffset, o), l);
  }
  async read(e17) {
    return this.readSync(e17);
  }
  readSync(e17, t, n) {
    let { memoryOffset: a, dtype: r, shape: s, stringBytes: i } = this.dataIdMap.get(e17);
    if (r === "string") return (t == null || t === 0) && (n == null || n >= i.length) ? i : i.slice(t, n);
    t = t || 0, n = n || w.sizeFromShape(s);
    let o = w.bytesPerElement(r), l = this.wasm.HEAPU8.slice(a + t * o, a + n * o);
    return Sfe(l.buffer, r);
  }
  disposeData(e17, t = false) {
    if (this.dataIdMap.has(e17)) {
      let n = this.dataIdMap.get(e17);
      if (n.refCount--, !t && n.refCount > 0) return false;
      this.wasm._free(n.memoryOffset), this.wasm.tfjs.disposeData(n.id), this.dataIdMap.delete(e17);
    }
    return true;
  }
  refCount(e17) {
    return this.dataIdMap.has(e17) ? this.dataIdMap.get(e17).refCount : 0;
  }
  incRef(e17) {
    let t = this.dataIdMap.get(e17);
    t != null && t.refCount++;
  }
  floatPrecision() {
    return 32;
  }
  getMemoryOffset(e17) {
    return this.dataIdMap.get(e17).memoryOffset;
  }
  dispose() {
    this.wasm.tfjs.dispose(), "PThread" in this.wasm && this.wasm.PThread.terminateAllThreads(), this.wasm = null;
  }
  memory() {
    return { unreliable: false };
  }
  makeOutput(e17, t, n, a) {
    let r;
    if (n == null) r = this.write(a != null ? a : null, e17, t);
    else {
      let s = this.dataIdNextNumber++;
      r = { id: s }, this.dataIdMap.set(r, { id: s, memoryOffset: n, shape: e17, dtype: t, refCount: 1 });
      let i = w.sizeFromShape(e17);
      this.wasm.tfjs.registerTensor(s, i, n);
    }
    return { dataId: r, shape: e17, dtype: t };
  }
  typedArrayFromHeap({ shape: e17, dtype: t, dataId: n }) {
    let a = this.wasm.HEAPU8.buffer, { memoryOffset: r } = this.dataIdMap.get(n), s = w.sizeFromShape(e17);
    switch (t) {
      case "float32":
        return new Float32Array(a, r, s);
      case "int32":
        return new Int32Array(a, r, s);
      case "bool":
        return new Uint8Array(a, r, s);
      default:
        throw new Error(`Unknown dtype ${t}`);
    }
  }
};
function kfe(e17) {
  return (t, n) => (w.fetch(e17, { credentials: "same-origin" }).then((a) => {
    a.ok || t.env.a(`failed to load wasm binary file at '${e17}'`), a.arrayBuffer().then((r) => {
      WebAssembly.instantiate(r, t).then((s) => {
        n(s.instance, s.module);
      });
    });
  }), {});
}
function _S(e17, t, n) {
  if (gm != null) return gm;
  let a = "tfjs-backend-wasm.wasm";
  return e17 && t ? a = "tfjs-backend-wasm-threaded-simd.wasm" : e17 && (a = "tfjs-backend-wasm-simd.wasm"), cc != null && cc[a] != null ? cc[a] : n + a;
}
async function Ife() {
  let [e17, t] = await Promise.all([G().getAsync("WASM_HAS_SIMD_SUPPORT"), G().getAsync("WASM_HAS_MULTITHREAD_SUPPORT")]);
  return new Promise((n, a) => {
    let r = {};
    r.locateFile = (o, l) => {
      if (o.endsWith(".worker.js")) {
        let u = vfe.wasmWorkerContents.replace(/\n/g, "\\n"), p = new Blob([u], { type: "application/javascript" });
        return URL.createObjectURL(p);
      }
      return o.endsWith(".wasm") ? _S(e17, t, lc != null ? lc : l) : l + o;
    }, mk && (r.instantiateWasm = kfe(_S(e17, t, lc != null ? lc : "")));
    let s = false;
    r.onAbort = () => {
      s || dc || (dc = true, a({ message: "Make sure the server can serve the `.wasm` file relative to the bundled js file. For more details see https://github.com/tensorflow/tfjs/blob/master/tfjs-backend-wasm/README.md#using-bundlers" }));
    };
    let i;
    t && e17 && gm == null ? (r.mainScriptUrlOrBlob = new Blob(["var WasmBackendModuleThreadedSimd = " + ES.toString()], { type: "text/javascript" }), i = ES(r)) : i = wfe(r), i.then((o) => {
      s = true, dc = false;
      let l = null;
      o.tfjs = { init: o.cwrap("init", null, []), initWithThreadsCount: o.cwrap("init_with_threads_count", null, ["number"]), getThreadsCount: o.cwrap("get_threads_count", "number", []), registerTensor: o.cwrap("register_tensor", null, ["number", "number", "number"]), disposeData: o.cwrap("dispose_data", l, ["number"]), dispose: o.cwrap("dispose", l, []) }, n({ wasm: o });
    }).catch(a);
  });
}
function Sfe(e17, t) {
  switch (t) {
    case "float32":
      return new Float32Array(e17);
    case "int32":
      return new Int32Array(e17);
    case "bool":
      return new Uint8Array(e17);
    default:
      throw new Error(`Unknown dtype ${t}`);
  }
}
var Nfe = ["tfjs-backend-wasm.wasm", "tfjs-backend-wasm-simd.wasm", "tfjs-backend-wasm-threaded-simd.wasm"];
var gm = null;
var lc = null;
var cc = {};
var dc = false;
var mk = false;
function Tfe(e17, t = false) {
  if ($v("setWasmPath has been deprecated in favor of setWasmPaths and will be removed in a future release."), dc) throw new Error("The WASM backend was already initialized. Make sure you call `setWasmPath()` before you call `tf.setBackend()` or `tf.ready()`");
  gm = e17, mk = t;
}
function Cfe(e17, t = false) {
  if (dc) throw new Error("The WASM backend was already initialized. Make sure you call `setWasmPaths()` before you call `tf.setBackend()` or `tf.ready()`");
  if (typeof e17 == "string") lc = e17;
  else {
    cc = e17;
    let n = Nfe.filter((a) => cc[a] == null);
    if (n.length > 0) throw new Error(`There were no entries found for the following binaries: ${n.join(",")}. Please either call setWasmPaths with a map providing a path for each binary, or with a string indicating the directory where all the binaries can be found.`);
  }
  mk = t;
}
var z$ = -1;
var wv = -1;
function Efe(e17) {
  z$ = e17;
}
function _fe() {
  if (wv === -1) throw new Error("WASM backend not initialized.");
  return wv;
}
var Afe = "4.22.0";
var Ffe = 2;
Om("wasm", async () => {
  let { wasm: e17 } = await Ife();
  return new L$(e17);
}, Ffe);
var AS = "4.22.0";
var $fe = "4.22.0";
var Dfe = "4.22.0";
var Rfe = "4.22.0";
var Mfe = "4.22.0";
var Ofe = { tfjs: AS, "tfjs-core": AS, "tfjs-converter": $fe, "tfjs-backend-cpu": Dfe, "tfjs-backend-webgl": Rfe, "tfjs-backend-wasm": Mfe };
var iD = {};
ax(iD, { AnchorPosition: () => Ik, DrawBox: () => Od, DrawBoxOptions: () => Xf, DrawFaceLandmarks: () => og, DrawFaceLandmarksOptions: () => ig, DrawTextField: () => sl, DrawTextFieldOptions: () => Ip, drawContour: () => Pr, drawDetections: () => Ufe, drawFaceExpressions: () => Gfe, drawFaceLandmarks: () => jfe });
function Pr(e17, t, n = false) {
  if (e17.beginPath(), t.slice(1).forEach(({ x: a, y: r }, s) => {
    let i = t[s];
    e17.moveTo(i.x, i.y), e17.lineTo(a, r);
  }), n) {
    let a = t[t.length - 1], r = t[0];
    if (!a || !r) return;
    e17.moveTo(a.x, a.y), e17.lineTo(r.x, r.y);
  }
  e17.stroke();
}
var W$ = {};
ax(W$, { computeReshapedDimensions: () => bk, getCenterPoint: () => al, isDimensions: () => jf, isEven: () => Hf, isFloat: () => gk, isTensor: () => tl, isTensor1D: () => Pfe, isTensor2D: () => fk, isTensor3D: () => Lr, isTensor4D: () => wa, isValidNumber: () => Xa, isValidProbablitiy: () => gp, range: () => gr, round: () => nl });
var aa = class e {
  constructor(t, n) {
    if (!Xa(t) || !Xa(n)) throw new Error(`Dimensions.constructor - expected width and height to be valid numbers, instead have ${JSON.stringify({ width: t, height: n })}`);
    this._width = t, this._height = n;
  }
  get width() {
    return this._width;
  }
  get height() {
    return this._height;
  }
  reverse() {
    return new e(1 / this.width, 1 / this.height);
  }
};
function tl(e17, t) {
  return e17 instanceof Ce && e17.shape.length === t;
}
function Pfe(e17) {
  return tl(e17, 1);
}
function fk(e17) {
  return tl(e17, 2);
}
function Lr(e17) {
  return tl(e17, 3);
}
function wa(e17) {
  return tl(e17, 4);
}
function gk(e17) {
  return e17 % 1 !== 0;
}
function Hf(e17) {
  return e17 % 2 === 0;
}
function nl(e17, t = 2) {
  let n = 10 ** t;
  return Math.floor(e17 * n) / n;
}
function jf(e17) {
  return e17 && e17.width && e17.height;
}
function bk({ width: e17, height: t }, n) {
  let a = n / Math.max(t, e17);
  return new aa(Math.round(e17 * a), Math.round(t * a));
}
function al(e17) {
  return e17.reduce((t, n) => t.add(n), new He(0, 0)).div(new He(e17.length, e17.length));
}
function gr(e17, t, n) {
  return Array(e17).fill(0).map((a, r) => t + r * n);
}
function Xa(e17) {
  return !!e17 && e17 !== 1 / 0 && e17 !== -1 / 0 && !Number.isNaN(e17) || e17 === 0;
}
function gp(e17) {
  return Xa(e17) && e17 >= 0 && e17 <= 1;
}
var He = class e10 {
  constructor(t, n) {
    this._x = t, this._y = n;
  }
  get x() {
    return this._x;
  }
  get y() {
    return this._y;
  }
  add(t) {
    return new e10(this.x + t.x, this.y + t.y);
  }
  sub(t) {
    return new e10(this.x - t.x, this.y - t.y);
  }
  mul(t) {
    return new e10(this.x * t.x, this.y * t.y);
  }
  div(t) {
    return new e10(this.x / t.x, this.y / t.y);
  }
  abs() {
    return new e10(Math.abs(this.x), Math.abs(this.y));
  }
  magnitude() {
    return Math.sqrt(this.x ** 2 + this.y ** 2);
  }
  floor() {
    return new e10(Math.floor(this.x), Math.floor(this.y));
  }
};
var mn = class e11 {
  static isRect(t) {
    return !!t && [t.x, t.y, t.width, t.height].every(Xa);
  }
  static assertIsValidBox(t, n, a = false) {
    if (!e11.isRect(t)) throw new Error(`${n} - invalid box: ${JSON.stringify(t)}, expected object with properties x, y, width, height`);
    if (!a && (t.width < 0 || t.height < 0)) throw new Error(`${n} - width (${t.width}) and height (${t.height}) must be positive numbers`);
  }
  constructor(t, n = true) {
    let a = t || {}, r = [a.left, a.top, a.right, a.bottom].every(Xa), s = [a.x, a.y, a.width, a.height].every(Xa);
    if (!s && !r) throw new Error(`Box.constructor - expected box to be IBoundingBox | IRect, instead have ${JSON.stringify(a)}`);
    let [i, o, l, u] = s ? [a.x, a.y, a.width, a.height] : [a.left, a.top, a.right - a.left, a.bottom - a.top];
    e11.assertIsValidBox({ x: i, y: o, width: l, height: u }, "Box.constructor", n), this._x = i, this._y = o, this._width = l, this._height = u;
  }
  get x() {
    return this._x;
  }
  get y() {
    return this._y;
  }
  get width() {
    return this._width;
  }
  get height() {
    return this._height;
  }
  get left() {
    return this.x;
  }
  get top() {
    return this.y;
  }
  get right() {
    return this.x + this.width;
  }
  get bottom() {
    return this.y + this.height;
  }
  get area() {
    return this.width * this.height;
  }
  get topLeft() {
    return new He(this.left, this.top);
  }
  get topRight() {
    return new He(this.right, this.top);
  }
  get bottomLeft() {
    return new He(this.left, this.bottom);
  }
  get bottomRight() {
    return new He(this.right, this.bottom);
  }
  round() {
    let [t, n, a, r] = [this.x, this.y, this.width, this.height].map((s) => Math.round(s));
    return new e11({ x: t, y: n, width: a, height: r });
  }
  floor() {
    let [t, n, a, r] = [this.x, this.y, this.width, this.height].map((s) => Math.floor(s));
    return new e11({ x: t, y: n, width: a, height: r });
  }
  toSquare() {
    let { x: t, y: n, width: a, height: r } = this, s = Math.abs(a - r);
    return a < r && (t -= s / 2, a += s), r < a && (n -= s / 2, r += s), new e11({ x: t, y: n, width: a, height: r });
  }
  rescale(t) {
    let n = jf(t) ? t.width : t, a = jf(t) ? t.height : t;
    return new e11({ x: this.x * n, y: this.y * a, width: this.width * n, height: this.height * a });
  }
  pad(t, n) {
    let [a, r, s, i] = [this.x - t / 2, this.y - n / 2, this.width + t, this.height + n];
    return new e11({ x: a, y: r, width: s, height: i });
  }
  clipAtImageBorders(t, n) {
    let { x: a, y: r, right: s, bottom: i } = this, o = Math.max(a, 0), l = Math.max(r, 0), u = s - o, p = i - l, d = Math.min(u, t - o), c = Math.min(p, n - l);
    return new e11({ x: o, y: l, width: d, height: c }).floor();
  }
  shift(t, n) {
    let { width: a, height: r } = this, s = this.x + t, i = this.y + n;
    return new e11({ x: s, y: i, width: a, height: r });
  }
  padAtBorders(t, n) {
    let a = this.width + 1, r = this.height + 1, s = 1, i = 1, o = a, l = r, u = this.left, p = this.top, d = this.right, c = this.bottom;
    return d > n && (o = -d + n + a, d = n), c > t && (l = -c + t + r, c = t), u < 1 && (l = 2 - u, u = 1), p < 1 && (l = 2 - p, p = 1), { dy: i, edy: l, dx: s, edx: o, y: p, ey: c, x: u, ex: d, w: a, h: r };
  }
  calibrate(t) {
    return new e11({ left: this.left + t.left * this.width, top: this.top + t.top * this.height, right: this.right + t.right * this.width, bottom: this.bottom + t.bottom * this.height }).toSquare().round();
  }
};
var bp = class extends mn {
  constructor(t, n, a, r, s = false) {
    super({ left: t, top: n, right: a, bottom: r }, s);
  }
};
var yp = class e12 {
  constructor(t, n, a, r, s) {
    this._imageDims = new aa(s.width, s.height), this._score = t, this._classScore = n, this._className = a, this._box = new mn(r).rescale(this._imageDims);
  }
  get score() {
    return this._score;
  }
  get classScore() {
    return this._classScore;
  }
  get className() {
    return this._className;
  }
  get box() {
    return this._box;
  }
  get imageDims() {
    return this._imageDims;
  }
  get imageWidth() {
    return this.imageDims.width;
  }
  get imageHeight() {
    return this.imageDims.height;
  }
  get relativeBox() {
    return new mn(this._box).rescale(this.imageDims.reverse());
  }
  forSize(t, n) {
    return new e12(this.score, this.classScore, this.className, this.relativeBox, { width: t, height: n });
  }
};
var Ft = class e13 extends yp {
  constructor(t, n, a) {
    super(t, t, "", n, a);
  }
  forSize(t, n) {
    let { score: a, relativeBox: r, imageDims: s } = super.forSize(t, n);
    return new e13(a, r, s);
  }
};
function B$(e17, t, n = true) {
  let a = Math.max(0, Math.min(e17.right, t.right) - Math.max(e17.left, t.left)), r = Math.max(0, Math.min(e17.bottom, t.bottom) - Math.max(e17.top, t.top)), s = a * r;
  return n ? s / (e17.area + t.area - s) : s / Math.min(e17.area, t.area);
}
function V$(e17) {
  let t = e17.map((o) => o.x), n = e17.map((o) => o.y), a = t.reduce((o, l) => l < o ? l : o, 1 / 0), r = n.reduce((o, l) => l < o ? l : o, 1 / 0), s = t.reduce((o, l) => o < l ? l : o, 0), i = n.reduce((o, l) => o < l ? l : o, 0);
  return new bp(a, r, s, i);
}
function U$(e17, t, n, a = true) {
  let r = t.map((i, o) => ({ score: i, boxIndex: o })).sort((i, o) => i.score - o.score).map((i) => i.boxIndex), s = [];
  for (; r.length > 0; ) {
    let i = r.pop();
    s.push(i);
    let o = r, l = [];
    for (let u = 0; u < o.length; u++) {
      let p = o[u], d = e17[i], c = e17[p];
      l.push(B$(d, c, a));
    }
    r = r.filter((u, p) => l[p] <= n);
  }
  return s;
}
function br(e17, t) {
  return O(() => {
    let [n, a, r] = t, s = yn([...e17.shape.slice(0, 3), 1], n, "float32"), i = yn([...e17.shape.slice(0, 3), 1], a, "float32"), o = yn([...e17.shape.slice(0, 3), 1], r, "float32"), l = et([s, i, o], 3);
    return pe(e17, l);
  });
}
function G$(e17, t = false) {
  return O(() => {
    let [n, a] = e17.shape.slice(1);
    if (n === a) return e17;
    let r = Math.abs(n - a), s = Math.round(r * (t ? 0.5 : 1)), i = n > a ? 2 : 1, o = (c) => {
      let h = e17.shape.slice();
      return h[i] = c, yn(h, 0, "float32");
    }, l = o(s), u = r - l.shape[i], d = [t && u ? o(u) : null, e17, l].filter((c) => !!c).map((c) => re(c, "float32"));
    return et(d, i);
  });
}
function y0e(e17) {
  let t = e17.slice();
  for (let n = t.length - 1; n > 0; n--) {
    let a = Math.floor(Math.random() * (n + 1)), r = t[n];
    t[n] = t[a], t[a] = r;
  }
  return t;
}
function qf(e17) {
  return 1 / (1 + Math.exp(-e17));
}
function v0e(e17) {
  return Math.log(e17 / (1 - e17));
}
var xp = class extends mn {
  constructor(t, n, a, r, s = false) {
    super({ x: t, y: n, width: a, height: r }, s);
  }
};
var Lfe = 0.5;
var zfe = 0.43;
var Wfe = 0.45;
var ka = class {
  constructor(t, n, a = new He(0, 0)) {
    let { width: r, height: s } = n;
    this._imgDims = new aa(r, s), this._shift = a, this._positions = t.map((i) => i.mul(new He(r, s)).add(a));
  }
  get shift() {
    return new He(this._shift.x, this._shift.y);
  }
  get imageWidth() {
    return this._imgDims.width;
  }
  get imageHeight() {
    return this._imgDims.height;
  }
  get positions() {
    return this._positions;
  }
  get relativePositions() {
    return this._positions.map((t) => t.sub(this._shift).div(new He(this.imageWidth, this.imageHeight)));
  }
  forSize(t, n) {
    return new this.constructor(this.relativePositions, { width: t, height: n });
  }
  shiftBy(t, n) {
    return new this.constructor(this.relativePositions, this._imgDims, new He(t, n));
  }
  shiftByPoint(t) {
    return this.shiftBy(t.x, t.y);
  }
  align(t, n = {}) {
    if (t) {
      let s = t instanceof Ft ? t.box.floor() : new mn(t);
      return this.shiftBy(s.x, s.y).align(null, n);
    }
    let { useDlibAlignment: a, minBoxPadding: r } = { useDlibAlignment: false, minBoxPadding: 0.2, ...n };
    return a ? this.alignDlib() : this.alignMinBbox(r);
  }
  alignDlib() {
    let t = this.getRefPointsForAlignment(), [n, a, r] = t, s = (d) => r.sub(d).magnitude(), i = (s(n) + s(a)) / 2, o = Math.floor(i / Wfe), l = al(t), u = Math.floor(Math.max(0, l.x - Lfe * o)), p = Math.floor(Math.max(0, l.y - zfe * o));
    return new xp(u, p, Math.min(o, this.imageWidth + u), Math.min(o, this.imageHeight + p));
  }
  alignMinBbox(t) {
    let n = V$(this.positions);
    return n.pad(n.width * t, n.height * t);
  }
  getRefPointsForAlignment() {
    throw new Error("getRefPointsForAlignment not implemented by base class");
  }
};
var H$ = class extends ka {
  getRefPointsForAlignment() {
    let t = this.positions;
    return [t[0], t[1], al([t[3], t[4]])];
  }
};
var vp = class extends ka {
  getJawOutline() {
    return this.positions.slice(0, 17);
  }
  getLeftEyeBrow() {
    return this.positions.slice(17, 22);
  }
  getRightEyeBrow() {
    return this.positions.slice(22, 27);
  }
  getNose() {
    return this.positions.slice(27, 36);
  }
  getLeftEye() {
    return this.positions.slice(36, 42);
  }
  getRightEye() {
    return this.positions.slice(42, 48);
  }
  getMouth() {
    return this.positions.slice(48, 68);
  }
  getRefPointsForAlignment() {
    return [this.getLeftEye(), this.getRightEye(), this.getMouth()].map(al);
  }
};
var Dd = class {
  constructor(t, n) {
    this._label = t, this._distance = n;
  }
  get label() {
    return this._label;
  }
  get distance() {
    return this._distance;
  }
  toString(t = true) {
    return `${this.label}${t ? ` (${nl(this.distance)})` : ""}`;
  }
};
var Rd = class extends mn {
  static assertIsValidLabeledBox(t, n) {
    if (mn.assertIsValidBox(t, n), !Xa(t.label)) throw new Error(`${n} - expected property label (${t.label}) to be a number`);
  }
  constructor(t, n) {
    super(t), this._label = n;
  }
  get label() {
    return this._label;
  }
};
var rl = class e14 {
  constructor(t, n) {
    if (typeof t != "string") throw new Error("LabeledFaceDescriptors - constructor expected label to be a string");
    if (!Array.isArray(n) || n.some((a) => !(a instanceof Float32Array))) throw new Error("LabeledFaceDescriptors - constructor expected descriptors to be an array of Float32Array");
    this._label = t, this._descriptors = n;
  }
  get label() {
    return this._label;
  }
  get descriptors() {
    return this._descriptors;
  }
  toJSON() {
    return { label: this.label, descriptors: this.descriptors.map((t) => Array.from(t)) };
  }
  static fromJSON(t) {
    let n = t.descriptors.map((a) => new Float32Array(a));
    return new e14(t.label, n);
  }
};
var j$ = class extends Rd {
  static assertIsValidPredictedBox(t, n) {
    if (Rd.assertIsValidLabeledBox(t, n), !gp(t.score) || !gp(t.classScore)) throw new Error(`${n} - expected properties score (${t.score}) and (${t.classScore}) to be a number between [0, 1]`);
  }
  constructor(t, n, a, r) {
    super(t, n), this._score = a, this._classScore = r;
  }
  get score() {
    return this._score;
  }
  get classScore() {
    return this._classScore;
  }
};
function zr(e17) {
  return e17.detection instanceof Ft;
}
function wp(e17, t) {
  return { ...e17, ...{ detection: t } };
}
function yk() {
  let e17 = window.fetch;
  if (!e17) throw new Error("fetch - missing fetch implementation for browser environment");
  return { Canvas: HTMLCanvasElement, CanvasRenderingContext2D, Image: HTMLImageElement, ImageData, Video: HTMLVideoElement, createCanvasElement: () => document.createElement("canvas"), createImageElement: () => document.createElement("img"), createVideoElement: () => document.createElement("video"), fetch: e17, readFile: () => {
    throw new Error("readFile - filesystem not available for browser environment");
  } };
}
function Md() {
  return typeof global == "object" && typeof process != "undefined" && process.versions != null && process.versions.node != null;
}
function Kf(e17) {
  let t = "";
  if (!e17 && Md()) try {
    e17 = wR("fs");
  } catch (a) {
    t = a.toString();
  }
  return { readFile: e17 ? (a) => new Promise((r, s) => {
    e17.readFile(a, (i, o) => i ? s(i) : r(o));
  }) : () => {
    throw new Error(`readFile - failed to require fs in nodejs environment with error: ${t}`);
  } };
}
function xk() {
  let e17 = global.Canvas || global.HTMLCanvasElement, t = global.Image || global.HTMLImageElement, n = global.Video || global.HTMLVideoElement, a = () => {
    if (e17) return new e17();
    throw new Error("createCanvasElement - missing Canvas implementation for nodejs environment");
  }, r = () => {
    if (t) return new t();
    throw new Error("createImageElement - missing Image implementation for nodejs environment");
  }, s = () => {
    if (n) return new n();
    throw new Error("createVideoElement - missing Video implementation for nodejs environment");
  }, i = global.fetch, o = Kf();
  return { Canvas: e17 || class {
  }, CanvasRenderingContext2D: global.CanvasRenderingContext2D || class {
  }, Image: t || class {
  }, ImageData: global.ImageData || class {
  }, Video: global.HTMLVideoElement || class {
  }, createCanvasElement: a, createImageElement: r, createVideoElement: s, fetch: i, ...o };
}
function vk() {
  return typeof window == "object" && typeof document != "undefined" && typeof HTMLImageElement != "undefined" && typeof HTMLCanvasElement != "undefined" && typeof HTMLVideoElement != "undefined" && typeof ImageData != "undefined" && typeof CanvasRenderingContext2D != "undefined";
}
var ln;
function Bfe() {
  if (!ln) throw new Error("getEnv - environment is not defined, check isNodejs() and isBrowser()");
  return ln;
}
function wk(e17) {
  ln = e17;
}
function kk() {
  return vk() ? wk(yk()) : Md() ? wk(xk()) : null;
}
function Vfe(e17) {
  if (ln || kk(), !ln) throw new Error("monkeyPatch - environment is not defined, check isNodejs() and isBrowser()");
  let { Canvas: t = ln.Canvas, Image: n = ln.Image } = e17;
  ln.Canvas = t, ln.Image = n, ln.createCanvasElement = e17.createCanvasElement || (() => new t()), ln.createImageElement = e17.createImageElement || (() => new n()), ln.ImageData = e17.ImageData || ln.ImageData, ln.Video = e17.Video || ln.Video, ln.fetch = e17.fetch || ln.fetch, ln.readFile = e17.readFile || ln.readFile;
}
var at = { getEnv: Bfe, setEnv: wk, initialize: kk, createBrowserEnv: yk, createFileSystem: Kf, createNodejsEnv: xk, monkeyPatch: Vfe, isBrowser: vk, isNodejs: Md };
kk();
function kp(e17) {
  return !at.isNodejs() && typeof e17 == "string" ? document.getElementById(e17) : e17;
}
function ra(e17) {
  let { Canvas: t, CanvasRenderingContext2D: n } = at.getEnv();
  if (e17 instanceof n) return e17;
  let a = kp(e17);
  if (!(a instanceof t)) throw new Error("resolveContext2d - expected canvas to be of instance of Canvas");
  let r = a.getContext("2d", { willReadFrequently: true });
  if (!r) throw new Error("resolveContext2d - canvas 2d context is null");
  return r;
}
var Ik = ((r) => (r.TOP_LEFT = "TOP_LEFT", r.TOP_RIGHT = "TOP_RIGHT", r.BOTTOM_LEFT = "BOTTOM_LEFT", r.BOTTOM_RIGHT = "BOTTOM_RIGHT", r))(Ik || {});
var Ip = class {
  constructor(t = {}) {
    let { anchorPosition: n, backgroundColor: a, fontColor: r, fontSize: s, fontStyle: i, padding: o } = t;
    this.anchorPosition = n || "TOP_LEFT", this.backgroundColor = a || "rgba(0, 0, 0, 0.5)", this.fontColor = r || "rgba(255, 255, 255, 1)", this.fontSize = s || 14, this.fontStyle = i || "Georgia", this.padding = o || 4;
  }
};
var sl = class e15 {
  constructor(t, n, a = {}) {
    this.text = typeof t == "string" ? [t] : t instanceof e15 ? t.text : t, this.anchor = n, this.options = new Ip(a);
  }
  measureWidth(t) {
    let { padding: n } = this.options;
    return this.text.map((a) => t.measureText(a).width).reduce((a, r) => a < r ? r : a, 0) + 2 * n;
  }
  measureHeight() {
    let { fontSize: t, padding: n } = this.options;
    return this.text.length * t + 2 * n;
  }
  getUpperLeft(t, n) {
    let { anchorPosition: a } = this.options, r = a === "BOTTOM_RIGHT" || a === "TOP_RIGHT", s = a === "BOTTOM_LEFT" || a === "BOTTOM_RIGHT", i = this.measureWidth(t), o = this.measureHeight(), l = r ? this.anchor.x - i : this.anchor.x, u = s ? this.anchor.y - o : this.anchor.y;
    if (n) {
      let { width: p, height: d } = n, c = Math.max(Math.min(l, p - i), 0), h = Math.max(Math.min(u, d - o), 0);
      return { x: c, y: h };
    }
    return { x: l, y: u };
  }
  draw(t) {
    let n = kp(t), a = ra(n), { backgroundColor: r, fontColor: s, fontSize: i, fontStyle: o, padding: l } = this.options;
    a.font = `${i}px ${o}`;
    let u = this.measureWidth(a), p = this.measureHeight();
    a.fillStyle = r;
    let d = this.getUpperLeft(a, n);
    a.fillRect(d.x, d.y, u, p), a.fillStyle = s, this.text.forEach((c, h) => {
      let m = l + d.x, f = l + d.y + (h + 1) * i;
      a.fillText(c, m, f);
    });
  }
};
var Xf = class {
  constructor(t = {}) {
    let { boxColor: n, lineWidth: a, label: r, drawLabelOptions: s } = t;
    this.boxColor = n || "rgba(0, 0, 255, 1)", this.lineWidth = a || 2, this.label = r;
    let i = { anchorPosition: "BOTTOM_LEFT", backgroundColor: this.boxColor };
    this.drawLabelOptions = new Ip({ ...i, ...s });
  }
};
var Od = class {
  constructor(t, n = {}) {
    this.box = new mn(t), this.options = new Xf(n);
  }
  draw(t) {
    let n = ra(t), { boxColor: a, lineWidth: r } = this.options, { x: s, y: i, width: o, height: l } = this.box;
    n.strokeStyle = a, n.lineWidth = r, n.strokeRect(s, i, o, l);
    let { label: u } = this.options;
    u && new sl([u], { x: s - r / 2, y: i }, this.options.drawLabelOptions).draw(t);
  }
};
function Ufe(e17, t) {
  (Array.isArray(t) ? t : [t]).forEach((a) => {
    let r = a instanceof Ft ? a.score : zr(a) ? a.detection.score : void 0, s = a instanceof Ft ? a.box : zr(a) ? a.detection.box : new mn(a), i = r ? `${nl(r)}` : void 0;
    new Od(s, { label: i }).draw(e17);
  });
}
function Yf(e17) {
  let { Image: t, Video: n } = at.getEnv();
  return e17 instanceof t && e17.complete || e17 instanceof n && e17.readyState >= 3;
}
function q$(e17) {
  return new Promise((t, n) => {
    if (e17 instanceof at.getEnv().Canvas || Yf(e17)) {
      t(null);
      return;
    }
    function a(s) {
      s.currentTarget && (s.currentTarget.removeEventListener("load", r), s.currentTarget.removeEventListener("error", a), n(s));
    }
    function r(s) {
      s.currentTarget && (s.currentTarget.removeEventListener("load", r), s.currentTarget.removeEventListener("error", a), t(s));
    }
    e17.addEventListener("load", r), e17.addEventListener("error", a);
  });
}
function K$(e17) {
  return new Promise((t, n) => {
    e17 instanceof Blob || n(new Error("bufferToImage - expected buf to be of type: Blob"));
    let a = new FileReader();
    a.onload = () => {
      typeof a.result != "string" && n(new Error("bufferToImage - expected reader.result to be a string, in onload"));
      let r = at.getEnv().createImageElement();
      r.onload = () => t(r), r.onerror = n, r.src = a.result;
    }, a.onerror = n, a.readAsDataURL(e17);
  });
}
function Sp(e17) {
  let { Image: t, Video: n } = at.getEnv();
  return e17 instanceof t ? new aa(e17.naturalWidth, e17.naturalHeight) : e17 instanceof n ? new aa(e17.videoWidth, e17.videoHeight) : new aa(e17.width, e17.height);
}
function Np({ width: e17, height: t }) {
  let { createCanvasElement: n } = at.getEnv(), a = n();
  return a.width = e17, a.height = t, a;
}
function Zf(e17, t) {
  let { ImageData: n } = at.getEnv();
  if (!(e17 instanceof n) && !Yf(e17)) throw new Error("createCanvasFromMedia - media has not finished loading yet");
  let { width: a, height: r } = t || Sp(e17), s = Np({ width: a, height: r });
  return e17 instanceof n ? ra(s).putImageData(e17, 0, 0) : ra(s).drawImage(e17, 0, 0, a, r), s;
}
async function X$(e17, t) {
  let n = t || at.getEnv().createCanvasElement(), [a, r, s] = e17.shape.slice(wa(e17) ? 1 : 0), i = O(() => e17.as3D(a, r, s).toInt());
  return await qo.toPixels(i, n), i.dispose(), n;
}
function Sk(e17) {
  let { Image: t, Canvas: n, Video: a } = at.getEnv();
  return e17 instanceof t || e17 instanceof n || e17 instanceof a;
}
function Y$(e17, t, n = false) {
  let { Image: a, Canvas: r } = at.getEnv();
  if (!(e17 instanceof a || e17 instanceof r)) throw new Error("imageToSquare - expected arg0 to be HTMLImageElement | HTMLCanvasElement");
  if (t <= 0) return Np({ width: 1, height: 1 });
  let s = Sp(e17), i = t / Math.max(s.height, s.width), o = i * s.width, l = i * s.height, u = Np({ width: t, height: t }), p = e17 instanceof r ? e17 : Zf(e17), d = Math.abs(o - l) / 2, c = n && o < l ? d : 0, h = n && l < o ? d : 0;
  return p.width > 0 && p.height > 0 && ra(u).drawImage(p, c, h, o, l), u;
}
var Wr = class {
  constructor(t, n = false) {
    this._imageTensors = [];
    this._canvases = [];
    this._treatAsBatchInput = false;
    this._inputDimensions = [];
    this._inputSize = 0;
    if (!Array.isArray(t)) throw new Error(`NetInput.constructor - expected inputs to be an Array of TResolvedNetInput or to be instanceof tf.Tensor4D, instead have ${t}`);
    this._treatAsBatchInput = n, this._batchSize = t.length, t.forEach((a, r) => {
      if (Lr(a)) {
        this._imageTensors[r] = a, this._inputDimensions[r] = a.shape;
        return;
      }
      if (wa(a)) {
        let i = a.shape[0];
        if (i !== 1) throw new Error(`NetInput - tf.Tensor4D with batchSize ${i} passed, but not supported in input array`);
        this._imageTensors[r] = a, this._inputDimensions[r] = a.shape.slice(1);
        return;
      }
      let s = a instanceof at.getEnv().Canvas ? a : Zf(a);
      this._canvases[r] = s, this._inputDimensions[r] = [s.height, s.width, 3];
    });
  }
  get imageTensors() {
    return this._imageTensors;
  }
  get canvases() {
    return this._canvases;
  }
  get isBatchInput() {
    return this.batchSize > 1 || this._treatAsBatchInput;
  }
  get batchSize() {
    return this._batchSize;
  }
  get inputDimensions() {
    return this._inputDimensions;
  }
  get inputSize() {
    return this._inputSize;
  }
  get reshapedInputDimensions() {
    return gr(this.batchSize, 0, 1).map((t, n) => this.getReshapedInputDimensions(n));
  }
  getInput(t) {
    return this.canvases[t] || this.imageTensors[t];
  }
  getInputDimensions(t) {
    return this._inputDimensions[t];
  }
  getInputHeight(t) {
    return this._inputDimensions[t][0];
  }
  getInputWidth(t) {
    return this._inputDimensions[t][1];
  }
  getReshapedInputDimensions(t) {
    if (typeof this.inputSize != "number") throw new Error("getReshapedInputDimensions - inputSize not set, toBatchTensor has not been called yet");
    let n = this.getInputWidth(t), a = this.getInputHeight(t);
    return bk({ width: n, height: a }, this.inputSize);
  }
  toBatchTensor(t, n = true) {
    return this._inputSize = t, O(() => {
      let a = gr(this.batchSize, 0, 1).map((s) => {
        let i = this.getInput(s);
        if (i instanceof Ce) {
          let o = wa(i) ? i : Gt(i);
          return o = G$(o, n), (o.shape[1] !== t || o.shape[2] !== t) && (o = Zn.resizeBilinear(o, [t, t], false, false)), o.as3D(t, t, 3);
        }
        if (i instanceof at.getEnv().Canvas) return qo.fromPixels(Y$(i, t, n));
        throw new Error(`toBatchTensor - at batchIdx ${s}, expected input to be instanceof tf.Tensor or instanceof HTMLCanvasElement, instead have ${i}`);
      });
      return At(a.map((s) => re(s, "float32"))).as4D(this.batchSize, t, t, 3);
    });
  }
};
async function vt(e17) {
  if (e17 instanceof Wr) return e17;
  let t = Array.isArray(e17) ? e17 : [e17];
  if (!t.length) throw new Error("toNetInput - empty array passed as input");
  let n = (r) => Array.isArray(e17) ? ` at input index ${r}:` : "", a = t.map(kp);
  return a.forEach((r, s) => {
    if (!Sk(r) && !Lr(r) && !wa(r)) throw typeof t[s] == "string" ? new Error(`toNetInput -${n(s)} string passed, but could not resolve HTMLElement for element id ${t[s]}`) : new Error(`toNetInput -${n(s)} expected media to be of type HTMLImageElement | HTMLVideoElement | HTMLCanvasElement | tf.Tensor3D, or to be an element id`);
    if (wa(r)) {
      let i = r.shape[0];
      if (i !== 1) throw new Error(`toNetInput -${n(s)} tf.Tensor4D with batchSize ${i} passed, but not supported in input array`);
    }
  }), await Promise.all(a.map((r) => Sk(r) && q$(r))), new Wr(a, Array.isArray(e17));
}
async function Pd(e17, t) {
  let { Canvas: n } = at.getEnv(), a = e17;
  if (!(e17 instanceof n)) {
    let i = await vt(e17);
    if (i.batchSize > 1) throw new Error("extractFaces - batchSize > 1 not supported");
    let o = i.getInput(0);
    a = o instanceof n ? o : await X$(o);
  }
  let r = ra(a);
  return t.map((i) => i instanceof Ft ? i.forSize(a.width, a.height).box.floor() : i).map((i) => i.clipAtImageBorders(a.width, a.height)).map(({ x: i, y: o, width: l, height: u }) => {
    let p = Np({ width: l, height: u });
    return l > 0 && u > 0 && ra(p).putImageData(r.getImageData(i, o, l, u), 0, 0), p;
  });
}
async function Ld(e17, t) {
  if (!Lr(e17) && !wa(e17)) throw new Error("extractFaceTensors - expected image tensor to be 3D or 4D");
  if (wa(e17) && e17.shape[0] > 1) throw new Error("extractFaceTensors - batchSize > 1 not supported");
  return O(() => {
    let [n, a, r] = e17.shape.slice(wa(e17) ? 1 : 0);
    return t.map((o) => o instanceof Ft ? o.forSize(a, n).box : o).map((o) => o.clipAtImageBorders(a, n)).filter((o) => o.width > 0 && o.height > 0).map(({ x: o, y: l, width: u, height: p }) => Ho(e17.as3D(n, a, r), [l, o, 0], [p, u, r]));
  });
}
async function Ms(e17, t) {
  let { fetch: n } = at.getEnv(), a = await n(e17, t);
  if (!(a.status < 400)) throw new Error(`failed to fetch: (${a.status}) ${a.statusText}, from url: ${a.url}`);
  return a;
}
async function sIe(e17) {
  let t = await Ms(e17), n = await t.blob();
  if (!n.type.startsWith("image/")) throw new Error(`fetchImage - expected blob type to be of type image/*, instead have: ${n.type}, for url: ${t.url}`);
  return K$(n);
}
async function Z$(e17) {
  return (await Ms(e17)).json();
}
async function pIe(e17) {
  return new Float32Array(await (await Ms(e17)).arrayBuffer());
}
function J$(e17) {
  return new Promise((t, n) => {
    e17 instanceof Blob || n(new Error("bufferToVideo - expected buf to be of type: Blob"));
    let a = at.getEnv().createVideoElement();
    a.oncanplay = () => t(a), a.onerror = n, a.playsInline = true, a.muted = true, a.src = URL.createObjectURL(e17), a.play();
  });
}
async function gIe(e17) {
  let t = await Ms(e17), n = await t.blob();
  if (!n.type.startsWith("video/")) throw new Error(`fetchVideo - expected blob type to be of type video/*, instead have: ${n.type}, for url: ${t.url}`);
  return J$(n);
}
function Jf(e17, t) {
  let n = `${t}-weights_manifest.json`;
  if (!e17) return { modelBaseUri: "", manifestUri: n };
  if (e17 === "/") return { modelBaseUri: "/", manifestUri: `/${n}` };
  let a = e17.startsWith("http://") ? "http://" : e17.startsWith("https://") ? "https://" : "";
  e17 = e17.replace(a, "");
  let r = e17.split("/").filter((o) => o), s = e17.endsWith(".json") ? r[r.length - 1] : n, i = a + (e17.endsWith(".json") ? r.slice(0, r.length - 1) : r).join("/");
  return i = e17.startsWith("/") ? `/${i}` : i, { modelBaseUri: i, manifestUri: i === "/" ? `/${s}` : `${i}/${s}` };
}
async function Q$(e17, t) {
  let { manifestUri: n, modelBaseUri: a } = Jf(e17, t), r = await Z$(n);
  return jt.loadWeights(r, a);
}
function IIe(e17, t, n = false) {
  let { width: a, height: r } = n ? Sp(t) : t;
  return e17.width = a, e17.height = r, { width: a, height: r };
}
var fn = class {
  constructor(t) {
    this._params = void 0;
    this._paramMappings = [];
    this._name = t;
  }
  get params() {
    return this._params;
  }
  get paramMappings() {
    return this._paramMappings;
  }
  get isLoaded() {
    return !!this.params;
  }
  getParamFromPath(t) {
    let { obj: n, objProp: a } = this.traversePropertyPath(t);
    return n[a];
  }
  reassignParamFromPath(t, n) {
    let { obj: a, objProp: r } = this.traversePropertyPath(t);
    a[r].dispose(), a[r] = n;
  }
  getParamList() {
    return this._paramMappings.map(({ paramPath: t }) => ({ path: t, tensor: this.getParamFromPath(t) }));
  }
  getTrainableParams() {
    return this.getParamList().filter((t) => t.tensor instanceof os);
  }
  getFrozenParams() {
    return this.getParamList().filter((t) => !(t.tensor instanceof os));
  }
  variable() {
    this.getFrozenParams().forEach(({ path: t, tensor: n }) => {
      this.reassignParamFromPath(t, n.variable());
    });
  }
  freeze() {
    this.getTrainableParams().forEach(({ path: t, tensor: n }) => {
      let a = bn(n.dataSync());
      n.dispose(), this.reassignParamFromPath(t, a);
    });
  }
  dispose(t = true) {
    this.getParamList().forEach((n) => {
      if (t && n.tensor.isDisposed) throw new Error(`param tensor has already been disposed for path ${n.path}`);
      n.tensor.dispose();
    }), this._params = void 0;
  }
  serializeParams() {
    return new Float32Array(this.getParamList().map(({ tensor: t }) => Array.from(t.dataSync())).reduce((t, n) => t.concat(n)));
  }
  async load(t) {
    if (t instanceof Float32Array) {
      this.extractWeights(t);
      return;
    }
    await this.loadFromUri(t);
  }
  async loadFromUri(t) {
    if (t && typeof t != "string") throw new Error(`${this._name}.loadFromUri - expected model uri`);
    let n = await Q$(t, this.getDefaultModelName());
    this.loadFromWeightMap(n);
  }
  async loadFromDisk(t) {
    if (t && typeof t != "string") throw new Error(`${this._name}.loadFromDisk - expected model file path`);
    let { readFile: n } = at.getEnv(), { manifestUri: a, modelBaseUri: r } = Jf(t, this.getDefaultModelName()), s = (u) => Promise.all(u.map((p) => n(p).then((d) => typeof d == "string" ? Buffer.from(d) : d.buffer))), i = jt.weightsLoaderFactory(s), o = JSON.parse((await n(a)).toString()), l = await i(o, r);
    this.loadFromWeightMap(l);
  }
  loadFromWeightMap(t) {
    let { paramMappings: n, params: a } = this.extractParamsFromWeightMap(t);
    this._paramMappings = n, this._params = a;
  }
  extractWeights(t) {
    let { paramMappings: n, params: a } = this.extractParams(t);
    this._paramMappings = n, this._params = a;
  }
  traversePropertyPath(t) {
    if (!this.params) throw new Error("traversePropertyPath - model has no loaded params");
    let n = t.split("/").reduce((s, i) => {
      if (!s.nextObj.hasOwnProperty(i)) throw new Error(`traversePropertyPath - object does not have property ${i}, for path ${t}`);
      return { obj: s.nextObj, objProp: i, nextObj: s.nextObj[i] };
    }, { nextObj: this.params }), { obj: a, objProp: r } = n;
    if (!a || !r || !(a[r] instanceof Ce)) throw new Error(`traversePropertyPath - parameter is not a tensor, for path ${t}`);
    return { obj: a, objProp: r };
  }
};
function Un(e17, t, n) {
  return O(() => {
    let a = _s(e17, t.depthwise_filter, t.pointwise_filter, n, "same");
    return a = X(a, t.bias), a;
  });
}
function Qf(e17, t, n = false) {
  return O(() => {
    let a = Ke(n ? X($t(e17, t.conv0.filters, [2, 2], "same"), t.conv0.bias) : Un(e17, t.conv0, [2, 2])), r = Un(a, t.conv1, [1, 1]), s = Ke(X(a, r)), i = Un(s, t.conv2, [1, 1]);
    return Ke(X(a, X(r, i)));
  });
}
function zd(e17, t, n = false, a = true) {
  return O(() => {
    let r = Ke(n ? X($t(e17, t.conv0.filters, a ? [2, 2] : [1, 1], "same"), t.conv0.bias) : Un(e17, t.conv0, a ? [2, 2] : [1, 1])), s = Un(r, t.conv1, [1, 1]), i = Ke(X(r, s)), o = Un(i, t.conv2, [1, 1]), l = Ke(X(r, X(s, o))), u = Un(l, t.conv3, [1, 1]);
    return Ke(X(r, X(s, X(o, u))));
  });
}
function il(e17, t, n = "same", a = false) {
  return O(() => {
    let r = X($t(e17, t.filters, [1, 1], n), t.bias);
    return a ? Ke(r) : r;
  });
}
function _n(e17, t) {
  Object.keys(e17).forEach((n) => {
    t.some((a) => a.originalPath === n) || e17[n].dispose();
  });
}
function Tp(e17, t) {
  return (n, a, r, s) => {
    let i = Fa(e17(n * a * r * r), [r, r, n, a]), o = je(e17(a));
    return t.push({ paramPath: `${s}/filters` }, { paramPath: `${s}/bias` }), { filters: i, bias: o };
  };
}
function eg(e17, t) {
  return (n, a, r) => {
    let s = Ea(e17(n * a), [n, a]), i = je(e17(a));
    return t.push({ paramPath: `${r}/weights` }, { paramPath: `${r}/bias` }), { weights: s, bias: i };
  };
}
var Wd = class {
  constructor(t, n, a) {
    this.depthwise_filter = t;
    this.pointwise_filter = n;
    this.bias = a;
  }
};
function Cp(e17, t) {
  return (n, a, r) => {
    let s = Fa(e17(9 * n), [3, 3, n, 1]), i = Fa(e17(n * a), [1, 1, n, a]), o = je(e17(a));
    return t.push({ paramPath: `${r}/depthwise_filter` }, { paramPath: `${r}/pointwise_filter` }, { paramPath: `${r}/bias` }), new Wd(s, i, o);
  };
}
function Ep(e17) {
  return (t) => {
    let n = e17(`${t}/depthwise_filter`, 4), a = e17(`${t}/pointwise_filter`, 4), r = e17(`${t}/bias`, 1);
    return new Wd(n, a, r);
  };
}
function sa(e17, t) {
  return (n, a, r) => {
    let s = e17[n];
    if (!tl(s, a)) throw new Error(`expected weightMap[${n}] to be a Tensor${a}D, instead have ${s}`);
    return t.push({ originalPath: n, paramPath: r || n }), s;
  };
}
function An(e17) {
  let t = e17;
  function n(r) {
    let s = t.slice(0, r);
    return t = t.slice(r), s;
  }
  function a() {
    return t;
  }
  return { extractWeights: n, getRemainingWeights: a };
}
function tg(e17, t) {
  let n = Tp(e17, t), a = Cp(e17, t);
  function r(i, o, l, u = false) {
    let p = u ? n(i, o, 3, `${l}/conv0`) : a(i, o, `${l}/conv0`), d = a(o, o, `${l}/conv1`), c = a(o, o, `${l}/conv2`);
    return { conv0: p, conv1: d, conv2: c };
  }
  function s(i, o, l, u = false) {
    let { conv0: p, conv1: d, conv2: c } = r(i, o, l, u), h = a(o, o, `${l}/conv3`);
    return { conv0: p, conv1: d, conv2: c, conv3: h };
  }
  return { extractDenseBlock3Params: r, extractDenseBlock4Params: s };
}
function eD(e17) {
  let t = [], { extractWeights: n, getRemainingWeights: a } = An(e17), { extractDenseBlock4Params: r } = tg(n, t), s = r(3, 32, "dense0", true), i = r(32, 64, "dense1"), o = r(64, 128, "dense2"), l = r(128, 256, "dense3");
  if (a().length !== 0) throw new Error(`weights remaing after extract: ${a().length}`);
  return { paramMappings: t, params: { dense0: s, dense1: i, dense2: o, dense3: l } };
}
function ng(e17) {
  return (t) => {
    let n = e17(`${t}/filters`, 4), a = e17(`${t}/bias`, 1);
    return { filters: n, bias: a };
  };
}
function ag(e17, t) {
  let n = sa(e17, t), a = ng(n), r = Ep(n);
  function s(o, l = false) {
    let u = l ? a(`${o}/conv0`) : r(`${o}/conv0`), p = r(`${o}/conv1`), d = r(`${o}/conv2`);
    return { conv0: u, conv1: p, conv2: d };
  }
  function i(o, l = false) {
    let u = l ? a(`${o}/conv0`) : r(`${o}/conv0`), p = r(`${o}/conv1`), d = r(`${o}/conv2`), c = r(`${o}/conv3`);
    return { conv0: u, conv1: p, conv2: d, conv3: c };
  }
  return { extractDenseBlock3Params: s, extractDenseBlock4Params: i };
}
function tD(e17) {
  let t = [], { extractDenseBlock4Params: n } = ag(e17, t), a = { dense0: n("dense0", true), dense1: n("dense1"), dense2: n("dense2"), dense3: n("dense3") };
  return _n(e17, t), { params: a, paramMappings: t };
}
var _p = class extends fn {
  constructor() {
    super("FaceFeatureExtractor");
  }
  forwardInput(t) {
    let { params: n } = this;
    if (!n) throw new Error("FaceFeatureExtractor - load model before inference");
    return O(() => {
      let a = re(t.toBatchTensor(112, true), "float32"), s = br(a, [122.782, 117.001, 104.298]).div(255), i = zd(s, n.dense0, true);
      return i = zd(i, n.dense1), i = zd(i, n.dense2), i = zd(i, n.dense3), i = ya(i, [7, 7], [2, 2], "valid"), i;
    });
  }
  async forward(t) {
    return this.forwardInput(await vt(t));
  }
  getDefaultModelName() {
    return "face_feature_extractor_model";
  }
  extractParamsFromWeightMap(t) {
    return tD(t);
  }
  extractParams(t) {
    return eD(t);
  }
};
function Bd(e17, t) {
  return O(() => X($e(e17, t.weights), t.bias));
}
function nD(e17, t, n) {
  let a = [], { extractWeights: r, getRemainingWeights: s } = An(e17), o = eg(r, a)(t, n, "fc");
  if (s().length !== 0) throw new Error(`weights remaing after extract: ${s().length}`);
  return { paramMappings: a, params: { fc: o } };
}
function aD(e17) {
  let t = [], n = sa(e17, t);
  function a(s) {
    let i = n(`${s}/weights`, 2), o = n(`${s}/bias`, 1);
    return { weights: i, bias: o };
  }
  let r = { fc: a("fc") };
  return _n(e17, t), { params: r, paramMappings: t };
}
function rg(e17) {
  let t = {}, n = {};
  return Object.keys(e17).forEach((a) => {
    let r = a.startsWith("fc") ? n : t;
    r[a] = e17[a];
  }), { featureExtractorMap: t, classifierMap: n };
}
var Ap = class extends fn {
  constructor(t, n) {
    super(t), this._faceFeatureExtractor = n;
  }
  get faceFeatureExtractor() {
    return this._faceFeatureExtractor;
  }
  runNet(t) {
    let { params: n } = this;
    if (!n) throw new Error(`${this._name} - load model before inference`);
    return O(() => {
      let a = t instanceof Wr ? this.faceFeatureExtractor.forwardInput(t) : t;
      return Bd(a.as2D(a.shape[0], -1), n.fc);
    });
  }
  dispose(t = true) {
    this.faceFeatureExtractor.dispose(t), super.dispose(t);
  }
  loadClassifierParams(t) {
    let { params: n, paramMappings: a } = this.extractClassifierParams(t);
    this._params = n, this._paramMappings = a;
  }
  extractClassifierParams(t) {
    return nD(t, this.getClassifierChannelsIn(), this.getClassifierChannelsOut());
  }
  extractParamsFromWeightMap(t) {
    let { featureExtractorMap: n, classifierMap: a } = rg(t);
    return this.faceFeatureExtractor.loadFromWeightMap(n), aD(a);
  }
  extractParams(t) {
    let n = this.getClassifierChannelsIn(), a = this.getClassifierChannelsOut(), r = a * n + a, s = t.slice(0, t.length - r), i = t.slice(t.length - r);
    return this.faceFeatureExtractor.extractWeights(s), this.extractClassifierParams(i);
  }
};
var rD = ["neutral", "happy", "sad", "angry", "fearful", "disgusted", "surprised"];
var Os = class {
  constructor(t) {
    this.neutral = 0;
    this.happy = 0;
    this.sad = 0;
    this.angry = 0;
    this.fearful = 0;
    this.disgusted = 0;
    this.surprised = 0;
    if (t.length !== 7) throw new Error(`FaceExpressions.constructor - expected probabilities.length to be 7, have: ${t.length}`);
    rD.forEach((n, a) => {
      this[n] = t[a];
    });
  }
  asSortedArray() {
    return rD.map((t) => ({ expression: t, probability: this[t] })).sort((t, n) => n.probability - t.probability);
  }
};
var sg = class extends Ap {
  constructor(t = new _p()) {
    super("FaceExpressionNet", t);
  }
  forwardInput(t) {
    return O(() => qa(this.runNet(t)));
  }
  async forward(t) {
    return this.forwardInput(await vt(t));
  }
  async predictExpressions(t) {
    let n = await vt(t), a = await this.forwardInput(n), r = await Promise.all(dt(a).map(async (i) => {
      let o = i.dataSync();
      return i.dispose(), o;
    }));
    a.dispose();
    let s = r.map((i) => new Os(i));
    return n.isBatchInput ? s : s[0];
  }
  getDefaultModelName() {
    return "face_expression_model";
  }
  getClassifierChannelsIn() {
    return 256;
  }
  getClassifierChannelsOut() {
    return 7;
  }
};
function sD(e17) {
  return e17.expressions instanceof Os;
}
function Nk(e17, t) {
  return { ...e17, ...{ expressions: t } };
}
function Gfe(e17, t, n = 0.1, a) {
  (Array.isArray(t) ? t : [t]).forEach((s) => {
    let i = s instanceof Os ? s : sD(s) ? s.expressions : void 0;
    if (!i) throw new Error("drawFaceExpressions - expected faceExpressions to be FaceExpressions | WithFaceExpressions<{}> or array thereof");
    let l = i.asSortedArray().filter((d) => d.probability > n), u = zr(s) ? s.detection.box.bottomLeft : a || new He(0, 0);
    new sl(l.map((d) => `${d.expression} (${nl(d.probability)})`), u).draw(e17);
  });
}
function Fp(e17) {
  return zr(e17) && e17.landmarks instanceof ka && e17.unshiftedLandmarks instanceof ka && e17.alignedRect instanceof Ft;
}
function Hfe(e17) {
  let t = (l) => l * 180 / Math.PI, n = (l, u) => Math.sqrt((l.x - u.x) ** 2 + (l.y - u.y) ** 2), a = { roll: void 0, pitch: void 0, yaw: void 0 }, r = (l, u, p) => {
    let d = Math.floor(l.x - u.x), c = Math.floor(u.x - p.x);
    return d - c;
  }, s = (l, u) => {
    let p = Math.hypot(u.x - l.x, u.y - l.y), d = u.y - l.y, c = Math.asin(d / p), h = t(c), m = Math.floor(90 - h), f = u.x - l.x < 0 ? -1 : 1;
    return m * f;
  }, i = (l, u, p) => {
    let d = n(l, p), c = new He((l.x + p.x) / 2, (l.y + p.y) / 2), h = n(u, c), m = Math.atan(h / d), f = Math.floor(t(m)), g = c.y - u.y < 0 ? -1 : 1;
    return f * g;
  };
  if (!e17 || !e17.positions || e17.positions.length !== 68) return a;
  let o = e17.positions;
  return a.roll = s(o[27], o[66]), a.pitch = i(o[14], o[30], o[2]), a.yaw = r(o[14], o[33], o[2]), a;
}
function Vd(e17, t) {
  let { box: n } = e17.detection, a = t.shiftBy(n.x, n.y), r = a.align(), { imageDims: s } = e17.detection, i = new Ft(e17.detection.score, r.rescale(s.reverse()), s), o = Hfe(t);
  return { ...e17, ...{ landmarks: a, unshiftedLandmarks: t, alignedRect: i, angle: o } };
}
var ig = class {
  constructor(t = {}) {
    let { drawLines: n = true, drawPoints: a = true, lineWidth: r, lineColor: s, pointSize: i, pointColor: o } = t;
    this.drawLines = n, this.drawPoints = a, this.lineWidth = r || 1, this.pointSize = i || 2, this.lineColor = s || "rgba(0, 255, 255, 1)", this.pointColor = o || "rgba(255, 0, 255, 1)";
  }
};
var og = class {
  constructor(t, n = {}) {
    this.faceLandmarks = t, this.options = new ig(n);
  }
  draw(t) {
    let n = ra(t), { drawLines: a, drawPoints: r, lineWidth: s, lineColor: i, pointSize: o, pointColor: l } = this.options;
    if (a && this.faceLandmarks instanceof vp && (n.strokeStyle = i, n.lineWidth = s, Pr(n, this.faceLandmarks.getJawOutline()), Pr(n, this.faceLandmarks.getLeftEyeBrow()), Pr(n, this.faceLandmarks.getRightEyeBrow()), Pr(n, this.faceLandmarks.getNose()), Pr(n, this.faceLandmarks.getLeftEye(), true), Pr(n, this.faceLandmarks.getRightEye(), true), Pr(n, this.faceLandmarks.getMouth(), true)), r) {
      n.strokeStyle = l, n.fillStyle = l;
      let u = (p) => {
        n.beginPath(), n.arc(p.x, p.y, o, 0, 2 * Math.PI), n.fill();
      };
      this.faceLandmarks.positions.forEach(u);
    }
  }
};
function jfe(e17, t) {
  (Array.isArray(t) ? t : [t]).forEach((a) => {
    let r = a instanceof ka ? a : Fp(a) ? a.landmarks : void 0;
    if (!r) throw new Error("drawFaceLandmarks - expected faceExpressions to be FaceLandmarks | WithFaceLandmarks<WithFaceDetection<{}>> or array thereof");
    new og(r).draw(e17);
  });
}
var oD = "1.7.15";
function Xfe(e17, t) {
  let n = Tp(e17, t), a = Cp(e17, t);
  function r(i, o, l) {
    let u = a(i, o, `${l}/separable_conv0`), p = a(o, o, `${l}/separable_conv1`), d = n(i, o, 1, `${l}/expansion_conv`);
    return { separable_conv0: u, separable_conv1: p, expansion_conv: d };
  }
  function s(i, o) {
    let l = a(i, i, `${o}/separable_conv0`), u = a(i, i, `${o}/separable_conv1`), p = a(i, i, `${o}/separable_conv2`);
    return { separable_conv0: l, separable_conv1: u, separable_conv2: p };
  }
  return { extractConvParams: n, extractSeparableConvParams: a, extractReductionBlockParams: r, extractMainBlockParams: s };
}
function lD(e17, t) {
  let n = [], { extractWeights: a, getRemainingWeights: r } = An(e17), { extractConvParams: s, extractSeparableConvParams: i, extractReductionBlockParams: o, extractMainBlockParams: l } = Xfe(a, n), u = s(3, 32, 3, "entry_flow/conv_in"), p = o(32, 64, "entry_flow/reduction_block_0"), d = o(64, 128, "entry_flow/reduction_block_1"), c = { conv_in: u, reduction_block_0: p, reduction_block_1: d }, h = {};
  gr(t, 0, 1).forEach((b) => {
    h[`main_block_${b}`] = l(128, `middle_flow/main_block_${b}`);
  });
  let m = o(128, 256, "exit_flow/reduction_block"), f = i(256, 512, "exit_flow/separable_conv"), g = { reduction_block: m, separable_conv: f };
  if (r().length !== 0) throw new Error(`weights remaing after extract: ${r().length}`);
  return { paramMappings: n, params: { entry_flow: c, middle_flow: h, exit_flow: g } };
}
function Yfe(e17, t) {
  let n = sa(e17, t), a = ng(n), r = Ep(n);
  function s(o) {
    let l = r(`${o}/separable_conv0`), u = r(`${o}/separable_conv1`), p = a(`${o}/expansion_conv`);
    return { separable_conv0: l, separable_conv1: u, expansion_conv: p };
  }
  function i(o) {
    let l = r(`${o}/separable_conv0`), u = r(`${o}/separable_conv1`), p = r(`${o}/separable_conv2`);
    return { separable_conv0: l, separable_conv1: u, separable_conv2: p };
  }
  return { extractConvParams: a, extractSeparableConvParams: r, extractReductionBlockParams: s, extractMainBlockParams: i };
}
function uD(e17, t) {
  let n = [], { extractConvParams: a, extractSeparableConvParams: r, extractReductionBlockParams: s, extractMainBlockParams: i } = Yfe(e17, n), o = a("entry_flow/conv_in"), l = s("entry_flow/reduction_block_0"), u = s("entry_flow/reduction_block_1"), p = { conv_in: o, reduction_block_0: l, reduction_block_1: u }, d = {};
  gr(t, 0, 1).forEach((f) => {
    d[`main_block_${f}`] = i(`middle_flow/main_block_${f}`);
  });
  let c = s("exit_flow/reduction_block"), h = r("exit_flow/separable_conv"), m = { reduction_block: c, separable_conv: h };
  return _n(e17, n), { params: { entry_flow: p, middle_flow: d, exit_flow: m }, paramMappings: n };
}
function pD(e17, t, n) {
  return X($t(e17, t.filters, n, "same"), t.bias);
}
function Tk(e17, t, n = true) {
  let a = n ? Ke(e17) : e17;
  return a = Un(a, t.separable_conv0, [1, 1]), a = Un(Ke(a), t.separable_conv1, [1, 1]), a = Dt(a, [3, 3], [2, 2], "same"), a = X(a, pD(e17, t.expansion_conv, [2, 2])), a;
}
function Zfe(e17, t) {
  let n = Un(Ke(e17), t.separable_conv0, [1, 1]);
  return n = Un(Ke(n), t.separable_conv1, [1, 1]), n = Un(Ke(n), t.separable_conv2, [1, 1]), n = X(n, e17), n;
}
var lg = class extends fn {
  constructor(t) {
    super("TinyXception"), this._numMainBlocks = t;
  }
  forwardInput(t) {
    let { params: n } = this;
    if (!n) throw new Error("TinyXception - load model before inference");
    return O(() => {
      let a = re(t.toBatchTensor(112, true), "float32"), s = br(a, [122.782, 117.001, 104.298]).div(255), i = Ke(pD(s, n.entry_flow.conv_in, [2, 2]));
      return i = Tk(i, n.entry_flow.reduction_block_0, false), i = Tk(i, n.entry_flow.reduction_block_1), gr(this._numMainBlocks, 0, 1).forEach((o) => {
        i = Zfe(i, n.middle_flow[`main_block_${o}`]);
      }), i = Tk(i, n.exit_flow.reduction_block), i = Ke(Un(i, n.exit_flow.separable_conv, [1, 1])), i;
    });
  }
  async forward(t) {
    return this.forwardInput(await vt(t));
  }
  getDefaultModelName() {
    return "tiny_xception_model";
  }
  extractParamsFromWeightMap(t) {
    return uD(t, this._numMainBlocks);
  }
  extractParams(t) {
    return lD(t, this._numMainBlocks);
  }
};
function cD(e17) {
  let t = [], { extractWeights: n, getRemainingWeights: a } = An(e17), r = eg(n, t), s = r(512, 1, "fc/age"), i = r(512, 2, "fc/gender");
  if (a().length !== 0) throw new Error(`weights remaing after extract: ${a().length}`);
  return { paramMappings: t, params: { fc: { age: s, gender: i } } };
}
function dD(e17) {
  let t = [], n = sa(e17, t);
  function a(s) {
    let i = n(`${s}/weights`, 2), o = n(`${s}/bias`, 1);
    return { weights: i, bias: o };
  }
  let r = { fc: { age: a("fc/age"), gender: a("fc/gender") } };
  return _n(e17, t), { params: r, paramMappings: t };
}
var Ck = ((n) => (n.FEMALE = "female", n.MALE = "male", n))(Ck || {});
var ug = class extends fn {
  constructor(t = new lg(2)) {
    super("AgeGenderNet"), this._faceFeatureExtractor = t;
  }
  get faceFeatureExtractor() {
    return this._faceFeatureExtractor;
  }
  runNet(t) {
    let { params: n } = this;
    if (!n) throw new Error(`${this._name} - load model before inference`);
    return O(() => {
      let a = t instanceof Wr ? this.faceFeatureExtractor.forwardInput(t) : t, r = ya(a, [7, 7], [2, 2], "valid").as2D(a.shape[0], -1), s = Bd(r, n.fc.age).as1D(), i = Bd(r, n.fc.gender);
      return { age: s, gender: i };
    });
  }
  forwardInput(t) {
    return O(() => {
      let { age: n, gender: a } = this.runNet(t);
      return { age: n, gender: qa(a) };
    });
  }
  async forward(t) {
    return this.forwardInput(await vt(t));
  }
  async predictAgeAndGender(t) {
    let n = await vt(t), a = await this.forwardInput(n), r = dt(a.age), s = dt(a.gender), i = r.map((l, u) => ({ ageTensor: l, genderTensor: s[u] })), o = await Promise.all(i.map(async ({ ageTensor: l, genderTensor: u }) => {
      let p = l.dataSync()[0], d = u.dataSync()[0], c = d > 0.5, h = c ? "male" : "female", m = c ? d : 1 - d;
      return l.dispose(), u.dispose(), { age: p, gender: h, genderProbability: m };
    }));
    return a.age.dispose(), a.gender.dispose(), n.isBatchInput ? o : o[0];
  }
  getDefaultModelName() {
    return "age_gender_model";
  }
  dispose(t = true) {
    this.faceFeatureExtractor.dispose(t), super.dispose(t);
  }
  loadClassifierParams(t) {
    let { params: n, paramMappings: a } = this.extractClassifierParams(t);
    this._params = n, this._paramMappings = a;
  }
  extractClassifierParams(t) {
    return cD(t);
  }
  extractParamsFromWeightMap(t) {
    let { featureExtractorMap: n, classifierMap: a } = rg(t);
    return this.faceFeatureExtractor.loadFromWeightMap(n), dD(a);
  }
  extractParams(t) {
    let a = t.slice(0, t.length - 1539), r = t.slice(t.length - 1539);
    return this.faceFeatureExtractor.extractWeights(a), this.extractClassifierParams(r);
  }
};
var $p = class extends Ap {
  postProcess(t, n, a) {
    let r = a.map(({ width: i, height: o }) => {
      let l = n / Math.max(o, i);
      return { width: i * l, height: o * l };
    }), s = r.length;
    return O(() => {
      let i = (d, c) => At([yn([68], d, "float32"), yn([68], c, "float32")], 1).as2D(1, 136).as1D(), o = (d, c) => {
        let { width: h, height: m } = r[d];
        return c(h, m) ? Math.abs(h - m) / 2 : 0;
      }, l = (d) => o(d, (c, h) => c < h), u = (d) => o(d, (c, h) => h < c);
      return t.mul(yn([s, 136], n, "float32")).sub(At(Array.from(Array(s), (d, c) => i(l(c), u(c))))).div(At(Array.from(Array(s), (d, c) => i(r[c].width, r[c].height))));
    });
  }
  forwardInput(t) {
    return O(() => {
      let n = this.runNet(t);
      return this.postProcess(n, t.inputSize, t.inputDimensions.map(([a, r]) => ({ height: a, width: r })));
    });
  }
  async forward(t) {
    return this.forwardInput(await vt(t));
  }
  async detectLandmarks(t) {
    let n = await vt(t), a = O(() => dt(this.forwardInput(n))), r = await Promise.all(a.map(async (s, i) => {
      let o = Array.from(s.dataSync()), l = o.filter((p, d) => Hf(d)), u = o.filter((p, d) => !Hf(d));
      return new vp(Array(68).fill(0).map((p, d) => new He(l[d], u[d])), { height: n.getInputHeight(i), width: n.getInputWidth(i) });
    }));
    return a.forEach((s) => s.dispose()), n.isBatchInput ? r : r[0];
  }
  getClassifierChannelsOut() {
    return 136;
  }
};
var Dp = class extends $p {
  constructor(t = new _p()) {
    super("FaceLandmark68Net", t);
  }
  getDefaultModelName() {
    return "face_landmark_68_model";
  }
  getClassifierChannelsIn() {
    return 256;
  }
};
function hD(e17) {
  let t = [], { extractDenseBlock3Params: n } = ag(e17, t), a = { dense0: n("dense0", true), dense1: n("dense1"), dense2: n("dense2") };
  return _n(e17, t), { params: a, paramMappings: t };
}
function mD(e17) {
  let t = [], { extractWeights: n, getRemainingWeights: a } = An(e17), { extractDenseBlock3Params: r } = tg(n, t), s = r(3, 32, "dense0", true), i = r(32, 64, "dense1"), o = r(64, 128, "dense2");
  if (a().length !== 0) throw new Error(`weights remaing after extract: ${a().length}`);
  return { paramMappings: t, params: { dense0: s, dense1: i, dense2: o } };
}
var pg = class extends fn {
  constructor() {
    super("TinyFaceFeatureExtractor");
  }
  forwardInput(t) {
    let { params: n } = this;
    if (!n) throw new Error("TinyFaceFeatureExtractor - load model before inference");
    return O(() => {
      let a = re(t.toBatchTensor(112, true), "float32"), s = br(a, [122.782, 117.001, 104.298]).div(255), i = Qf(s, n.dense0, true);
      return i = Qf(i, n.dense1), i = Qf(i, n.dense2), i = ya(i, [14, 14], [2, 2], "valid"), i;
    });
  }
  async forward(t) {
    return this.forwardInput(await vt(t));
  }
  getDefaultModelName() {
    return "face_feature_extractor_tiny_model";
  }
  extractParamsFromWeightMap(t) {
    return hD(t);
  }
  extractParams(t) {
    return mD(t);
  }
};
var cg = class extends $p {
  constructor(t = new pg()) {
    super("FaceLandmark68TinyNet", t);
  }
  getDefaultModelName() {
    return "face_landmark_68_tiny_model";
  }
  getClassifierChannelsIn() {
    return 128;
  }
};
var fD = class extends Dp {
};
function gD(e17, t) {
  return X(z(e17, t.weights), t.biases);
}
function Ek(e17, t, n, a, r = "same") {
  let { filters: s, bias: i } = t.conv, o = $t(e17, s, n, r);
  return o = X(o, i), o = gD(o, t.scale), a ? Ke(o) : o;
}
function bD(e17, t) {
  return Ek(e17, t, [1, 1], true);
}
function _k(e17, t) {
  return Ek(e17, t, [1, 1], false);
}
function dg(e17, t) {
  return Ek(e17, t, [2, 2], true, "valid");
}
function Jfe(e17, t) {
  function n(o, l, u) {
    let p = e17(o), d = p.length / (l * u * u);
    if (gk(d)) throw new Error(`depth has to be an integer: ${d}, weights.length: ${p.length}, numFilters: ${l}, filterSize: ${u}`);
    return O(() => De(Fa(p, [l, d, u, u]), [2, 3, 1, 0]));
  }
  function a(o, l, u, p) {
    let d = n(o, l, u), c = je(e17(l));
    return t.push({ paramPath: `${p}/filters` }, { paramPath: `${p}/bias` }), { filters: d, bias: c };
  }
  function r(o, l) {
    let u = je(e17(o)), p = je(e17(o));
    return t.push({ paramPath: `${l}/weights` }, { paramPath: `${l}/biases` }), { weights: u, biases: p };
  }
  function s(o, l, u, p) {
    let d = a(o, l, u, `${p}/conv`), c = r(l, `${p}/scale`);
    return { conv: d, scale: c };
  }
  function i(o, l, u, p, d = false) {
    let c = s((d ? 0.5 : 1) * o, l, u, `${p}/conv1`), h = s(o, l, u, `${p}/conv2`);
    return { conv1: c, conv2: h };
  }
  return { extractConvLayerParams: s, extractResidualLayerParams: i };
}
function yD(e17) {
  let { extractWeights: t, getRemainingWeights: n } = An(e17), a = [], { extractConvLayerParams: r, extractResidualLayerParams: s } = Jfe(t, a), i = r(4704, 32, 7, "conv32_down"), o = s(9216, 32, 3, "conv32_1"), l = s(9216, 32, 3, "conv32_2"), u = s(9216, 32, 3, "conv32_3"), p = s(36864, 64, 3, "conv64_down", true), d = s(36864, 64, 3, "conv64_1"), c = s(36864, 64, 3, "conv64_2"), h = s(36864, 64, 3, "conv64_3"), m = s(147456, 128, 3, "conv128_down", true), f = s(147456, 128, 3, "conv128_1"), g = s(147456, 128, 3, "conv128_2"), b = s(589824, 256, 3, "conv256_down", true), y = s(589824, 256, 3, "conv256_1"), x = s(589824, 256, 3, "conv256_2"), v = s(589824, 256, 3, "conv256_down_out"), I = O(() => De(Ea(t(256 * 128), [128, 256]), [1, 0]));
  if (a.push({ paramPath: "fc" }), n().length !== 0) throw new Error(`weights remaing after extract: ${n().length}`);
  return { params: { conv32_down: i, conv32_1: o, conv32_2: l, conv32_3: u, conv64_down: p, conv64_1: d, conv64_2: c, conv64_3: h, conv128_down: m, conv128_1: f, conv128_2: g, conv256_down: b, conv256_1: y, conv256_2: x, conv256_down_out: v, fc: I }, paramMappings: a };
}
function Qfe(e17, t) {
  let n = sa(e17, t);
  function a(i) {
    let o = n(`${i}/scale/weights`, 1), l = n(`${i}/scale/biases`, 1);
    return { weights: o, biases: l };
  }
  function r(i) {
    let o = n(`${i}/conv/filters`, 4), l = n(`${i}/conv/bias`, 1), u = a(i);
    return { conv: { filters: o, bias: l }, scale: u };
  }
  function s(i) {
    return { conv1: r(`${i}/conv1`), conv2: r(`${i}/conv2`) };
  }
  return { extractConvLayerParams: r, extractResidualLayerParams: s };
}
function xD(e17) {
  let t = [], { extractConvLayerParams: n, extractResidualLayerParams: a } = Qfe(e17, t), r = n("conv32_down"), s = a("conv32_1"), i = a("conv32_2"), o = a("conv32_3"), l = a("conv64_down"), u = a("conv64_1"), p = a("conv64_2"), d = a("conv64_3"), c = a("conv128_down"), h = a("conv128_1"), m = a("conv128_2"), f = a("conv256_down"), g = a("conv256_1"), b = a("conv256_2"), y = a("conv256_down_out"), { fc: x } = e17;
  if (t.push({ originalPath: "fc", paramPath: "fc" }), !fk(x)) throw new Error(`expected weightMap[fc] to be a Tensor2D, instead have ${x}`);
  let v = { conv32_down: r, conv32_1: s, conv32_2: i, conv32_3: o, conv64_down: l, conv64_1: u, conv64_2: p, conv64_3: d, conv128_down: c, conv128_1: h, conv128_2: m, conv256_down: f, conv256_1: g, conv256_2: b, conv256_down_out: y, fc: x };
  return _n(e17, t), { params: v, paramMappings: t };
}
function Ya(e17, t) {
  let n = bD(e17, t.conv1);
  return n = _k(n, t.conv2), n = X(n, e17), n = Ke(n), n;
}
function Ud(e17, t) {
  let n = dg(e17, t.conv1);
  n = _k(n, t.conv2);
  let a = ya(e17, 2, 2, "valid"), r = It(a.shape), s = a.shape[3] !== n.shape[3];
  if (a.shape[1] !== n.shape[1] || a.shape[2] !== n.shape[2]) {
    let o = [...n.shape];
    o[1] = 1;
    let l = It(o);
    n = et([n, l], 1);
    let u = [...n.shape];
    u[2] = 1;
    let p = It(u);
    n = et([n, p], 2);
  }
  return a = s ? et([a, r], 3) : a, n = X(a, n), n = Ke(n), n;
}
var Rp = class extends fn {
  constructor() {
    super("FaceRecognitionNet");
  }
  forwardInput(t) {
    let { params: n } = this;
    if (!n) throw new Error("FaceRecognitionNet - load model before inference");
    return O(() => {
      let a = re(t.toBatchTensor(150, true), "float32"), s = br(a, [122.782, 117.001, 104.298]).div(255), i = dg(s, n.conv32_down);
      i = Dt(i, 3, 2, "valid"), i = Ya(i, n.conv32_1), i = Ya(i, n.conv32_2), i = Ya(i, n.conv32_3), i = Ud(i, n.conv64_down), i = Ya(i, n.conv64_1), i = Ya(i, n.conv64_2), i = Ya(i, n.conv64_3), i = Ud(i, n.conv128_down), i = Ya(i, n.conv128_1), i = Ya(i, n.conv128_2), i = Ud(i, n.conv256_down), i = Ya(i, n.conv256_1), i = Ya(i, n.conv256_2), i = Ud(i, n.conv256_down_out);
      let o = i.mean([1, 2]);
      return $e(o, n.fc);
    });
  }
  async forward(t) {
    return this.forwardInput(await vt(t));
  }
  async computeFaceDescriptor(t) {
    var s;
    if ((s = t == null ? void 0 : t.shape) != null && s.some((i) => i <= 0)) return new Float32Array(128);
    let n = await vt(t), a = O(() => dt(this.forwardInput(n))), r = await Promise.all(a.map((i) => i.data()));
    return a.forEach((i) => i.dispose()), n.isBatchInput ? r : r[0];
  }
  getDefaultModelName() {
    return "face_recognition_model";
  }
  extractParamsFromWeightMap(t) {
    return xD(t);
  }
  extractParams(t) {
    return yD(t);
  }
};
function Y2e(e17) {
  let t = new Rp();
  return t.extractWeights(e17), t;
}
function Ak(e17, t) {
  return { ...e17, ...{ descriptor: t } };
}
function eCe(e17) {
  return typeof e17.age == "number";
}
function Fk(e17, t) {
  return { ...e17, ...{ age: t } };
}
function rCe(e17) {
  return (e17.gender === "male" || e17.gender === "female") && gp(e17.genderProbability);
}
function $k(e17, t, n) {
  return { ...e17, ...{ gender: t, genderProbability: n } };
}
function ege(e17, t) {
  function n(l, u) {
    let p = Fa(e17(9 * l), [3, 3, l, 1]), d = je(e17(l)), c = je(e17(l)), h = je(e17(l)), m = je(e17(l));
    return t.push({ paramPath: `${u}/filters` }, { paramPath: `${u}/batch_norm_scale` }, { paramPath: `${u}/batch_norm_offset` }, { paramPath: `${u}/batch_norm_mean` }, { paramPath: `${u}/batch_norm_variance` }), { filters: p, batch_norm_scale: d, batch_norm_offset: c, batch_norm_mean: h, batch_norm_variance: m };
  }
  function a(l, u, p, d, c) {
    let h = Fa(e17(l * u * p * p), [p, p, l, u]), m = je(e17(u));
    return t.push({ paramPath: `${d}/filters` }, { paramPath: `${d}/${c ? "batch_norm_offset" : "bias"}` }), { filters: h, bias: m };
  }
  function r(l, u, p, d) {
    let { filters: c, bias: h } = a(l, u, p, d, true);
    return { filters: c, batch_norm_offset: h };
  }
  function s(l, u, p) {
    let d = n(l, `${p}/depthwise_conv`), c = r(l, u, 1, `${p}/pointwise_conv`);
    return { depthwise_conv: d, pointwise_conv: c };
  }
  function i() {
    let l = r(3, 32, 3, "mobilenetv1/conv_0"), u = s(32, 64, "mobilenetv1/conv_1"), p = s(64, 128, "mobilenetv1/conv_2"), d = s(128, 128, "mobilenetv1/conv_3"), c = s(128, 256, "mobilenetv1/conv_4"), h = s(256, 256, "mobilenetv1/conv_5"), m = s(256, 512, "mobilenetv1/conv_6"), f = s(512, 512, "mobilenetv1/conv_7"), g = s(512, 512, "mobilenetv1/conv_8"), b = s(512, 512, "mobilenetv1/conv_9"), y = s(512, 512, "mobilenetv1/conv_10"), x = s(512, 512, "mobilenetv1/conv_11"), v = s(512, 1024, "mobilenetv1/conv_12"), I = s(1024, 1024, "mobilenetv1/conv_13");
    return { conv_0: l, conv_1: u, conv_2: p, conv_3: d, conv_4: c, conv_5: h, conv_6: m, conv_7: f, conv_8: g, conv_9: b, conv_10: y, conv_11: x, conv_12: v, conv_13: I };
  }
  function o() {
    let l = r(1024, 256, 1, "prediction_layer/conv_0"), u = r(256, 512, 3, "prediction_layer/conv_1"), p = r(512, 128, 1, "prediction_layer/conv_2"), d = r(128, 256, 3, "prediction_layer/conv_3"), c = r(256, 128, 1, "prediction_layer/conv_4"), h = r(128, 256, 3, "prediction_layer/conv_5"), m = r(256, 64, 1, "prediction_layer/conv_6"), f = r(64, 128, 3, "prediction_layer/conv_7"), g = a(512, 12, 1, "prediction_layer/box_predictor_0/box_encoding_predictor"), b = a(512, 9, 1, "prediction_layer/box_predictor_0/class_predictor"), y = a(1024, 24, 1, "prediction_layer/box_predictor_1/box_encoding_predictor"), x = a(1024, 18, 1, "prediction_layer/box_predictor_1/class_predictor"), v = a(512, 24, 1, "prediction_layer/box_predictor_2/box_encoding_predictor"), I = a(512, 18, 1, "prediction_layer/box_predictor_2/class_predictor"), N = a(256, 24, 1, "prediction_layer/box_predictor_3/box_encoding_predictor"), C = a(256, 18, 1, "prediction_layer/box_predictor_3/class_predictor"), _ = a(256, 24, 1, "prediction_layer/box_predictor_4/box_encoding_predictor"), F = a(256, 18, 1, "prediction_layer/box_predictor_4/class_predictor"), D = a(128, 24, 1, "prediction_layer/box_predictor_5/box_encoding_predictor"), $ = a(128, 18, 1, "prediction_layer/box_predictor_5/class_predictor");
    return { conv_0: l, conv_1: u, conv_2: p, conv_3: d, conv_4: c, conv_5: h, conv_6: m, conv_7: f, box_predictor_0: { box_encoding_predictor: g, class_predictor: b }, box_predictor_1: { box_encoding_predictor: y, class_predictor: x }, box_predictor_2: { box_encoding_predictor: v, class_predictor: I }, box_predictor_3: { box_encoding_predictor: N, class_predictor: C }, box_predictor_4: { box_encoding_predictor: _, class_predictor: F }, box_predictor_5: { box_encoding_predictor: D, class_predictor: $ } };
  }
  return { extractMobilenetV1Params: i, extractPredictionLayerParams: o };
}
function vD(e17) {
  let t = [], { extractWeights: n, getRemainingWeights: a } = An(e17), { extractMobilenetV1Params: r, extractPredictionLayerParams: s } = ege(n, t), i = r(), o = s(), u = { extra_dim: xd(n(5118 * 4), [1, 5118, 4]) };
  if (t.push({ paramPath: "output_layer/extra_dim" }), a().length !== 0) throw new Error(`weights remaing after extract: ${a().length}`);
  return { params: { mobilenetv1: i, prediction_layer: o, output_layer: u }, paramMappings: t };
}
function tge(e17, t) {
  let n = sa(e17, t);
  function a(u, p, d) {
    let c = n(`${u}/Conv2d_${p}_pointwise/weights`, 4, `${d}/filters`), h = n(`${u}/Conv2d_${p}_pointwise/convolution_bn_offset`, 1, `${d}/batch_norm_offset`);
    return { filters: c, batch_norm_offset: h };
  }
  function r(u) {
    let p = `mobilenetv1/conv_${u}`, d = `MobilenetV1/Conv2d_${u}_depthwise`, c = `${p}/depthwise_conv`, h = `${p}/pointwise_conv`, m = n(`${d}/depthwise_weights`, 4, `${c}/filters`), f = n(`${d}/BatchNorm/gamma`, 1, `${c}/batch_norm_scale`), g = n(`${d}/BatchNorm/beta`, 1, `${c}/batch_norm_offset`), b = n(`${d}/BatchNorm/moving_mean`, 1, `${c}/batch_norm_mean`), y = n(`${d}/BatchNorm/moving_variance`, 1, `${c}/batch_norm_variance`);
    return { depthwise_conv: { filters: m, batch_norm_scale: f, batch_norm_offset: g, batch_norm_mean: b, batch_norm_variance: y }, pointwise_conv: a("MobilenetV1", u, h) };
  }
  function s() {
    return { conv_0: a("MobilenetV1", 0, "mobilenetv1/conv_0"), conv_1: r(1), conv_2: r(2), conv_3: r(3), conv_4: r(4), conv_5: r(5), conv_6: r(6), conv_7: r(7), conv_8: r(8), conv_9: r(9), conv_10: r(10), conv_11: r(11), conv_12: r(12), conv_13: r(13) };
  }
  function i(u, p) {
    let d = n(`${u}/weights`, 4, `${p}/filters`), c = n(`${u}/biases`, 1, `${p}/bias`);
    return { filters: d, bias: c };
  }
  function o(u) {
    let p = i(`Prediction/BoxPredictor_${u}/BoxEncodingPredictor`, `prediction_layer/box_predictor_${u}/box_encoding_predictor`), d = i(`Prediction/BoxPredictor_${u}/ClassPredictor`, `prediction_layer/box_predictor_${u}/class_predictor`);
    return { box_encoding_predictor: p, class_predictor: d };
  }
  function l() {
    return { conv_0: a("Prediction", 0, "prediction_layer/conv_0"), conv_1: a("Prediction", 1, "prediction_layer/conv_1"), conv_2: a("Prediction", 2, "prediction_layer/conv_2"), conv_3: a("Prediction", 3, "prediction_layer/conv_3"), conv_4: a("Prediction", 4, "prediction_layer/conv_4"), conv_5: a("Prediction", 5, "prediction_layer/conv_5"), conv_6: a("Prediction", 6, "prediction_layer/conv_6"), conv_7: a("Prediction", 7, "prediction_layer/conv_7"), box_predictor_0: o(0), box_predictor_1: o(1), box_predictor_2: o(2), box_predictor_3: o(3), box_predictor_4: o(4), box_predictor_5: o(5) };
  }
  return { extractMobilenetV1Params: s, extractPredictionLayerParams: l };
}
function wD(e17) {
  let t = [], { extractMobilenetV1Params: n, extractPredictionLayerParams: a } = tge(e17, t), r = e17["Output/extra_dim"];
  if (t.push({ originalPath: "Output/extra_dim", paramPath: "output_layer/extra_dim" }), !Lr(r)) throw new Error(`expected weightMap['Output/extra_dim'] to be a Tensor3D, instead have ${r}`);
  let s = { mobilenetv1: n(), prediction_layer: a(), output_layer: { extra_dim: r } };
  return _n(e17, t), { params: s, paramMappings: t };
}
function Ra(e17, t, n) {
  return O(() => {
    let a = $t(e17, t.filters, n, "same");
    return a = X(a, t.batch_norm_offset), an(a, 0, 6);
  });
}
var nge = 0.0010000000474974513;
function age(e17, t, n) {
  return O(() => {
    let a = Ts(e17, t.filters, n, "same");
    return a = Ns(a, t.batch_norm_mean, t.batch_norm_variance, t.batch_norm_offset, t.batch_norm_scale, nge), an(a, 0, 6);
  });
}
function rge(e17) {
  return [2, 4, 6, 12].some((t) => t === e17) ? [2, 2] : [1, 1];
}
function kD(e17, t) {
  return O(() => {
    let n, a = Ra(e17, t.conv_0, [2, 2]);
    if ([t.conv_1, t.conv_2, t.conv_3, t.conv_4, t.conv_5, t.conv_6, t.conv_7, t.conv_8, t.conv_9, t.conv_10, t.conv_11, t.conv_12, t.conv_13].forEach((s, i) => {
      let o = i + 1, l = rge(o);
      a = age(a, s.depthwise_conv, l), a = Ra(a, s.pointwise_conv, [1, 1]), o === 11 && (n = a);
    }), n === null) throw new Error("mobileNetV1 - output of conv layer 11 is null");
    return { out: a, conv11: n };
  });
}
function sge(e17, t, n) {
  let a = e17.arraySync(), r = Math.min(a[t][0], a[t][2]), s = Math.min(a[t][1], a[t][3]), i = Math.max(a[t][0], a[t][2]), o = Math.max(a[t][1], a[t][3]), l = Math.min(a[n][0], a[n][2]), u = Math.min(a[n][1], a[n][3]), p = Math.max(a[n][0], a[n][2]), d = Math.max(a[n][1], a[n][3]), c = (i - r) * (o - s), h = (p - l) * (d - u);
  if (c <= 0 || h <= 0) return 0;
  let m = Math.max(r, l), f = Math.max(s, u), g = Math.min(i, p), b = Math.min(o, d), y = Math.max(g - m, 0) * Math.max(b - f, 0);
  return y / (c + h - y);
}
function ID(e17, t, n, a, r) {
  let s = e17.shape[0], i = Math.min(n, s), o = t.map((p, d) => ({ score: p, boxIndex: d })).filter((p) => p.score > r).sort((p, d) => d.score - p.score), l = (p) => p <= a ? 1 : 0, u = [];
  return o.forEach((p) => {
    if (u.length >= i) return;
    let d = p.score;
    for (let c = u.length - 1; c >= 0; --c) {
      let h = sge(e17, p.boxIndex, u[c]);
      if (h !== 0 && (p.score *= l(h), p.score <= r)) break;
    }
    d === p.score && u.push(p.boxIndex);
  }), u;
}
function ige(e17) {
  let t = dt(De(e17, [1, 0])), n = [pe(t[2], t[0]), pe(t[3], t[1])], a = [X(t[0], he(n[0], 2)), X(t[1], he(n[1], 2))];
  return { sizes: n, centers: a };
}
function oge(e17, t) {
  let { sizes: n, centers: a } = ige(e17), r = dt(De(t, [1, 0])), s = he(z(dn(he(r[2], 5)), n[0]), 2), i = X(z(he(r[0], 10), n[0]), a[0]), o = he(z(dn(he(r[3], 5)), n[1]), 2), l = X(z(he(r[1], 10), n[1]), a[1]);
  return De(At([pe(i, s), pe(l, o), X(i, s), X(l, o)]), [1, 0]);
}
function SD(e17, t, n) {
  return O(() => {
    let a = e17.shape[0], r = oge(W(On(n.extra_dim, [a, 1, 1]), [-1, 4]), W(e17, [-1, 4]));
    r = W(r, [a, r.shape[0] / a, 4]);
    let s = ha(Ve(t, [0, 0, 1], [-1, -1, -1])), i = Ve(s, [0, 0, 0], [-1, -1, 1]);
    i = W(i, [a, i.shape[1]]);
    let o = dt(r), l = dt(i);
    return { boxes: o, scores: l };
  });
}
function ol(e17, t) {
  return O(() => {
    let n = e17.shape[0], a = W(il(e17, t.box_encoding_predictor), [n, -1, 1, 4]), r = W(il(e17, t.class_predictor), [n, -1, 3]);
    return { boxPredictionEncoding: a, classPrediction: r };
  });
}
function ND(e17, t, n) {
  return O(() => {
    let a = Ra(e17, n.conv_0, [1, 1]), r = Ra(a, n.conv_1, [2, 2]), s = Ra(r, n.conv_2, [1, 1]), i = Ra(s, n.conv_3, [2, 2]), o = Ra(i, n.conv_4, [1, 1]), l = Ra(o, n.conv_5, [2, 2]), u = Ra(l, n.conv_6, [1, 1]), p = Ra(u, n.conv_7, [2, 2]), d = ol(t, n.box_predictor_0), c = ol(e17, n.box_predictor_1), h = ol(r, n.box_predictor_2), m = ol(i, n.box_predictor_3), f = ol(l, n.box_predictor_4), g = ol(p, n.box_predictor_5), b = et([d.boxPredictionEncoding, c.boxPredictionEncoding, h.boxPredictionEncoding, m.boxPredictionEncoding, f.boxPredictionEncoding, g.boxPredictionEncoding], 1), y = et([d.classPrediction, c.classPrediction, h.classPrediction, m.classPrediction, f.classPrediction, g.classPrediction], 1);
    return { boxPredictions: b, classPredictions: y };
  });
}
var Ma = class {
  constructor({ minConfidence: t, maxResults: n } = {}) {
    this._name = "SsdMobilenetv1Options";
    if (this._minConfidence = t || 0.5, this._maxResults = n || 100, typeof this._minConfidence != "number" || this._minConfidence <= 0 || this._minConfidence >= 1) throw new Error(`${this._name} - expected minConfidence to be a number between 0 and 1`);
    if (typeof this._maxResults != "number") throw new Error(`${this._name} - expected maxResults to be a number`);
  }
  get minConfidence() {
    return this._minConfidence;
  }
  get maxResults() {
    return this._maxResults;
  }
};
var ll = class extends fn {
  constructor() {
    super("SsdMobilenetv1");
  }
  forwardInput(t) {
    let { params: n } = this;
    if (!n) throw new Error("SsdMobilenetv1 - load model before inference");
    return O(() => {
      let a = re(t.toBatchTensor(512, false), "float32"), r = pe(he(a, 127.5), 1), s = kD(r, n.mobilenetv1), { boxPredictions: i, classPredictions: o } = ND(s.out, s.conv11, n.prediction_layer);
      return SD(i, o, n.output_layer);
    });
  }
  async forward(t) {
    return this.forwardInput(await vt(t));
  }
  async locateFaces(t, n = {}) {
    let { maxResults: a, minConfidence: r } = new Ma(n), s = await vt(t), { boxes: i, scores: o } = this.forwardInput(s), l = i[0], u = o[0];
    for (let x = 1; x < i.length; x++) i[x].dispose(), o[x].dispose();
    let p = Array.from(u.dataSync()), c = ID(l, p, a, 0.5, r), h = s.getReshapedInputDimensions(0), m = s.inputSize, f = m / h.width, g = m / h.height, b = l.arraySync(), y = c.map((x) => {
      let [v, I] = [Math.max(0, b[x][0]), Math.min(1, b[x][2])].map((_) => _ * g), [N, C] = [Math.max(0, b[x][1]), Math.min(1, b[x][3])].map((_) => _ * f);
      return new Ft(p[x], new xp(N, v, C - N, I - v), { height: s.getInputHeight(0), width: s.getInputWidth(0) });
    });
    return l.dispose(), u.dispose(), y;
  }
  getDefaultModelName() {
    return "ssd_mobilenetv1_model";
  }
  extractParamsFromWeightMap(t) {
    return wD(t);
  }
  extractParams(t) {
    return vD(t);
  }
};
function lge(e17) {
  let t = new ll();
  return t.extractWeights(e17), t;
}
function YCe(e17) {
  return lge(e17);
}
var TD = class extends ll {
};
var CD = 0.4;
var ED = [new He(0.738768, 0.874946), new He(2.42204, 2.65704), new He(4.30971, 7.04493), new He(10.246, 4.59428), new He(12.6868, 11.8741)];
var _D = [new He(1.603231, 2.094468), new He(6.041143, 7.080126), new He(2.882459, 3.518061), new He(4.266906, 5.178857), new He(9.041765, 10.66308)];
var AD = [117.001, 114.697, 97.404];
var FD = "tiny_yolov2_model";
var $D = "tiny_yolov2_separable_conv_model";
var hg = (e17) => typeof e17 == "number";
function DD(e17) {
  if (!e17) throw new Error(`invalid config: ${e17}`);
  if (typeof e17.withSeparableConvs != "boolean") throw new Error(`config.withSeparableConvs has to be a boolean, have: ${e17.withSeparableConvs}`);
  if (!hg(e17.iouThreshold) || e17.iouThreshold < 0 || e17.iouThreshold > 1) throw new Error(`config.iouThreshold has to be a number between [0, 1], have: ${e17.iouThreshold}`);
  if (!Array.isArray(e17.classes) || !e17.classes.length || !e17.classes.every((t) => typeof t == "string")) throw new Error(`config.classes has to be an array class names: string[], have: ${JSON.stringify(e17.classes)}`);
  if (!Array.isArray(e17.anchors) || !e17.anchors.length || !e17.anchors.map((t) => t || {}).every((t) => hg(t.x) && hg(t.y))) throw new Error(`config.anchors has to be an array of { x: number, y: number }, have: ${JSON.stringify(e17.anchors)}`);
  if (e17.meanRgb && (!Array.isArray(e17.meanRgb) || e17.meanRgb.length !== 3 || !e17.meanRgb.every(hg))) throw new Error(`config.meanRgb has to be an array of shape [number, number, number], have: ${JSON.stringify(e17.meanRgb)}`);
}
function Mp(e17) {
  return O(() => {
    let t = z(e17, xe(0.10000000149011612));
    return X(Ke(pe(e17, t)), t);
  });
}
function Br(e17, t) {
  return O(() => {
    let n = xa(e17, [[0, 0], [1, 1], [1, 1], [0, 0]]);
    return n = $t(n, t.conv.filters, [1, 1], "valid"), n = pe(n, t.bn.sub), n = z(n, t.bn.truediv), n = X(n, t.conv.bias), Mp(n);
  });
}
function Vr(e17, t) {
  return O(() => {
    let n = xa(e17, [[0, 0], [1, 1], [1, 1], [0, 0]]);
    return n = _s(n, t.depthwise_filter, t.pointwise_filter, [1, 1], "valid"), n = X(n, t.bias), Mp(n);
  });
}
function uge(e17, t) {
  let n = Tp(e17, t);
  function a(i, o) {
    let l = je(e17(i)), u = je(e17(i));
    return t.push({ paramPath: `${o}/sub` }, { paramPath: `${o}/truediv` }), { sub: l, truediv: u };
  }
  function r(i, o, l) {
    let u = n(i, o, 3, `${l}/conv`), p = a(o, `${l}/bn`);
    return { conv: u, bn: p };
  }
  let s = Cp(e17, t);
  return { extractConvParams: n, extractConvWithBatchNormParams: r, extractSeparableConvParams: s };
}
function RD(e17, t, n, a) {
  let { extractWeights: r, getRemainingWeights: s } = An(e17), i = [], { extractConvParams: o, extractConvWithBatchNormParams: l, extractSeparableConvParams: u } = uge(r, i), p;
  if (t.withSeparableConvs) {
    let [d, c, h, m, f, g, b, y, x] = a, v = t.isFirstLayerConv2d ? o(d, c, 3, "conv0") : u(d, c, "conv0"), I = u(c, h, "conv1"), N = u(h, m, "conv2"), C = u(m, f, "conv3"), _ = u(f, g, "conv4"), F = u(g, b, "conv5"), D = y ? u(b, y, "conv6") : void 0, $ = x ? u(y, x, "conv7") : void 0, S = o(x || y || b, 5 * n, 1, "conv8");
    p = { conv0: v, conv1: I, conv2: N, conv3: C, conv4: _, conv5: F, conv6: D, conv7: $, conv8: S };
  } else {
    let [d, c, h, m, f, g, b, y, x] = a, v = l(d, c, "conv0"), I = l(c, h, "conv1"), N = l(h, m, "conv2"), C = l(m, f, "conv3"), _ = l(f, g, "conv4"), F = l(g, b, "conv5"), D = l(b, y, "conv6"), $ = l(y, x, "conv7"), S = o(x, 5 * n, 1, "conv8");
    p = { conv0: v, conv1: I, conv2: N, conv3: C, conv4: _, conv5: F, conv6: D, conv7: $, conv8: S };
  }
  if (s().length !== 0) throw new Error(`weights remaing after extract: ${s().length}`);
  return { params: p, paramMappings: i };
}
function pge(e17, t) {
  let n = sa(e17, t);
  function a(o) {
    let l = n(`${o}/sub`, 1), u = n(`${o}/truediv`, 1);
    return { sub: l, truediv: u };
  }
  function r(o) {
    let l = n(`${o}/filters`, 4), u = n(`${o}/bias`, 1);
    return { filters: l, bias: u };
  }
  function s(o) {
    let l = r(`${o}/conv`), u = a(`${o}/bn`);
    return { conv: l, bn: u };
  }
  let i = Ep(n);
  return { extractConvParams: r, extractConvWithBatchNormParams: s, extractSeparableConvParams: i };
}
function MD(e17, t) {
  let n = [], { extractConvParams: a, extractConvWithBatchNormParams: r, extractSeparableConvParams: s } = pge(e17, n), i;
  if (t.withSeparableConvs) {
    let o = t.filterSizes && t.filterSizes.length || 9;
    i = { conv0: t.isFirstLayerConv2d ? a("conv0") : s("conv0"), conv1: s("conv1"), conv2: s("conv2"), conv3: s("conv3"), conv4: s("conv4"), conv5: s("conv5"), conv6: o > 7 ? s("conv6") : void 0, conv7: o > 8 ? s("conv7") : void 0, conv8: a("conv8") };
  } else i = { conv0: r("conv0"), conv1: r("conv1"), conv2: r("conv2"), conv3: r("conv3"), conv4: r("conv4"), conv5: r("conv5"), conv6: r("conv6"), conv7: r("conv7"), conv8: a("conv8") };
  return _n(e17, n), { params: i, paramMappings: n };
}
var yr = class {
  constructor({ inputSize: t, scoreThreshold: n } = {}) {
    this._name = "TinyYolov2Options";
    if (this._inputSize = t || 416, this._scoreThreshold = n || 0.5, typeof this._inputSize != "number" || this._inputSize % 32 !== 0) throw new Error(`${this._name} - expected inputSize to be a number divisible by 32`);
    if (typeof this._scoreThreshold != "number" || this._scoreThreshold <= 0 || this._scoreThreshold >= 1) throw new Error(`${this._name} - expected scoreThreshold to be a number between 0 and 1`);
  }
  get inputSize() {
    return this._inputSize;
  }
  get scoreThreshold() {
    return this._scoreThreshold;
  }
};
var mg = class mg2 extends fn {
  constructor(t) {
    super("TinyYolov2"), DD(t), this._config = t;
  }
  get config() {
    return this._config;
  }
  get withClassScores() {
    return this.config.withClassScores || this.config.classes.length > 1;
  }
  get boxEncodingSize() {
    return 5 + (this.withClassScores ? this.config.classes.length : 0);
  }
  runTinyYolov2(t, n) {
    let a = Br(t, n.conv0);
    return a = Dt(a, [2, 2], [2, 2], "same"), a = Br(a, n.conv1), a = Dt(a, [2, 2], [2, 2], "same"), a = Br(a, n.conv2), a = Dt(a, [2, 2], [2, 2], "same"), a = Br(a, n.conv3), a = Dt(a, [2, 2], [2, 2], "same"), a = Br(a, n.conv4), a = Dt(a, [2, 2], [2, 2], "same"), a = Br(a, n.conv5), a = Dt(a, [2, 2], [1, 1], "same"), a = Br(a, n.conv6), a = Br(a, n.conv7), il(a, n.conv8, "valid", false);
  }
  runMobilenet(t, n) {
    let a = this.config.isFirstLayerConv2d ? Mp(il(t, n.conv0, "valid", false)) : Vr(t, n.conv0);
    return a = Dt(a, [2, 2], [2, 2], "same"), a = Vr(a, n.conv1), a = Dt(a, [2, 2], [2, 2], "same"), a = Vr(a, n.conv2), a = Dt(a, [2, 2], [2, 2], "same"), a = Vr(a, n.conv3), a = Dt(a, [2, 2], [2, 2], "same"), a = Vr(a, n.conv4), a = Dt(a, [2, 2], [2, 2], "same"), a = Vr(a, n.conv5), a = Dt(a, [2, 2], [1, 1], "same"), a = n.conv6 ? Vr(a, n.conv6) : a, a = n.conv7 ? Vr(a, n.conv7) : a, il(a, n.conv8, "valid", false);
  }
  forwardInput(t, n) {
    let { params: a } = this;
    if (!a) throw new Error("TinyYolov2 - load model before inference");
    return O(() => {
      let r = re(t.toBatchTensor(n, false), "float32");
      return r = this.config.meanRgb ? br(r, this.config.meanRgb) : r, r = r.div(255), this.config.withSeparableConvs ? this.runMobilenet(r, a) : this.runTinyYolov2(r, a);
    });
  }
  async forward(t, n) {
    return this.forwardInput(await vt(t), n);
  }
  async detect(t, n = {}) {
    let { inputSize: a, scoreThreshold: r } = new yr(n), s = await vt(t), i = await this.forwardInput(s, a), o = O(() => dt(i)[0].expandDims()), l = { width: s.getInputWidth(0), height: s.getInputHeight(0) }, u = await this.extractBoxes(o, s.getReshapedInputDimensions(0), r);
    i.dispose(), o.dispose();
    let p = u.map((g) => g.box), d = u.map((g) => g.score), c = u.map((g) => g.classScore), h = u.map((g) => this.config.classes[g.label]);
    return U$(p.map((g) => g.rescale(a)), d, this.config.iouThreshold, true).map((g) => new yp(d[g], c[g], h[g], p[g], l));
  }
  getDefaultModelName() {
    return "";
  }
  extractParamsFromWeightMap(t) {
    return MD(t, this.config);
  }
  extractParams(t) {
    let n = this.config.filterSizes || mg2.DEFAULT_FILTER_SIZES, a = n ? n.length : void 0;
    if (a !== 7 && a !== 8 && a !== 9) throw new Error(`TinyYolov2 - expected 7 | 8 | 9 convolutional filters, but found ${a} filterSizes in config`);
    return RD(t, this.config, this.boxEncodingSize, n);
  }
  async extractBoxes(t, n, a) {
    let { width: r, height: s } = n, i = Math.max(r, s), o = i / r, l = i / s, u = t.shape[1], p = this.config.anchors.length, [d, c, h] = O(() => {
      let b = t.reshape([u, u, p, this.boxEncodingSize]), y = b.slice([0, 0, 0, 0], [u, u, p, 4]), x = b.slice([0, 0, 0, 4], [u, u, p, 1]), v = this.withClassScores ? qa(b.slice([0, 0, 0, 5], [u, u, p, this.config.classes.length]), 3) : xe(0);
      return [y, x, v];
    }), m = [], f = await c.array(), g = await d.array();
    for (let b = 0; b < u; b++) for (let y = 0; y < u; y++) for (let x = 0; x < p; x++) {
      let v = qf(f[b][y][x][0]);
      if (!a || v > a) {
        let I = (y + qf(g[b][y][x][0])) / u * o, N = (b + qf(g[b][y][x][1])) / u * l, C = Math.exp(g[b][y][x][2]) * this.config.anchors[x].x / u * o, _ = Math.exp(g[b][y][x][3]) * this.config.anchors[x].y / u * l, F = I - C / 2, D = N - _ / 2, $ = { row: b, col: y, anchor: x }, { classScore: S, label: M } = this.withClassScores ? await this.extractPredictedClass(h, $) : { classScore: 1, label: 0 };
        m.push({ box: new bp(F, D, F + C, D + _), score: v, classScore: v * S, label: M, ...$ });
      }
    }
    return d.dispose(), c.dispose(), h.dispose(), m;
  }
  async extractPredictedClass(t, n) {
    let { row: a, col: r, anchor: s } = n, i = await t.array();
    return Array(this.config.classes.length).fill(0).map((o, l) => i[a][r][s][l]).map((o, l) => ({ classScore: o, label: l })).reduce((o, l) => o.classScore > l.classScore ? o : l);
  }
};
mg.DEFAULT_FILTER_SIZES = [3, 16, 32, 64, 128, 256, 512, 1024, 1024];
var Op = mg;
var Pp = class extends Op {
  constructor(t = true) {
    let n = { withSeparableConvs: t, iouThreshold: CD, classes: ["face"], ...t ? { anchors: _D, meanRgb: AD } : { anchors: ED, withClassScores: true } };
    super(n);
  }
  get withSeparableConvs() {
    return this.config.withSeparableConvs;
  }
  get anchors() {
    return this.config.anchors;
  }
  async locateFaces(t, n) {
    return (await this.detect(t, n)).map((r) => new Ft(r.score, r.relativeBox, { width: r.imageWidth, height: r.imageHeight }));
  }
  getDefaultModelName() {
    return this.withSeparableConvs ? $D : FD;
  }
  extractParamsFromWeightMap(t) {
    return super.extractParamsFromWeightMap(t);
  }
};
function BEe(e17, t = true) {
  let n = new Pp(t);
  return n.extractWeights(e17), n;
}
var fg = class extends yr {
  constructor() {
    super(...arguments);
    this._name = "TinyFaceDetectorOptions";
  }
};
var Oa = class {
  async then(t) {
    return t(await this.run());
  }
  async run() {
    throw new Error("ComposableTask - run is not implemented");
  }
};
async function ul(e17, t, n, a, r = ({ alignedRect: s }) => s) {
  let s = e17.map((l) => Fp(l) ? r(l) : l.detection), i = a || (t instanceof Ce ? await Ld(t, s) : await Pd(t, s)), o = await n(i);
  return i.forEach((l) => l instanceof Ce && l.dispose()), o;
}
async function Lp(e17, t, n, a, r) {
  return ul([e17], t, async (s) => n(s[0]), a, r);
}
var OD = 0.4;
var PD = [new He(1.603231, 2.094468), new He(6.041143, 7.080126), new He(2.882459, 3.518061), new He(4.266906, 5.178857), new He(9.041765, 10.66308)];
var LD = [117.001, 114.697, 97.404];
var zp = class extends Op {
  constructor() {
    let t = { withSeparableConvs: true, iouThreshold: OD, classes: ["face"], anchors: PD, meanRgb: LD, isFirstLayerConv2d: true, filterSizes: [3, 16, 32, 64, 128, 256, 512] };
    super(t);
  }
  get anchors() {
    return this.config.anchors;
  }
  async locateFaces(t, n) {
    return (await this.detect(t, n)).map((r) => new Ft(r.score, r.relativeBox, { width: r.imageWidth, height: r.imageHeight }));
  }
  getDefaultModelName() {
    return "tiny_face_detector_model";
  }
  extractParamsFromWeightMap(t) {
    return super.extractParamsFromWeightMap(t);
  }
};
var rt = { ssdMobilenetv1: new ll(), tinyFaceDetector: new zp(), tinyYolov2: new Pp(), faceLandmark68Net: new Dp(), faceLandmark68TinyNet: new cg(), faceRecognitionNet: new Rp(), faceExpressionNet: new sg(), ageGenderNet: new ug() };
var cge = (e17, t) => rt.ssdMobilenetv1.locateFaces(e17, t);
var b_e = (e17, t) => rt.tinyFaceDetector.locateFaces(e17, t);
var y_e = (e17, t) => rt.tinyYolov2.locateFaces(e17, t);
var dge = (e17) => rt.faceLandmark68Net.detectLandmarks(e17);
var x_e = (e17) => rt.faceLandmark68TinyNet.detectLandmarks(e17);
var v_e = (e17) => rt.faceRecognitionNet.computeFaceDescriptor(e17);
var w_e = (e17) => rt.faceExpressionNet.predictExpressions(e17);
var k_e = (e17) => rt.ageGenderNet.predictAgeAndGender(e17);
var hge = (e17) => rt.ssdMobilenetv1.load(e17);
var I_e = (e17) => rt.tinyFaceDetector.load(e17);
var S_e = (e17) => rt.tinyYolov2.load(e17);
var N_e = (e17) => rt.faceLandmark68Net.load(e17);
var T_e = (e17) => rt.faceLandmark68TinyNet.load(e17);
var C_e = (e17) => rt.faceRecognitionNet.load(e17);
var E_e = (e17) => rt.faceExpressionNet.load(e17);
var __e = (e17) => rt.ageGenderNet.load(e17);
var A_e = hge;
var F_e = cge;
var $_e = dge;
var gg = class extends Oa {
  constructor(n, a, r) {
    super();
    this.parentTask = n;
    this.input = a;
    this.extractedFaces = r;
  }
};
var pl = class extends gg {
  async run() {
    let t = await this.parentTask, n = await ul(t, this.input, async (a) => Promise.all(a.map((r) => rt.faceExpressionNet.predictExpressions(r))), this.extractedFaces);
    return t.map((a, r) => Nk(a, n[r]));
  }
  withAgeAndGender() {
    return new dl(this, this.input);
  }
};
var cl = class extends gg {
  async run() {
    let t = await this.parentTask;
    if (!t) return;
    let n = await Lp(t, this.input, (a) => rt.faceExpressionNet.predictExpressions(a), this.extractedFaces);
    return Nk(t, n);
  }
  withAgeAndGender() {
    return new hl(this, this.input);
  }
};
var Ps = class extends pl {
  withAgeAndGender() {
    return new zs(this, this.input);
  }
  withFaceDescriptors() {
    return new Bs(this, this.input);
  }
};
var Ls = class extends cl {
  withAgeAndGender() {
    return new Ws(this, this.input);
  }
  withFaceDescriptor() {
    return new Vs(this, this.input);
  }
};
var bg = class extends Oa {
  constructor(n, a, r) {
    super();
    this.parentTask = n;
    this.input = a;
    this.extractedFaces = r;
  }
};
var dl = class extends bg {
  async run() {
    let t = await this.parentTask, n = await ul(t, this.input, async (a) => Promise.all(a.map((r) => rt.ageGenderNet.predictAgeAndGender(r))), this.extractedFaces);
    return t.map((a, r) => {
      let { age: s, gender: i, genderProbability: o } = n[r];
      return Fk($k(a, i, o), s);
    });
  }
  withFaceExpressions() {
    return new pl(this, this.input);
  }
};
var hl = class extends bg {
  async run() {
    let t = await this.parentTask;
    if (!t) return;
    let { age: n, gender: a, genderProbability: r } = await Lp(t, this.input, (s) => rt.ageGenderNet.predictAgeAndGender(s), this.extractedFaces);
    return Fk($k(t, a, r), n);
  }
  withFaceExpressions() {
    return new cl(this, this.input);
  }
};
var zs = class extends dl {
  withFaceExpressions() {
    return new Ps(this, this.input);
  }
  withFaceDescriptors() {
    return new Bs(this, this.input);
  }
};
var Ws = class extends hl {
  withFaceExpressions() {
    return new Ls(this, this.input);
  }
  withFaceDescriptor() {
    return new Vs(this, this.input);
  }
};
var yg = class extends Oa {
  constructor(n, a) {
    super();
    this.parentTask = n;
    this.input = a;
  }
};
var Bs = class extends yg {
  async run() {
    let t = await this.parentTask;
    return (await ul(t, this.input, (a) => Promise.all(a.map((r) => rt.faceRecognitionNet.computeFaceDescriptor(r))), null, (a) => a.landmarks.align(null, { useDlibAlignment: true }))).map((a, r) => Ak(t[r], a));
  }
  withFaceExpressions() {
    return new Ps(this, this.input);
  }
  withAgeAndGender() {
    return new zs(this, this.input);
  }
};
var Vs = class extends yg {
  async run() {
    let t = await this.parentTask;
    if (!t) return;
    let n = await Lp(t, this.input, (a) => rt.faceRecognitionNet.computeFaceDescriptor(a), null, (a) => a.landmarks.align(null, { useDlibAlignment: true }));
    return Ak(t, n);
  }
  withFaceExpressions() {
    return new Ls(this, this.input);
  }
  withAgeAndGender() {
    return new Ws(this, this.input);
  }
};
var xg = class extends Oa {
  constructor(n, a, r) {
    super();
    this.parentTask = n;
    this.input = a;
    this.useTinyLandmarkNet = r;
  }
  get landmarkNet() {
    return this.useTinyLandmarkNet ? rt.faceLandmark68TinyNet : rt.faceLandmark68Net;
  }
};
var vg = class extends xg {
  async run() {
    let t = await this.parentTask, n = t.map((i) => i.detection), a = this.input instanceof Ce ? await Ld(this.input, n) : await Pd(this.input, n), r = await Promise.all(a.map((i) => this.landmarkNet.detectLandmarks(i)));
    return a.forEach((i) => i instanceof Ce && i.dispose()), t.filter((i, o) => r[o]).map((i, o) => Vd(i, r[o]));
  }
  withFaceExpressions() {
    return new Ps(this, this.input);
  }
  withAgeAndGender() {
    return new zs(this, this.input);
  }
  withFaceDescriptors() {
    return new Bs(this, this.input);
  }
};
var wg = class extends xg {
  async run() {
    let t = await this.parentTask;
    if (!t) return;
    let { detection: n } = t, a = this.input instanceof Ce ? await Ld(this.input, [n]) : await Pd(this.input, [n]), r = await this.landmarkNet.detectLandmarks(a[0]);
    return a.forEach((s) => s instanceof Ce && s.dispose()), Vd(t, r);
  }
  withFaceExpressions() {
    return new Ls(this, this.input);
  }
  withAgeAndGender() {
    return new Ws(this, this.input);
  }
  withFaceDescriptor() {
    return new Vs(this, this.input);
  }
};
var kg = class extends Oa {
  constructor(n, a = new Ma()) {
    super();
    this.input = n;
    this.options = a;
  }
};
var Gd = class extends kg {
  async run() {
    let { input: t, options: n } = this, a;
    if (n instanceof fg) a = rt.tinyFaceDetector.locateFaces(t, n);
    else if (n instanceof Ma) a = rt.ssdMobilenetv1.locateFaces(t, n);
    else if (n instanceof yr) a = rt.tinyYolov2.locateFaces(t, n);
    else throw new Error("detectFaces - expected options to be instance of TinyFaceDetectorOptions | SsdMobilenetv1Options | TinyYolov2Options");
    return a;
  }
  runAndExtendWithFaceDetections() {
    return new Promise((t, n) => {
      this.run().then((a) => t(a.map((r) => wp({}, r)))).catch((a) => n(a));
    });
  }
  withFaceLandmarks(t = false) {
    return new vg(this.runAndExtendWithFaceDetections(), this.input, t);
  }
  withFaceExpressions() {
    return new pl(this.runAndExtendWithFaceDetections(), this.input);
  }
  withAgeAndGender() {
    return new dl(this.runAndExtendWithFaceDetections(), this.input);
  }
};
var Ig = class extends kg {
  async run() {
    let t = await new Gd(this.input, this.options), n = t[0];
    return t.forEach((a) => {
      a.score > n.score && (n = a);
    }), n;
  }
  runAndExtendWithFaceDetection() {
    return new Promise(async (t) => {
      let n = await this.run();
      t(n ? wp({}, n) : void 0);
    });
  }
  withFaceLandmarks(t = false) {
    return new wg(this.runAndExtendWithFaceDetection(), this.input, t);
  }
  withFaceExpressions() {
    return new cl(this.runAndExtendWithFaceDetection(), this.input);
  }
  withAgeAndGender() {
    return new hl(this.runAndExtendWithFaceDetection(), this.input);
  }
};
function _Ae(e17, t = new Ma()) {
  return new Ig(e17, t);
}
function Dk(e17, t = new Ma()) {
  return new Gd(e17, t);
}
async function mge(e17, t) {
  return Dk(e17, new Ma(t ? { minConfidence: t } : {})).withFaceLandmarks().withFaceDescriptors();
}
async function MAe(e17, t = {}) {
  return Dk(e17, new yr(t)).withFaceLandmarks().withFaceDescriptors();
}
var OAe = mge;
function zD(e17, t) {
  if (e17.length !== t.length) throw new Error("euclideanDistance: arr1.length !== arr2.length");
  let n = Array.from(e17), a = Array.from(t);
  return Math.sqrt(n.map((r, s) => r - a[s]).reduce((r, s) => r + s * s, 0));
}
var WD = class e16 {
  constructor(t, n = 0.6) {
    this._distanceThreshold = n;
    let a = Array.isArray(t) ? t : [t];
    if (!a.length) throw new Error("FaceRecognizer.constructor - expected atleast one input");
    let r = 1, s = () => `person ${r++}`;
    this._labeledDescriptors = a.map((i) => {
      if (i instanceof rl) return i;
      if (i instanceof Float32Array) return new rl(s(), [i]);
      if (i.descriptor && i.descriptor instanceof Float32Array) return new rl(s(), [i.descriptor]);
      throw new Error("FaceRecognizer.constructor - expected inputs to be of type LabeledFaceDescriptors | WithFaceDescriptor<any> | Float32Array | Array<LabeledFaceDescriptors | WithFaceDescriptor<any> | Float32Array>");
    });
  }
  get labeledDescriptors() {
    return this._labeledDescriptors;
  }
  get distanceThreshold() {
    return this._distanceThreshold;
  }
  computeMeanDistance(t, n) {
    return n.map((a) => zD(a, t)).reduce((a, r) => a + r, 0) / (n.length || 1);
  }
  matchDescriptor(t) {
    return this.labeledDescriptors.map(({ descriptors: n, label: a }) => new Dd(a, this.computeMeanDistance(t, n))).reduce((n, a) => n.distance < a.distance ? n : a);
  }
  findBestMatch(t) {
    let n = this.matchDescriptor(t);
    return n.distance < this._distanceThreshold ? n : new Dd("unknown", n.distance);
  }
  toJSON() {
    return { distanceThreshold: this._distanceThreshold, labeledDescriptors: this._labeledDescriptors.map((t) => t.toJSON()) };
  }
  static fromJSON(t) {
    let n = t.labeledDescriptors.map((a) => rl.fromJSON(a));
    return new e16(n, t.distanceThreshold);
  }
};
function eFe(e17) {
  let t = new zp();
  return t.extractWeights(e17), t;
}
function fge(e17, t) {
  let { width: n, height: a } = new aa(t.width, t.height);
  if (n <= 0 || a <= 0) throw new Error(`resizeResults - invalid dimensions: ${JSON.stringify({ width: n, height: a })}`);
  if (Array.isArray(e17)) return e17.map((r) => fge(r, { width: n, height: a }));
  if (Fp(e17)) {
    let r = e17.detection.forSize(n, a), s = e17.unshiftedLandmarks.forSize(r.box.width, r.box.height);
    return Vd(wp(e17, r), s);
  }
  return zr(e17) ? wp(e17, e17.detection.forSize(n, a)) : e17 instanceof ka || e17 instanceof Ft ? e17.forSize(n, a) : e17;
}
var cFe = oD;
export {
  ug as AgeGenderNet,
  bp as BoundingBox,
  mn as Box,
  Oa as ComposableTask,
  Bs as ComputeAllFaceDescriptorsTask,
  yg as ComputeFaceDescriptorsTaskBase,
  Vs as ComputeSingleFaceDescriptorTask,
  vg as DetectAllFaceLandmarksTask,
  Gd as DetectAllFacesTask,
  xg as DetectFaceLandmarksTaskBase,
  kg as DetectFacesTaskBase,
  wg as DetectSingleFaceLandmarksTask,
  Ig as DetectSingleFaceTask,
  aa as Dimensions,
  rD as FACE_EXPRESSION_LABELS,
  Ft as FaceDetection,
  TD as FaceDetectionNet,
  sg as FaceExpressionNet,
  Os as FaceExpressions,
  Dp as FaceLandmark68Net,
  cg as FaceLandmark68TinyNet,
  fD as FaceLandmarkNet,
  ka as FaceLandmarks,
  H$ as FaceLandmarks5,
  vp as FaceLandmarks68,
  Dd as FaceMatch,
  WD as FaceMatcher,
  Rp as FaceRecognitionNet,
  Ck as Gender,
  Rd as LabeledBox,
  rl as LabeledFaceDescriptors,
  Wr as NetInput,
  fn as NeuralNetwork,
  yp as ObjectDetection,
  He as Point,
  j$ as PredictedBox,
  xp as Rect,
  ll as SsdMobilenetv1,
  Ma as SsdMobilenetv1Options,
  zp as TinyFaceDetector,
  fg as TinyFaceDetectorOptions,
  Pp as TinyYolov2,
  yr as TinyYolov2Options,
  OAe as allFaces,
  mge as allFacesSsdMobilenetv1,
  MAe as allFacesTinyYolov2,
  q$ as awaitMediaLoaded,
  K$ as bufferToImage,
  v_e as computeFaceDescriptor,
  Np as createCanvas,
  Zf as createCanvasFromMedia,
  YCe as createFaceDetectionNet,
  Y2e as createFaceRecognitionNet,
  lge as createSsdMobilenetv1,
  eFe as createTinyFaceDetector,
  BEe as createTinyYolov2,
  Dk as detectAllFaces,
  dge as detectFaceLandmarks,
  x_e as detectFaceLandmarksTiny,
  $_e as detectLandmarks,
  _Ae as detectSingleFace,
  iD as draw,
  at as env,
  zD as euclideanDistance,
  Fk as extendWithAge,
  Ak as extendWithFaceDescriptor,
  wp as extendWithFaceDetection,
  Nk as extendWithFaceExpressions,
  Vd as extendWithFaceLandmarks,
  $k as extendWithGender,
  Ld as extractFaceTensors,
  Pd as extractFaces,
  sIe as fetchImage,
  Z$ as fetchJson,
  pIe as fetchNetWeights,
  Ms as fetchOrThrow,
  gIe as fetchVideo,
  ra as getContext2dOrThrow,
  Sp as getMediaDimensions,
  X$ as imageTensorToCanvas,
  Y$ as imageToSquare,
  v0e as inverseSigmoid,
  B$ as iou,
  Sk as isMediaElement,
  Yf as isMediaLoaded,
  eCe as isWithAge,
  zr as isWithFaceDetection,
  sD as isWithFaceExpressions,
  Fp as isWithFaceLandmarks,
  rCe as isWithGender,
  __e as loadAgeGenderModel,
  A_e as loadFaceDetectionModel,
  E_e as loadFaceExpressionModel,
  N_e as loadFaceLandmarkModel,
  T_e as loadFaceLandmarkTinyModel,
  C_e as loadFaceRecognitionModel,
  hge as loadSsdMobilenetv1Model,
  I_e as loadTinyFaceDetectorModel,
  S_e as loadTinyYolov2Model,
  Q$ as loadWeightMap,
  F_e as locateFaces,
  IIe as matchDimensions,
  V$ as minBbox,
  rt as nets,
  U$ as nonMaxSuppression,
  br as normalize,
  G$ as padToSquare,
  k_e as predictAgeAndGender,
  w_e as recognizeFaceExpressions,
  fge as resizeResults,
  kp as resolveInput,
  y0e as shuffleArray,
  qf as sigmoid,
  cge as ssdMobilenetv1,
  Pe as tf,
  b_e as tinyFaceDetector,
  y_e as tinyYolov2,
  vt as toNetInput,
  W$ as utils,
  DD as validateConfig,
  cFe as version
};
//# sourceMappingURL=@vladmandic_face-api.js.map
